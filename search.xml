<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode周赛笔记187</title>
      <link href="/posts/7e6a.html"/>
      <url>/posts/7e6a.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、旅行终点站"><a href="#一、旅行终点站" class="headerlink" title="一、旅行终点站"></a>一、旅行终点站</h3><p>给你一份旅游线路图，该线路图中的旅行线路用数组 <code>paths</code> 表示，其中 <code>paths[i] = [cityAi, cityBi]</code> 表示该线路将会从 <code>cityAi</code> 直接前往 <code>cityBi</code> 。请你找出这次旅行的终点站，即没有任何可以通往其他城市的线路的城市。<br>题目数据保证线路图会形成一条不存在循环的线路，因此只会有一个旅行终点站。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">destCity</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> paths<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        lista<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> paths<span class="token punctuation">]</span>        listb<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> paths<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>set<span class="token punctuation">(</span>listb<span class="token punctuation">)</span><span class="token operator">-</span>set<span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="二、是否所有-1-都至少相隔-k-个元素"><a href="#二、是否所有-1-都至少相隔-k-个元素" class="headerlink" title="二、是否所有 1 都至少相隔 k 个元素"></a>二、是否所有 1 都至少相隔 k 个元素</h3><p>给你一个由若干 <code>0</code> 和 <code>1</code> 组成的数组 <code>nums</code> 以及整数 <code>k</code>。如果所有 <code>1</code> 都至少相隔 <code>k</code> 个元素，则返回 <code>True</code> ；否则，返回 <code>False</code> 。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">kLengthApart</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        temp<span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">-</span>temp<span class="token operator">&lt;=</span>k<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>temp<span class="token operator">=</span>i        <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><h3 id="三、绝对差不超过限制的最长连续子数组"><a href="#三、绝对差不超过限制的最长连续子数组" class="headerlink" title="三、绝对差不超过限制的最长连续子数组"></a>三、绝对差不超过限制的最长连续子数组</h3><p>给你一个整数数组 <code>nums</code> ，和一个表示限制的整数 <code>limit</code>，请你返回最长连续子数组的长度，该子数组中的任意两个元素之间的绝对差必须小于或者等于 <code>limit</code> 。<br>如果不存在满足条件的子数组，则返回 <code>0</code> 。</p><blockquote><p>话说dp和双指针好像啊，双指针的话最后一个十几万数的测试用例超时了。。。</p></blockquote><p>面向测试用例加双指针：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestSubarray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> limit<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">return</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">1</span>        a<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> l <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            minnum<span class="token punctuation">,</span>maxnum<span class="token operator">=</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span>            <span class="token keyword">for</span> r <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>                minnum<span class="token operator">=</span>min<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span>minnum<span class="token punctuation">]</span><span class="token punctuation">)</span>                maxnum<span class="token operator">=</span>max<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span>maxnum<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> maxnum<span class="token operator">-</span>minnum<span class="token operator">&lt;=</span>limit<span class="token punctuation">:</span>                    ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>        <span class="token keyword">return</span> ans</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestSubarray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> limit<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span>        st <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            bisect<span class="token punctuation">.</span>insort<span class="token punctuation">(</span>st<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">while</span> st<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> st<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> limit<span class="token punctuation">:</span>                st<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            j <span class="token operator">+=</span> <span class="token number">1</span>            ans <span class="token operator">=</span> max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> len<span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans</code></pre><h3 id="四、有序矩阵中的第-k-个最小数组和"><a href="#四、有序矩阵中的第-k-个最小数组和" class="headerlink" title="四、有序矩阵中的第 k 个最小数组和"></a>四、有序矩阵中的第 k 个最小数组和</h3><p>给你一个 <code>m * n</code> 的矩阵 <code>mat</code>，以及一个整数 <code>k</code> ，矩阵中的每一行都以非递减的顺序排列。<br>你可以从每一行中选出 1 个元素形成一个数组。返回所有可能数组中的第 k 个最小数组和。</p><blockquote><p>利用sorted逐行更新。。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mat<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> mat<span class="token punctuation">:</span>            ans <span class="token operator">=</span> sorted<span class="token punctuation">(</span><span class="token punctuation">[</span>a <span class="token operator">+</span> r <span class="token keyword">for</span> a <span class="token keyword">in</span> ans <span class="token keyword">for</span> r <span class="token keyword">in</span> row<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span> k<span class="token punctuation">]</span>        <span class="token keyword">return</span> ans<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>调用modelarts的API</title>
      <link href="/posts/ec3f.html"/>
      <url>/posts/ec3f.html</url>
      
        <content type="html"><![CDATA[<p>代码包含</p><ul><li>use-api.py </li><li>post.py</li><li>get-token.py</li></ul><h3 id="use-api-py"><a href="#use-api-py" class="headerlink" title="use-api.py"></a>use-api.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> postname <span class="token operator">=</span> <span class="token string">"***"</span> password <span class="token operator">=</span> <span class="token string">"***"</span>api_url <span class="token operator">=</span> <span class="token string">"***"</span> <span class="token comment" spellcheck="true"># api地址</span>image_path <span class="token operator">=</span> r<span class="token string">"timg.jpg"</span>  <span class="token comment" spellcheck="true"># 图像文件完整路径</span><span class="token comment" spellcheck="true"># 发送请求</span>r <span class="token operator">=</span> post<span class="token punctuation">.</span>main<span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> api_url<span class="token punctuation">,</span> image_path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span></code></pre><h3 id="post-py"><a href="#post-py" class="headerlink" title="post.py"></a>post.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> os<span class="token keyword">import</span> get_token<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> api_url<span class="token punctuation">,</span> image_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    image_name <span class="token operator">=</span> image_path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 查看本地是否存在token</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"token.txt"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"token.txt"</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            token <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 调用get_token.py中的函数获取token</span>        token <span class="token operator">=</span> get_token<span class="token punctuation">.</span>main<span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 缓存token以便下次使用</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"token.txt"</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>token<span class="token punctuation">)</span>    <span class="token keyword">if</span> token <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"token获取错误"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        header <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"X-Auth-Token"</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span>                <span class="token punctuation">}</span>        files <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"images"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>image_name<span class="token punctuation">,</span> open<span class="token punctuation">(</span>image_path<span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'image/png'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>        z <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>                    api_url<span class="token punctuation">,</span>                    headers <span class="token operator">=</span> header<span class="token punctuation">,</span>                    files<span class="token operator">=</span>files<span class="token punctuation">,</span>                    verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                    <span class="token punctuation">)</span>        <span class="token keyword">if</span> z<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> z<span class="token punctuation">.</span>text        <span class="token keyword">elif</span> len<span class="token punctuation">(</span>z<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> z<span class="token punctuation">.</span>text        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"程序错误"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"***"</span>         <span class="token comment" spellcheck="true"># 用户名</span>    password <span class="token operator">=</span> <span class="token string">"***"</span> <span class="token comment" spellcheck="true"># 密码</span>    api_url <span class="token operator">=</span> <span class="token string">"***"</span> <span class="token comment" spellcheck="true"># api地址</span>    image_path <span class="token operator">=</span> r<span class="token string">"test.jpg"</span>  <span class="token comment" spellcheck="true"># 图像文件完整路径</span>    r <span class="token operator">=</span> main<span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> api_url<span class="token punctuation">,</span> image_path<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span></code></pre><h3 id="get-token-py"><a href="#get-token-py" class="headerlink" title="get-token.py"></a>get-token.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> domain_name<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> region<span class="token operator">=</span><span class="token string">"cn-north-4"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> domain_name <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>        domain_name <span class="token operator">=</span> name    urls <span class="token operator">=</span> <span class="token string">"https://iam."</span> <span class="token operator">+</span> region <span class="token operator">+</span> <span class="token string">".myhuaweicloud.com/v3/auth/tokens"</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"PostmanRuntime/7.24.1"</span><span class="token punctuation">,</span>        <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json;charset=utf8"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    json_data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"auth"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"identity"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"methods"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"user"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                        <span class="token string">"name"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>                        <span class="token string">"password"</span><span class="token punctuation">:</span> password<span class="token punctuation">,</span>                        <span class="token string">"domain"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                            <span class="token string">"name"</span><span class="token punctuation">:</span> domain_name<span class="token punctuation">,</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"scope"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"project"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"name"</span><span class="token punctuation">:</span> region                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    z <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>                    url <span class="token operator">=</span> urls<span class="token punctuation">,</span>                    headers <span class="token operator">=</span> header<span class="token punctuation">,</span>                    json <span class="token operator">=</span> json_data<span class="token punctuation">,</span>                    verify <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>                    <span class="token punctuation">)</span>    <span class="token keyword">if</span> z<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">201</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> z<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"X-Subject-Token"</span><span class="token punctuation">]</span>    <span class="token keyword">elif</span> z<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">401</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">''</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'***'</span>         <span class="token comment" spellcheck="true"># 用户名</span>    password <span class="token operator">=</span> <span class="token string">'***'</span>     <span class="token comment" spellcheck="true"># 密码</span><span class="token comment" spellcheck="true">#    domain_name = '***'  # 可选，所属账号，默认为用户名</span><span class="token comment" spellcheck="true">#    region="cn-north-4"     # 可选，使用区域</span>    token <span class="token operator">=</span> main<span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">)</span>    <span class="token keyword">if</span> token <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> modelarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些网站</title>
      <link href="/posts/e00a.html"/>
      <url>/posts/e00a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>查看github资源<br><a href="https://nbviewer.jupyter.org/" target="_blank" rel="noopener">https://nbviewer.jupyter.org/</a></p></blockquote><blockquote><p>vscode安装c环境<br><a href="https://www.cnblogs.com/czlhxm/p/11794743.html" target="_blank" rel="noopener">https://www.cnblogs.com/czlhxm/p/11794743.html</a></p></blockquote><blockquote><p>安卓开发者<br><a href="https://developer.android.google.cn/" target="_blank" rel="noopener">https://developer.android.google.cn/</a></p></blockquote><blockquote><p>visual studio文档<br><a href="https://docs.microsoft.com/zh-cn/visualstudio/?view=vs-2019" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/visualstudio/?view=vs-2019</a></p></blockquote><blockquote><p>书栈<br><a href="https://www.bookstack.cn/" target="_blank" rel="noopener">https://www.bookstack.cn/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于HTTP理解</title>
      <link href="/posts/ea97.html"/>
      <url>/posts/ea97.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>HTTP是一个请求-响应协议，是两点间传输超文本数据的约定和规范。</p></blockquote><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><table><thead><tr><th>状态码</th><th>描述</th></tr></thead><tbody><tr><td>1XX</td><td>表示目前是协议处理中间状态</td></tr><tr><td>2XX</td><td>成功，报文已接受且正确处理</td></tr><tr><td>3XX</td><td>重定向，资源位置发生变动</td></tr><tr><td>4XX</td><td>客户端错误，请求报文有误，服务器无法处理</td></tr><tr><td>5XX</td><td>服务器处理请求时发生错误</td></tr></tbody></table><h2 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h2><pre class=" language-bash"><code class="language-bash">GET /admin_ui/rdx/core/images/close.png HTTP/1.1Accept: */*Referer: http://xxx.xxx.xxx.xxx/menu/neoAccept-Language: en-USUser-Agent: Mozilla/4.0 <span class="token punctuation">(</span>compatible<span class="token punctuation">;</span> MSIE 7.0<span class="token punctuation">;</span> Windows NT 6.1<span class="token punctuation">;</span> WOW64<span class="token punctuation">;</span> Trident/7.0<span class="token punctuation">;</span> SLCC2<span class="token punctuation">;</span> .NET CLR 2.0.50727<span class="token punctuation">;</span> .NET CLR 3.5.30729<span class="token punctuation">;</span> .NET CLR 3.0.30729<span class="token punctuation">;</span> .NET4.0C<span class="token punctuation">;</span> .NET4.0E<span class="token punctuation">)</span>Accept-Encoding: gzip, deflateHost: xxx.xxx.xxx.xxxConnection: Keep-AliveCookie: startupapp<span class="token operator">=</span>neo<span class="token punctuation">;</span> is_cisco_platform<span class="token operator">=</span>0<span class="token punctuation">;</span> rdx_pagination_size<span class="token operator">=</span>250%20Per%20Page<span class="token punctuation">;</span> SESSID<span class="token operator">=</span>deb31b8eb9ca68a514cf55777744e339</code></pre><h2 id="HTTP版本"><a href="#HTTP版本" class="headerlink" title="HTTP版本"></a>HTTP版本</h2><table><thead><tr><th>版本</th><th>信息</th></tr></thead><tbody><tr><td>1.0</td><td>每发起一次请求，都要建立一次TCP链接（三次握手）</td></tr><tr><td>1.1</td><td>①提出了长连接通信方式，减少TCP连接开销 。②管道网络传输，减少整体效应时间</td></tr><tr><td>2.0</td><td></td></tr></tbody></table><blockquote><p>http无状态、明文传输、不安全</p></blockquote><blockquote><p>http无法验证报文完整性、不验证通信方身份</p></blockquote><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>在TCP和HTTP网络层之间加入了SSL/TLS安全协议<br>①加密（Encryption)<br>②身份认证（Authentication)<br>③数据一致性 （Data integrity)</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小站的更新</title>
      <link href="/posts/9280.html"/>
      <url>/posts/9280.html</url>
      
        <content type="html"><![CDATA[<h3 id="V1-3"><a href="#V1-3" class="headerlink" title="V1.3"></a>V1.3</h3><ol><li>加入三篇blog</li></ol><h3 id="V1-2"><a href="#V1-2" class="headerlink" title="V1.2"></a>V1.2</h3><ol><li>电脑端加入音乐功能</li><li>删除banner上的Github链接</li><li>更改一些图片</li></ol><h3 id="V1-1"><a href="#V1-1" class="headerlink" title="V1.1"></a>V1.1</h3><ol><li>加入烟花点击效果</li><li>更改打赏的图片</li></ol><h3 id="V1-0"><a href="#V1-0" class="headerlink" title="V1.0"></a>V1.0</h3><ol><li>小站成功上线啦，由于是静态网页托管在Github上，不足之处还请谅解。</li></ol>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习第一天（pytorch学习笔记）</title>
      <link href="/posts/6080.html"/>
      <url>/posts/6080.html</url>
      
        <content type="html"><![CDATA[<h2 id="入坑（2020-4-29）"><a href="#入坑（2020-4-29）" class="headerlink" title="入坑（2020.4.29）"></a>入坑（2020.4.29）</h2><p>喜欢深度学习，喜欢python。<br>看起来torch挺好的。</p><h2 id="torch环境准备"><a href="#torch环境准备" class="headerlink" title="torch环境准备"></a>torch环境准备</h2><ul><li>torch  (1.5.0)</li><li>torchvision  (0.6.0)</li><li>cuda  (10.2)<br><img src="https://img-blog.csdnimg.cn/20200429183137908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" alt=""><br>输入指令执行代码,速度不行的话复制下载链接迅雷打开，可能有惊喜<img src="https://img-blog.csdnimg.cn/20200429183453171.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" alt=""><br>环境配好后，执行<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pythontorch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>这时应该返回True.</li></ul><h2 id="一次比赛的代码"><a href="#一次比赛的代码" class="headerlink" title="一次比赛的代码"></a>一次比赛的代码</h2><p>不懂的话直接当普通代码执行，当然本人还是纯小白，代码是copy来的，一次比赛的baseline代码</p><h3 id="加载pytorch框架下的依赖项"><a href="#加载pytorch框架下的依赖项" class="headerlink" title="加载pytorch框架下的依赖项"></a>加载pytorch框架下的依赖项</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token punctuation">,</span> division<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">import</span> lr_scheduler<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable<span class="token keyword">import</span> torchvision<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> datasets<span class="token punctuation">,</span> models<span class="token punctuation">,</span> transforms<span class="token keyword">import</span> time<span class="token keyword">import</span> os</code></pre><h3 id="加载数据集，并分为训练集和测试集"><a href="#加载数据集，并分为训练集和测试集" class="headerlink" title="加载数据集，并分为训练集和测试集"></a>加载数据集，并分为训练集和测试集</h3><pre class=" language-python"><code class="language-python">dataTrans <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>            transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            transforms<span class="token punctuation">.</span>CenterCrop<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>data_dir <span class="token operator">=</span> <span class="token string">'./images'</span>all_image_datasets <span class="token operator">=</span> datasets<span class="token punctuation">.</span>ImageFolder<span class="token punctuation">(</span>data_dir<span class="token punctuation">,</span> dataTrans<span class="token punctuation">)</span>trainsize <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token number">0.8</span><span class="token operator">*</span>len<span class="token punctuation">(</span>all_image_datasets<span class="token punctuation">)</span><span class="token punctuation">)</span>testsize <span class="token operator">=</span> len<span class="token punctuation">(</span>all_image_datasets<span class="token punctuation">)</span> <span class="token operator">-</span> trainsizetrain_dataset<span class="token punctuation">,</span> test_dataset <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>random_split<span class="token punctuation">(</span>all_image_datasets<span class="token punctuation">,</span><span class="token punctuation">[</span>trainsize<span class="token punctuation">,</span>testsize<span class="token punctuation">]</span><span class="token punctuation">)</span>image_datasets <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'train'</span><span class="token punctuation">:</span>train_dataset<span class="token punctuation">,</span><span class="token string">'val'</span><span class="token punctuation">:</span>test_dataset<span class="token punctuation">}</span>dataloders <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>image_datasets<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>                                                 batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>                                                 shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                                 num_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'val'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>dataset_sizes <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> len<span class="token punctuation">(</span>image_datasets<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'val'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># use gpu or not</span>use_gpu <span class="token operator">=</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train_model</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> lossfunc<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> scheduler<span class="token punctuation">,</span> num_epochs<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    best_model_wts <span class="token operator">=</span> model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    best_acc <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch {}/{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> num_epochs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Each epoch has a training and validation phase</span>        <span class="token keyword">for</span> phase <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'val'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> phase <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">:</span>                scheduler<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Set model to training mode</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Set model to evaluate mode</span>            running_loss <span class="token operator">=</span> <span class="token number">0.0</span>            running_corrects <span class="token operator">=</span> <span class="token number">0.0</span>            <span class="token comment" spellcheck="true"># Iterate over data.</span>            <span class="token keyword">for</span> data <span class="token keyword">in</span> dataloders<span class="token punctuation">[</span>phase<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># get the inputs</span>                inputs<span class="token punctuation">,</span> labels <span class="token operator">=</span> data                <span class="token comment" spellcheck="true"># wrap them in Variable</span>                <span class="token keyword">if</span> use_gpu<span class="token punctuation">:</span>                    inputs <span class="token operator">=</span> Variable<span class="token punctuation">(</span>inputs<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    labels <span class="token operator">=</span> Variable<span class="token punctuation">(</span>labels<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    inputs<span class="token punctuation">,</span> labels <span class="token operator">=</span> Variable<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">,</span> Variable<span class="token punctuation">(</span>labels<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># zero the parameter gradients</span>                optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># forward</span>                outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>                _<span class="token punctuation">,</span> preds <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                loss <span class="token operator">=</span> lossfunc<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># backward + optimize only if in training phase</span>                <span class="token keyword">if</span> phase <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">:</span>                    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>                    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># statistics</span>                running_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>data                running_corrects <span class="token operator">+=</span> torch<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>preds <span class="token operator">==</span> labels<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>            epoch_loss <span class="token operator">=</span> running_loss <span class="token operator">/</span> dataset_sizes<span class="token punctuation">[</span>phase<span class="token punctuation">]</span>            epoch_acc <span class="token operator">=</span> running_corrects <span class="token operator">/</span> dataset_sizes<span class="token punctuation">[</span>phase<span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{} Loss: {:.4f} Acc: {:.4f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>                phase<span class="token punctuation">,</span> epoch_loss<span class="token punctuation">,</span> epoch_acc<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># deep copy the model</span>            <span class="token keyword">if</span> phase <span class="token operator">==</span> <span class="token string">'val'</span> <span class="token operator">and</span> epoch_acc <span class="token operator">></span> best_acc<span class="token punctuation">:</span>                best_acc <span class="token operator">=</span> epoch_acc                best_model_wts <span class="token operator">=</span> model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    elapsed_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Training complete in {:.0f}m {:.0f}s'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>        elapsed_time <span class="token operator">//</span> <span class="token number">60</span><span class="token punctuation">,</span> elapsed_time <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Best val Acc: {:4f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>best_acc<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># load best model weights</span>    model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>best_model_wts<span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span class="token comment" spellcheck="true"># get model and replace the original fc layer with your fc layer</span>model_ft <span class="token operator">=</span> models<span class="token punctuation">.</span>resnet50<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>num_ftrs <span class="token operator">=</span> model_ft<span class="token punctuation">.</span>fc<span class="token punctuation">.</span>in_featuresmodel_ft<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_ftrs<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">if</span> use_gpu<span class="token punctuation">:</span>    model_ft <span class="token operator">=</span> model_ft<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># define loss function</span>lossfunc <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setting optimizer and trainable parameters</span> <span class="token comment" spellcheck="true">#   params = model_ft.parameters()</span> <span class="token comment" spellcheck="true"># list(model_ft.fc.parameters())+list(model_ft.layer4.parameters())</span><span class="token comment" spellcheck="true">#params = list(model_ft.fc.parameters())+list( model_ft.parameters())</span>params <span class="token operator">=</span> list<span class="token punctuation">(</span>model_ft<span class="token punctuation">.</span>fc<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>optimizer_ft <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>params<span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Decay LR by a factor of 0.1 every 7 epochs</span>exp_lr_scheduler <span class="token operator">=</span> lr_scheduler<span class="token punctuation">.</span>StepLR<span class="token punctuation">(</span>optimizer_ft<span class="token punctuation">,</span> step_size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>model_ft <span class="token operator">=</span> train_model<span class="token punctuation">(</span>model<span class="token operator">=</span>model_ft<span class="token punctuation">,</span>                           lossfunc<span class="token operator">=</span>lossfunc<span class="token punctuation">,</span>                           optimizer<span class="token operator">=</span>optimizer_ft<span class="token punctuation">,</span>                           scheduler<span class="token operator">=</span>exp_lr_scheduler<span class="token punctuation">,</span>                           num_epochs<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><pre><code>Epoch 0/4----------C:\Users\16413\anaconda3\lib\site-packages\torch\optim\lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate  &quot;https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate&quot;, UserWarning)train Loss: 0.0750 Acc: 0.6700val Loss: 0.0436 Acc: 0.8200Epoch 1/4----------train Loss: 0.0399 Acc: 0.8250val Loss: 0.0345 Acc: 0.8470Epoch 2/4----------train Loss: 0.0330 Acc: 0.8473val Loss: 0.0303 Acc: 0.8610Epoch 3/4----------train Loss: 0.0300 Acc: 0.8575val Loss: 0.0293 Acc: 0.8650Epoch 4/4----------train Loss: 0.0288 Acc: 0.8643val Loss: 0.0281 Acc: 0.8750Training complete in 6m 31sBest val Acc: 0.875000</code></pre><pre class=" language-python"><code class="language-python">torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model_ft<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'./model.pth'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span></code></pre><pre><code>done</code></pre><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>热爱是一件很美好的事。</p><p>读者有兴趣的话，<br>可以百度或知乎一下，深度学习、神经网络、resnet等一堆概念。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> torch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><blockquote><p>以上为官方文档<br><strong>想建站的，可以参考：</strong><br><a href="https://www.jianshu.com/p/0a8d738a5620" target="_blank" rel="noopener">https://www.jianshu.com/p/0a8d738a5620</a><br><a href="https://yafine66.gitee.io/" target="_blank" rel="noopener">https://yafine66.gitee.io/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
