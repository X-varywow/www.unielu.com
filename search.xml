<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>感知机模型</title>
      <link href="posts/e34y.html"/>
      <url>posts/e34y.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><ol><li>手动实现感知机</li><li>对模型评估</li></ol><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p><code>直观定义</code>：感知机接受多个输入信号，输出一个信号，输入信号配以权重，用阈值 $\theta$ 判定这个神经元是否被激活。</p><p><code>正规定义</code>：感知机是根据输入实例的特征向量 $x$ ，对其进行 <strong>二分类</strong> 的线性分类模型：<br>$$f(x)=sign(w \cdot x+b)$$</p><p>感知机学习算法，是基于随机梯度下降法的对损失函数的最优化算法，有 <code>原始形式</code> 和 <code>对偶形式</code>。</p><p><strong>随机梯度下降法</strong> Stochastic Gradient Descent，随机抽取一个误分类点使其梯度下降。</p><hr><p>二范数：$\Vert x \Vert_2$，即距离</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感知机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K-近邻</title>
      <link href="posts/a967.html"/>
      <url>posts/a967.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><ol><li>根据数据集构造 <code>kd-tree</code></li><li>基于 <code>kd-tree</code>，对于给定的 <code>x</code>，输出其最近邻元素及其欧式距离</li><li>基于 <code>kd-tree</code>，对于给定的 <code>x</code>，和正整数 <code>n</code>，输出其 <code>n</code> 个最近邻元素列表及其距离值</li></ol><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>$K-NearestNeighbor$，每个样本点都可以用它最近的K个近邻值来代表。</p><p>又名，基于实例的学习</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># heapq 优先队列算法，是一个原生的 python list， 0 号元素总为最小的元素</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtuple<span class="token keyword">from</span> math <span class="token keyword">import</span> sqrt<span class="token comment" spellcheck="true">#定义一个命名元组</span>result <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">"Result"</span><span class="token punctuation">,</span> <span class="token string">"nearest_point nearest_dist nodes_visited"</span><span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> point<span class="token punctuation">,</span> d<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>point <span class="token operator">=</span> point        self<span class="token punctuation">.</span>d <span class="token operator">=</span> d          <span class="token comment" spellcheck="true">#维度</span>        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right        self<span class="token punctuation">.</span>cnt <span class="token operator">=</span> cnt     <span class="token comment" spellcheck="true">#节点以下的数目（包括该节点）</span><span class="token keyword">class</span> <span class="token class-name">KdTree</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data<span class="token punctuation">:</span>            k <span class="token operator">=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> data_set<span class="token punctuation">)</span><span class="token punctuation">:</span>                                   <span class="token keyword">if</span> <span class="token operator">not</span> data_set<span class="token punctuation">:</span> <span class="token keyword">return</span> None            data_set<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span>            pos <span class="token operator">=</span> len<span class="token punctuation">(</span>data_set<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>                      <span class="token comment" spellcheck="true"># 需要分开的位置，最后会向右取</span>            newd <span class="token operator">=</span> <span class="token punctuation">(</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span>            <span class="token keyword">return</span> Node<span class="token punctuation">(</span>data_set<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> create<span class="token punctuation">(</span>newd<span class="token punctuation">,</span> data_set<span class="token punctuation">[</span><span class="token punctuation">:</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> create<span class="token punctuation">(</span>newd<span class="token punctuation">,</span> data_set<span class="token punctuation">[</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>data_set<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>root <span class="token operator">=</span> create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">preorder</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>point<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>cnt<span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span> fun<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span> fun<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        fun<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> point<span class="token punctuation">)</span><span class="token punctuation">:</span>        k <span class="token operator">=</span> len<span class="token punctuation">(</span>point<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 数据维度</span>        <span class="token keyword">def</span> <span class="token function">travel</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> target<span class="token punctuation">,</span> max_dist<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node <span class="token keyword">is</span> None<span class="token punctuation">:</span> <span class="token keyword">return</span> result<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> k<span class="token punctuation">,</span> float<span class="token punctuation">(</span><span class="token string">"inf"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#出口0</span>            nodes_visited <span class="token operator">=</span> <span class="token number">1</span>            d <span class="token operator">=</span> node<span class="token punctuation">.</span>d           <span class="token comment" spellcheck="true">#比较的维度</span>            point <span class="token operator">=</span> node<span class="token punctuation">.</span>point             nearer_node <span class="token operator">=</span> node<span class="token punctuation">.</span>left <span class="token keyword">if</span> target<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> point<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token keyword">else</span> node<span class="token punctuation">.</span>right       <span class="token comment" spellcheck="true">#下一步走的两个点</span>            further_node <span class="token operator">=</span> node<span class="token punctuation">.</span>right <span class="token keyword">if</span> target<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> point<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token keyword">else</span> node<span class="token punctuation">.</span>left            temp1 <span class="token operator">=</span> travel<span class="token punctuation">(</span>nearer_node<span class="token punctuation">,</span> target<span class="token punctuation">,</span> max_dist<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 进行遍历找到包含目标点的区域</span>            nearest <span class="token operator">=</span> temp1<span class="token punctuation">.</span>nearest_point  <span class="token comment" spellcheck="true"># 以此叶结点作为“当前最近点”</span>            dist <span class="token operator">=</span> temp1<span class="token punctuation">.</span>nearest_dist      <span class="token comment" spellcheck="true"># 更新最近距离</span>            nodes_visited <span class="token operator">+=</span> temp1<span class="token punctuation">.</span>nodes_visited            <span class="token keyword">if</span> dist <span class="token operator">&lt;</span> max_dist<span class="token punctuation">:</span>                max_dist <span class="token operator">=</span> dist  <span class="token comment" spellcheck="true"># 最近点将在以目标点为球心，max_dist为半径的超球体内</span>            <span class="token keyword">if</span> max_dist <span class="token operator">&lt;</span> abs<span class="token punctuation">(</span>point<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">-</span> target<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true">#出口1，另一超矩形无用</span>                <span class="token keyword">return</span> result<span class="token punctuation">(</span>nearest<span class="token punctuation">,</span> dist<span class="token punctuation">,</span> nodes_visited<span class="token punctuation">)</span>              temp_dist <span class="token operator">=</span> sqrt<span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> zip<span class="token punctuation">(</span>point<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> temp_dist <span class="token operator">&lt;</span> dist<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果“更近”</span>                nearest <span class="token operator">=</span> point   <span class="token comment" spellcheck="true"># 更新最近点</span>                dist <span class="token operator">=</span> temp_dist  <span class="token comment" spellcheck="true"># 更新最近距离</span>                max_dist <span class="token operator">=</span> dist   <span class="token comment" spellcheck="true"># 更新超球体半径</span>            <span class="token comment" spellcheck="true"># 检查另一个子结点对应的区域是否有更近的点</span>            temp2 <span class="token operator">=</span> travel<span class="token punctuation">(</span>further_node<span class="token punctuation">,</span> target<span class="token punctuation">,</span> max_dist<span class="token punctuation">)</span>            nodes_visited <span class="token operator">+=</span> temp2<span class="token punctuation">.</span>nodes_visited            <span class="token keyword">if</span> temp2<span class="token punctuation">.</span>nearest_dist <span class="token operator">&lt;</span> dist<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果另一个子结点内存在更近距离</span>                nearest <span class="token operator">=</span> temp2<span class="token punctuation">.</span>nearest_point  <span class="token comment" spellcheck="true"># 更新最近点</span>                dist <span class="token operator">=</span> temp2<span class="token punctuation">.</span>nearest_dist  <span class="token comment" spellcheck="true"># 更新最近距离</span>            <span class="token keyword">return</span> result<span class="token punctuation">(</span>nearest<span class="token punctuation">,</span> dist<span class="token punctuation">,</span> nodes_visited<span class="token punctuation">)</span>        <span class="token keyword">return</span> travel<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span> point<span class="token punctuation">,</span> float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    kd <span class="token operator">=</span> KdTree<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#kd.preorder()</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kd<span class="token punctuation">.</span>test<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kd<span class="token punctuation">.</span>test<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#第三问写不出来，想用heapq的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> knn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021五月</title>
      <link href="posts/a40e.html"/>
      <url>posts/a40e.html</url>
      
        <content type="html"><![CDATA[<p><em>May.2021</em></p><h2 id="5-3"><a href="#5-3" class="headerlink" title="5.3"></a><code>5.3</code></h2><p>观影《情书》</p><p><code>5.10</code></p><p>太稳了吧，连着两次1000米测了5分20，吃大亏…</p><p>#天比云更蓝，好美</p><p><code>5.14</code></p><p>人总是需要一些注意力，去转移自己的注意力。</p><p>这若即若离的虚无…</p><p><code>5.15</code></p><p>#《双人成形》，通关</p><p><code>5.16</code></p><p>#读完《自在独行》，内容与书名没很大关系，主要是对生活中各个主题进行记录的散文。<br>还行，一个文人的世界…</p><p>终，《灵笼》第一季，  <font size="5" face="KaiTi" color="#a1afc9">白月魁</font> 🌙</p><p><code>5.2~</code></p><p>完结，斗罗大陆4，以后应该不会需要这些注意力了吧</p><p>旅途，我想要找个形容词去形容，可除了经历的真实，逝去的感慨…</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记239</title>
      <link href="posts/contest239.html"/>
      <url>posts/contest239.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、到目标元素的最小距离"><a href="#一、到目标元素的最小距离" class="headerlink" title="一、到目标元素的最小距离"></a><a href="https://leetcode-cn.com/problems/minimum-distance-to-the-target-element/" target="_blank" rel="noopener">一、到目标元素的最小距离</a></h2><p>给你一个整数数组 <code>nums</code> （下标 从 0 开始 计数）以及两个整数 <code>target</code> 和 <code>start</code> ，请你找出一个下标 i ，满足 <code>nums[i] == target</code> 且 <code>abs(i - start)</code> 最小化 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getMinDistance</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">,</span> start<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">return</span> min<span class="token punctuation">(</span><span class="token punctuation">[</span>abs<span class="token punctuation">(</span>i<span class="token operator">-</span>start<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="二、将字符串拆分为递减的连续值"><a href="#二、将字符串拆分为递减的连续值" class="headerlink" title="二、将字符串拆分为递减的连续值"></a><a href="https://leetcode-cn.com/problems/splitting-a-string-into-descending-consecutive-values/" target="_blank" rel="noopener">二、将字符串拆分为递减的连续值</a></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">,</span> start<span class="token punctuation">:</span> int<span class="token punctuation">,</span> last<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>ans<span class="token punctuation">:</span>            <span class="token keyword">return</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">if</span> start <span class="token operator">==</span> n<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>ans <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">return</span>        now <span class="token operator">=</span> <span class="token number">0</span>        hi <span class="token operator">=</span> n <span class="token keyword">if</span> start <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">else</span> n <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>start<span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">:</span>            now <span class="token operator">=</span> now <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> ord<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> ord<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> start <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> now <span class="token operator">==</span> last <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>s<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> now<span class="token punctuation">)</span>            <span class="token keyword">if</span> start <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">and</span> now <span class="token operator">>=</span> last<span class="token punctuation">:</span>                <span class="token keyword">return</span>    <span class="token keyword">def</span> <span class="token function">splitString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        self<span class="token punctuation">.</span>ans <span class="token operator">=</span> <span class="token boolean">False</span>        self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span class="token comment" spellcheck="true"># copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、邻位交换的最小次数"><a href="#三、邻位交换的最小次数" class="headerlink" title="三、邻位交换的最小次数"></a><a href="https://leetcode-cn.com/problems/minimum-adjacent-swaps-to-reach-the-kth-smallest-number/" target="_blank" rel="noopener">三、邻位交换的最小次数</a></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 模拟+贪心</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、包含每个查询的最小区间"><a href="#四、包含每个查询的最小区间" class="headerlink" title="四、包含每个查询的最小区间"></a><a href="https://leetcode-cn.com/problems/minimum-interval-to-include-each-query/" target="_blank" rel="noopener">四、包含每个查询的最小区间</a></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#TLE</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minInterval</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> intervals<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> queries<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> l<span class="token punctuation">,</span> r <span class="token keyword">in</span> intervals<span class="token punctuation">:</span>            a <span class="token operator">=</span> r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token keyword">in</span> d<span class="token punctuation">:</span>                    d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>a<span class="token punctuation">,</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> queries<span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token keyword">in</span> d<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nltk模块</title>
      <link href="posts/b32f.html"/>
      <url>posts/b32f.html</url>
      
        <content type="html"><![CDATA[<p>$Natural Language Toolkit$</p><p>NLTK is a leading platform for building Python programs to work with human language data.</p><pre class="line-numbers language-python"><code class="language-python">pip show nltkpip install nltk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> nltknltk<span class="token punctuation">.</span>download<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>报错：</code><br>[nltk_data] Error loading punkt: &lt;urlopen error [Errno 11004]<br>[nltk_data]     getaddrinfo failed&gt;</p><p>（1）应该是从 <a href="https://raw.githubusercontent.com/nltk/nltk_data/" target="_blank" rel="noopener">https://raw.githubusercontent.com/nltk/nltk_data/</a> 下载数据失败，<br>（2）然后去 <a href="https://gitee.com/qwererer2/nltk_data/tree/gh-pages/" target="_blank" rel="noopener">https://gitee.com/qwererer2/nltk_data/tree/gh-pages/</a> 下载整个仓库。<em>653mb</em><br>（3）将packages下所有文件，复制到jupyter找得到的路径下（文件夹名为nltk_data，可自己创建）。<br>（4）将<code>nltk_data\tokenizers</code> 下的 <code>punkt.zip</code> 解压到当前目录即可。<br>（5）运行测试代码，环境基本好了</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> nltksentence <span class="token operator">=</span> <span class="token string">"What a happy day"</span>tokens <span class="token operator">=</span> nltk<span class="token punctuation">.</span>word_tokenize<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>tokens<span class="token comment" spellcheck="true"># Out: ['What', 'a', 'happy', 'day']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参考资料：</strong></p><ul><li>nltk官网: <a href="http://www.nltk.org/" target="_blank" rel="noopener">http://www.nltk.org/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>朴素贝叶斯</title>
      <link href="posts/e53b.html"/>
      <url>posts/e53b.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><ol><li><p>手动实现朴素贝叶斯分类器</p></li><li><p>使用 (sklearn) （python机器学习库） 自带的数据集，进行文本特征向量化（TF-IDF），并使用多项式贝叶斯文本分类</p></li></ol><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>$$y=\arg\max_{c_{k}}P(Y=c_{k})\prod_{j=1}^{n}P(X_{j}=x^{(j)}|Y=c_{k})$$</p><p>模型内有的只是训练出来的概率，</p><p>朴素贝叶斯分类器要做的事：根据模型，对测试的例子的 y 值进行（假设）极大似然，得出分类结果。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> shuffle<span class="token keyword">from</span> collections <span class="token keyword">import</span> Counterping_hua <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Sunny'</span><span class="token punctuation">,</span> <span class="token string">'Hot'</span><span class="token punctuation">,</span> <span class="token string">'High'</span><span class="token punctuation">,</span> <span class="token string">'Weak'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token string">'Sunny'</span><span class="token punctuation">,</span> <span class="token string">'Hot'</span><span class="token punctuation">,</span> <span class="token string">'High'</span><span class="token punctuation">,</span> <span class="token string">'Strong'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token string">'Overcast'</span><span class="token punctuation">,</span> <span class="token string">'Hot'</span><span class="token punctuation">,</span> <span class="token string">'High'</span><span class="token punctuation">,</span> <span class="token string">'Weak'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token string">'Rain'</span><span class="token punctuation">,</span> <span class="token string">'Mild'</span><span class="token punctuation">,</span> <span class="token string">'High'</span><span class="token punctuation">,</span> <span class="token string">'Weak'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token string">'Rain'</span><span class="token punctuation">,</span> <span class="token string">'Cool'</span><span class="token punctuation">,</span> <span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Weak'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token string">'Rain'</span><span class="token punctuation">,</span> <span class="token string">'Cool'</span><span class="token punctuation">,</span> <span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Strong'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token string">'Overcast'</span><span class="token punctuation">,</span> <span class="token string">'Cool'</span><span class="token punctuation">,</span> <span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Strong'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token string">'Sunny'</span><span class="token punctuation">,</span> <span class="token string">'Mild'</span><span class="token punctuation">,</span> <span class="token string">'High'</span><span class="token punctuation">,</span> <span class="token string">'Weak'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token string">'Sunny'</span><span class="token punctuation">,</span> <span class="token string">'Cool'</span><span class="token punctuation">,</span> <span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Weak'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token string">'Rain'</span><span class="token punctuation">,</span> <span class="token string">'Mild'</span><span class="token punctuation">,</span> <span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Weak'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token string">'Sunny'</span><span class="token punctuation">,</span> <span class="token string">'Mild'</span><span class="token punctuation">,</span> <span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Strong'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token string">'Overcast'</span><span class="token punctuation">,</span> <span class="token string">'Mild'</span><span class="token punctuation">,</span> <span class="token string">'High'</span><span class="token punctuation">,</span> <span class="token string">'Strong'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token string">'Overcast'</span><span class="token punctuation">,</span> <span class="token string">'Hot'</span><span class="token punctuation">,</span> <span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Weak'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token string">'Rain'</span><span class="token punctuation">,</span> <span class="token string">'Mild'</span><span class="token punctuation">,</span> <span class="token string">'High'</span><span class="token punctuation">,</span> <span class="token string">'Strong'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">NaiveBayes</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>y_label <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                       <span class="token comment" spellcheck="true">#yes例子的字典</span>        self<span class="token punctuation">.</span>n_label <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                       <span class="token comment" spellcheck="true"># no例子的字典</span>        self<span class="token punctuation">.</span>n0 <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>n1 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> data<span class="token punctuation">:</span>            <span class="token keyword">if</span> row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                      <span class="token comment" spellcheck="true">#正例</span>                self<span class="token punctuation">.</span>n1 <span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">for</span> i<span class="token punctuation">,</span>d <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> d <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>y_label<span class="token punctuation">:</span>                        self<span class="token punctuation">.</span>y_label<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>y_label<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>n0 <span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">for</span> i<span class="token punctuation">,</span>d <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> d <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>n_label<span class="token punctuation">:</span>                        self<span class="token punctuation">.</span>n_label<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>n_label<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>     <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>        p_yes <span class="token operator">=</span> self<span class="token punctuation">.</span>n1<span class="token operator">/</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>n0 <span class="token operator">+</span> self<span class="token punctuation">.</span>n1<span class="token punctuation">)</span>        p_no <span class="token operator">=</span> self<span class="token punctuation">.</span>n0<span class="token operator">/</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>n0 <span class="token operator">+</span> self<span class="token punctuation">.</span>n1<span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> d <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>            p_yes <span class="token operator">*=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>y_label<span class="token punctuation">.</span>get<span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>n1 <span class="token operator">+</span> ping_hua<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            p_no <span class="token operator">*=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_label<span class="token punctuation">.</span>get<span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>n0 <span class="token operator">+</span> ping_hua<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p(yes):"</span><span class="token punctuation">,</span> p_yes<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p(no):"</span><span class="token punctuation">,</span> p_no<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"yes"</span> <span class="token keyword">if</span> p_yes<span class="token operator">>=</span>p_no <span class="token keyword">else</span> <span class="token string">"no"</span><span class="token keyword">def</span> <span class="token function">data_split</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span>_ <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    shuffle<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>data<span class="token punctuation">[</span>_<span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> nums<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>data<span class="token punctuation">[</span>_<span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    train<span class="token punctuation">,</span> test <span class="token operator">=</span> data_split<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(train, test)</span>    model <span class="token operator">=</span> NaiveBayes<span class="token punctuation">(</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(model.y_label, model.n_label)</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> test<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token string">" the predict:"</span><span class="token punctuation">,</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> fetch_20newsgroups<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>naive_bayes <span class="token keyword">import</span> MultinomialNB <span class="token comment" spellcheck="true"># 多项式模型，进行文本分类</span><span class="token keyword">from</span> pprint <span class="token keyword">import</span> pprint        <span class="token comment" spellcheck="true">#data pretty printer</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> TfidfVectorizer <span class="token comment" spellcheck="true">#TF-IDF文本特征提取</span>newsgroups_train <span class="token operator">=</span> fetch_20newsgroups<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span>pprint<span class="token punctuation">(</span>list<span class="token punctuation">(</span>newsgroups_train<span class="token punctuation">.</span>target_names<span class="token punctuation">)</span><span class="token punctuation">)</span>select <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'alt.atheism'</span><span class="token punctuation">,</span><span class="token string">'comp.graphics'</span><span class="token punctuation">,</span><span class="token string">'misc.forsale'</span><span class="token punctuation">,</span><span class="token string">'rec.autos'</span><span class="token punctuation">,</span>          <span class="token string">'sci.crypt'</span><span class="token punctuation">,</span><span class="token string">'soc.religion.christian'</span><span class="token punctuation">,</span><span class="token string">'talk.politics.guns'</span><span class="token punctuation">]</span>train<span class="token operator">=</span>fetch_20newsgroups<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">,</span>categories<span class="token operator">=</span>select<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 1.数据集导入</span>test<span class="token operator">=</span>fetch_20newsgroups<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span>categories<span class="token operator">=</span>select<span class="token punctuation">)</span>vectorizer <span class="token operator">=</span> TfidfVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span> train_v<span class="token operator">=</span>vectorizer<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>train<span class="token punctuation">.</span>data<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 2.文本特征向量化</span>test_v<span class="token operator">=</span>vectorizer<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test<span class="token punctuation">.</span>data<span class="token punctuation">)</span>model <span class="token operator">=</span> MultinomialNB<span class="token punctuation">(</span><span class="token punctuation">)</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_v<span class="token punctuation">,</span>train<span class="token punctuation">.</span>target<span class="token punctuation">)</span>                              <span class="token comment" spellcheck="true"># 3.训练模型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"准确率为:"</span><span class="token punctuation">,</span>model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>test_v<span class="token punctuation">,</span>test<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 4~5. 测试-,报告学习结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参考资料</strong>：</p><ul><li><a href="https://blog.csdn.net/qq_41856733/article/details/106415101" target="_blank" rel="noopener">python, 20Newsgroup文本分类</a></li><li><a href="https://scikit-learn.org/stable/user_guide.html" target="_blank" rel="noopener">官网：sklearn user guide</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贝叶斯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计量语言学</title>
      <link href="posts/57f5.html"/>
      <url>posts/57f5.html</url>
      
        <content type="html"><![CDATA[<h3 id="Quantitative-Linguistics"><a href="#Quantitative-Linguistics" class="headerlink" title="Quantitative Linguistics"></a><em>Quantitative Linguistics</em></h3><div class="admonition note"><p class="admonition-title">关于这个学科（转载）</p><p><strong>计量语言学</strong>是以真实的语言交际活动中呈现的各种语言现象、语言结构、结构属性以及它们之间的相互关系作为研究对象，<br>通过概率论、随机过程、微分与微分方程、函数论等数学的定量方法（与代数等数学的定性方法相对）对其进行精确的测量、观察、模拟、建模和解释，<br>寻找语言现象背后的数理规律，揭示各种语言现象形成的内在原因，<br>探索语言系统的自适应机制和语言演化的动因。</p><p>简言之，计量语言学是以真实语料为基础、用精确的方法来研究语言结构与发展规律的语言学分支学科。</p></div><hr><p>语言是人所使用的符号工具、使用的这种工具的行为是言语动作，而行为的结果是语言数据。</p><p>语言学通过言语动作和语言数据来研究语言。<br>语言智能，通过语言数据（让机器）模拟言语行为，挖掘其中蕴含的信息。</p><ul><li><strong>语言智能</strong><ul><li>研究目标：使计算机理解和运用自然语言</li><li>常见任务：语音合成、语音识别、光学字符识别（Optical Character Recognition，OCR）、词法分析、句法分析、机器翻译等</li></ul></li><li><strong>语言资源</strong><ul><li>广义：包括语言数据、具有特定语言能力的人、语言文化成果、语言研究的成果等。</li><li>狭义：指大规模的可使用的语言数据。</li></ul></li></ul><p>PPT:</p><ul><li>QL04-1句法和句义<ul><li>句子的语言学结构：句法成分</li><li>句子的语言学结构：句型</li><li>句法信息的表示形式：短语结构语法、依存语法</li><li>句子的语义</li></ul></li><li>QL04-2篇章和修辞<ul><li>篇章的结构：修辞</li><li>篇章信息处理主要任务：文本分类、自动摘要、信息抽取、指代消解</li><li>修辞结构理论RST</li></ul></li><li>QL04-3对话<ul><li>对话的结构：语境、会话、会话准则</li><li>对话信息处理</li></ul></li></ul><hr><h3 id="第五周及以后"><a href="#第五周及以后" class="headerlink" title="第五周及以后"></a>第五周及以后</h3><ul><li>科学是什么？<ul><li>反映自然社会思维等的客观规律的分科的知识体系。 ——《现代汉语词典》</li><li>科学可以被认为是三重结合体，由对象、途径和理论三个核心要素共同作用的一个完整体系。</li></ul></li><li>科学的第一核心要素：<strong>研究的对象</strong><ul><li>研究的对象是：</li><li>某一事物或事物的某些属性<ul><li>如事物：水星，属性：质量、大小</li></ul></li><li>属性之间的相互关系，各类关系的结构<ul><li>如：引力-半径，公转周期-角速度</li></ul></li><li>这些结构的功能，这些功能的构建过程<ul><li>如：引力和轨迹-航天器减速</li></ul></li><li>综合系统与这个系统演化的历史<ul><li>如：水星对我们的意义？水星如何形成</li></ul></li></ul></li><li>科学的第二核心要素：<strong>途径</strong><ul><li>研究的视角</li><li>研究的目标（应用、描述、预测、追溯、理解、解释）</li><li>研究的核心问题<ul><li>实证性问题</li><li>概念性问题</li><li>方法论问题，如：靠大量观测数据推测轨迹是否合理？</li><li>评价性问题</li></ul></li><li>研究的方法（直觉、反省、观察、实验、归纳和演绎）<ul><li>定性的方法不仅是文字的描述，也包括定性的数学方式，如代数逻辑集合的理论和图示等等。</li><li>定量的方法指的是数学定律组合学概率论，微积分方程等表现形式。</li></ul></li></ul></li><li>科学的第三核心要素：<strong>理论</strong><ul><li>概念<ul><li>概念是人脑对客观事物本质的反映，是对特征的独特组合而形成的知识单元</li><li>概念是理论存在的必要不充分条件</li></ul></li><li>假设</li><li>定律<ul><li>在理论上和实证上都有根有据的假设才可以称为定律</li><li>定律是对生成可观察现象的机制的陈述</li></ul></li></ul></li><li><strong>科学的语言学理论尚且不存在</strong></li></ul><hr><ul><li>计量语言学中的普适定律<ul><li><code>分布定律</code>，描述语言结构在语言系统和语言使用中的定量特征</li><li><code>函数定律</code>，描述不同的语言结构及其属性间的相互关系</li><li><code>演化定律</code>，建立了相关语言性质变化的动力模型</li></ul></li></ul><ul><li><strong>齐普夫定律</strong>（分布定律）<ul><li>词的频次和它相对应的频序的乘积大体上接近一个常数</li><li>公式：$f_rr=K$</li><li>记 $\frac{f_r}{N}$ 为词的频率 $P_r$，则词频分布公式为：$$P_r=Kr^{-1}$$</li><li>对其修正:$$P_r=Cr^{-b}$$其中b&gt;0,C&gt;0,$\sum_{r=1}^nP_r=1$</li><li>两种常见的分布形态：幂律分布、泊松分布</li></ul></li><li><strong>门策拉-阿尔特曼定律</strong>（函数定律）<ul><li>一种语言结构越长，则构成它的部分越短。成分长度是结构长度的函数</li><li>记 y 为成分长度，x 为结构长度，表示为$$y=ax^{-b}e^{-cx}$$</li></ul></li><li><strong>皮奥特罗夫-阿尔特曼定律</strong>（演化定律）<ul><li>这一定律一般用来研究借词数量增加、形态变化等有关语言演化的问题。</li><li>其中$p_t$是新形式所占的比例，$k_t$ 表示一个时间函数（也可能是常量），C 表示变化区间，t 表示时间，$dp_t$ 表示变化率 $$dp_t=k_tp_t(C-p_t)dt$$</li></ul></li></ul><hr><p><strong>复杂网络</strong></p><ul><li>分析指标<ul><li>节点相关（度、平均度、度的分布）</li><li>网络相关（相关性、小世界属性、中心性）</li></ul></li><li>工具<ul><li>复杂网络分析工具<ul><li>cytoscape</li><li>python newworkx包</li><li>Pajek</li></ul></li><li>常用语言计量软件<ul><li>QUITA</li><li>Altmann-Fitter</li><li>NLREG &amp; Curve Table</li></ul></li></ul></li></ul><p><strong>QUITA</strong>, <em>Quantitative Index Text Analyzer</em> ，可计算22种计量指标，记总词例（token)数为 <code>N</code>，词型（type）数为 <code>V</code></p><ul><li>$TTR$ - 型例比<ul><li>最为常用的一个文本计量指标，反映词汇使用的丰富程度</li></ul></li><li>$Entropy$熵</li><li>$RR$ 重复率</li><li>$RR_{mc}$ 相对重复率</li></ul><h2 id="统计文本的计量指标"><a href="#统计文本的计量指标" class="headerlink" title="统计文本的计量指标"></a>统计文本的计量指标</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> jieba<span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter<span class="token keyword">from</span> math <span class="token keyword">import</span> log<span class="token punctuation">,</span> sqrt<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"QiuzhuangShandian.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'ANSI'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token punctuation">:</span>    txt <span class="token operator">=</span> t<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    words <span class="token operator">=</span> jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>txt<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 使用精确模式对文本进行分词</span>    <span class="token comment" spellcheck="true">#print(words[:100])</span>    d <span class="token operator">=</span> Counter<span class="token punctuation">(</span>words<span class="token punctuation">)</span>    other <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'，'</span><span class="token punctuation">,</span> <span class="token string">'\u3000'</span><span class="token punctuation">,</span> <span class="token string">'。'</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">'”'</span><span class="token punctuation">,</span> <span class="token string">'“'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'？'</span><span class="token punctuation">,</span> <span class="token string">'：'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> other<span class="token punctuation">:</span>        <span class="token keyword">del</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    N <span class="token operator">=</span> sum<span class="token punctuation">(</span>d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       V <span class="token operator">=</span> len<span class="token punctuation">(</span>d<span class="token punctuation">)</span>    H <span class="token operator">=</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">/</span>N<span class="token punctuation">)</span><span class="token operator">*</span>log<span class="token punctuation">(</span>d<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">/</span>N<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    RR <span class="token operator">=</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">/</span>N<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">/</span>N<span class="token punctuation">)</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    RRMC <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>sqrt<span class="token punctuation">(</span>RR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span>sqrt<span class="token punctuation">(</span>V<span class="token punctuation">)</span><span class="token punctuation">)</span>    ATL <span class="token operator">=</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span>len<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>len<span class="token punctuation">(</span>d<span class="token punctuation">)</span>    tlfs <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> Counter<span class="token punctuation">(</span><span class="token punctuation">[</span>len<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    tlfs<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>    tmp_h <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> zip<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    tmp_h<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> tmp_h<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#print(tmp_h)</span>    h_point <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>tmp_h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> tmp_h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> i<span class="token punctuation">:</span>            h_point <span class="token operator">=</span> i            <span class="token keyword">break</span>    R1 <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">-</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> tmp_h<span class="token punctuation">[</span><span class="token punctuation">:</span>h_point<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>N <span class="token operator">+</span> <span class="token punctuation">(</span>h_point<span class="token operator">*</span>h_point<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>N<span class="token punctuation">)</span>    G <span class="token operator">=</span> <span class="token punctuation">(</span>V<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>sum<span class="token punctuation">(</span><span class="token punctuation">[</span>r<span class="token operator">*</span>tmp_h<span class="token punctuation">[</span>r<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>tmp_h<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>N<span class="token punctuation">)</span><span class="token operator">/</span>V    L <span class="token operator">=</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span>sqrt<span class="token punctuation">(</span><span class="token punctuation">(</span>tmp_h<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>tmp_h<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>tmp_h<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    LR <span class="token operator">=</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span>sqrt<span class="token punctuation">(</span><span class="token punctuation">(</span>tmp_h<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>tmp_h<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> range<span class="token punctuation">(</span>h_point<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(d.most_common())</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"Types:"</span><span class="token punctuation">,</span> V<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}\n"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"Tokens:"</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(1)TTR:"</span><span class="token punctuation">,</span> V<span class="token operator">/</span>N<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(2)h-point:"</span><span class="token punctuation">,</span> h_point<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(3)entropy:"</span><span class="token punctuation">,</span> H<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(4)Average Token Length:"</span><span class="token punctuation">,</span> ATL<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(5)R1:"</span><span class="token punctuation">,</span> R1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(6)RR:"</span><span class="token punctuation">,</span> RR<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(7)RRMC:"</span><span class="token punctuation">,</span> <span class="token string">"[no tagger]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(8)TC:"</span><span class="token punctuation">,</span> <span class="token string">"[no tagger]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(9)STC:"</span><span class="token punctuation">,</span> <span class="token string">"[no tagger]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(10)PTC:"</span><span class="token punctuation">,</span> <span class="token string">"[no tagger]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(11)Activity:"</span><span class="token punctuation">,</span> <span class="token string">"[no tagger]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(12)Descriptivity:"</span><span class="token punctuation">,</span> <span class="token string">"[no tagger]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(13)Lambda:"</span><span class="token punctuation">,</span> L<span class="token operator">*</span>log<span class="token punctuation">(</span>N<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">/</span>N<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(14)Adjusted Modules:"</span><span class="token punctuation">,</span> <span class="token string">"[...]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(15)G:"</span><span class="token punctuation">,</span> G<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(16)R4:"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">-</span>G<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(17)Hapax Percentage:"</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>N<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(18)L:"</span><span class="token punctuation">,</span> L<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(19)WritersView:"</span><span class="token punctuation">,</span> <span class="token string">"[...]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(20)CurveLength RIndex:"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">-</span>LR<span class="token operator">/</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}{:>15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(21)Verb Distances:"</span><span class="token punctuation">,</span> <span class="token string">"[...]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;30}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(22)Token Length Frequency Spectrum:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tlfs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>课程分数：</p><ul><li>考勤</li><li>作业<ul><li>科学的方法论 <code>√</code></li><li>python 统计语料指标 <code>√</code></li><li>学术汇报（25min汇报+5min提问）</li><li>课程论文（4000+）</li></ul></li><li>突出表现</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="posts/cn.html"/>
      <url>posts/cn.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、计算机网络"><a href="#一、计算机网络" class="headerlink" title="一、计算机网络"></a>一、计算机网络</h2><h3 id="1-0-概述"><a href="#1-0-概述" class="headerlink" title="1.0 概述"></a>1.0 概述</h3><p><strong>计算机网络</strong> 是一个将分散的，具有独立功能的计算机系统，通过 <code>通信设备</code> 与 <code>线路</code> 连接起来，由功能完善的软件实现 <code>资源共享</code> 和 <code>信息传递</code> 的系统。</p><p>计算机网络是 <code>互连</code> 的，<code>自治</code> 的计算机网络集合。</p><p>互联网的两个基本特点：<code>连通性</code> 和 <code>共享</code>。</p><hr><p>计算机网络的功能：</p><ul><li><strong>数据通信</strong></li><li><strong>资源共享</strong></li><li>分布式处理（如Hadoop平台）</li><li>提高可靠性</li><li>负载均衡</li></ul><hr><h3 id="1-1-计算机网络的组成"><a href="#1-1-计算机网络的组成" class="headerlink" title="1.1 计算机网络的组成"></a>1.1 计算机网络的组成</h3><ul><li>组成部分<ul><li>硬件</li><li>软件</li><li><strong>协议</strong><ul><li>定义：为进行网络中数据交换而建立的规则、标准和约定</li><li>三要素：<code>语法</code>、<code>语义</code>、<code>同步（时序）</code></li></ul></li></ul></li><li>从工作方式上看<ul><li><code>边缘部分</code>（所有连接在互联网上的主机，用户可以直接使用）<ul><li>C/S方式</li><li>P2P方式</li></ul></li><li><code>核心部分</code>（由大量的网络和连接这些网络的路由器组成，为边缘部分的主机提供服务）</li></ul></li><li>功能组成<ul><li>通信子网（实现数据通信）<ul><li>【各种传输介质、通信设备、相应的网络协议组成】</li></ul></li><li>资源子网（实现资源共享/数据处理）<ul><li>【实现资源共享功能的设备和软件的集合】</li></ul></li></ul></li></ul><hr><h3 id="1-2-计算机网络的分类"><a href="#1-2-计算机网络的分类" class="headerlink" title="1.2 计算机网络的分类"></a>1.2 计算机网络的分类</h3><ul><li>按分布范围分类：<ul><li>广域网 <code>WAN</code></li><li>城域网 <code>MAN</code></li><li>局域网 <code>LAN</code></li><li>个人区域网 <code>PAN</code></li></ul></li><li>按使用者分类：<ul><li>公用网（中国电信等）</li><li>专用网</li></ul></li><li>按交换技术分类：<code>电报交换</code> <code>报文交换</code> <code>分组交换</code></li><li>按拓扑结构分类</li><li>按传输技术分类：广播式网络、点对点式网络</li></ul><hr><h3 id="1-3-标准化工作"><a href="#1-3-标准化工作" class="headerlink" title="1.3 标准化工作"></a>1.3 标准化工作</h3><ul><li>分类<ul><li>法定标准 <code>OSI</code></li><li>事实标准 <code>TCP/IP</code><ul><li>【某些公司的产品在竞争中占据主流，这些产品的协议与技术逐渐形成标准】 </li></ul></li></ul></li><li>相关组织<ul><li>国际标准化组织<code>ISO</code> （OSI参考模型、HDLC协议）</li><li>国际电信联盟<code>ITU</code> （制定通信规则）</li><li>国际电气电子工程师协会<code>IEEE</code> （学术机构、IEEE802系列标准、5G）</li><li>Internet工程任务组<code>IETF</code> （负责因特网相关标准的制定，RFC XXXX）</li></ul></li></ul><hr><h3 id="1-4-性能指标"><a href="#1-4-性能指标" class="headerlink" title="1.4 性能指标"></a>1.4 性能指标</h3><ul><li><strong>速率</strong> （即数据率，数据传输率，比特率）<ul><li>单位：<code>b/s</code>，<code>kb/s</code>等</li><li>【连接在计算机网络上的主机在数字信道上传送数据位数的速率】</li><li><code>b</code> 表示 <code>bit</code>，字节用Byte（B）表示</li></ul></li><li><strong>带宽</strong><ul><li>原指某个信号的频带宽度，即最高频率与最低频率之差</li><li>计网中，指网络设备所支持的最高速度</li><li>【单位时间内从网络的某一点到另一点所能通过的“最高数据率”】</li><li>单位：<code>b/s</code>，<code>kb/s</code>等</li></ul></li><li><strong>吞吐量</strong><ul><li>单位：<code>b/s</code>，<code>kb/s</code>等</li><li>【单位时间内通过某个网络（或信道、接口）的数据量】</li></ul></li><li><strong>时延</strong>⭐<ul><li>【指数据（报文/分组/比特流）从网络（或链路）的一端传送到另一端所需的时间，也叫延迟。单位：<code>s</code>】</li><li>分类：<ul><li>发送时延<ul><li>也叫 <strong>传输时延</strong>，是主机或路由器发送数据帧所需要的时间。</li><li>= 数据帧长度(bit) / 发送速率(bit/s)</li></ul></li><li><strong>传播时延</strong><ul><li>是电磁波在信道中传播一定距离需要的时间。</li><li>= 信道长度(m) / 电磁波在信道上的传播速率(m/s)</li></ul></li><li>排队时延</li><li>处理时延</li></ul></li></ul></li><li><strong>时延带宽积</strong><ul><li>【 = 传播时延*带宽】</li><li>描述：以比特为单位的链路长度，一定情况下的链路的比特容量</li></ul></li><li><strong>往返时延RTT</strong><ul><li>【从发送方发送数据开始，到收到接收方确认总共经历的时延】</li></ul></li><li><strong>利用率</strong><ul><li>信道利用率（有数据通过的时间/总时间）</li><li>网络利用率（信道利用率加权平均值）<ul><li>随着利用率增大，时延急剧增大</li></ul></li></ul></li></ul><hr><h3 id="1-5-计算机网络体系结构"><a href="#1-5-计算机网络体系结构" class="headerlink" title="1.5 计算机网络体系结构"></a>1.5 计算机网络体系结构</h3><p><strong>计算机网络体系结构</strong>：是计算机网络的各层及其协议的集合。</p><ul><li>体系结构是抽象的</li><li>仅仅相邻层有接口，且提供服务的具体实现细节对上一层完全屏蔽</li></ul><p>计算机网络的 <strong>分层结构</strong>：</p><ul><li>4层 <code>TCP/IP参考模型</code>（事实标准）<ul><li>应用层（HTTP、FTP、DNS）</li><li>传输层（TCP、UDP）</li><li>网际层（IP）</li><li>网络接口层（Ethernet、ATM、Frame Relay）</li></ul></li><li>7层 <code>OSI参考模型</code>（法定标准）</li></ul><table><thead><tr><th>名称</th><th>主要任务</th><th>协议</th><th>功能</th></tr></thead><tbody><tr><td>应用层</td><td>对应用程序的通信提供服务</td><td>文件传输 <code>FTP</code>，电子邮件 <code>SMTP</code>，万维网 <code>HTTP</code></td><td></td></tr><tr><td>表示层</td><td>用于处理两个通信系统中交换信息的表示方式</td><td></td><td>数据格式变换、数据加密解密、数据压缩与恢复</td></tr><tr><td>会话层</td><td>向表示层实体/用户进程提供建立连接（建立同步，SYN）并在连接上有序地传输数据。</td><td>ADSP、ASP</td><td></td></tr><tr><td>传输层</td><td>负责进程间的数据传输，即<strong>端到端</strong>的通信</td><td><code>TCP</code>、<code>UDP</code></td><td>①可靠传输、不可靠传输②差错控制③流量控制（对发送方、接收方的速度协调）④复用分用</td></tr><tr><td>网络层</td><td>源主机到目的主机的数据分组路由与转发</td><td><code>IP</code>、IPX、ICMP</td><td>路由选择、流量控制、差错控制、拥塞控制</td></tr><tr><td>数据链路层</td><td>把网络层传下来的数据包组装成 <code>帧</code></td><td>SDLC、HDLC、PPP、STP</td><td>成帧、差错控制、流量控制、访问（接入）控制</td></tr><tr><td>物理层</td><td>实现相邻计算机结点之间比特数据流的透明传输</td><td>Rj45、802.3</td><td>说明：透明传输，即不管怎样的比特组合，都能在链路上传送</td></tr></tbody></table><hr><p>两个参考模型的<strong>不同</strong>：</p><p><strong>面向连接</strong>：发送请求 -&gt; 建立连接 -&gt; 数据传输</p><p><strong>无连接</strong>：直接数据传输</p><table><thead><tr><th></th><th>OSI参考模型</th><th>TCP/IP模型</th></tr></thead><tbody><tr><td>网络层</td><td>无连接+面向连接</td><td>无连接</td></tr><tr><td>传输层</td><td>面向连接</td><td>无连接+面向连接</td></tr></tbody></table><h2 id="二、物理层"><a href="#二、物理层" class="headerlink" title="二、物理层"></a>二、物理层</h2><p>学习目标：</p><ul><li>掌握物理层基本概念</li><li>熟悉传输媒体</li><li>了解数据通信的基本概念和主要方法</li><li>熟悉常用的物理接口</li><li>掌握一些重要参数的计算方法</li></ul><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>物理层解决如何在连接各种计算机的传输媒体上传输数据比特流。<br><strong>主要任务</strong>：确定与传输媒体接口有关的一些特性。</p><ul><li><code>机械特性</code>（如接口形状、引脚数目等）</li><li><code>电气特性</code>（线路上信号的电压范围、阻抗匹配等）</li><li><code>功能特性</code>（指明电平表示的意义等）</li><li><code>规程特性</code>（定义各条物理线路的工作规程和时序关系）</li></ul><hr><p><strong>数据通信的相关术语</strong>：</p><ul><li>数据（传送信息的实体，通常是有意义的符号序列）</li><li>信号（数据的电气/电磁的表现，是数据在传输过程中的存在形式）<ul><li>数字信号，参数的取值是离散的</li><li>模拟信号，参数的取值是连续的</li></ul></li><li>信源（产生和发送数据的源头）</li><li>信宿（接收数据的终点）</li><li>信道（信号的传输媒介）</li></ul><hr><h3 id="2-2-物理层传输介质"><a href="#2-2-物理层传输介质" class="headerlink" title="2.2 物理层传输介质"></a>2.2 物理层传输介质</h3><ul><li>导向性传输介质<ul><li><strong>双绞线</strong>（由两根采用一定规则并排绞合的、相互绝缘的铜导线组成）<ul><li>非屏蔽双绞线</li><li>屏蔽双绞线（加入了金属屏蔽层，提高抗电磁干扰）</li></ul></li><li>同轴电缆</li><li>光纤（利用光导纤维传递光脉冲进行通信）</li></ul></li><li>非导向性传输介质<ul><li>无线电波（信号向所有方向传播）</li><li>微波（信号向固定方向传播）</li><li>红外线、激光</li></ul></li></ul><hr><h3 id="2-3-编码与调制"><a href="#2-3-编码与调制" class="headerlink" title="2.3 编码与调制"></a>2.3 编码与调制</h3><ul><li>信道上传送的信号<ul><li><strong>基带信号</strong>（直接表达了要传输的信息的信号）</li><li>宽带信号（将基带信号进行调制后形成的频分复用模拟信号）</li></ul></li><li>数字数据编码方式<ul><li>非归零编码</li><li>归零编码</li><li>曼彻斯特编码等</li></ul></li><li>模拟数据的编码：抽样 -&gt; 量化 -&gt; 编码</li><li>数字数据的调制方式<ul><li>调幅</li><li>调频</li><li>调相</li></ul></li><li>模拟数据的调制（为了传输的有效性，可能需要较高的频率）</li></ul><table><thead><tr><th></th><th>数字数据</th><th>模拟数据</th></tr></thead><tbody><tr><td>数字信号</td><td>通过数字放大器编码</td><td>通过PCM编码器编码</td></tr><tr><td>模拟信号</td><td>通过调制器调制</td><td>通过放大器调制器调制</td></tr></tbody></table><hr><h3 id="2-4-通信方式"><a href="#2-4-通信方式" class="headerlink" title="2.4 通信方式"></a>2.4 通信方式</h3><p><strong>通信方式</strong>：</p><ul><li>单工通信<ul><li>只有一个方向的通信，没有反方向的交互。需要一条信道</li></ul></li><li>半双工通信<ul><li>通信的双方都可以发送和接受信息，但任何一方都不能同时发送和接受。需要两条信道</li></ul></li><li>全双工通信<ul><li>通信的双方都可以同时发送和接受信息。需要两条信道</li></ul></li></ul><p><strong>数据传输方式</strong></p><ul><li>串行传输（适合远距离，电缆等）</li><li>并行传输（适合近距离，如计算机内部）</li></ul><hr><ul><li><strong>码元</strong><ul><li>表示一个固定时长的信号波形（数字脉冲）</li><li>k进制码元，表示码元的离散状态有k个（k&gt;=2）</li></ul></li><li><strong>码元传输速率</strong><ul><li>【单位时间内数字通信系统所传输的码元个数】</li><li>单位：<code>Baud</code>（波特）（1Baud = 1码元/s）</li></ul></li><li><strong>信息传输速率</strong><ul><li>【单位时间内数字通信系统所传输的二进制码元个数】</li><li>信息传输速率 = 码元传输速率 * log(k,2)</li><li>单位：<code>b/s</code>（比特/秒）</li></ul></li></ul><p>提高最大数据传输速率，根据奈氏准则，可提高带宽或采用更好的编码技术。<br>提高最大数据传输速率，根据香农定理，可提高带宽或信噪比。</p><hr><h3 id="2-5-奈氏准则与香农定理"><a href="#2-5-奈氏准则与香农定理" class="headerlink" title="2.5 奈氏准则与香农定理"></a>2.5 奈氏准则与香农定理</h3><hr><p><strong>奈氏准则</strong>：在理想低通（无噪声，带宽受限）条件下，为避免码间串扰，极限码元传输速率为 <code>2W Baud</code>，<br>$W$ 是信道带宽，单位是 $Hz$。</p><p>理想低通 信道下的 <strong>极限数据传输速率</strong> = $2W\cdot\log_2k$</p><p><strong>失真</strong>：信号发生扭曲变化。受码元传输速率、信号传输距离、传输媒体等影响。</p><p><strong>码间串扰</strong>：接收端收到的信号波形失去了码元之间的清晰界限的现象</p><p><strong>信道带宽</strong>：信道能通过的最高频率和最低频率之差。</p><blockquote><p>在无噪声的情况下，某通信链路带宽为 3k Hz，采用4个相位，每个相位具有4种振幅的QAM调制技术，则该通信链路上的最大数据传输速率是多少？</p></blockquote><blockquote><p>解：调相和调幅后，信号有16种变化，即16种码元<br>根据奈氏准则，最大数据传输速率 = 2 * 3k * $\log_2{16}$ = 24 kb/s</p></blockquote><hr><p><strong>香农定理</strong>：在带宽受限且有噪声的信道中，为了不产生误差，信道的<strong>极限数据传输速率</strong>为<br>$$W\cdot\log_2(1+S/N)$$</p><p>信噪比 = 信号的平均功率/噪声的平均功率，常记为 <code>S/N</code>，计量单位为分贝dB。<br><code>信噪比（dB）= 10 * log(S/N, 10)</code>，单位为dB时要先转换</p><p>0dB表示输出与输入或两个比较信号一样大。<br>简单地说，dB是一个比值，举个例子，音频行业中，功率大一倍即是大3dB。<code>???</code></p><blockquote><p>电话系统的典型参数是带宽为 3k Hz，信噪比为30dB，则该系统的最大数据传输速率是多少？</p></blockquote><blockquote><p>解：30dB = 10*$\log_{10}S/N$，-&gt; S/N = 1000<br>最大数据传输速率 = 3000 * $\log_2(1+1000)$ ≈ 30kb/s</p></blockquote><h2 id="三、数据链路层"><a href="#三、数据链路层" class="headerlink" title="三、数据链路层"></a>三、数据链路层</h2><p>学习目的：</p><ul><li>理解，数据传输过程中差错产生的原因和性质</li><li>了解，面向字符型数据链路层协议实例-BSC</li><li>掌握<ul><li>误码率的定义与差错控制的方法</li><li>数据链路层的基本概念</li><li>面向比特型数据链路层协议实例-HDLC</li><li>Internet中的数据链路层协议ppp</li></ul></li></ul><hr><p>数据链路层主要功能：</p><ul><li>建立、维护、拆除数据链路</li><li>组帧，同步</li><li>差错控制</li><li>流量控制</li><li>透明传输</li><li>寻址（多点链路）</li></ul><hr><p>数据链路层向网络层提供的服务：</p><ul><li>面向连接确认服务</li><li>无连接确认服务</li><li>无连接不确认服务</li></ul><h3 id="3-1-术语说明"><a href="#3-1-术语说明" class="headerlink" title="3.1 术语说明"></a>3.1 术语说明</h3><p><strong>结点</strong>：主机、路由器</p><p><strong>链路</strong>：网络两个结点之间的物理通道，如双绞线、微波等</p><p><strong>数据链路</strong>：数据链路层实体的连接叫数据链路。多个数据链路复用一条物理连接。（from学校）<br><strong>数据链路</strong>：网络中两个结点之间的逻辑通道，即链路+邮件+软件封装成了数据链路。</p><p><strong>帧</strong>：链路层的协议数据单元，封装网络层数据报。（数据链路层的分组）</p><p><strong>数据链路层</strong>，负责从一个结点通过一条链路向另一个物理链路直接相邻结点传送数据报。</p><p><strong>主要作用</strong>：加强物理层传输原始比特流的功能，将物理层提供的可能出错的物理连接改造成为逻辑上无差错的数据链路，使之对网络层表现为一条无差错的链路。</p><hr><ul><li><strong>封装成帧</strong> 就是在一段数据的前后部分添加首部和尾部，这样就构成了一个帧</li><li>组帧的方法：<ul><li>字符计数法</li><li>字符（节）填充法</li><li>零比特填充法</li><li>违规编码法</li></ul></li></ul><hr><h3 id="3-2-差错控制"><a href="#3-2-差错控制" class="headerlink" title="3.2 差错控制"></a>3.2 差错控制</h3><p>概括来说，传输中的差错都是由于噪声引起的。</p><ul><li>位错（比特位出错）<ul><li>检错编码<ul><li>奇偶校验码（1位冗余的单元，n-1位信息元，奇校验要求1的个数为奇数）</li><li>循环冗余码CRC</li></ul></li><li>纠错编码<ul><li>海明码（发现双比特错，纠正单比特错）</li></ul></li></ul></li><li>帧错（丢失，重复，失序）</li></ul><hr><h3 id="3-2-流量控制与可靠传输机制"><a href="#3-2-流量控制与可靠传输机制" class="headerlink" title="3.2 流量控制与可靠传输机制"></a>3.2 流量控制与可靠传输机制</h3><p>数据链路层的流量控制是点对点的，而传输层的流量控制是端到端的。</p><ul><li>流量控制（限制发送方的发送速率）<ul><li>停止-等待协议</li><li>滑动窗口协议 <code>？？？</code><ul><li>后退N帧协议</li><li>选择重传协议</li></ul></li></ul></li><li>可靠传输（发送方发啥，接收方接啥）</li></ul><p><strong>丢包</strong>：物理线路故障、设备故障、病毒攻击、路由信息错误等，会导致数据包的丢失。</p><p><strong>ACK</strong>：即确认字符，通常ACK信号有自己固定的格式、长度大小，由接收方回复给发送方。</p><p><strong>RTS</strong>（request to send）请求发送，<strong>CTS</strong>（clear to send）允许发送</p><hr><h3 id="3-3-局域网"><a href="#3-3-局域网" class="headerlink" title="3.3 局域网"></a>3.3 局域网</h3><p><strong>局域网</strong>，local area network</p><ul><li>指在某一区域内的多台计算机互联成的计算机组，共享介质的 <strong>广播式</strong> 分组交换网。</li><li>网络拓扑结构<ul><li>星型、环型、树型</li><li>总线型（推荐）</li></ul></li><li>特性：<ul><li>跨距小</li><li>速度快</li><li>误码率低，可靠性高</li><li>广播信道，多点连接</li></ul></li></ul><hr><p><strong>介质访问</strong></p><ul><li>局域网的中心问题是广播媒体的介质访问控制技术</li><li>分类<ul><li>静态分配：每个用户有自己的频段或时隙，不会冲突</li><li>动态分配：信道在用户需要时，才进行分配<ul><li>随机接入：争用，ALOHA技术，CSMA/CD</li><li>受控接入：预约，轮转</li></ul></li></ul></li></ul><hr><h3 id="3-4-HDLC协议"><a href="#3-4-HDLC协议" class="headerlink" title="3.4 HDLC协议"></a>3.4 HDLC协议</h3><p>广域网有两种常用的链路层协议：<code>PPP</code> 协议和 <code>HDLC</code> 协议.</p><p><code>HDLC</code> （high-level data link control）是一种面向比特的网络节点之间同步传输数据的数据链路层协议。</p><ul><li>四个特点<ul><li>对于任何一种比特流都可透明传输</li><li>较高的数据链路传输效率</li><li>所有的帧都有帧校验序列FCS，传输可靠性高</li><li>用同一的帧格式来实现传输</li></ul></li><li>三种类型的站<ul><li>主站，主站发出的帧叫命令帧，负责对链路进行控制</li><li>从站，从站发出的帧叫响应帧，在主站的控制下进行操作</li><li>复合站</li></ul></li><li>链路配置<ul><li>非平衡配置</li><li>平衡配置</li></ul></li><li>数据传输方式<ul><li>正常响应方式</li><li>异步平衡方式</li><li>异步响应方式</li></ul></li><li>帧类型<ul><li>信息帧</li><li>管理帧</li><li>无编号帧</li></ul></li></ul><p>参考资料：<a href="https://blog.csdn.net/wangguchao/article/details/109595845" target="_blank" rel="noopener">https://blog.csdn.net/wangguchao/article/details/109595845</a></p><hr><h3 id="3-5-以太网"><a href="#3-5-以太网" class="headerlink" title="3.5 以太网"></a>3.5 以太网</h3><p><em>MAC</em> <strong>媒体访问控制层</strong>：控制传输及介质的访问，与接入各种媒体有关的问题都放在MAC层，不同LAN使用的介质访问方法不同。</p><ul><li>最小帧长：规定有效帧从DA~FCS，最短64字节</li><li>争用期：发送数据开始后的时间 $2\tau$</li><li>最小包长：72字节，8先导+14头+46字节+4CRC<ul><li>数据不足46字节时，要填充至46字节</li><li>帧长&lt;72字节的帧是冲突碎片</li></ul></li><li>最小包间隔：9.6us</li></ul><p>计算机通过<strong>通信适配器</strong>与外界局域网连接。</p><p>适配器的ROM上有计算机硬件地址MAC地址。</p><p>每个适配器有一个全球唯一的 <code>48</code> 位二进制地址，前24位代表厂家，后24位由厂家指定。</p><p><strong>MAC地址</strong>（Media Access Control Address），称为局域网地址（LAN Address），以太网地址（Ethernet Address）或物理地址（Physical Address），6字节，它是一个用来确认网络设备位置的位址。</p><hr><p><code>IEEE 802.11</code> 是无线局域网的通用标准</p><p><strong>以太网</strong>（Ethernrt）是由Xerox公司创建的并由…联合开发的 <strong>基带总线局域网规范</strong> ，是当今现有局域网采用的最通用的通信协议标准。以太网使用 <code>CSMA/DA</code>（载波监听多路访问及冲突检测）技术。</p><ul><li>以太网的服务 -&gt; 不可靠交付，<code>无连接</code>，<code>不发确认</code>。<ul><li>因为：局域网信道的质量很好，发生差错概率很小</li></ul></li><li>CSMA/CD, <em>Carrier Sense Multiple Access/Collision Detect</em><ul><li>多点接入：总线网络，多台计算机连接在一根总线上</li><li>载波监听：每个站在发送数据前要先检测总线上是否有其它计算机发送数据，避免冲突</li><li>碰撞检测：边发送边监听</li><li>特点：先听先发，边听边发，冲突停止，延迟重发</li></ul></li><li>使用 CSMA/CD 的以太网不能进行全双工通信，只能进行双向交替通信（半双工通信）</li></ul><h3 id="3-6-交换机"><a href="#3-6-交换机" class="headerlink" title="3.6 交换机"></a>3.6 交换机</h3><ul><li>网桥：根据MAC帧的目的地址对帧进行转发和过滤。<ul><li>【连接冲突域】</li><li>【可互连不同物理层、不同MAC子层和不同速率的以太网】</li><li>作用：<ul><li>过滤信息量</li><li>扩大物理范围，增加整个局域网的最大站数</li><li>使用不同的物理层</li><li>互连不同类型的局域网</li><li>提高可靠性</li></ul></li></ul></li><li>交换机：多接口网桥<ul><li>具有自学习能力，学习的是交换表的内容，交换表中存储着MAC地址到端口的映射。</li></ul></li></ul><hr><p><strong>物理层设备：</strong></p><ul><li>中继器<ul><li>对信号进行再生和还原，放大衰减信号。</li><li>两端的网络部分是网段、不是子网。适用于完全相同的两类网络的互连，且两个网段的速率相同。</li><li>在物理层上实现局域网网段互连，用于扩展局域网网段的长度</li></ul></li><li>集线器（多口中继器，Hub）<ul><li>不具备定向传送能力，是一个共享式设备。</li></ul></li></ul><hr><p><strong>网段</strong>：一般指一个计算机网络中使用同一物理层设备（传输介质，中继器，集线器等）能够直接通讯的部分。</p><p><strong>冲突域</strong>：在同一个冲突域中，每个节点都能收到所有被发送的帧。<br><strong>广播域</strong>：网络中能接收任一设备发出的广播帧的所有设备的集合。</p><p>.</p><table><thead><tr><th></th><th>隔离冲突域</th><th>隔离广播域</th></tr></thead><tbody><tr><td>物理层设备（中继器，集线器）</td><td>×</td><td>×</td></tr><tr><td>链路层设备（网桥，交换机）</td><td>√</td><td>×</td></tr><tr><td>网络层设备（路由器）</td><td>√</td><td>√</td></tr></tbody></table><h2 id="四、网络层"><a href="#四、网络层" class="headerlink" title="四、网络层"></a>四、网络层</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><p>网络层提供主机之间的逻辑通信</p><ul><li><strong>主要任务</strong>：把分组从源端传到目的端，为分组交换网上的不同主机提供通信服务。</li><li>传输单位：数据报</li><li><strong>功能</strong>：<ul><li>路由选择与分组转发</li><li>异构网络互联</li><li>拥塞控制<ul><li>开环控制（预先考虑好，静态控制）</li><li><strong>闭环控制</strong>（动态地控制）</li></ul></li></ul></li></ul><hr><h3 id="4-2-数据交换方式⭐"><a href="#4-2-数据交换方式⭐" class="headerlink" title="4.2 数据交换方式⭐"></a>4.2 数据交换方式⭐</h3><ul><li>电路交换<ul><li>特点：通信时延小，有序传输，<strong>独占资源</strong>，必须是面向连接的</li><li>应用：大量数据传输，对时延敏感的应用，语音业务</li></ul></li><li>报文交换（采用存储转发）<ul><li>特点：线路利用率高，速率自适配，结点延迟时间较长</li><li>模型：电报系统</li></ul></li><li>分组交换（采用存储转发）<ul><li>特点：线路分段占用，链路共享，可靠性好，速率自适配，减少结点延迟时间，不存在建链时的呼叫损失</li><li>数据报方式（为网络层提供无连接服务）</li><li>虚电路方式（结合数据报方式和电路交换方式，提供连接服务）</li></ul></li></ul><img src="https://img-blog.csdnimg.cn/20210309192859957.png" style="zoom:70%"><p>一些概念：<br>报文 <code>message</code>：要发送的整块数据。<br>首部 <code>header</code>：必要的控制信息。<br>分组 <code>packet</code>：由报文+首部组成，也叫包。</p><hr><p>ARP协议（完成主机或路由器到MAC地址的映射，解决下一跳走哪的问题），ARP协议自动进行</p><p>ICMP网际控制报文协议，DHCP协议 <code>？？？</code> </p><hr><h3 id="4-3-路由与IP"><a href="#4-3-路由与IP" class="headerlink" title="4.3 路由与IP"></a>4.3 路由与IP</h3><p><strong>路由</strong> <code>routing</code> 是指分组从源到目的地时，决定端到端路径的网络范围的进程。<br>路由工作在网络层的数据包转发设备。路由器通过转发数据包来实现网络互连。</p><ul><li><strong>路由算法</strong><ul><li>静态路由算法</li><li>动态路由算法（路由器间彼此交换信息，按照算法优化出路由表项）<ul><li>距离-向量路由算法</li><li>链路状态路由算法</li></ul></li></ul></li><li><strong>路由选择协议</strong><ul><li>内部网关协议IGP（RIP,OSPF）</li><li>外部网关协议EGP（BGP） <code>？？？</code></li></ul></li></ul><p>路由器可以进行路由选择和分组转发。<br>路由器对目的地址是私有IP地址的数据报一律不进行转发</p><hr><p><strong>IP地址</strong> <code>Internet Protocol Address</code> 是指互联网协议地址，又译为网际协议地址。</p><p>私网IP要接入Internet时，要使用 <code>NAT</code> <strong>网络地址转换</strong><br>安装了NAT软件（含NAT转换表）的路由器叫NAT路由器，它至少有一个有效的外部全球IP地址。</p><p><strong>移动IP技术</strong> 是移动结点（计算机、服务器等）以固定的网络IP地址，实现跨越不同网段的漫游功能，并保证了基于网络IP的网络权限在漫游过程中不发生任何改变。<br>.</p><table><thead><tr><th>私有IP地址类别</th><th>地址范围</th><th>网段个数</th></tr></thead><tbody><tr><td>A类</td><td><code>10.0.0.0 ~ 10.255.255.255</code></td><td>1</td></tr><tr><td>B类</td><td><code>172.16.0.0 ~ 172.31.255.255</code></td><td>16</td></tr><tr><td>C类</td><td><code>192.168.0.0 ~ 192.168.255.255</code></td><td>256</td></tr></tbody></table><h2 id="五、传输层"><a href="#五、传输层" class="headerlink" title="五、传输层"></a>五、传输层</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>只有主机才有的层次。</p><ul><li><strong>主要作用</strong><ul><li>提供进程和进程之间的逻辑通信</li><li>复用和分用</li><li>对收到的报文进行差错检测</li></ul></li><li><strong>两个协议</strong><ul><li><code>TCP</code>（面向连接的传输控制协议）⭐<ul><li>TCP连接管理（三次握手，四次握手）</li><li>TCP可靠传输</li><li>TCP流量控制（滑动窗口）</li><li>TCP拥塞控制</li></ul></li><li><code>UDP</code>（无连接的用户数据报协议）</li></ul></li></ul><hr><h3 id="5-2-TCP协议"><a href="#5-2-TCP协议" class="headerlink" title="5.2 TCP协议"></a>5.2 TCP协议</h3><p><code>TCP</code> 是面向连接的、可靠的、基于字节流的传输层通信协议。</p><div class="admonition info"><p class="admonition-title">1. 建立一个TCP连接需要的信息共识</p><ul><li>Socket：由IP地址和端口号组成</li><li>序列号：用来解决乱序问题</li><li>窗口大小：用来做流量控制</li></ul></div><div class="admonition info"><p class="admonition-title">2. 如何确定一个TCP连接</p><p>TCP四元组（源地址，源端口，目标地址，目标端口）</p></div><div class="admonition info"><p class="admonition-title">3. TCP 和 UDP 区别</p><ul><li><code>连接</code></li><li>TCP是面向连接，传输数据前需建立连接</li><li>UDP无连接，即刻传输数据</li><li><code>服务对象</code></li><li>TCP是一对一的两点服务</li><li>UDP支持一对一、一对多、多对多的交互通信</li><li><code>可靠性</code></li><li>TCP可靠交互数据</li><li>UDP不保证可靠交互数据</li><li><code>TCP拥有拥塞控制和流量控制机制</code></li><li><code>传输方式</code></li><li>TCP是流式传输，没有边界，但保证顺序和可靠</li><li>UDP是一个一个包的发送，是有边界的，但可能会丢包和乱序</li></ul></div><ul><li>TCP应用场景<ul><li>FTP文件传输</li><li>HTTP/HTTPS</li></ul></li><li>UDP应用场景<ul><li>包总量较少的通信，如DNS、SNMP等</li><li>视频，音频等多媒体通信</li><li>广播通信</li></ul></li></ul><hr><h3 id="5-3-端口"><a href="#5-3-端口" class="headerlink" title="5.3 端口"></a>5.3 端口</h3><p><strong>端口</strong>是传输层的SAP（服务接入点），标识主机中的应用进程</p><p>端口号只有本地意义，长度为<code>16bit</code>，能表示65536个不同的端口。</p><ul><li>端口号<ul><li>服务端使用的端口号<ul><li>熟知端口号 <code>0~1024</code></li><li>登记端口号 <code>1024~49151</code></li></ul></li><li>客户端使用的端口号<ul><li><code>49152~65535</code>：仅在客户进程运行时才动态选择。</li></ul></li></ul></li></ul><table><thead><tr><th>协议</th><th>功能用处</th><th>端口号</th><th>Python 模块</th></tr></thead><tbody><tr><td>FTP</td><td>文件传输</td><td>20</td><td><code>ftplib</code> <code>urllib</code></td></tr><tr><td>Telnet</td><td>命令行</td><td>23</td><td><code>telnetlib</code></td></tr><tr><td>SMTP</td><td>发送邮件</td><td>25</td><td><code>smtplib</code></td></tr><tr><td>DNS</td><td></td><td>53</td><td></td></tr><tr><td>TFTP</td><td></td><td>69</td><td></td></tr><tr><td>Gopher</td><td>信息查找</td><td>70</td><td><code>gopherlib</code> <code>urllib</code></td></tr><tr><td>HTTP</td><td>网页访问</td><td>80</td><td><code>httplib</code> <code>urllib</code> <code>xmlrpclib</code></td></tr><tr><td>POP3</td><td>接收邮件</td><td>110</td><td><code>poplib</code></td></tr><tr><td>NNTP</td><td>阅读和张贴新闻文章</td><td>119</td><td><code>nntplib</code></td></tr><tr><td>IMAP4</td><td>获取邮件</td><td>143</td><td><code>imaplib</code></td></tr></tbody></table><p>.</p><p><strong>套接字</strong> Socket =（主机IP地址，端口号）</p><p>在计算机网络中采用发送方和接收方的套接字组合来识别端口，<br>套接字唯一标识了网络中的一个主机和它上面的一个进程。</p><h2 id="六、应用层"><a href="#六、应用层" class="headerlink" title="六、应用层"></a>六、应用层</h2><p>应用层的协议定义了：</p><ul><li>应用进程交换的报文类型，请求还是响应？</li><li>各种报文类型的语法</li><li>字段的语义</li><li>进程何时、如何发送报文，以及对报文进行响应的规则</li></ul><hr><h3 id="6-1-网络应用模型"><a href="#6-1-网络应用模型" class="headerlink" title="6.1 网络应用模型"></a>6.1 网络应用模型</h3><ul><li><code>C/S模型</code><ul><li>服务器（提供计算服务的主机）<ul><li>永久提供服务</li><li>永久性访问地址/域名</li></ul></li><li>客户机（请求计算服务的主机）<ul><li>与服务器通信</li><li>间歇性接入网络</li><li>可使用动态IP地址</li><li>不与其它客户机直接通信</li></ul></li></ul></li><li><code>P2P模型</code><ul><li>每个主机既可以提供服务，也可以请求服务</li><li>任意节点间可以直接通讯</li><li>节点间歇性接入网络</li><li>节点可能改变IP地址</li></ul></li></ul><hr><h3 id="6-2-DNS域名解析系统"><a href="#6-2-DNS域名解析系统" class="headerlink" title="6.2 DNS域名解析系统"></a>6.2 DNS域名解析系统</h3><p>–&gt;通过DNS服务器，将域名解析为IP地址</p><hr><p>如 <code>www.unielu.com</code>，<code>com</code>是顶级域名，<code>unielu</code>是二级域名，<code>www</code>是三级域名</p><ul><li>顶级域名：<ul><li>国家顶级域名 <code>.cn</code> <code>.us</code> </li><li>通用顶级域名 <code>.com</code> <code>.net</code> <code>.org</code> <code>.gov</code></li><li>基础结构域名/反向域名 <code>.arpa</code></li></ul></li><li>二级域名<ul><li>类别域名</li><li>行政区域名</li><li>其它域名（可注册）</li></ul></li><li>三级域名、四级域名</li></ul><hr><p>域名服务器：</p><ul><li>根域名服务器</li><li>顶级域名服务器</li><li>权限域名服务器</li><li>本地域名服务器</li></ul><hr><h3 id="6-3-文件传送协议"><a href="#6-3-文件传送协议" class="headerlink" title="6.3 文件传送协议"></a>6.3 文件传送协议</h3><p><code>FTP</code>（File Transfer Protocol）</p><p>FTP是基于客户/服务器的协议，使用TCP实现可靠传输</p><p>传输模式：文本模式（ASCII模式），二进制模式</p><hr><h3 id="6-4-电子邮件系统"><a href="#6-4-电子邮件系统" class="headerlink" title="6.4 电子邮件系统"></a>6.4 电子邮件系统</h3><p>一般电子邮件系统：<br>用户代理 <code>-&gt;SMTP-&gt;</code> 发送方邮件服务器 <code>-&gt;SMTP-&gt;</code> 接收方邮件服务器 <code>-&gt;POP3-&gt;</code> 用户代理</p><p>基于万维网的电子邮件系统：<br>发送方 <code>-&gt;HTTP-&gt;</code> 邮件服务器1 <code>-&gt;SMTP-&gt;</code> 邮件服务器2 <code>-&gt;HTTP-&gt;</code> 接收方</p><ul><li><code>SMTP</code>（简单邮件传送协议）<ul><li>规定了两个相互通信的SMTP进程之间应如何交换信息</li><li>使用TCP连接，端口号25，C/S模式</li><li>缺点：<ul><li>不能传送可执行文件或其它二进制对象，仅限于传送7位ASCII码</li><li>拒绝超过一定长度的邮件</li></ul></li><li>通用因特网邮件扩充 <code>MIME</code> </li></ul></li><li><code>POP3</code><ul><li>使用TCP连接，端口号110，C/S模式</li></ul></li><li><code>IMAP</code> 网际报文存取协议</li><li><code>MIME</code> 多用途互联网邮件扩展类型，扩展了电子邮件标准</li></ul><hr><h3 id="6-5-万维网和HTTP协议"><a href="#6-5-万维网和HTTP协议" class="headerlink" title="6.5 万维网和HTTP协议"></a>6.5 万维网和HTTP协议</h3><p>万维网（WWW）是一个大规模的、联机式的信息储藏所，是无数个网络站点和网页的集合。</p><p>用户通过 URL形成的超链接 获取资源，这些资源通过超文本传输协议（HTTP）传送给使用者。</p><p>万维网使用超文本标记语言HTML</p><ul><li><code>URL</code>（统一资源定位符）<ul><li>对资源进行唯一标识</li><li>一般形式：&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;:&lt;路径&gt;<ul><li>协议：http、ftp等</li><li>主机：域名、IP地址等</li></ul></li></ul></li></ul><p>关于HTTP的理解（2020.05）：<a href="http://www.unielu.com/posts/2174.html">www.unielu.com/posts/2174.html</a></p><h2 id="other"><a href="#other" class="headerlink" title="other"></a><em>other</em></h2><p><strong>参考资料</strong>：</p><ul><li>2019-王道考研-计算机网络，90%</li><li>学校课程，66%<ul><li>感觉到了，老师用心想教我们一些东西</li></ul></li><li>《计算机网络》谢希仁，第七版</li></ul><hr><p><strong>推荐阅读</strong>：</p><ul><li><a href="https://blog.csdn.net/qzcsu/article/details/72861891" target="_blank" rel="noopener">两张动图-彻底明白TCP的三次握手与四次挥手</a></li><li><a href="https://baijiahao.baidu.com/s?id=1663133611194990028" target="_blank" rel="noopener">35 张图解被问千百遍的 TCP 三次握手和四次挥手面试题</a></li><li><a href="https://blog.csdn.net/paincupid/article/details/79726795" target="_blank" rel="noopener">TCP报文格式详解</a></li><li><a href="https://blog.csdn.net/shinezhang86/article/details/47145907" target="_blank" rel="noopener">IP报文格式学习笔记</a></li><li><a href="https://blog.csdn.net/u011228842/article/details/91648649" target="_blank" rel="noopener">公网IP与私网IP</a></li><li><a href="https://blog.csdn.net/qq_39346534/article/details/106373627" target="_blank" rel="noopener">移动IP的工作原理</a></li><li><a href="https://blog.csdn.net/santtde/article/details/86765506" target="_blank" rel="noopener">路由器工作原理</a></li><li><a href="https://www.cnblogs.com/l199616j/p/11195667.html" target="_blank" rel="noopener">cookie和session的详解与区别</a></li></ul><hr><p><strong>一些问题</strong>：</p><ol><li> 在分层的计算机网络体系结构中，对等层之间传送的数据单位称为（ <code>PDU</code> ）。</li><li> 互联网现在采用的是存储转发的分组交换技术，以及三层ISP结构。</li><li> <code>internet</code>（互联网或互连网）是一个通用名词，它泛指由多个计算机网络互连而成的网络。<br><code>Internet</code>（因特网）则是一个专用名词，它指当前全球最大的、开放的、由众多网络相互连接而成的特定计算机网络，它采用 TCP/IP 协议族作为通信的规则，且其前身是美国的 ARPANET。<br>连接在因特网上的计算机都称为主机(<code>host</code>)。</li></ol><p><code>实验报告1</code>：…<br><code>实验报告2</code>：当发送速率大于传输速率时，分组产生排队时延，暂存队列满时，会产生丢包。</p><hr><p>学时：56h理论+12h实验（6个）<br>分数：期末（70%）+平时（30%）</p>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次决策树作业</title>
      <link href="posts/c1cc.html"/>
      <url>posts/c1cc.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-作业要求"><a href="#1-作业要求" class="headerlink" title="1. 作业要求"></a>1. 作业要求</h3><p>（1）实现ID3算法构建决策树模型。属性分类能力指标请使用信息增益比率（Information Gain Ratio）；可以不实现剪枝操作。<br>（2）使用泰坦尼克号生存预测数据集进行模型训练和预测，并学习pandas模块</p><hr><h3 id="2-关于决策树"><a href="#2-关于决策树" class="headerlink" title="2. 关于决策树"></a>2. 关于决策树</h3><p>决策树（decision tree）时一种基本的分类和回归方法。<br>决策树学习通常包含三个步骤：特征选择、决策树生成和决策树修剪。</p><p>（1）决策树的生成，往往通过计算信息增益或其它指标，从根节点开始，递归地生成树。<br>这相当于用信息增益或其他准则不断地选取局部最优的特征，或将训练集分割为能够基本正确分类的子集。</p><p>（2）决策树的剪枝。由于生成的决策树存在过拟合问题，需要对它进行剪枝，以简化学到的决策树。</p><hr><h3 id="3-关于信息增益比"><a href="#3-关于信息增益比" class="headerlink" title="3. 关于信息增益比"></a>3. 关于信息增益比</h3><p>（1）样本集合$D$对特征$A$的信息增益</p><p>$$g(D, A)=H(D)-H(D|A)$$</p><p>$$H(D)=-\sum_{k=1}^{K}\frac{|C_{k}|}{|D|}log_{2}\frac{|C_{k}|}{|D|}$$</p><p>$$H(D | A)=\sum_{i=1}^{n} \frac{|D_{i}|}{|D|} H(D_{i})$$</p><p>其中，$H(D)$是数据集$D$的熵，$H(D_i)$是数据集$D_i$的熵，$H(D|A)$是数据集$D$对特征$A$的条件熵。    $D_i$是$D$中特征$A$取第$i$个值的样本子集，$C_k$是$D$中属于第$k$类的样本子集。$n$是特征$A$取 值的个数，$K$是类的个数。</p><p>（2）特征 $A$ 对训练数据集 $D$ 的信息增益比：</p><p>$$g_R(D, A)=\frac{g(D, A)}{H_A(D)}$$</p><p>其中，$g(D,A)$是信息增益，$H_A(D)$是数据数据集 $D$ 关于特征 $A$ 的值的熵。</p><p>$$H_A(D)=-\sum_{i=1}^n\frac{|D_i|}{D}log_2\frac{|D_i|}{D}$$</p><p>（3）一个计算信息增益的实例</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 最后一列是数据集D的标签</span>datasets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'一般'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'一般'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'一般'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'一般'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'非常好'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'非常好'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'非常好'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'非常好'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'一般'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>首先计算经验熵 $H(D)$<br>$$H(D)=-\frac{9}{15}log_2\frac{9}{15}-\frac{6}{15}log_2\frac{6}{15}=0.971$$</p></li><li><p>然后计算各特征对数据集D的信息增益<br>$$g(D,A_1)=H(D)-[\frac{5}{15}H(D_1)+\frac{5}{15}H(D_2)+\frac{5}{15}H(D_3)]=0.083$$<br>$D_1$, $D_2$, $D_3$ 分别表示$A_1$（年龄）取定值时，数据集 D 的子集。</p><p>$H(D_1)$计算方法同第一步。</p><p>$$g(D,A_2)=0.324, g(D,A_3)=0.420, g(D,A_4)=0.363$$</p></li><li><p>根据信息增益，将$A_3$作为最优特征</p></li></ol><hr><h3 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h3><h4 id="4-1-数据处理"><a href="#4-1-数据处理" class="headerlink" title="4.1 数据处理"></a>4.1 数据处理</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">def</span> <span class="token function">process_data</span><span class="token punctuation">(</span>train<span class="token punctuation">,</span> test<span class="token punctuation">)</span><span class="token punctuation">:</span>    train <span class="token operator">=</span> train<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'PassengerId'</span><span class="token punctuation">,</span><span class="token string">'Name'</span><span class="token punctuation">,</span><span class="token string">'Ticket'</span><span class="token punctuation">,</span> <span class="token string">'Fare'</span><span class="token punctuation">,</span> <span class="token string">'Cabin'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>train<span class="token punctuation">.</span>columns<span class="token punctuation">)</span>    mean_age <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span>    train<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>mean_age<span class="token punctuation">)</span>    train<span class="token punctuation">[</span><span class="token string">"Embarked"</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">"Embarked"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">'S'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">age_fun</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">"children"</span>        <span class="token keyword">elif</span> x <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">"teenager"</span>        <span class="token keyword">elif</span> x <span class="token operator">&lt;</span> <span class="token number">65</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">"audlt"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">"old"</span>    <span class="token keyword">def</span> <span class="token function">sib_fun</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">"no"</span>        <span class="token keyword">elif</span> x <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">"few"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">"many"</span>    train<span class="token punctuation">[</span><span class="token string">"Age"</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">"Age"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>age_fun<span class="token punctuation">)</span>    train<span class="token punctuation">[</span><span class="token string">"SibSp"</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">"SibSp"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>sib_fun<span class="token punctuation">)</span>    train<span class="token punctuation">[</span><span class="token string">"Parch"</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">"Parch"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>sib_fun<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:*^50}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">" train "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> feature <span class="token keyword">in</span> train<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>feature<span class="token punctuation">,</span> <span class="token string">": "</span><span class="token punctuation">,</span>  train<span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    test <span class="token operator">=</span> test<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'PassengerId'</span><span class="token punctuation">,</span><span class="token string">'Name'</span><span class="token punctuation">,</span><span class="token string">'Ticket'</span><span class="token punctuation">,</span> <span class="token string">'Fare'</span><span class="token punctuation">,</span> <span class="token string">'Cabin'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    test<span class="token punctuation">[</span><span class="token string">"Age"</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">"Age"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>mean_age<span class="token punctuation">)</span>    test<span class="token punctuation">[</span><span class="token string">"Embarked"</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">"Embarked"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">'S'</span><span class="token punctuation">)</span>    test<span class="token punctuation">[</span><span class="token string">"Age"</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">"Age"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>age_fun<span class="token punctuation">)</span>    test<span class="token punctuation">[</span><span class="token string">"SibSp"</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">"SibSp"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>sib_fun<span class="token punctuation">)</span>    test<span class="token punctuation">[</span><span class="token string">"Parch"</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">"Parch"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>sib_fun<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:*^50}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">" test "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> feature <span class="token keyword">in</span> test<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>feature<span class="token punctuation">,</span> <span class="token string">": "</span><span class="token punctuation">,</span>  test<span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> train<span class="token punctuation">,</span> test<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    train_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"train.csv"</span><span class="token punctuation">)</span>    test_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"test.csv"</span><span class="token punctuation">)</span>    train_data<span class="token punctuation">,</span> test_data <span class="token operator">=</span> process_data<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span> test_data<span class="token punctuation">)</span>train_data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-计算熵"><a href="#4-2-计算熵" class="headerlink" title="4.2 计算熵"></a>4.2 计算熵</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter<span class="token keyword">from</span> math <span class="token keyword">import</span> log<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">calc_ent</span><span class="token punctuation">(</span>datasets<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>datasets<span class="token punctuation">)</span>    d <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">[</span>datasets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 计数器,参考collections模块</span>    <span class="token keyword">return</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">(</span>p<span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token operator">*</span>log<span class="token punctuation">(</span>p<span class="token operator">/</span>n<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">for</span> p <span class="token keyword">in</span> d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>calc_ent<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_data<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 找不到train_data的话，将第一步的train_data放入全局</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-计算信息增益比率"><a href="#4-3-计算信息增益比率" class="headerlink" title="4.3 计算信息增益比率"></a>4.3 计算信息增益比率</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter<span class="token punctuation">,</span> defaultdict<span class="token keyword">from</span> math <span class="token keyword">import</span> log<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true">#计算熵</span><span class="token keyword">def</span> <span class="token function">calc_ent</span><span class="token punctuation">(</span>datasets<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>datasets<span class="token punctuation">)</span>    d <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">[</span>datasets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">(</span>p<span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token operator">*</span>log<span class="token punctuation">(</span>p<span class="token operator">/</span>n<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">for</span> p <span class="token keyword">in</span> d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#计算经验条件熵</span><span class="token keyword">def</span> <span class="token function">cond_ent</span><span class="token punctuation">(</span>datasets<span class="token punctuation">,</span> feature_col<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>datasets<span class="token punctuation">)</span>    d <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        feature <span class="token operator">=</span> datasets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>feature_col<span class="token punctuation">]</span>        d<span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>datasets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token operator">*</span>calc_ent<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token keyword">for</span> p <span class="token keyword">in</span> d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#计算数据集 D 关于特征 A 的熵</span><span class="token keyword">def</span> <span class="token function">calc_had</span><span class="token punctuation">(</span>datasets<span class="token punctuation">,</span>feature_col<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>datasets<span class="token punctuation">)</span>    d <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">[</span>datasets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>feature_col<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>feature_col<span class="token punctuation">,</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">(</span>p<span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token operator">*</span>log<span class="token punctuation">(</span>p<span class="token operator">/</span>n<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">for</span> p <span class="token keyword">in</span> d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""def info_gain(datasets, feature_col):    return calc_ent(datasets) - cond_ent(datasets, feature_col)#按书上例子测试，这里没问题"""</span><span class="token comment" spellcheck="true"># 信息增益比率</span><span class="token keyword">def</span> <span class="token function">info_gain_ratio</span><span class="token punctuation">(</span>datasets<span class="token punctuation">,</span> feature_col<span class="token punctuation">)</span><span class="token punctuation">:</span>    ent <span class="token operator">=</span> calc_ent<span class="token punctuation">(</span>datasets<span class="token punctuation">)</span>    ce <span class="token operator">=</span> cond_ent<span class="token punctuation">(</span>datasets<span class="token punctuation">,</span> feature_col<span class="token punctuation">)</span>    had <span class="token operator">=</span> calc_had<span class="token punctuation">(</span>datasets<span class="token punctuation">,</span> feature_col<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>ent<span class="token operator">-</span>ce<span class="token punctuation">)</span><span class="token operator">/</span>had<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>info_gain_ratio<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_data<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#默认第 0 列为label, 1-6为属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-建树"><a href="#4-4-建树" class="headerlink" title="4.4 建树"></a>4.4 建树</h4><p>造轮子好麻烦…</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 没有按照老师的来</span><span class="token comment" spellcheck="true"># 建好之后如果self.can_use == [] 表示出结果了，结果的 0-1 放在了 self.datasets中</span><span class="token comment" spellcheck="true">#写递归或迭代程序时，主要要注意出口</span><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> datasets<span class="token punctuation">,</span> can_use<span class="token punctuation">,</span> feature <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>datasets <span class="token operator">=</span> datasets        self<span class="token punctuation">.</span>can_use <span class="token operator">=</span> can_use        self<span class="token punctuation">.</span>feature <span class="token operator">=</span> feature        self<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DTree</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> datasets<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>datasets<span class="token punctuation">)</span>        d <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">[</span>datasets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> len<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">compu</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> datasets<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>        ans <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        feature <span class="token operator">=</span> cols<span class="token punctuation">[</span>col<span class="token punctuation">]</span>        <span class="token keyword">for</span> val <span class="token keyword">in</span> dic<span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">:</span>            new_data <span class="token operator">=</span> <span class="token punctuation">[</span>row <span class="token keyword">for</span> row <span class="token keyword">in</span> datasets <span class="token keyword">if</span> row<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">==</span>val<span class="token punctuation">]</span>            n <span class="token operator">=</span> len<span class="token punctuation">(</span>new_data<span class="token punctuation">)</span>            d <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">[</span>new_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>=</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                ans<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">#判定为存活</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                 ans<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans    <span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>root<span class="token punctuation">.</span>can_use<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            col <span class="token operator">=</span> root<span class="token punctuation">.</span>can_use<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            root<span class="token punctuation">.</span>feature <span class="token operator">=</span> cols<span class="token punctuation">[</span>col<span class="token punctuation">]</span>            root<span class="token punctuation">.</span>children <span class="token operator">=</span> self<span class="token punctuation">.</span>compu<span class="token punctuation">(</span>root<span class="token punctuation">.</span>datasets<span class="token punctuation">,</span> col<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#print("--------------",root.can_use)</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>check<span class="token punctuation">(</span>root<span class="token punctuation">.</span>datasets<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#全部为正例或反例</span>                ans <span class="token operator">=</span> root<span class="token punctuation">.</span>datasets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                root<span class="token punctuation">.</span>datasets <span class="token operator">=</span> ans                root<span class="token punctuation">.</span>can_use <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token keyword">return</span>             idx<span class="token punctuation">,</span> max_ratio <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> root<span class="token punctuation">.</span>can_use<span class="token punctuation">:</span>                ratio <span class="token operator">=</span> info_gain_ratio<span class="token punctuation">(</span>root<span class="token punctuation">.</span>datasets<span class="token punctuation">,</span> i<span class="token punctuation">)</span>                <span class="token keyword">if</span> ratio <span class="token operator">>=</span> max_ratio<span class="token punctuation">:</span>                    idx <span class="token operator">=</span> i                    max_ratio <span class="token operator">=</span>ratio            root<span class="token punctuation">.</span>feature <span class="token operator">=</span> cols<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">#print("!!",root.feature)</span>            <span class="token comment" spellcheck="true">#print(root.can_use,root.feature, idx)</span>            <span class="token keyword">for</span> feature_val <span class="token keyword">in</span> dic<span class="token punctuation">[</span>root<span class="token punctuation">.</span>feature<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#print(feature_val)</span>                new_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>row <span class="token keyword">for</span> row <span class="token keyword">in</span> root<span class="token punctuation">.</span>datasets <span class="token keyword">if</span> row<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">==</span>feature_val<span class="token punctuation">]</span><span class="token punctuation">)</span>                root<span class="token punctuation">.</span>children<span class="token punctuation">[</span>feature_val<span class="token punctuation">]</span> <span class="token operator">=</span> Node<span class="token punctuation">(</span>new_data<span class="token punctuation">,</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> root<span class="token punctuation">.</span>can_use <span class="token keyword">if</span> i<span class="token operator">!=</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>train<span class="token punctuation">(</span>root<span class="token punctuation">.</span>children<span class="token punctuation">[</span>feature_val<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> root        <span class="token keyword">while</span> p<span class="token punctuation">.</span>can_use <span class="token operator">!=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#print(p.feature)</span>            <span class="token comment" spellcheck="true">#print(re_cols[p.feature])</span>            <span class="token comment" spellcheck="true">#print(tmp[re_cols[p.feature]])</span>            x <span class="token operator">=</span> tmp<span class="token punctuation">[</span>re_cols<span class="token punctuation">[</span>p<span class="token punctuation">.</span>feature<span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> x <span class="token operator">not</span> <span class="token keyword">in</span> p<span class="token punctuation">.</span>children<span class="token punctuation">:</span>                <span class="token keyword">return</span> p<span class="token punctuation">.</span>children            p <span class="token operator">=</span> p<span class="token punctuation">.</span>children<span class="token punctuation">[</span>x<span class="token punctuation">]</span>        <span class="token keyword">return</span> p<span class="token punctuation">.</span>datasets<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-完整代码"><a href="#4-5-完整代码" class="headerlink" title="4.5 完整代码"></a>4.5 完整代码</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter<span class="token punctuation">,</span> defaultdict<span class="token keyword">from</span> math <span class="token keyword">import</span> log<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Survived'</span><span class="token punctuation">,</span> <span class="token string">'Pclass'</span><span class="token punctuation">,</span> <span class="token string">'Sex'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">,</span> <span class="token string">'SibSp'</span><span class="token punctuation">,</span> <span class="token string">'Parch'</span><span class="token punctuation">,</span> <span class="token string">'Embarked'</span><span class="token punctuation">]</span>re_cols <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Sex'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Pclass'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'SibSp'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Parch'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'Embarked'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">process_data</span><span class="token punctuation">(</span>train<span class="token punctuation">,</span> test<span class="token punctuation">)</span><span class="token punctuation">:</span>    train <span class="token operator">=</span> train<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'PassengerId'</span><span class="token punctuation">,</span><span class="token string">'Name'</span><span class="token punctuation">,</span><span class="token string">'Ticket'</span><span class="token punctuation">,</span> <span class="token string">'Fare'</span><span class="token punctuation">,</span> <span class="token string">'Cabin'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>train<span class="token punctuation">.</span>columns<span class="token punctuation">)</span>    mean_age <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span>    train<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>mean_age<span class="token punctuation">)</span>    train<span class="token punctuation">[</span><span class="token string">"Embarked"</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">"Embarked"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">'S'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">age_fun</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">"children"</span>        <span class="token keyword">elif</span> x <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">"teenager"</span>        <span class="token keyword">elif</span> x <span class="token operator">&lt;</span> <span class="token number">65</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">"audlt"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">"old"</span>    <span class="token keyword">def</span> <span class="token function">sib_fun</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">"no"</span>        <span class="token keyword">elif</span> x <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">"few"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">"many"</span>    train<span class="token punctuation">[</span><span class="token string">"Age"</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">"Age"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>age_fun<span class="token punctuation">)</span>    train<span class="token punctuation">[</span><span class="token string">"SibSp"</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">"SibSp"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>sib_fun<span class="token punctuation">)</span>    train<span class="token punctuation">[</span><span class="token string">"Parch"</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">"Parch"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>sib_fun<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:*^50}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">" train "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> feature <span class="token keyword">in</span> train<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>        dic<span class="token punctuation">[</span>feature<span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>feature<span class="token punctuation">,</span> <span class="token string">": "</span><span class="token punctuation">,</span>  train<span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    test <span class="token operator">=</span> test<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'PassengerId'</span><span class="token punctuation">,</span><span class="token string">'Name'</span><span class="token punctuation">,</span><span class="token string">'Ticket'</span><span class="token punctuation">,</span> <span class="token string">'Fare'</span><span class="token punctuation">,</span> <span class="token string">'Cabin'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    test<span class="token punctuation">[</span><span class="token string">"Age"</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">"Age"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>mean_age<span class="token punctuation">)</span>    test<span class="token punctuation">[</span><span class="token string">"Embarked"</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">"Embarked"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">'S'</span><span class="token punctuation">)</span>    test<span class="token punctuation">[</span><span class="token string">"Age"</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">"Age"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>age_fun<span class="token punctuation">)</span>    test<span class="token punctuation">[</span><span class="token string">"SibSp"</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">"SibSp"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>sib_fun<span class="token punctuation">)</span>    test<span class="token punctuation">[</span><span class="token string">"Parch"</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">"Parch"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>sib_fun<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:*^50}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">" test "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> feature <span class="token keyword">in</span> test<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>feature<span class="token punctuation">,</span> <span class="token string">": "</span><span class="token punctuation">,</span>  test<span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> train<span class="token punctuation">,</span> test<span class="token comment" spellcheck="true">#计算熵</span><span class="token keyword">def</span> <span class="token function">calc_ent</span><span class="token punctuation">(</span>datasets<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>datasets<span class="token punctuation">)</span>    d <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">[</span>datasets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">(</span>p<span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token operator">*</span>log<span class="token punctuation">(</span>p<span class="token operator">/</span>n<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">for</span> p <span class="token keyword">in</span> d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#计算经验条件熵</span><span class="token keyword">def</span> <span class="token function">cond_ent</span><span class="token punctuation">(</span>datasets<span class="token punctuation">,</span> feature_col<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>datasets<span class="token punctuation">)</span>    d <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        feature <span class="token operator">=</span> datasets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>feature_col<span class="token punctuation">]</span>        d<span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>datasets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token operator">*</span>calc_ent<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token keyword">for</span> p <span class="token keyword">in</span> d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#计算数据集 D 关于特征 A 的熵</span><span class="token keyword">def</span> <span class="token function">calc_had</span><span class="token punctuation">(</span>datasets<span class="token punctuation">,</span>feature_col<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>datasets<span class="token punctuation">)</span>    d <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">[</span>datasets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>feature_col<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(feature_col,d.items())</span>    <span class="token keyword">return</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">(</span>p<span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token operator">*</span>log<span class="token punctuation">(</span>p<span class="token operator">/</span>n<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">for</span> p <span class="token keyword">in</span> d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""def info_gain(datasets, feature_col):    return calc_ent(datasets) - cond_ent(datasets, feature_col)"""</span><span class="token comment" spellcheck="true"># 信息增益比率</span><span class="token keyword">def</span> <span class="token function">info_gain_ratio</span><span class="token punctuation">(</span>datasets<span class="token punctuation">,</span> feature_col<span class="token punctuation">)</span><span class="token punctuation">:</span>    ent <span class="token operator">=</span> calc_ent<span class="token punctuation">(</span>datasets<span class="token punctuation">)</span>    ce <span class="token operator">=</span> cond_ent<span class="token punctuation">(</span>datasets<span class="token punctuation">,</span> feature_col<span class="token punctuation">)</span>    had <span class="token operator">=</span> calc_had<span class="token punctuation">(</span>datasets<span class="token punctuation">,</span> feature_col<span class="token punctuation">)</span>    <span class="token keyword">if</span> had<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>ent<span class="token operator">-</span>ce<span class="token punctuation">)</span><span class="token operator">/</span>had<span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> datasets<span class="token punctuation">,</span> can_use<span class="token punctuation">,</span> feature <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>datasets <span class="token operator">=</span> datasets        self<span class="token punctuation">.</span>can_use <span class="token operator">=</span> can_use        self<span class="token punctuation">.</span>feature <span class="token operator">=</span> feature        self<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DTree</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> datasets<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>datasets<span class="token punctuation">)</span>        d <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">[</span>datasets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> len<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">compu</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> datasets<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>        ans <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        feature <span class="token operator">=</span> cols<span class="token punctuation">[</span>col<span class="token punctuation">]</span>        <span class="token keyword">for</span> val <span class="token keyword">in</span> dic<span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">:</span>            new_data <span class="token operator">=</span> <span class="token punctuation">[</span>row <span class="token keyword">for</span> row <span class="token keyword">in</span> datasets <span class="token keyword">if</span> row<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">==</span>val<span class="token punctuation">]</span>            n <span class="token operator">=</span> len<span class="token punctuation">(</span>new_data<span class="token punctuation">)</span>            d <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">[</span>new_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>=</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                ans<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">#判定为存活</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                 ans<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans    <span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>root<span class="token punctuation">.</span>can_use<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            col <span class="token operator">=</span> root<span class="token punctuation">.</span>can_use<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            root<span class="token punctuation">.</span>feature <span class="token operator">=</span> cols<span class="token punctuation">[</span>col<span class="token punctuation">]</span>            root<span class="token punctuation">.</span>children <span class="token operator">=</span> self<span class="token punctuation">.</span>compu<span class="token punctuation">(</span>root<span class="token punctuation">.</span>datasets<span class="token punctuation">,</span> col<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#print("--------------",root.can_use)</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>check<span class="token punctuation">(</span>root<span class="token punctuation">.</span>datasets<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#全部为正例或反例</span>                ans <span class="token operator">=</span> root<span class="token punctuation">.</span>datasets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                root<span class="token punctuation">.</span>datasets <span class="token operator">=</span> ans                root<span class="token punctuation">.</span>can_use <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token keyword">return</span>             idx<span class="token punctuation">,</span> max_ratio <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> root<span class="token punctuation">.</span>can_use<span class="token punctuation">:</span>                ratio <span class="token operator">=</span> info_gain_ratio<span class="token punctuation">(</span>root<span class="token punctuation">.</span>datasets<span class="token punctuation">,</span> i<span class="token punctuation">)</span>                <span class="token keyword">if</span> ratio <span class="token operator">>=</span> max_ratio<span class="token punctuation">:</span>                    idx <span class="token operator">=</span> i                    max_ratio <span class="token operator">=</span>ratio            root<span class="token punctuation">.</span>feature <span class="token operator">=</span> cols<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">#print("!!",root.feature)</span>            <span class="token comment" spellcheck="true">#print(root.can_use,root.feature, idx)</span>            <span class="token keyword">for</span> feature_val <span class="token keyword">in</span> dic<span class="token punctuation">[</span>root<span class="token punctuation">.</span>feature<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#print(feature_val)</span>                new_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>row <span class="token keyword">for</span> row <span class="token keyword">in</span> root<span class="token punctuation">.</span>datasets <span class="token keyword">if</span> row<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">==</span>feature_val<span class="token punctuation">]</span><span class="token punctuation">)</span>                root<span class="token punctuation">.</span>children<span class="token punctuation">[</span>feature_val<span class="token punctuation">]</span> <span class="token operator">=</span> Node<span class="token punctuation">(</span>new_data<span class="token punctuation">,</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> root<span class="token punctuation">.</span>can_use <span class="token keyword">if</span> i<span class="token operator">!=</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>train<span class="token punctuation">(</span>root<span class="token punctuation">.</span>children<span class="token punctuation">[</span>feature_val<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> root        <span class="token keyword">while</span> p<span class="token punctuation">.</span>can_use <span class="token operator">!=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#print(p.feature)</span>            <span class="token comment" spellcheck="true">#print(re_cols[p.feature])</span>            <span class="token comment" spellcheck="true">#print(tmp[re_cols[p.feature]])</span>            x <span class="token operator">=</span> tmp<span class="token punctuation">[</span>re_cols<span class="token punctuation">[</span>p<span class="token punctuation">.</span>feature<span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> x <span class="token operator">not</span> <span class="token keyword">in</span> p<span class="token punctuation">.</span>children<span class="token punctuation">:</span>                <span class="token keyword">return</span> p<span class="token punctuation">.</span>children            p <span class="token operator">=</span> p<span class="token punctuation">.</span>children<span class="token punctuation">[</span>x<span class="token punctuation">]</span>        <span class="token keyword">return</span> p<span class="token punctuation">.</span>datasets<span class="token comment" spellcheck="true">#if __name__ == "__main__":</span>train_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"train.csv"</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"test.csv"</span><span class="token punctuation">)</span>train_data<span class="token punctuation">,</span> test_data <span class="token operator">=</span> process_data<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span> test_data<span class="token punctuation">)</span>train_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_data<span class="token punctuation">)</span>root <span class="token operator">=</span> Node<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:*^50}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">" predict the test "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dt <span class="token operator">=</span> DTree<span class="token punctuation">(</span><span class="token punctuation">)</span>dt<span class="token punctuation">.</span>train<span class="token punctuation">(</span>root<span class="token punctuation">)</span>test_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>test_data<span class="token punctuation">)</span><span class="token keyword">for</span> data <span class="token keyword">in</span> test_data<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> dt<span class="token punctuation">.</span>test<span class="token punctuation">(</span>root<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-6-优化"><a href="#4-6-优化" class="headerlink" title="4.6 优化"></a>4.6 优化</h4><p>为了防止过拟合（决策树的分支过多，导致实际准确率下降），可设置一个阈值使建树过程提早结束，更改<code>check</code>函数即可。</p><h3 id="5-决策树的可视化"><a href="#5-决策树的可视化" class="headerlink" title="5. 决策树的可视化"></a>5. 决策树的可视化</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#测试代码</span><span class="token comment" spellcheck="true">#不适用于以上的树的结构</span><span class="token keyword">from</span> graphviz <span class="token keyword">import</span> Digraph<span class="token keyword">def</span> <span class="token function">plot_model</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    g <span class="token operator">=</span> Digraph<span class="token punctuation">(</span><span class="token string">"G"</span><span class="token punctuation">,</span> filename<span class="token operator">=</span>name<span class="token punctuation">,</span> format<span class="token operator">=</span><span class="token string">'png'</span><span class="token punctuation">,</span> strict<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    first_label <span class="token operator">=</span> list<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    g<span class="token punctuation">.</span>node<span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">,</span> first_label<span class="token punctuation">)</span>    _sub_plot<span class="token punctuation">(</span>g<span class="token punctuation">,</span> tree<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span>    g<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token punctuation">)</span>root <span class="token operator">=</span> <span class="token string">"0"</span><span class="token keyword">def</span> <span class="token function">_sub_plot</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> tree<span class="token punctuation">,</span> inc<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> root    first_label <span class="token operator">=</span> list<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    ts <span class="token operator">=</span> tree<span class="token punctuation">[</span>first_label<span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> ts<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>tree<span class="token punctuation">[</span>first_label<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dict<span class="token punctuation">)</span><span class="token punctuation">:</span>            root <span class="token operator">=</span> str<span class="token punctuation">(</span>int<span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            g<span class="token punctuation">.</span>node<span class="token punctuation">(</span>root<span class="token punctuation">,</span> list<span class="token punctuation">(</span>tree<span class="token punctuation">[</span>first_label<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            g<span class="token punctuation">.</span>edge<span class="token punctuation">(</span>inc<span class="token punctuation">,</span> root<span class="token punctuation">,</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            _sub_plot<span class="token punctuation">(</span>g<span class="token punctuation">,</span> tree<span class="token punctuation">[</span>first_label<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            root <span class="token operator">=</span> str<span class="token punctuation">(</span>int<span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            g<span class="token punctuation">.</span>node<span class="token punctuation">(</span>root<span class="token punctuation">,</span> tree<span class="token punctuation">[</span>first_label<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            g<span class="token punctuation">.</span>edge<span class="token punctuation">(</span>inc<span class="token punctuation">,</span> root<span class="token punctuation">,</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>d1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"no surfacing"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"flippers"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"yes"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>d2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'tearRate'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'reduced'</span><span class="token punctuation">:</span> <span class="token string">'no lenses'</span><span class="token punctuation">,</span> <span class="token string">'normal'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'astigmatic'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'yes'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'prescript'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'myope'</span><span class="token punctuation">:</span> <span class="token string">'hard'</span><span class="token punctuation">,</span> <span class="token string">'hyper'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'young'</span><span class="token punctuation">:</span> <span class="token string">'hard'</span><span class="token punctuation">,</span> <span class="token string">'presbyopic'</span><span class="token punctuation">:</span> <span class="token string">'no lenses'</span><span class="token punctuation">,</span> <span class="token string">'pre'</span><span class="token punctuation">:</span> <span class="token string">'no lenses'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'no'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'young'</span><span class="token punctuation">:</span> <span class="token string">'soft'</span><span class="token punctuation">,</span> <span class="token string">'presbyopic'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'prescript'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'myope'</span><span class="token punctuation">:</span> <span class="token string">'no lenses'</span><span class="token punctuation">,</span>                      <span class="token string">'hyper'</span><span class="token punctuation">:</span> <span class="token string">'soft'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                   <span class="token string">'pre'</span><span class="token punctuation">:</span> <span class="token string">'soft'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>plot_model<span class="token punctuation">(</span>d1<span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span>plot_model<span class="token punctuation">(</span>d2<span class="token punctuation">,</span> <span class="token string">"hello2"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码会报错：<code>GraphViz&#39;s executables not found</code></p><p>然后去安装软件，<a href="http://www.graphviz.org/download/" target="_blank" rel="noopener">http://www.graphviz.org/download/</a></p><p>安装时勾选：加入到所有用户的系统路径。</p><p>重新打开 <em>jupyter</em> 并运行测试代码<br>成功后，会用图片管理器打开决策树的可视化图。<a href="https://img-blog.csdnimg.cn/20210417105544460.png" target="_blank" rel="noopener">如图</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 2021-04-24更新，可视化代码，适用，将其运行即可</span><span class="token keyword">from</span> graphviz <span class="token keyword">import</span> Digraph<span class="token keyword">def</span> <span class="token function">plot_model</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    g <span class="token operator">=</span> Digraph<span class="token punctuation">(</span><span class="token string">"G"</span><span class="token punctuation">,</span> filename<span class="token operator">=</span>name<span class="token punctuation">,</span> format<span class="token operator">=</span><span class="token string">'png'</span><span class="token punctuation">,</span> strict<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    first_label <span class="token operator">=</span> root<span class="token punctuation">.</span>feature    g<span class="token punctuation">.</span>node<span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">,</span> first_label<span class="token punctuation">)</span>    _sub_plot<span class="token punctuation">(</span>g<span class="token punctuation">,</span> root<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span>    g<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token punctuation">)</span>_root <span class="token operator">=</span> <span class="token string">"0"</span><span class="token keyword">def</span> <span class="token function">_sub_plot</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> root<span class="token punctuation">,</span> inc<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> _root    ts <span class="token operator">=</span> root<span class="token punctuation">.</span>children    <span class="token keyword">for</span> i <span class="token keyword">in</span> ts<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> ts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>can_use <span class="token operator">!=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            _root <span class="token operator">=</span> str<span class="token punctuation">(</span>int<span class="token punctuation">(</span>_root<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            g<span class="token punctuation">.</span>node<span class="token punctuation">(</span>_root<span class="token punctuation">,</span> ts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>feature<span class="token punctuation">)</span>            g<span class="token punctuation">.</span>edge<span class="token punctuation">(</span>inc<span class="token punctuation">,</span> _root<span class="token punctuation">,</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            _sub_plot<span class="token punctuation">(</span>g<span class="token punctuation">,</span> ts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> _root<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            _root <span class="token operator">=</span> str<span class="token punctuation">(</span>int<span class="token punctuation">(</span>_root<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            g<span class="token punctuation">.</span>node<span class="token punctuation">(</span>_root<span class="token punctuation">,</span> str<span class="token punctuation">(</span>ts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>datasets<span class="token punctuation">)</span><span class="token punctuation">)</span>            g<span class="token punctuation">.</span>edge<span class="token punctuation">(</span>inc<span class="token punctuation">,</span> _root<span class="token punctuation">,</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>plot_model<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 决策树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas模块</title>
      <link href="posts/c3aa.html"/>
      <url>posts/c3aa.html</url>
      
        <content type="html"><![CDATA[<p>参考资料：</p><ul><li>Pandas中文网：<a href="https://www.pypandas.cn/" target="_blank" rel="noopener">https://www.pypandas.cn/</a></li><li>Pandas练习：<a href="https://zhuanlan.zhihu.com/p/69371799" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/69371799</a></li><li><a href="https://zhuanlan.zhihu.com/p/43018099" target="_blank" rel="noopener">23种pandas操作</a></li></ul><hr><p><code>Pandas</code> 是 <em>Python</em> 的<strong>核心数据分析支持库</strong>，是 <em>Python</em> 中统计计算生态系统的重要组成部分。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"train.csv"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#see the first 10 rows</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#check the rows and cols</span>data<span class="token punctuation">.</span>shapedata<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print the name of all the columns</span>data<span class="token punctuation">.</span>columns<span class="token comment" spellcheck="true">#</span>len<span class="token comment" spellcheck="true">#index</span>data<span class="token punctuation">.</span>index<span class="token comment" spellcheck="true">#检查空值</span>pd<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看数据统计信息</span>data<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看某一列唯一实体</span>data<span class="token punctuation">[</span><span class="token string">"col_name"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除特征</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'feature_variable_name'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#axis 0 表示行，1 表示列</span><span class="token comment" spellcheck="true"># 通过特征名取数据</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>feature_name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 对 DataFrame 使用函数</span>df<span class="token punctuation">[</span><span class="token string">"height"</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">"height"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 重命名行</span>df<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns <span class="token operator">=</span> <span class="token punctuation">{</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">'size'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>以下为以前写的，未整理</p></blockquote><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>一维的<code>Series</code>和二维的  <code>DataFrame</code></p><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>，index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0    1</span><span class="token comment" spellcheck="true"># 1    2</span><span class="token comment" spellcheck="true"># 2    3</span><span class="token comment" spellcheck="true"># dtype: int64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建方法:</strong></p><ol><li>同上</li><li>字典</li></ol><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Empty DataFrame</span><span class="token comment" spellcheck="true"># Columns: []</span><span class="token comment" spellcheck="true"># Index: []</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">dates<span class="token operator">=</span>pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span><span class="token string">'20200511'</span><span class="token punctuation">,</span>periods<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>dates<span class="token comment" spellcheck="true"># DatetimeIndex(['2020-05-11', '2020-05-12', '2020-05-13'], dtype='datetime64[ns]', freq='D')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span>dates<span class="token punctuation">,</span>columns<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th></th><th>a</th><th>b</th><th>c</th><th>d</th></tr></thead><tbody><tr><td>2020-05-11</td><td>-1.712588</td><td>0.403376</td><td>-0.152608</td><td>-0.428465</td></tr><tr><td>2020-05-12</td><td>-1.259988</td><td>-0.310385</td><td>-0.816578</td><td>0.321397</td></tr><tr><td>2020-05-13</td><td>-0.444678</td><td>-1.894342</td><td>0.172485</td><td>0.717187</td></tr></tbody></table><h3 id="1-查看数据"><a href="#1-查看数据" class="headerlink" title="(1)查看数据"></a>(1)查看数据</h3><ul><li><code>df.head()</code>，k值默认为5.</li><li><code>df.tail()</code>，k值默认为5</li><li><code>df.index</code></li><li><code>df.columns</code></li></ul><h3 id="2-选择"><a href="#2-选择" class="headerlink" title="(2)选择"></a>(2)选择</h3><ol><li>获取单列，<code>df.a</code>与<code>df[&#39;a&#39;]</code>等效</li><li>获取行，用 [ ] 切片行</li><li>按标签选择</li><li>按位置选择</li></ol><h3 id="3-操作"><a href="#3-操作" class="headerlink" title="(3)操作"></a>(3)操作</h3><ol><li><code>Series</code>操作类似字典类型，含：保留字<code>in</code>操作、<code>.get(key,default=None)</code>方法</li><li><code>.reindex()</code>，改变或重排<code>Series</code>或<code>DataFrame</code>索引数据输入输出</li><li><code>.drop()</code>，删除<code>Series</code>或<code>DataFrame</code>指定行或列索引，默认0轴(竖的)</li></ol><h3 id="4-运算"><a href="#4-运算" class="headerlink" title="(4)运算"></a>(4)运算</h3><ol><li><strong>算术运算</strong>根据行列索引，补齐后运算，运算默认产生浮点数。</li><li>补齐时缺项填充NaN(空值)</li><li>不同维度数据间运算为广播运算</li><li><code>+</code> 或 <code>b.add(a,fill_value=NaN)</code></li><li><strong>比较运算</strong></li></ol><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ol><li><code>.sort_index(axis=0,ascending=True)</code>，根据索引排序，默认升序</li><li><code>Series.sort_values(axis=0,ascending=True)</code><br><code>DataFrame.sort_values(by,axis=0,ascending=True)</code></li></ol><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p><em>CSV</em> ：</p><ul><li><code>df.to_csv(&#39;___.csv&#39;)</code></li><li><code>pd.read_csv(&#39;___.csv&#39;)</code></li></ul><p><em>Excel</em> ：</p><ul><li><code>df.to_excel(&#39;___.xlsx&#39;, sheet_name=&#39;Sheet1&#39;)</code></li><li><code>pd.read_excel(&#39;___.xlsx&#39;, &#39;Sheet1&#39;, index_col=None, na_values=[&#39;NA&#39;])</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python面向对象</title>
      <link href="posts/820c.html"/>
      <url>posts/820c.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本使用"><a href="#一、基本使用" class="headerlink" title="一、基本使用"></a>一、基本使用</h2><h3 id="1-0-定义与调用"><a href="#1-0-定义与调用" class="headerlink" title="1.0 定义与调用"></a>1.0 定义与调用</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyClassA</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">12345</span>               <span class="token comment" spellcheck="true"># 1. 这里定义了类变量</span>    <span class="token keyword">def</span> <span class="token function">funcA</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 2. 类的函数需要显式指明self参数</span>        i<span class="token operator">=</span><span class="token number">10</span>        self<span class="token punctuation">.</span>j<span class="token operator">=</span><span class="token number">2345</span>         <span class="token comment" spellcheck="true"># 3. 这里通过self来区分局部变量和实例变量。 </span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数的局部变量i："</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"类属性i："</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>i<span class="token punctuation">)</span>obj <span class="token operator">=</span> MyClassA<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#定义类的对象，对类实例化</span>obj<span class="token punctuation">.</span>funcA<span class="token punctuation">(</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>i   <span class="token comment" spellcheck="true">#类里的变量和函数，默认公开访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">foo</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true">#相当于类外的，用对象调用时会默认带一个self参数</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hhh'</span><span class="token punctuation">)</span>a<span class="token operator">=</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>–&gt; <code>TypeError: f() takes 0 positional arguments but 1 was given</code><br>f()定义时加个参数self即可运行</p><h3 id="1-1-构造函数"><a href="#1-1-构造函数" class="headerlink" title="1.1 构造函数"></a>1.1 构造函数</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Complex</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> realpart<span class="token punctuation">,</span> imagpart<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>r <span class="token operator">=</span> realpart        self<span class="token punctuation">.</span>i <span class="token operator">=</span> imagpartx <span class="token operator">=</span> Complex<span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4.5</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#按照__init__()指定的参数构造对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>r<span class="token punctuation">,</span> x<span class="token punctuation">.</span>i<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出结果：3.0 -4.5</span><span class="token comment" spellcheck="true"># 可通过 x.r = 9 修改</span><span class="token comment" spellcheck="true"># python 同样设计了析构函数：__del__()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-私有属性"><a href="#1-2-私有属性" class="headerlink" title="1.2 私有属性"></a>1.2 私有属性</h3><p>自定义的私有变量或函数，加 <code>__</code> 前缀。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyClassC</span><span class="token punctuation">:</span>    attrA <span class="token operator">=</span> <span class="token number">333</span>         <span class="token comment" spellcheck="true"># 类属性。等同于static属性</span>    __attrB <span class="token operator">=</span> <span class="token number">444</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">:</span>        attrA<span class="token operator">=</span><span class="token number">10</span>         <span class="token comment" spellcheck="true">#这里的attrA只是个临时变量</span>        self<span class="token punctuation">.</span>attrC  <span class="token operator">=</span>c     <span class="token comment" spellcheck="true">#定义两个实例属性</span>        self<span class="token punctuation">.</span>__attrD<span class="token operator">=</span>d     <span class="token comment" spellcheck="true">#定义private成员变量</span>    @property    <span class="token keyword">def</span> <span class="token function">attrD</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__attrD     <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>attrA<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__attrB<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>attrC<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__attrD<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">funcA</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>attrA<span class="token operator">=</span>a       <span class="token comment" spellcheck="true">#注意这里！</span>        self<span class="token punctuation">.</span>__attrB<span class="token operator">=</span>b     <span class="token comment" spellcheck="true">#对象定义了两个新的实例属性，会覆盖掉同名的类属性，但另一个对象中未变</span><span class="token comment" spellcheck="true"># 如果类属性是公开的，可以直接用类名字来调用</span><span class="token keyword">print</span><span class="token punctuation">(</span>MyClassC<span class="token punctuation">.</span>attrA<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、内置装饰器"><a href="#二、内置装饰器" class="headerlink" title="二、内置装饰器"></a>二、内置装饰器</h2><h3 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h3><p>该装饰器，将方法包装成属性，让方法可以以属性的形式被访问和调用。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">foo</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_x <span class="token operator">=</span> None    @property    <span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""I'm the 'x' property."""</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_x    @x<span class="token punctuation">.</span>setter    <span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_x <span class="token operator">=</span> value    @x<span class="token punctuation">.</span>deleter    <span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> self<span class="token punctuation">.</span>_x<span class="token comment" spellcheck="true">#被装饰的方法不能传递除self外的其它参数</span>a <span class="token operator">=</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">6</span>          <span class="token comment" spellcheck="true">#设置属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">#获取属性</span><span class="token keyword">del</span> a<span class="token punctuation">.</span>x          <span class="token comment" spellcheck="true">#删除属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果报错 <code>RecursionError: maximum recursion depth exceeded while calling a Python object</code>，很可能是对象属性名和 <code>@property</code> 装饰的方法名重名了，一般会在对象属性名前加一个下划线 <code>_</code> 避免重名，并且表明这是一个受保护的属性。</li></ul><h3 id="staticmethod"><a href="#staticmethod" class="headerlink" title="@staticmethod"></a>@staticmethod</h3><p>静态方法，不需要表示自身对象的 <code>self</code> 和自身类的 <code>cls</code> 参数，就跟使用函数一样。</p><p>使用场景：不需要用到与类相关的属性或方法时</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">foo</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    @staticmethod                <span class="token comment" spellcheck="true">#返回函数的静态方法</span>    <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hhh'</span><span class="token punctuation">)</span>foo<span class="token punctuation">.</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#静态方法无需实例化</span>a<span class="token operator">=</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#也可以实例化后调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="classmethod"><a href="#classmethod" class="headerlink" title="@classmethod"></a>@classmethod</h3><p>类方法， 不需要 <code>self</code> 参数，但第一个参数需要时表示自身类的 <code>cls</code> 参数。</p><p>使用场景：需要用到与类相关的属性或方法，然后又想表明这个方法是整个类通用的，而不是对象特异的。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyClassC</span><span class="token punctuation">:</span>    attrA <span class="token operator">=</span> <span class="token number">333</span>         <span class="token comment" spellcheck="true"># 类属性。等同于static属性</span>    @classmethon         <span class="token comment" spellcheck="true"># 类方法的装饰器。下面定义的函数为类方法</span>    <span class="token keyword">def</span> <span class="token function">set_attrA</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 类方法的第一个参数不再是self，而是cls。</span>        cls<span class="token punctuation">.</span>attrA<span class="token operator">=</span>a      <span class="token comment" spellcheck="true">#相应，不再用self来引导，而是用cls  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、特殊"><a href="#三、特殊" class="headerlink" title="三、特殊"></a>三、特殊</h2><h3 id="new"><a href="#new" class="headerlink" title="__new__"></a><code>__new__</code></h3><ul><li>__new__是在实例创建之前被调用的，因为它的任务就是创建实例然后返回该实例对象，是个静态方法。</li><li>__init__是当实例对象创建完成后被调用的，然后设置对象属性的一些初始值，通常用在初始化一个类实例的时候。是一个实例方法。</li></ul><h3 id="call"><a href="#call" class="headerlink" title="__call__"></a><code>__call__</code></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">people</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 这是private函数</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> n             <span class="token comment" spellcheck="true">#定义public成员变量。</span>        self<span class="token punctuation">.</span>age <span class="token operator">=</span> a        self<span class="token punctuation">.</span>__weight <span class="token operator">=</span> w         <span class="token comment" spellcheck="true">#定义private成员变量。</span>    <span class="token keyword">def</span> <span class="token function">set_weight</span><span class="token punctuation">(</span>self <span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__weight <span class="token operator">=</span> w    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 说: 我 %d 岁。我 %d kg。"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">,</span>self<span class="token punctuation">.</span>__weight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 类中的 call() 函数</span><span class="token comment" spellcheck="true">#   作用：类的实例对象可以作为一个函数去执行</span>xiaoming<span class="token operator">=</span>people<span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span>xiaoming<span class="token punctuation">.</span>set_weight<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  xiaoming<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#将一个实例对象作为函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><em>other</em>:</p><p>参考资料：</p><ul><li>学校课程</li></ul><p><strong>推荐阅读：</strong></p><ul><li><a href="https://www.cnblogs.com/huchong/p/8244279.html" target="_blank" rel="noopener">Python中的单例模式的几种实现方式的及优化</a></li><li><a href="https://www.cnblogs.com/hukey/p/7263207.html" target="_blank" rel="noopener">GIL线程全局锁及Python</a></li><li><a href="https://www.jianshu.com/p/1e375fb40506" target="_blank" rel="noopener">Python垃圾回收机制</a></li></ul><hr><p>#以下为非面向对象部分，记录一下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># nums[:]=ans 和 nums=ans.copy() 相比, 第二个高效些</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token string">''</span> <span class="token operator">!=</span> None       <span class="token comment" spellcheck="true"># -> True</span><span class="token operator">not</span> <span class="token string">''</span>           <span class="token comment" spellcheck="true"># -> True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> oop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息学中的熵</title>
      <link href="posts/5854.html"/>
      <url>posts/5854.html</url>
      
        <content type="html"><![CDATA[<ul><li>熵（信息量的度量）越大，则随机变量的不确定性越大。</li><li>熵代表了随记分布的混乱程度，这一特性是所有基于熵的机器学习算法的核心思想。</li></ul><hr><p><strong>自信息</strong>，表示某一事件发生时所带来的信息量的多少。（事件发生的概率越大，则自信息越小，最小为0）<br>$$I(p_i) = -log(p_i)$$</p><hr><p><strong>信息熵</strong>，通常用来描述整个随记分布所带来的信息量平均值，更具有统计特性，在机器学习中，由于熵的计算是依据样本数据而来，故也叫经验熵。<code>H(X)</code></p><p>$$H(x)=-\sum_{i=1}^np(x_i)log(p(x_i))$$</p><blockquote><p>说明：计算公式中的<code>log</code>，通常以2为底计算。</p><ul><li>以2为底时，熵的单位为：<code>bits</code> ；</li><li>以e为底时，熵的单位为：<code>nats</code>。</li></ul></blockquote><p>规定：0log0 = 0</p><hr><p><strong>联合信息熵</strong>,</p><p>$$H(X,Y)=-\sum_{i=1}^n\sum_{j=1}^mp(x_i,y_i)log(p(x_i,y_i))$$</p><p><strong>链式规则</strong>,</p><p>$$H(X,Y)=H(X)+H(Y|X)$$</p><hr><p><strong>条件熵</strong>，在X给定条件下，Y的条件概率分布的熵对X的数学期望。</p><p>$$<br>\begin{align}<br>H(Y|X)&amp;=\sum_{x \in X}p(x)H(Y|X=x)\\<br>&amp;=\sum_{x \in X}p(x)[-\sum_{y \in Y}p(y|x)log(p(y|x))]\\<br>&amp;=-\sum_{x \in X}\sum_{y \in Y}p(x,y)log(p(y|x))<br>\end{align}<br>$$</p><hr><p><strong>互信息</strong>，定义为一个随机变量由于已知另一个随机变量而减少的不确定性。</p><p>$$<br>\begin{align}<br>I(X,Y)&amp;=H(X)-H(X|Y)=H(Y)-H(Y|X)\\<br>&amp;=H(X)+H(Y)-H(X,Y)\\<br>&amp;=H(X,Y)-H(X|Y)-H(Y|X)<br>\end{align}<br>$$</p><hr><p><strong>交叉熵</strong>，用来衡量估计模型与真实概率分布之间的差异情况。</p><p>如果一个随机变量$X~p(x)$，$q(x)$为用于近似$p(x)$的概率分布。</p><p>$$H(X,q)=-\sum_xp(x)log(q(x))$$</p><p><strong>相对熵</strong>，</p><p>两个概率分布$p(x)$和$q(x)$的相对熵(或Kullback-Leibler距离，简称为KL距离)，定义为：</p><p>$$<br>\begin{align}<br>KL(p||q)&amp;=H(p,q)-H(p)\\<br>&amp;=\sum_{k=1}^Np_klog_2\frac{1}{q_k}-\sum_{k=1}^Np_klog_2\frac{1}{p_k}\\<br>&amp;=\sum_{k=1}^Np_klog_2\frac{p_k}{q_k}<br>\end{align}$$</p><hr><p><strong>信息增益</strong>，表示在一个条件下，信息不确定性减少的程度。</p><p>是决策树ID3算法在进行特征切割时使用的划分准则，其物理意义和互信息完全相同，并且公式也是完全相同。其公式：</p><p>$$g(D,A)=H(D)-H(D|A)$$</p><hr><p><strong>小结</strong></p><ol><li>自信息时衡量随机变量中的某个时间发生时所带来的信息量的多少，越是不可能发生的事情发生了，那么自信息就越大；</li><li>信息熵是衡量随记变量分布的混乱程度，是随记分布个时间发生的自信息的期望值，随机分布越宽广，则熵越大，越混乱；</li><li>信息熵推广到多维领域，则可得到联合信息熵；在某些先验条件下，自然引出了条件熵；</li><li>前面的熵都是针对一个随机变量的，而交叉熵、相对熵和互信息可以衡量两个随机变量之间的关系，三者作用几乎相同，只是应用范围和领域不同。交叉熵一般用在神经网络和逻辑回归中作为损失函数，相对熵一般用在生成模型中用于评估生成的分布和真实情况的差距，而互信息，则是作为一种评估两个分布之间相似性的数学工具。其三者的关系是：最大化似然函数，等价于最小化负对数似然，等价于最小化交叉熵，等价于最小化KL散度，互信息相对于相对熵区别就是互信息满足对称性；作为熵的典型机器学习算法-决策树，广泛应用了熵进行特征划分，常用的有信息增益、信息增益率和基尼系数。</li></ol><hr><p><em>other</em></p><p>参考资料：</p><ul><li>学校课程</li><li>【强推】<a href="https://zhuanlan.zhihu.com/p/35423404" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35423404</a></li></ul><p>这些，在计算语言学中、机器学习中，都适用</p>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 熵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>勇士打怪兽</title>
      <link href="posts/81e9.html"/>
      <url>posts/81e9.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>勇士打怪兽要实现的功能：</p><ol><li>竞技场中的勇士和怪兽的数量可以有许多。不一定是1v1，但最多不超过5v5。</li><li>角色在出场时，可以带有一定装备，比如武器、盾牌等。</li><li>采用回合制战斗。你可以扮演怪兽或者勇士。也可以全自动。每个回合，所有角色有一次action机会，可以根据自己特点来选，比如进攻、防御、放大招、等待，等等。勇士和怪物的技能不能相同。要合理。</li><li>勇士和怪兽的初始属性值可以随机，也可以人工设定。游戏中各种攻击的伤害，要有随机性，不能使用定值。</li></ol><p>使用的技术：</p><ol><li>要求至少设计：勇士类、怪物类、装备类、竞技场类。</li><li>使用类的组合，为角色附加装备。</li><li>在竞技场类中添加角色对象指针或指针数组，实现角色入场。</li><li>角色类添加static变量，存放“当前还活着的角色的数量”。</li><li>游戏过程用cout把选择项输出到屏幕，通过屏幕交互来进行游戏。</li></ol><hr><p>各个类的实现思路：</p><p>1勇士类：</p><p>属性：</p><ol><li>勇士的武力值（每次造成多少伤害范围），</li><li>勇士的防御值（每次抵扣多少伤害），</li><li>生命值，为0就嗝屁</li><li>暴击造成的伤害范围</li><li>施展暴击的概率</li><li>当前活着的勇士的数量</li><li>勇士的装备</li></ol><p>方法：</p><ol><li>构造和初始化</li><li>攻击函数，这里要根据手动还是自动，选择一个动作函数。自动的话，要做一些简单的策略。如，在什么情况下选择什么动作。下面是几个动作函数的例子。</li><li>施展普通攻击（通过随机数确定具体伤害）</li><li>施展暴击攻击（通过随机数确定具体伤害）</li><li>可以添加自己的技能动作。发挥想象。</li></ol><p>2怪兽类：</p><p>属性：</p><ol><li>怪兽的武力值（每次造成多少伤害），</li><li>怪兽的防御值（每次抵扣多少伤害），</li><li>生命值，为0就嗝屁</li><li>怪兽的特殊技能（这个自己设定）</li><li>怪兽特殊技能释放概率</li><li>当前活着的怪兽的数量</li><li>怪兽的装备</li></ol><p>方法：</p><ol><li>构造和初始化</li><li>同样是攻击函数。同勇士的写法。可以有自己的创新。</li><li>施展普通攻击（通过随机数确定具体伤害）</li><li>施展技能（通过随机数确定具体效果，自行设计的）</li><li>其他，自己开脑洞。</li></ol><p>3 竞技场类</p><p>属性：</p><ol><li>指向怪兽的对象指针</li><li>指向勇士的而对象指针</li><li>双方的状态显示，相当于提供给观众的状态栏，如双方的血量，双方的招式等。发挥想象。</li></ol><p>方法：</p><ol><li>构造和初始化</li><li>在游戏开始后，更新参战双方的状态并且输出出来给观众。</li><li>确定比赛开始和结束，根据双方的状态判断胜负，起到裁判的作用。比如，写一个rungame方法</li></ol><p>4 main()</p><ol><li>创建勇士、怪兽、竞技场对象，可以人工cin来设定，也可以随机生成。</li><li>将勇士和怪兽的对象的地址，赋值给竞技场对象，</li><li>rungame</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>代码包含：<br><em>ground.h</em>, <em>ground.cpp</em><br><em>menu.h</em>, <em>menu.cpp</em><br><em>yasuo.h</em>, <em>yasuo.cpp</em><br><em>monster.h</em>, <em>monster.cpp</em><br><em>equipment.h</em>, <em>equipment.cpp</em><br><em>main.cpp</em></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"yasuo.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"monster.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"ground.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"equipment.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"menu.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">extern</span> Equipment eq0<span class="token punctuation">;</span><span class="token keyword">extern</span> Equipment eq1<span class="token punctuation">;</span><span class="token keyword">extern</span> Equipment eq2<span class="token punctuation">;</span><span class="token keyword">extern</span> Equipment eq3<span class="token punctuation">;</span><span class="token keyword">extern</span> Equipment eq4<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Ground fight<span class="token punctuation">;</span>    fight<span class="token punctuation">.</span><span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Yasuo <span class="token function">hero</span><span class="token punctuation">(</span><span class="token number">490</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> eq1<span class="token punctuation">,</span> eq0<span class="token punctuation">,</span> eq0<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//默认带了个多兰剑</span>    Yasuo <span class="token operator">*</span>yp <span class="token operator">=</span> <span class="token operator">&amp;</span>hero<span class="token punctuation">;</span>    hero<span class="token punctuation">.</span><span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Menu menu<span class="token punctuation">;</span>    menu<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> menu_choice<span class="token punctuation">;</span>    cin <span class="token operator">>></span> menu_choice<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>menu_choice <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>menu_choice<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            fight<span class="token punctuation">.</span><span class="token function">pre_fight</span><span class="token punctuation">(</span>yp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            fight<span class="token punctuation">.</span><span class="token function">buy_equipment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            fight<span class="token punctuation">.</span><span class="token function">buy_supply</span><span class="token punctuation">(</span>yp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            fight<span class="token punctuation">.</span><span class="token function">get_info</span><span class="token punctuation">(</span>yp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请重新输入！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        menu<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> menu_choice<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"正在退出游戏..."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>贴了个mian.cpp的代码，总共写了833行，第一次写了这么多…</p><p>源代码，以及可运行的exe文件：<br>链接地址：<a href="https://pan.baidu.com/s/1nDPmdDi9uf7xRzq5xouxKA" target="_blank" rel="noopener">https://pan.baidu.com/s/1nDPmdDi9uf7xRzq5xouxKA</a><br>提取码：9b1m </p><h3 id="other"><a href="#other" class="headerlink" title="other"></a><em>other</em></h3><p>用到了类的组合，类指针，extern关键字，引用…</p><p>//注意基本切换场景的例子，主场景、分场景都适用</p><p><code>extern</code> 可以置于变量或者函数前，以标示变量或者函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。此外extern也可用来进行链接指定。</p>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> oop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MathJax</title>
      <link href="posts/7a31.html"/>
      <url>posts/7a31.html</url>
      
        <content type="html"><![CDATA[<p><em>Mathjax</em> 是一个开源的 web 数学公式渲染器，由 JS 编写而成，它提供的书写方式和 <em>Latex</em> 书写方式一模一样。</p><p>由于这个博客的框架已经配置了 <em>mathjax</em> ，所以在 _config.yml 中将其激活即可，并在 <em>Front-matter</em> 中再加上 <em>mathjax: true</em> 。</p><hr><h3 id="1-0-显示方式"><a href="#1-0-显示方式" class="headerlink" title="1.0 显示方式"></a>1.0 显示方式</h3><ol><li><p>正文显示 （inline），用<code>$...$</code> 定义<br><code>$\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t$</code><br>呈现为<br>$\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t$</p></li><li><p>单独显示 （display），用<code>$$...$$</code> 定义<br><code>$$\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t$$</code><br>呈现为<br>$$\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t$$</p></li></ol><hr><h3 id="1-1-希腊字母"><a href="#1-1-希腊字母" class="headerlink" title="1.1 希腊字母"></a>1.1 希腊字母</h3><table><thead><tr><th>大写</th><th>小写</th><th>表示</th><th>大写</th><th>小写</th><th>表示</th></tr></thead><tbody><tr><td>A</td><td>α</td><td>\alpha</td><td>Ν</td><td>ν</td><td>\nu</td></tr><tr><td>B</td><td>β</td><td>\beta</td><td>Ξ</td><td>ξ</td><td>\xi</td></tr><tr><td>Γ</td><td>γ</td><td>\gamma</td><td>Ο</td><td>ο</td><td>\omicron</td></tr><tr><td>Δ</td><td>δ</td><td>\delta</td><td>Π</td><td>π</td><td>\pi</td></tr><tr><td>Ε</td><td>ε</td><td>\epsilon</td><td>Ρ</td><td>ρ</td><td>\rho</td></tr><tr><td>Ζ</td><td>ζ</td><td>\zeta</td><td>Σ</td><td>σ</td><td>\sigma</td></tr><tr><td>Η</td><td>η</td><td>\eta</td><td>Τ</td><td>τ</td><td>\tau</td></tr><tr><td>Θ</td><td>θ</td><td>\theta</td><td>Υ</td><td>υ</td><td>\upsilon</td></tr><tr><td>Ι</td><td>ι</td><td>\iota</td><td>Φ</td><td>φ</td><td>\phi</td></tr><tr><td>Κ</td><td>κ</td><td>\kappa</td><td>Χ</td><td>χ</td><td>\chi</td></tr><tr><td>Λ</td><td>λ</td><td>\lambda</td><td>Ψ</td><td>ψ</td><td>\psi</td></tr><tr><td>Μ</td><td>μ</td><td>\mu</td><td>Ω</td><td>ω</td><td>\omega</td></tr></tbody></table><ol><li>若要表示大写字母，将其首字母大写，<code>\Psi</code> 将显示为： $\Psi$</li><li>若要表示斜体字母，加上var前缀即可，<code>\varPsi</code> 将显示为： $\varPsi$</li></ol><hr><h3 id="1-2-基础语法"><a href="#1-2-基础语法" class="headerlink" title="1.2 基础语法"></a>1.2 基础语法</h3><ul><li><p>字母修饰</p><ul><li>上标 <code>^</code>，当<code>10^10</code>无法正常显示时：$10^10$，使用分组<code>{}</code>，如：<code>10^{10}</code> 显示为 $10^{10}$</li><li>下标 <code>_</code></li><li><code>\hat{y}</code> 呈现为 $\hat{y}$</li><li>矢量<ul><li><code>\vec a</code> 呈现为 $\vec a$</li><li><code>\overrightarrow{xy}</code> 呈现为 $\overrightarrow{xy}$</li></ul></li></ul></li><li><p>分式：<code>\frac{公式1}{公式2}</code>呈现为 $\frac{公式1}{公式2}$</p></li><li><p>根式：<code>\sqrt[n]{1+x+x^2+x^3+\dots+x^n}</code>呈现为 $\sqrt[n]{1+x+x^2+x^3+\dots+x^n}$</p></li><li><p>特殊函数</p><ul><li><code>\sin x</code>，<code>\ln x</code>，<code>\max(A,B,C)</code> 分别呈现为： $\sin x$，$\ln x$，$\max(A,B,C)$</li></ul></li><li><p>求和：<code>\sum_{i=1}^n{a_i}</code> 呈现为 $\sum_{i=1}^n{a_i}$</p></li><li><p>累积：<code>\prod_{i=1}^n{a_i}</code> 呈现为 $\prod_{i=1}^n{a_i}$</p></li><li><p>极限：<code>\lim_{x\to 0}</code> 呈现为 $\lim_{x\to 0}$</p></li><li><p>积分</p><ul><li><code>\int_0^\infty{fxdx}</code> 呈现为 $\int_0^\infty{fxdx}$</li><li>双重积分，<code>\iint</code> 呈现为 $\iint$</li><li>曲线积分，<code>\oint</code> 呈现为 $\oint$</li></ul></li></ul><p>注意：默认带有 <code>$...$</code></p><h3 id="1-3-特殊符号"><a href="#1-3-特殊符号" class="headerlink" title="1.3 特殊符号"></a>1.3 特殊符号</h3><table><thead><tr><th>特殊符号</th><th>命令</th><th>特殊符号</th><th>命令</th></tr></thead><tbody><tr><td>$\infty$</td><td>\infty</td><td></td><td></td></tr><tr><td>$\cup$</td><td>\cup</td><td>$\cap$</td><td>\cap</td></tr><tr><td>$\subset$</td><td>\subset</td><td>$\subseteq$</td><td>\subseteq</td></tr><tr><td>$\supset$</td><td>\supset</td><td></td><td></td></tr><tr><td>$\in$</td><td>\in</td><td>$\notin$</td><td>\notin</td></tr><tr><td>$\varnothing$</td><td>\varnothing</td><td></td><td></td></tr><tr><td>$\forall$</td><td>\forall</td><td>$\exists$</td><td>\exists</td></tr><tr><td>$\lnot$</td><td>\lnot</td><td></td><td></td></tr><tr><td>$\nabla$</td><td>\nabla</td><td>$\partial$</td><td>\partial</td></tr><tr><td>4个空格</td><td>\quad</td><td></td><td></td></tr><tr><td>$\approx$</td><td>\approx</td><td>$\equiv$</td><td>\equiv</td></tr><tr><td>$\iff$</td><td>\iff</td><td></td><td></td></tr><tr><td>$\cdot$</td><td>\cdot</td><td>$\cdots$</td><td>\cdots</td></tr><tr><td>$\times$</td><td>\times</td><td>$\div$</td><td>\div</td></tr></tbody></table><h3 id="1-4-矩阵方阵"><a href="#1-4-矩阵方阵" class="headerlink" title="1.4 矩阵方阵"></a>1.4 矩阵方阵</h3><pre class="line-numbers language-md"><code class="language-md">$$\begin{matrix}1&0&0\\0&1&0\\0&0&1\\\end{matrix}$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>呈现为：<br>$$\begin{matrix}<br>1&amp;0&amp;0\\<br>0&amp;1&amp;0\\<br>0&amp;0&amp;1\\<br>\end{matrix}$$</p><h3 id="1-5-方程组"><a href="#1-5-方程组" class="headerlink" title="1.5 方程组"></a>1.5 方程组</h3><pre class="line-numbers language-md"><code class="language-md">$$\begin{cases}a_1x+b_1y+c_1z=d_1\\\\a_2x+b_2y+c_2z=d_2\\\\a_3x+b_3y+c_3z=d_3\\\\\end{cases}$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>呈现为：</p><p>$$\begin{cases}<br>a_1x+b_1y+c_1z=d_1\\<br>a_2x+b_2y+c_2z=d_2\\<br>a_3x+b_3y+c_3z=d_3\\<br>\end{cases}$$</p><pre class="line-numbers language-md"><code class="language-md">$$\begin{align}D(x) &= \int_{x_0}^x P(x^{\prime})\,\mathrm{dx^{\prime}}  \\\\ &= C\int_{x_0}^x x^{\prime n}\,\mathrm{dx^{\prime}} \\\\&= \frac{C}{n+1}(x^{n+1}-x_0^{n+1}) \\\\&\equiv  y\end{align}$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>呈现为：<br>$$<br>\begin{align}<br>D(x) &amp;= \int_{x_0}^x P(x^{\prime}),\mathrm{dx^{\prime}}  \\<br> &amp;= C\int_{x_0}^x x^{\prime n},\mathrm{dx^{\prime}} \\<br>&amp;= \frac{C}{n+1}(x^{n+1}-x_0^{n+1}) \\<br>&amp;\equiv  y<br>\end{align}<br>$$</p><p>注意：按照 mathjax 语法，换行用 <code>\\</code> 表示，在这个hexo的渲染器中，要使用 <code>\\\\</code></p><h3 id="1-6-特殊语法"><a href="#1-6-特殊语法" class="headerlink" title="1.6 特殊语法"></a>1.6 特殊语法</h3><ol><li><p>下括号<br><code>\underbrace{a+b+\cdots +z}_{26}</code><br>呈现为<br>$$\underbrace{a+b+\cdots +z}_{26}$$</p></li><li><p>水平线<br><code>\overline{m+n}</code><br>呈现为<br>$$\overline{m+n}$$</p></li><li><p>范数<br><code>\Vert x \Vert_2</code><br>呈现为<br>$$\Vert x \Vert_2$$</p></li><li><p><em>argmax</em><br><code>\arg\max_{c_{k}}</code><br>显示为：<br>$$\arg\max_{c_{k}}$$</p></li></ol><hr><p>参考资料：</p><ul><li><a href="https://blog.csdn.net/Jiajikang_jjk/article/details/80341322" target="_blank" rel="noopener">Latex之数学公式基本使用格式</a></li><li><a href="https://blog.csdn.net/ethmery/article/details/50670297" target="_blank" rel="noopener">基本数学公式语法（of MathJax）</a></li><li><a href="https://jingyan.baidu.com/article/4b52d702df537efc5c774bc9.html" target="_blank" rel="noopener">百度经验——latex常用数学符号输入</a></li></ul><h3 id="2-0-数学知识"><a href="#2-0-数学知识" class="headerlink" title="2.0 数学知识"></a>2.0 数学知识</h3><p>积分 <em>integrals</em><br>微分 <em>derivatives</em></p><div class="admonition info"><p class="admonition-title">傅里叶变换</p><p>表示能将满足一定条件的某个函数表示成三角函数或者它们的积分的线性组合。<br>傅里叶变换是一种分析信号的方法，它可分析信号的成分，也可以用这些成分合成信号。$$F(\omega)=\int_{-\infty}^\infty f(t) e^{-iwt}dt$$</p></div><div class="admonition info"><p class="admonition-title">欧拉公式</p><p>$$\mathrm{e}^{- \mathrm{i} \pi} + 1 = 0$$</p></div><p>参考资料：</p><ul><li><a href="https://www.bilibili.com/video/BV1pW411J7s8" target="_blank" rel="noopener">3Blue1Brown形象展示傅里叶变换</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mathjax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习(二)</title>
      <link href="posts/ml2.html"/>
      <url>posts/ml2.html</url>
      
        <content type="html"><![CDATA[<p><strong>引言</strong></p><p>学习问题：如果一个计算机针对某类任务<code>T</code>的用<code>P</code>衡量的性能根据经验<code>E</code>来自我完善，那么我们称这个计算机程序在从经验<code>E</code>中学习，针对某类任务<code>T</code>，它的性能用<code>P</code>来衡量。</p><ul><li>训练错误</li><li>测试集错误</li><li>评测指标<ul><li>准确率</li><li>召回率</li><li>平方误差等</li></ul></li></ul><h2 id="一、概念学习"><a href="#一、概念学习" class="headerlink" title="一、概念学习"></a>一、概念学习</h2><p>概念：可被看作一个对象或事件集合（或：这个较大集合中定义的布尔函数）。</p><p><strong>概念学习</strong>：给定某一类别的若干正例和反例，从中 <strong>获得</strong> 该类别的 <strong>一般定义</strong>。</p><p><strong>变型空间</strong>：与训练样例一致的所有假设组成的集合，表示了目标概念的所有合理的变型</p><p>一般边界<code>G</code>：假设空间H和训练数据D相一致的 <strong>极大一般</strong> 成员的集合。<br>特殊边界<code>S</code>：假设空间H和训练数据D相一致的 <strong>极大特殊</strong> 成员的集合。</p><ul><li><p>机器学习的目标是寻找一个假设<code>h</code>，使得对所有的<code>x</code>，都有 <code>h(x) = c(x)</code></p></li><li><p>表示假设</p><ul><li>形式：实例的 <strong>各属性约束的合取式</strong></li><li>属性范围：<ul><li><code>？</code> 本属性可接收任意值</li><li><code>∅</code>  不接受任何值</li><li>指定的属性值</li></ul></li></ul></li><li><p>搜索目标假设</p><ul><li>在预定义的假设空间中搜索假设，使其与训练样例有最佳的拟合</li><li>利用假设空间的偏序结构（偏序：自反的，反对称的，传递的）</li></ul></li><li><p>概念学习的方法</p><ul><li><code>Find-S</code>：寻找极大特殊假设</li><li><code>candidate-elimination</code>，候选消除算法<ul><li>变型空间被表示为极大一般和极大特殊的成员</li><li>输出与训练样例一致的所有假设的集合</li><li></li></ul></li></ul></li><li><p>无偏学习的无用性：学习器如果不对目标概念的形式做预先的假定，它从根本上无法对未见实例进行分类。</p></li><li><p>归纳学习需要预先假定，称为<strong>归纳偏置</strong>。</p><ul><li>无偏的较大空间，有偏的算法（如梯度下降）</li><li>有偏的较小空间，，，穷尽搜索</li></ul></li><li><p>一种算法的有偏性越强，他的归纳能力越强，可以分类更多的未见实例。</p></li></ul><div class="admonition info"><p class="admonition-title">一些理解</p><p>特殊：属性可接收的值，变得越来越少，<code>?</code> -&gt; 指定值 -&gt; <code>∅</code><br></p></div><h2 id="二、决策树学习"><a href="#二、决策树学习" class="headerlink" title="二、决策树学习"></a>二、决策树学习</h2><p>决策树：通过实例从根节点排列到某个子节点来分类实例。</p><ul><li>对空间划分，最后的树<strong>完备互斥</strong></li><li>叶子节点，为实例所属的分类</li><li>每个节点，说明了对实例的某个属性的测试</li><li>节点的每个后继分支，对应于属性的一个可能值</li></ul><p>决策树代表实例属性值约束的合取的析取式</p><ul><li>基本的决策树学习算法<ul><li>特征选择</li><li>决策树构建</li><li>决策树后修剪</li></ul></li></ul><p>gap较高时，可能发生过度拟合（over-fitting）</p><p>$$E_{test}=E_{test}+\underbrace{(E_{train}-E_{test})}_{gap}$$</p><div class="admonition info"><p class="admonition-title">过拟合</p><p>学习时选择的模型所包含的参数过多，以至出现这一模型对已知数据预测得很好，但对未知数据预测得差的现象。</p></div><p>//信息增益比率</p><h2 id="三、贝叶斯学习"><a href="#三、贝叶斯学习" class="headerlink" title="三、贝叶斯学习"></a>三、贝叶斯学习</h2><p>$P(D)$表示训练数据D的先验概率， $P(D|h)$表示h成立时D的概率，称为似然概率（似然度）</p><p>贝叶斯公式</p><p>$$P(h|D)=/frac{P(D|h)P(h)}{P(D)}$$</p><p>极大后验假设MAP</p><h2 id="四、KNN"><a href="#四、KNN" class="headerlink" title="四、KNN"></a>四、KNN</h2><p>$K-NearestNeighbor$，每个样本都可以用它最近的K个近邻值来代表。</p><p>基本步骤：</p><ol><li>准备数据，数据预处理</li><li>计算测试样本点到其它样本点的距离</li><li>在各个距离中选出最小的K个</li><li>将测试样本点归入K个中的最大类</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">KNN</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> n_neighbors<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        parameter: n_neighbors 临近点个数        parameter: p 距离度量        """</span>        self<span class="token punctuation">.</span>n <span class="token operator">=</span> n_neighbors        self<span class="token punctuation">.</span>p <span class="token operator">=</span> p        self<span class="token punctuation">.</span>X_train <span class="token operator">=</span> X_train        self<span class="token punctuation">.</span>y_train <span class="token operator">=</span> y_train    <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 取出n个点</span>        knn_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dist <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>X <span class="token operator">-</span> self<span class="token punctuation">.</span>X_train<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ord<span class="token operator">=</span>self<span class="token punctuation">.</span>p<span class="token punctuation">)</span>            knn_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y_train<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>n<span class="token punctuation">,</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>X_train<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            max_index <span class="token operator">=</span> knn_list<span class="token punctuation">.</span>index<span class="token punctuation">(</span>max<span class="token punctuation">(</span>knn_list<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            dist <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>X <span class="token operator">-</span> self<span class="token punctuation">.</span>X_train<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ord<span class="token operator">=</span>self<span class="token punctuation">.</span>p<span class="token punctuation">)</span>            <span class="token keyword">if</span> knn_list<span class="token punctuation">[</span>max_index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">:</span>                knn_list<span class="token punctuation">[</span>max_index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dist<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y_train<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 统计</span>        knn <span class="token operator">=</span> <span class="token punctuation">[</span>k<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> k <span class="token keyword">in</span> knn_list<span class="token punctuation">]</span>        count_pairs <span class="token operator">=</span> Counter<span class="token punctuation">(</span>knn<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#         max_count = sorted(count_pairs, key=lambda x: x)[-1]</span>        max_count <span class="token operator">=</span> sorted<span class="token punctuation">(</span>count_pairs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> max_count    <span class="token keyword">def</span> <span class="token function">score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token punctuation">:</span>        right_count <span class="token operator">=</span> <span class="token number">0</span>        n <span class="token operator">=</span> <span class="token number">10</span>        <span class="token keyword">for</span> X<span class="token punctuation">,</span> y <span class="token keyword">in</span> zip<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token punctuation">:</span>            label <span class="token operator">=</span> self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span>            <span class="token keyword">if</span> label <span class="token operator">==</span> y<span class="token punctuation">:</span>                right_count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> right_count <span class="token operator">/</span> len<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、感知机"><a href="#六、感知机" class="headerlink" title="六、感知机"></a>六、感知机</h2><p>感知机时神经网络的起源算法，感知机接受多个输入信号，输出一个信号，<br>这里的信号可以理解为电流样“流动性”的东西，输入信号配以权重，用阈值$\theta$判定这个神经元是否被激活。</p><p>$$f(x;\theta)=sign(w\cdot x+b)$$<br>w: n维权重向量<br>b: 偏置<br>sign: 符号函数<br>H: 所有线性函数的集合</p><p>线性可分性、</p><h2 id="课程安排"><a href="#课程安排" class="headerlink" title="课程安排"></a>课程安排</h2><ul><li>基本概念<ul><li>概念学习、决策树学习</li><li>贝叶斯学习：朴素贝叶斯分类器</li><li>k近邻学习</li></ul></li><li>统计机器学习<ul><li>线性回归</li><li>逻辑回归、softmax</li><li>支持向量机（SVM）</li><li>提升方法</li></ul></li><li>神经网络和深度学习<ul><li>神经网络</li><li>BP算法</li><li>FNN/CNN/RNN</li><li>深度神经网络</li><li>表示学习</li></ul></li></ul><h2 id="作业代码"><a href="#作业代码" class="headerlink" title="作业代码"></a>作业代码</h2><p>用python实现概念学习中的Find-S算法和候选消除算法。</p><p>（1）训练样例可以使用ppt中的四个训练样例作为训练集；</p><p>（2）输出结果为与训练集一致的假设变型空间（version space）。</p><p>提示：</p><p>（1）训练样例和假设可以使用长度为6的list或者tuple表示；</p><p>（2）属性取值可以直接使用字符串；</p><p>（3）定义一些辅助函数，如：</p><p>假设的最小泛化（获得假设针对某个正例的极小泛化形式，min_generalize），</p><p>最小特殊化（获得假设针对某个负例的极小特殊化形式，min_specialize）,</p><p>比较函数（比较两个假设一个是否比另一个更一般，is_general）,</p><p>样例是否满足假设判定函数（agree_with）等等</p><p>（4）算法流程与实例请参考ppt相关内容</p><pre class="line-numbers language-python"><code class="language-python">train_set<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"Sunny"</span><span class="token punctuation">,</span><span class="token string">"Warm"</span><span class="token punctuation">,</span><span class="token string">"Normal"</span><span class="token punctuation">,</span><span class="token string">"Strong"</span><span class="token punctuation">,</span><span class="token string">"Warm"</span><span class="token punctuation">,</span><span class="token string">"Same"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token punctuation">[</span><span class="token string">"Sunny"</span><span class="token punctuation">,</span><span class="token string">"Warm"</span><span class="token punctuation">,</span><span class="token string">"High"</span><span class="token punctuation">,</span><span class="token string">"Strong"</span><span class="token punctuation">,</span><span class="token string">"Warm"</span><span class="token punctuation">,</span><span class="token string">"Same"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token punctuation">[</span><span class="token string">"Rainy"</span><span class="token punctuation">,</span><span class="token string">"Cold"</span><span class="token punctuation">,</span><span class="token string">"High"</span><span class="token punctuation">,</span><span class="token string">"Strong"</span><span class="token punctuation">,</span><span class="token string">"Warm"</span><span class="token punctuation">,</span><span class="token string">"Change"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token punctuation">[</span><span class="token string">"Sunny"</span><span class="token punctuation">,</span><span class="token string">"Warm"</span><span class="token punctuation">,</span><span class="token string">"High"</span><span class="token punctuation">,</span><span class="token string">"Strong"</span><span class="token punctuation">,</span><span class="token string">"Cool"</span><span class="token punctuation">,</span><span class="token string">"Change"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>en<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>d<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">#用于寻找反值，min_specialize中</span><span class="token keyword">for</span> x <span class="token keyword">in</span> zip<span class="token punctuation">(</span><span class="token operator">*</span>train_set<span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp<span class="token operator">=</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#strong</span>        <span class="token keyword">continue</span>    i<span class="token punctuation">,</span>j<span class="token operator">=</span>tmp    d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j    d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token comment" spellcheck="true">#print(d)</span><span class="token keyword">def</span> <span class="token function">FindS</span><span class="token punctuation">(</span>train_set<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#极大特殊假设</span>    ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span>train <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_set<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> en<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>             <span class="token keyword">continue</span>        <span class="token keyword">if</span> <span class="token operator">not</span> ans<span class="token punctuation">:</span>             ans<span class="token operator">=</span>train<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> ans<span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token operator">!=</span>train<span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">:</span>                    ans<span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'?'</span>        <span class="token keyword">return</span> ans<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"the result of find-s:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>FindS<span class="token punctuation">(</span>train_set<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n\n\n"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">more_normol</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>s<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> h <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"∅"</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>            <span class="token keyword">if</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"?"</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>            <span class="token keyword">if</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true">#正常匹配结束</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">more_special</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>g<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> h <span class="token keyword">in</span> g<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"∅"</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>            <span class="token keyword">if</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"?"</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>            <span class="token keyword">if</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true">#正常匹配结束</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">min_generalize</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span>s<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#获得假设针对某个正例的极小泛化形式</span>    ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"∅"</span><span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ans<span class="token keyword">def</span> <span class="token function">min_specialize</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span>g<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#获得假设针对某个负例的极小特殊化形式</span>    ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"?"</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> d<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>h<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span>d<span class="token punctuation">[</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>h<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ans<span class="token keyword">def</span> <span class="token function">agree_with</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span>x<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"?"</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>        <span class="token keyword">elif</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>        <span class="token keyword">elif</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">class</span> <span class="token class-name">ce</span><span class="token punctuation">:</span>    train_set<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    n<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>train_set<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>train_set<span class="token operator">=</span>train_set        self<span class="token punctuation">.</span>n<span class="token operator">=</span>n    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        g<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"?"</span><span class="token punctuation">]</span><span class="token operator">*</span>self<span class="token punctuation">.</span>n<span class="token punctuation">]</span>        s<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"∅"</span><span class="token punctuation">]</span><span class="token operator">*</span>self<span class="token punctuation">.</span>n<span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ce过程："</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"\nG:"</span><span class="token punctuation">,</span>g<span class="token punctuation">,</span><span class="token string">"\tS:"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span>        <span class="token keyword">for</span> cnt<span class="token punctuation">,</span>train <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>train_set<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> en<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">:</span>                next_g<span class="token operator">=</span>g                <span class="token keyword">for</span> i<span class="token punctuation">,</span>h <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token operator">not</span> agree_with<span class="token punctuation">(</span>h<span class="token punctuation">,</span>train<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">del</span> next_g<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                g<span class="token operator">=</span>next_g                next_s<span class="token operator">=</span>s                <span class="token keyword">for</span> i<span class="token punctuation">,</span>h <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token operator">not</span> agree_with<span class="token punctuation">(</span>h<span class="token punctuation">,</span>train<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">del</span> next_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                        tmp<span class="token operator">=</span>min_generalize<span class="token punctuation">(</span>h<span class="token punctuation">,</span>train<span class="token punctuation">)</span>                        <span class="token keyword">if</span> more_special<span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>g<span class="token punctuation">)</span><span class="token punctuation">:</span>                            next_s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">#print(next_s,min_generalize(h,train))</span>                s<span class="token operator">=</span>next_s            <span class="token keyword">else</span><span class="token punctuation">:</span>                next_s<span class="token operator">=</span>s                <span class="token keyword">for</span> i<span class="token punctuation">,</span>h <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> agree_with<span class="token punctuation">(</span>h<span class="token punctuation">,</span>train<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">del</span> next_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                s<span class="token operator">=</span>next_s                next_g<span class="token operator">=</span>g                <span class="token keyword">for</span> i<span class="token punctuation">,</span>h <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> agree_with<span class="token punctuation">(</span>h<span class="token punctuation">,</span>train<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#因为正是个反例</span>                        <span class="token keyword">del</span> next_g<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                        tmp<span class="token operator">=</span>min_specialize<span class="token punctuation">(</span>h<span class="token punctuation">,</span>train<span class="token punctuation">)</span>                        <span class="token keyword">for</span> d <span class="token keyword">in</span> tmp<span class="token punctuation">:</span>                            <span class="token keyword">if</span> more_normol<span class="token punctuation">(</span>d<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>                                next_g<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">#print(next_s,min_specialize(h,train))</span>                g<span class="token operator">=</span>next_g            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ce过程："</span><span class="token punctuation">,</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"\nG:"</span><span class="token punctuation">,</span>g<span class="token punctuation">,</span><span class="token string">"\tS:"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># use 边界g and 边界s to generate res</span>        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> gx <span class="token keyword">in</span> g<span class="token punctuation">:</span>            <span class="token keyword">for</span> sx <span class="token keyword">in</span> s<span class="token punctuation">:</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>gx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> gx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"?"</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> sx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">"?"</span><span class="token punctuation">:</span>                            cur<span class="token operator">=</span><span class="token punctuation">[</span>gx<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span>sx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>gx<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>                            <span class="token keyword">if</span> cur <span class="token operator">not</span> <span class="token keyword">in</span> res<span class="token punctuation">:</span>                                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n\n\nthe result of candidate-elimination:"</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> res<span class="token operator">+</span>g<span class="token operator">+</span>s<span class="token comment" spellcheck="true"># __name__是 python 的一个内置属性，记录了一个字符串</span><span class="token comment" spellcheck="true">#若是在当前文件：print(__name__)  --> __main__</span><span class="token comment" spellcheck="true">#如果在当前文件执行，则以下代码会被执行</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token operator">=</span>ce<span class="token punctuation">(</span>train_set<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#不足：1.测试用例太少 2.候选消除法不完整</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#小结</span><span class="token comment" spellcheck="true">#    好久没写过这么重的代码了，以前一直写的是少量的，模块化的代码</span><span class="token comment" spellcheck="true">#    真要命....写了好久</span><span class="token comment" spellcheck="true">#练习了：</span><span class="token comment" spellcheck="true">#1.</span>zip<span class="token punctuation">(</span><span class="token operator">*</span>matrix<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2.for-else,if-else,break,continue逻辑组合</span><span class="token keyword">def</span> <span class="token function">more_normol</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>s<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> h <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"∅"</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>            <span class="token keyword">if</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"?"</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>            <span class="token keyword">if</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true">#正常匹配结束</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true">#3. list 的 del, 连接, 索引切片等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理</title>
      <link href="posts/compiler.html"/>
      <url>posts/compiler.html</url>
      
        <content type="html"><![CDATA[<ul><li><code>源代码</code> -&gt; 词法分析程序 -&gt; 语法分析程序 -&gt; 语义分析程序 -&gt; 中间代码生成 -&gt; 代码优化程序 -&gt; 目标代码生成 -&gt; <code>目标代码</code></li><li>组成成分还包括：信息表管理程序、错误检查和处理程序，有8个</li></ul><p>从基本功能来看，编译程序是一种翻译程序</p><ul><li>对源程序进行分析</li><li>根据分析结果及目标信息进行综合</li></ul><h2 id="一、文法-正规式-有限自动机"><a href="#一、文法-正规式-有限自动机" class="headerlink" title="一、文法/正规式/有限自动机"></a>一、文法/正规式/有限自动机</h2><h3 id="1-1-形式语言概念"><a href="#1-1-形式语言概念" class="headerlink" title="1.1 形式语言概念"></a>1.1 形式语言概念</h3><ul><li>基本符号<ul><li><code>Σ</code>：字母表，形式符号的集合</li><li><code>ε</code>：空串</li><li><code>|w|</code>：字符串w的长度</li></ul></li><li>基本运算<ul><li>连接，如x, y为串，xy表连接</li><li>幂运算，即对串的重复</li><li><code>*</code> 闭包，同正则表达式中 <code>*</code>，可重复0~∞次</li><li><code>+</code> 闭包，同正则表达式中 <code>+</code>，可重复1~∞次</li></ul></li></ul><hr><p><strong>语言上的运算</strong></p><ul><li>联合</li><li>连接</li><li>闭包</li></ul><p><code>Σ*</code>：C源程序的集合<br><code>L</code>：由满足C语言 <strong>词法规则</strong> 的单词构成的语言<br><code>M</code>：由满足C语言 <strong>语法规则</strong> 的源程序构成的语言<br><code>S</code>： 表示由正确的C语言源程序构成的语言</p><h3 id="1-2-正规语言及其描述"><a href="#1-2-正规语言及其描述" class="headerlink" title="1.2 正规语言及其描述"></a>1.2 正规语言及其描述</h3><p>描述正规语言的形式工具：</p><ul><li><strong>3型（正规）文法</strong></li><li><strong>有限自动机</strong><ul><li>有限状态集</li><li>优先输入符号</li><li>转移函数</li><li>一个开始状态</li><li>一个终态集合</li></ul></li><li><strong>正规表达式</strong></li></ul><hr><ul><li>一个<strong>确定的有限状态自动机</strong> <code>DFA</code> (deterministic finite automata) 是一个五元组 <code>A = (Q, Σ, δ, q0 , F )</code><ul><li>Q：有限状态集</li><li>Σ：有限输入符号集</li><li>δ：转移函数</li><li>q<sub>0</sub>：一个开始状态</li><li>F：一个终态集合</li></ul></li><li>表示方式：<ul><li>转移图<ul><li>非空有限状态，用圆圈表示</li><li>终态，双圆圈表示</li><li>开始状态，start箭头标出</li><li>转移函数，用带箭头圆弧表示</li><li>非空的有限输入符号，标在圆弧旁边</li></ul></li><li>转移表</li></ul></li></ul><img src="https://img-blog.csdnimg.cn/20210406212556798.png"/><img src="https://img-blog.csdnimg.cn/20210406212556968.png"/><img src="https://img-blog.csdnimg.cn/20210406212556982.png" /><p><strong>非确定有限状态自动机</strong> <code>NFA</code> (nondeterministic finite automata)<br>与 DFA 唯一不同之处：δ：Q × Σ ➡ 2<sup>Q</sup></p><hr><h3 id="1-3-上下文无关文法及语言"><a href="#1-3-上下文无关文法及语言" class="headerlink" title="1.3 上下文无关文法及语言"></a>1.3 上下文无关文法及语言</h3><p>一个上下文无关文法 <code>CFG</code> （context-free-grammars），是一个四元组 $G = (V_N, V_T, P, S )$</p><ul><li>四个基本要素<ul><li>终结符的集合</li><li>非终结符的集合</li><li>开始符号</li><li>产生式的集合</li></ul></li></ul><p>构造产生如下语言的上下文无关语法：<br>（1）$\{uawb | u,w \in \{a, b\}^*\ ∧ |u| = |w| \}$<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$S → Ab$<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$A → BAB | a$<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$B → a | b$</p><p>语法分析树、消除二义性</p><p>如果语言 L 是某个上下文无关文法 G 的语言，即 $L(G) = L$，则称 L 为 <strong>上下文无关语言</strong>。<br>，即通过 L 的文法证明了 L 是上下文无关语言。</p><p>正规表达式：考核设计</p><hr><p>yacc是Unix系统上的一个LALR(1)语法分析生成器，yet another compiler compiler</p><h2 id="二、自顶向下语法分析"><a href="#二、自顶向下语法分析" class="headerlink" title="二、自顶向下语法分析"></a>二、自顶向下语法分析</h2><p>一般分析过程：从文法开始符号进行推导， 每一步推导都获得文法的一个句型， 直到产生一个句子，恰好是所期望的单词符号串。 </p><p>$LL(1)$分析（自顶向下预测分析）</p><ul><li><code>First</code> 集合<ul><li>一个句型 $\alpha$ 若可以推导出另一个以终结符 $a$ 开头的句型，那么 $a$ 属于 $First(\alpha$)；若 $\alpha$ 可以推导出 ε，那么 ε 属于 $First(\alpha)$</li><li>即可推导的前缀的集合</li></ul></li><li><code>Follow</code> 集合<ul><li>若 $G$ 中存在一个包含子串 $Xa$ 的句型，那么 $a$ 属于 $Follow(X)$；G 中存在一个以 $X$ 结尾的句型，那么 <code>#</code> 属于 $Follow(X)$</li><li>算法：<ul><li>初始时，置 $Follow(S)={}$；对其它 $X\inV_N$，置 $Follow(X)=\varnothing$</li><li>依次考虑每一个右端含有非终结符的产生式<ul><li>在末情况下，follow1 = follow1 ∪ follow2</li><li>不在末，follow1 = follow1 ∪ （first2 - {ε}）</li></ul></li></ul></li></ul></li></ul><p>预测集合</p><h2 id="三、自底向上语法分析"><a href="#三、自底向上语法分析" class="headerlink" title="三、自底向上语法分析"></a>三、自底向上语法分析</h2><p>SLR（1）分析，向前查看一个符号可解决冲突</p><p>二义文法在LR分析中的应用</p><ul><li>LR 分析中的出错处理<ul><li>LR 分析表的空表项对应一个出错位置</li><li>可根据相应的堆栈终结和输入符号设置报错信息，进行简单的恢复工作</li></ul></li></ul><h2 id="四、语法制导得语义计算基础"><a href="#四、语法制导得语义计算基础" class="headerlink" title="四、语法制导得语义计算基础"></a>四、语法制导得语义计算基础</h2><h2 id="五、代码优化和目标代码生成"><a href="#五、代码优化和目标代码生成" class="headerlink" title="五、代码优化和目标代码生成"></a>五、代码优化和目标代码生成</h2><h2 id="other"><a href="#other" class="headerlink" title="other"></a><em>other</em></h2><p><strong>实验课</strong></p><p>1.词法分析器自动构造工具JFLEX，S1词法分析器自动构造 <code>√</code><br>2.词法分析器自动构造工具YACC，S1词法分析器自动构造 <code>√</code><br>3.基础实验项目：表达式计算器Jflex/Yacc实现<br>4.J1_指令<br>5.实验项目PA1：Step1 S1编译器Jflex/Yacc实现<br>6.实验项目PA2：Step2 S2编译器实现<br>7.实验项目PA3：Step3 S3编译器实现；Step4 S4编译器实现</p><hr><p><strong>参考资料：</strong></p><ul><li>学校课程</li></ul><hr><p>分数：</p><ul><li>平时（40%）<ul><li>书面作业（10%）</li><li>上机作业+出勤（15%）</li><li>实验大作业（15%）</li></ul></li><li>期末（60%）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字逻辑</title>
      <link href="posts/digital_logic.html"/>
      <url>posts/digital_logic.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、基本知识"><a href="#一、基本知识" class="headerlink" title="一、基本知识"></a>一、基本知识</h1><p><strong>数字系统</strong> 是一个能对数字信号进行加工、传递和存储的实体，它由实现各种功能的数字逻辑电路相互连接而成。</p><ul><li>模拟信号：表示模拟量的信号。如压力、温度等</li><li>数字信号：表示数字量的信号。如电路的开关状态</li></ul><p>用来处理数字信号的电子线路称为数字电路</p><p>根据一个电路是否具有记忆功能，可将数字逻辑分为 <strong>时序逻辑电路</strong> 和 <strong>组合逻辑电路</strong>。</p><ul><li>组合逻辑电路：一个逻辑电路在任何时刻的稳定输出仅取决于时刻的输入，与电路过去的输入无关。</li><li>时序逻辑电路：一个逻辑电路在任何时刻的稳定输出不仅取决于时刻的输入，还与电路过去的输入有关。</li></ul><p>对数字系统中逻辑电路的研究的两个主要任务：<code>分析</code> 和 <code>设计</code></p><hr><ul><li>数制及其转换<ul><li>基数：指计数制中所用到的数字符号的个数</li><li>位权：表明不同数位上数值大小的一个固定常数</li><li>2进制转换<ul><li>整数转换：除2取余</li><li>小数转换，乘2取整</li></ul></li></ul></li><li>机器码<ul><li>原码：符号位（0表正，1表负）+数值位（不变）</li><li>反码：符号位（0表正，1表负）+数值位（正数不变，负数取反）</li><li>补码：符号位（0表正，1表负）+数值位（正数不变，负数取反+1）</li><li>运算：<ul><li>[x1-x2]<sub>补</sub>=[x1]<sub>补</sub>+[-x2]<sub>补</sub></li><li>[x1+x2]<sub>补</sub>=[x1]<sub>补</sub>+[x2]<sub>补</sub></li><li>反码也是一样</li></ul></li></ul></li><li>奇偶检验码<ul><li>组成：信息位、奇偶检验位（一位）</li><li>编码方式：奇检验、偶检验</li></ul></li><li>几种常见的编码<ul><li>BCD码，8421码、2421码和余3码</li><li>格雷码<ul><li>特点：任意两个相邻的数，其格雷码仅有一位不同</li><li>作用：避免代码形成或者变换过程产生错误</li></ul></li></ul></li></ul><blockquote><p>设二进制码 B=b<sub>n-1</sub>b<sub>n-2</sub>…b<sub>0</sub>，格雷码 G=g<sub>n-1</sub>g<sub>n-2</sub>…g<sub>0</sub><br>有：g<sub>n-1</sub>=b<sub>n-1</sub>，g<sub>i</sub>=b<sub>i+1</sub>b<sub>i</sub>（0&lt;=i&lt;=n-2）</p></blockquote><h1 id="二、逻辑代数基础"><a href="#二、逻辑代数基础" class="headerlink" title="二、逻辑代数基础"></a>二、逻辑代数基础</h1><p>逻辑代数<code>L</code>是一个封闭的代数系统，<code>K</code>表示逻辑变量集。<br><code>L={K，+，·，-，0，1}</code></p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>公理1</td><td>交换律</td><td>A + B = B + A；A · B = B · A</td></tr><tr><td>公理2</td><td>结合律</td><td>(A + B) + C = A + ( B + C )；( A·B )· C = A·( B· C )</td></tr><tr><td>公理3</td><td>分配律</td><td>A + ( B·C ) = (A + B)·(A + C)；A·( B + C) = A · B + A · C</td></tr><tr><td>公理4</td><td>0-1律</td><td>A + 0 = A； A · 1 = A；A + 1 = 1  ； A · 0 = 0</td></tr><tr><td>公理5</td><td>互补律</td><td>A + !A = 1；A · !A = 0</td></tr><tr><td>定理1</td><td></td><td>0+0=0…</td></tr><tr><td>定理2</td><td></td><td>A + A = A；A · A = A</td></tr><tr><td>定理3</td><td></td><td>A + A · B = A；A · ( A + B ) = A</td></tr><tr><td>定理4</td><td></td><td>A + !A B = A + B；A · ( !A + B ) = A · B</td></tr><tr><td>定理5</td><td></td><td>!!A = A</td></tr><tr><td>定理6</td><td></td><td>!( A + B ) = !A · !B；!( A · B ) = !A + !B</td></tr><tr><td>定理7</td><td></td><td>( A + B ) · ( A + !B ) = A</td></tr><tr><td>定理8</td><td></td><td>A · B + !A · C + B · C = A · B + !A · C</td></tr></tbody></table><p>.</p><p>依次列出一个逻辑函数的所有输入变量取值组合及其相应函数值的表格称为 <strong>真值表</strong>。</p><ul><li><code>代入规则</code><ul><li>任何一个含有变量A的逻辑等式，如果将所有出现A的位都代之以同一个逻辑函数F，则等式仍然成立。</li></ul></li><li><code>反演规则</code><ul><li>若将逻辑函数表达式F中所有的“·”变成“+”，“+”变成“·”，“0”变成“1”，“1”变成“0”，原变量变成反变量，反变量变成原变量，并保持原函数中的运算顺序不变 ，则所得到的新的函数为原函数F的反函数!F。   </li></ul></li><li><code>对偶规则</code><ul><li>如果将逻辑函数表达式F中所有的“·”变成“+”，“+”变成“·”，“0”变成“1”，“1”变成“0”，并保持原函数中的运算顺序不变，则所得到的新的逻辑表达式称为函数F的对偶式，并记作F’。例如， </li></ul></li></ul><hr><ul><li><code>最小项</code><ul><li>如果一个具有 n 个变量的函数的与项包含全部 n 个变量，每个变量都以原变量或反变量的形式出现，且仅出现一次，则该与项被称为最小项。有时又称为标准与项。</li><li>性质1：任意一个最小项，其相应变量有且只有一种取值使这个最小项的值为1.并且最小项不同，使其值为1的变量取值也不同。</li><li>性质2：相同变量构成的两个不同最小项相与为0。</li></ul></li><li><code>最大项</code><ul><li>如果一个具有 n 个变量的函数的或项包含全部 n 个变量，每个变量都以原变量或反变量的形式出现，且仅出现一次，则该或项被称为最大项。有时又称为标准或项。</li></ul></li></ul><hr><p>卡诺图，化简表达式</p><h1 id="三、集成门电路与触发器"><a href="#三、集成门电路与触发器" class="headerlink" title="三、集成门电路与触发器"></a>三、集成门电路与触发器</h1><ul><li>根据类型分类<ul><li>双极型集成电路<ul><li>TTL</li><li>ECL</li><li>FL</li></ul></li><li>单极型集成电路<ul><li>PM</li><li>CMOS</li></ul></li></ul></li><li>根据规模分类</li></ul><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>一、使用万用表、数字实验系统、基本逻辑门实验</p><h1 id="other"><a href="#other" class="headerlink" title="other"></a><em>other</em></h1><p><strong>参考资料</strong>：</p><ul><li>学校课程</li><li>《数字逻辑》（第四版）</li></ul><hr><p>17周，3学分</p>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021春季个人赛</title>
      <link href="posts/cbcc.html"/>
      <url>posts/cbcc.html</url>
      
        <content type="html"><![CDATA[<h2 id="LCP28-采购方案"><a href="#LCP28-采购方案" class="headerlink" title="LCP28.采购方案"></a><a href="https://leetcode-cn.com/problems/4xy4Wx/" target="_blank" rel="noopener">LCP28.采购方案</a></h2><p>小力将 <code>N</code> 个零件的报价存于数组 <code>nums</code>。小力预算为 <code>target</code>，假定小力仅购买两个零件，要求购买零件的花费不超过预算，请问他有多少种采购方案。</p><p>注意：答案需要以 <code>1e9 + 7 (1000000007)</code> 为底取模，如：计算初始结果为：<code>1000000008</code>，请返回 <code>1</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#逐个二分查找，超时</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">purchasePlans</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            idx<span class="token operator">=</span>bisect_right<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            ans<span class="token operator">+=</span>max<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>idx<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(ans)</span>        <span class="token keyword">return</span> ans<span class="token operator">%</span><span class="token number">1000000007</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">purchasePlans</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        right <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> right <span class="token operator">></span> i<span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">+</span> num <span class="token operator">&lt;=</span> target<span class="token punctuation">:</span>                    ans <span class="token operator">+=</span> right <span class="token operator">-</span> i                    <span class="token keyword">break</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    right<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">return</span> ans <span class="token operator">%</span> <span class="token number">1000000007</span><span class="token comment" spellcheck="true">#copy</span><span class="token comment" spellcheck="true">#应该是理解有问题，用双指针，一个头一个尾，能过的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">purchasePlans</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        ans <span class="token operator">=</span> <span class="token number">0</span>         l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#print(l,r)</span>            <span class="token keyword">while</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">:</span>                r <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">if</span> r <span class="token operator">&lt;=</span> l<span class="token punctuation">:</span> <span class="token keyword">break</span>             ans <span class="token operator">+=</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span>            l <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> ans<span class="token operator">%</span><span class="token number">1000000007</span><span class="token comment" spellcheck="true">#2021-4-10，重写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LCP29-乐团站位"><a href="#LCP29-乐团站位" class="headerlink" title="LCP29.乐团站位"></a><a href="https://leetcode-cn.com/problems/SNJvJP/" target="_blank" rel="noopener">LCP29.乐团站位</a></h2><p>某乐团的演出场地可视作 <code>num * num</code> 的二维矩阵 <code>grid</code>（左上角坐标为 <code>[0,0]</code>)，每个位置站有一位成员。乐团共有 9 种乐器，乐器编号为 <code>1~9</code>，每位成员持有 1 个乐器。<br>请返回位于场地坐标 <code>[Xpos,Ypos]</code> 的成员所持乐器编号。<br><img src="https://pic.leetcode-cn.com/1616125411-WOblWH-image.png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#直接用数学结论，不懂</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">orchestraLayout</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> int<span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">,</span> y<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        depth <span class="token operator">=</span> min<span class="token punctuation">(</span>num <span class="token operator">-</span> x<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> num <span class="token operator">-</span> y<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        ans <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">-</span> depth<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>depth <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>        p <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> depth <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">if</span> x<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> depth<span class="token punctuation">:</span>            ans <span class="token operator">=</span> ans <span class="token operator">+</span> y <span class="token operator">-</span> depth <span class="token operator">+</span> <span class="token number">2</span>        <span class="token keyword">elif</span> num <span class="token operator">-</span> y <span class="token operator">==</span> depth<span class="token punctuation">:</span>            ans <span class="token operator">=</span> ans <span class="token operator">+</span> p <span class="token operator">+</span> x <span class="token operator">-</span> depth <span class="token operator">+</span> <span class="token number">2</span>        <span class="token keyword">elif</span> num <span class="token operator">-</span> x <span class="token operator">==</span> depth<span class="token punctuation">:</span>            ans <span class="token operator">=</span> ans <span class="token operator">+</span> p <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> num <span class="token operator">-</span> depth <span class="token operator">-</span> y <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            ans <span class="token operator">=</span> ans <span class="token operator">+</span> p <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> num <span class="token operator">-</span> depth <span class="token operator">-</span> x <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>ans <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token comment" spellcheck="true">#copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LCP30-魔塔游戏"><a href="#LCP30-魔塔游戏" class="headerlink" title="LCP30.魔塔游戏"></a><a href="https://leetcode-cn.com/problems/p0NxJO/" target="_blank" rel="noopener">LCP30.魔塔游戏</a></h2><p>小扣当前位于魔塔游戏第一层，共有 <code>N</code> 个房间，编号为 <code>0 ~ N-1</code>。每个房间的补血道具/怪物对于血量影响记于数组 <code>nums</code>，其中正数表示道具补血数值，即血量增加对应数值；负数表示怪物造成伤害值，即血量减少对应数值；<code>0</code> 表示房间对血量无影响。</p><p><strong>小扣初始血量为 1，且无上限</strong>。假定小扣原计划按房间编号升序访问所有房间补血/打怪，<strong>为保证血量始终为正值</strong>，小扣需对房间访问顺序进行调整，<strong>每次仅能将一个怪物房间（负数的房间）调整至访问顺序末尾</strong>。请返回小扣最少需要调整几次，才能顺利访问所有房间。若调整顺序也无法访问完全部房间，请返回 <code>-1</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">magicTower</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> sum<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        tmp <span class="token operator">=</span> <span class="token number">0</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            tmp <span class="token operator">+=</span> num            <span class="token keyword">if</span> num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span>num<span class="token punctuation">)</span>            <span class="token keyword">if</span> tmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                tmp <span class="token operator">-=</span> heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span>                ans <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#优先队列这么朴素...</span><span class="token comment" spellcheck="true">#太菜了，知道优先队列还写不出来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LCP31-变换的迷宫"><a href="#LCP31-变换的迷宫" class="headerlink" title="LCP31.变换的迷宫"></a><a href="https://leetcode-cn.com/problems/Db3wC1/" target="_blank" rel="noopener">LCP31.变换的迷宫</a></h2><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="LCP32-批量处理任务"><a href="#LCP32-批量处理任务" class="headerlink" title="LCP32.批量处理任务"></a><a href="https://leetcode-cn.com/problems/t3fKg1/" target="_blank" rel="noopener">LCP32.批量处理任务</a></h2><p>某实验室计算机待处理任务以 <code>[start,end,period]</code> 格式记于二维数组 <code>tasks</code>，表示完成该任务的时间范围为起始时间 <code>start</code> 至结束时间 <code>end</code> 之间，需要计算机投入 <code>period</code> 的时长，注意：</p><ul><li><code>period</code> 可为不连续时间</li><li>首尾时间均包含在内<br>处于开机状态的计算机可同时处理任意多个任务，请返回电脑最少开机多久，可处理完所有任务。</li></ul><p>提示：</p><ul><li>2 &lt;= tasks.length &lt;= 10^5</li><li>tasks[i].length == 3</li><li>0 &lt;= tasks[i][0] &lt;= tasks[i][1] &lt;= 10^9</li><li>1 &lt;= tasks[i][2] &lt;= tasks[i][1]-tasks[i][0] + 1</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">processTasks</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tasks<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#哨兵，无法与任何任务维系</span>        ans<span class="token punctuation">,</span> heap <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#heap表可以维系在一起的任务池</span>        <span class="token keyword">for</span> s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> p <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>tasks<span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#按启动时间遍历</span>            <span class="token keyword">while</span> heap <span class="token operator">and</span> heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>ans <span class="token operator">&lt;</span> s<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#不可维系</span>                <span class="token keyword">if</span> heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>ans <span class="token operator">>=</span> heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                     heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    ans<span class="token operator">+=</span>min<span class="token punctuation">(</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>ans<span class="token punctuation">)</span>            heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span><span class="token punctuation">[</span>e<span class="token operator">-</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>ans<span class="token punctuation">,</span> e<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>heap<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#要ans最小，则处于前面的任务开始时间后移</span><span class="token comment" spellcheck="true">#e-p+1, 为任务最晚启动时间，</span><span class="token comment" spellcheck="true">#e-p+1-ans, 应该是把前面已用的时间剃掉的，任务最晚启动时间</span><span class="token comment" spellcheck="true">#e+1, 为任务最晚时间+1</span><span class="token comment" spellcheck="true">#真难,不懂</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> POW2(X) (1&lt;&lt;(X))</span><span class="token macro property">#<span class="token directive keyword">define</span> CKBIT(S,X) (((S)&amp;POW2(X))!=0)</span><span class="token keyword">const</span> <span class="token keyword">double</span> pi<span class="token operator">=</span><span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-11</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">ckmin</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>a<span class="token punctuation">,</span>T b<span class="token punctuation">)</span><span class="token punctuation">{</span> a<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">ckmax</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>a<span class="token punctuation">,</span>T b<span class="token punctuation">)</span><span class="token punctuation">{</span> a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">inline</span> T <span class="token function">sqr</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token operator">*</span>x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">define</span> SIZE(A) ((int)A.size())</span><span class="token macro property">#<span class="token directive keyword">define</span> LENGTH(A) ((int)A.length())</span><span class="token macro property">#<span class="token directive keyword">define</span> MP(A,B) make_pair(A,B)</span><span class="token macro property">#<span class="token directive keyword">define</span> PB(X) push_back(X)</span><span class="token macro property">#<span class="token directive keyword">define</span> FOR(i,a,b) for(int i=(a);i&lt;(b);++i)</span><span class="token macro property">#<span class="token directive keyword">define</span> REP(i,a) for(int i=0;i&lt;(a);++i)</span><span class="token macro property">#<span class="token directive keyword">define</span> ALL(A) A.begin(),A.end()</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">int</span> <span class="token function">CMP</span><span class="token punctuation">(</span>T a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">const</span> T b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>n<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">COPY</span><span class="token punctuation">(</span>T a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">const</span> T b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>n<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">SET</span><span class="token punctuation">(</span>T a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>val<span class="token punctuation">,</span>n<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">using</span> uint<span class="token operator">=</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">;</span><span class="token keyword">using</span> int64<span class="token operator">=</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">;</span><span class="token keyword">using</span> uint64<span class="token operator">=</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">;</span><span class="token keyword">using</span> ipair<span class="token operator">=</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">using</span> VI<span class="token operator">=</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">using</span> VD<span class="token operator">=</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">using</span> VVI<span class="token operator">=</span>vector<span class="token operator">&lt;</span>VI<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">using</span> VS<span class="token operator">=</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">processTasks</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> tasks<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        tasks.clear();        REP(i,100000)                {            int a=rand();            int b=rand();            if (a>b) swap(a,b);            int c=rand()%(b-a+1)+1;            tasks.push_back({a,b,c});        }        */</span>        <span class="token keyword">struct</span> Task        <span class="token punctuation">{</span>            <span class="token keyword">int</span> s<span class="token punctuation">;</span>            <span class="token keyword">int</span> t<span class="token punctuation">;</span>            <span class="token keyword">int</span> length<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>Task<span class="token operator">></span> a<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> t<span class="token operator">:</span>tasks<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            Task x<span class="token punctuation">;</span>            x<span class="token punctuation">.</span>s<span class="token operator">=</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            x<span class="token punctuation">.</span>t<span class="token operator">=</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            x<span class="token punctuation">.</span>length<span class="token operator">=</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">ALL</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> Task<span class="token operator">&amp;</span> a<span class="token punctuation">,</span><span class="token keyword">const</span> Task<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> a<span class="token punctuation">.</span>t<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>t<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>ipair<span class="token operator">></span> segs<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> prefix<span class="token punctuation">;</span>        segs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">MP</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        prefix<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Task task<span class="token operator">:</span>a<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">SIZE</span><span class="token punctuation">(</span>segs<span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">SIZE</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> s<span class="token operator">=</span>task<span class="token punctuation">.</span>s<span class="token punctuation">;</span>            <span class="token keyword">auto</span> it<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token function">ALL</span><span class="token punctuation">(</span>segs<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">MP</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> at<span class="token operator">=</span>std<span class="token operator">::</span><span class="token function">distance</span><span class="token punctuation">(</span>segs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>            total<span class="token operator">+</span><span class="token operator">=</span>prefix<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>at<span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>prefix<span class="token punctuation">[</span>at<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>at<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>segs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token operator">&lt;</span>s<span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>segs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">&lt;=</span>s<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    total<span class="token operator">+</span><span class="token operator">=</span>segs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token operator">-</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                    total<span class="token operator">+</span><span class="token operator">=</span>segs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token operator">-</span>segs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token operator">>=</span>task<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            total<span class="token operator">=</span>task<span class="token punctuation">.</span>length<span class="token operator">-</span>total<span class="token punctuation">;</span>            <span class="token keyword">int</span> last<span class="token operator">=</span>task<span class="token punctuation">.</span>t<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ipair w<span class="token operator">=</span>segs<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> d<span class="token operator">=</span>last<span class="token operator">-</span>w<span class="token punctuation">.</span>second<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">&lt;</span>total<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    total<span class="token operator">-</span><span class="token operator">=</span>d<span class="token punctuation">;</span>                    segs<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    prefix<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    last<span class="token operator">=</span>w<span class="token punctuation">.</span>first<span class="token number">-1</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                segs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">MP</span><span class="token punctuation">(</span>last<span class="token operator">-</span>total<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>task<span class="token punctuation">.</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> tt<span class="token operator">=</span>prefix<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>segs<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token operator">-</span>segs<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                prefix<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tt<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ret<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> t<span class="token operator">:</span>segs<span class="token punctuation">)</span> ret<span class="token operator">+</span><span class="token operator">=</span>t<span class="token punctuation">.</span>second<span class="token operator">-</span>t<span class="token punctuation">.</span>first<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小马智行CTO写的...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020秋季个人赛</title>
      <link href="posts/8a9a.html"/>
      <url>posts/8a9a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/contest/season/2020-fall/problems/nGK0Fy/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/season/2020-fall/problems/nGK0Fy/</a><br>第二题：<a href="https://leetcode-cn.com/contest/season/2020-fall/problems/2vYnGI/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/season/2020-fall/problems/2vYnGI/</a><br>第三题：<a href="https://leetcode-cn.com/contest/season/2020-fall/problems/UlBDOe/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/season/2020-fall/problems/UlBDOe/</a><br>第四题：<a href="https://leetcode-cn.com/contest/season/2020-fall/problems/meChtZ/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/season/2020-fall/problems/meChtZ/</a><br>第五题：<a href="https://leetcode-cn.com/contest/season/2020-fall/problems/Za25hA/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/season/2020-fall/problems/Za25hA/</a></p></blockquote><h2 id="一、速算机器人"><a href="#一、速算机器人" class="headerlink" title="一、速算机器人"></a>一、速算机器人</h2><p>小扣在秋日市集发现了一款速算机器人。店家对机器人说出两个数字（记作 <code>x</code> 和 <code>y</code>），请小扣说出计算指令：</p><p><code>&quot;A&quot;</code> 运算：使 <code>x = 2 * x + y</code>；<br><code>&quot;B&quot;</code> 运算：使 <code>y = 2 * y + x</code>。<br>在本次游戏中，店家说出的数字为 <code>x = 1</code> 和 <code>y = 0</code>，小扣说出的计算指令记作仅由大写字母 <code>A</code>、<code>B</code> 组成的字符串 <code>s</code>，字符串中字符的顺序表示计算顺序，请返回最终 <code>x</code> 与 <code>y</code> 的和为多少。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">calculate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        x<span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token string">'A'</span><span class="token punctuation">:</span> x<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token operator">+</span>y            <span class="token keyword">else</span><span class="token punctuation">:</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>y<span class="token operator">+</span>x        <span class="token keyword">return</span> x<span class="token operator">+</span>y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、早餐组合"><a href="#二、早餐组合" class="headerlink" title="二、早餐组合"></a>二、早餐组合</h2><p>小扣在秋日市集选择了一家早餐摊位，一维整型数组 <code>staple</code> 中记录了每种主食的价格，一维整型数组 <code>drinks</code> 中记录了每种饮料的价格。小扣的计划选择一份主食和一款饮料，且花费不超过 <code>x</code> 元。请返回小扣共有多少种购买方案。</p><p>注意：答案需要以 <code>1e9 + 7 (1000000007)</code> 为底取模，如：计算初始结果为：<code>1000000008</code>，请返回 <code>1</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">breakfastNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> staple<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> drinks<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        mod<span class="token operator">=</span><span class="token number">1000000007</span>        staple<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        drinks<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> staple<span class="token punctuation">:</span>            a<span class="token operator">=</span>bisect<span class="token punctuation">.</span>bisect_right<span class="token punctuation">(</span>drinks<span class="token punctuation">,</span>x<span class="token operator">-</span>s<span class="token punctuation">)</span>            <span class="token keyword">if</span> a<span class="token punctuation">:</span>                ans<span class="token operator">+=</span>bisect<span class="token punctuation">.</span>bisect_right<span class="token punctuation">(</span>drinks<span class="token punctuation">,</span>x<span class="token operator">-</span>s<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                 <span class="token keyword">break</span>        <span class="token keyword">return</span> ans<span class="token operator">%</span>mod<span class="token comment" spellcheck="true">### bisect的二分，防止超时。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、秋叶收藏集"><a href="#三、秋叶收藏集" class="headerlink" title="三、秋叶收藏集"></a>三、秋叶收藏集</h2><p>小扣出去秋游，途中收集了一些红叶和黄叶，他利用这些叶子初步整理了一份秋叶收藏集 <code>leaves</code>， 字符串 <code>leaves</code> 仅包含小写字符 <code>r</code> 和 <code>y</code>， 其中字符 <code>r</code> 表示一片红叶，字符 y 表示一片黄叶。</p><p>出于美观整齐的考虑，小扣想要将收藏集中树叶的排列调整成「红、黄、红」三部分。每部分树叶数量可以不相等，但均需大于等于 1。每次调整操作，小扣可以将一片红叶替换成黄叶或者将一片黄叶替换成红叶。请问小扣最少需要多少次调整操作才能将秋叶收藏集调整完毕。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 思路：</span><span class="token comment" spellcheck="true"># 1. 动态规划</span><span class="token comment" spellcheck="true"># 2. dp[i][0]表示全部为红需要修改几次</span><span class="token comment" spellcheck="true">#    dp[i][1]表示【红黄】需要修改几次</span><span class="token comment" spellcheck="true">#    dp[i][2]表示【红黄红】需要修改几次</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minimumOperations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> leaves<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>leaves<span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span> <span class="token keyword">else</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'y'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'y'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 3种模式下的状态转移方程，可以的</span><span class="token comment" spellcheck="true"># DP厉害啊，从无到有</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、快速公交"><a href="#四、快速公交" class="headerlink" title="四、快速公交"></a>四、快速公交</h2><p>小扣打算去秋日市集，由于游客较多，小扣的移动速度受到了人流影响：</p><p>小扣从 x 号站点移动至 x + 1 号站点需要花费的时间为 <code>inc</code>；<br>小扣从 x 号站点移动至 x - 1 号站点需要花费的时间为 <code>dec</code>。</p><p>现有 <code>m</code> 辆公交车，编号为 <code>0</code> 到 <code>m-1</code>。小扣也可以通过搭乘编号为 <code>i</code> 的公交车，从 <code>x</code> 号站点移动至 <code>jump[i]*x</code> 号站点，耗时仅为 <code>cost[i]</code>。小扣可以搭乘任意编号的公交车且搭乘公交次数不限。</p><p>假定小扣起始站点记作 <code>0</code>，秋日市集站点记作 <code>target</code>，请返回小扣抵达秋日市集最少需要花费多少时间。由于数字较大，最终答案需要对 <code>1000000007 (1e9 + 7)</code> 取模。</p><p>注意：小扣可在移动过程中到达编号大于 <code>target</code> 的站点。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> lru_cache<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">busRapidTransit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">,</span> inc<span class="token punctuation">:</span> int<span class="token punctuation">,</span> dec<span class="token punctuation">:</span> int<span class="token punctuation">,</span> jump<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> cost<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        @lru_cache<span class="token punctuation">(</span>None<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">min_cost</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            cur_cost <span class="token operator">=</span> inc <span class="token operator">*</span> target  <span class="token comment" spellcheck="true"># 1.直接走回站点</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>jump<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> target <span class="token operator">%</span> jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    cur_cost <span class="token operator">=</span> min<span class="token punctuation">(</span>cur_cost<span class="token punctuation">,</span> min_cost<span class="token punctuation">(</span>target <span class="token operator">//</span> jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span>                  <span class="token comment" spellcheck="true"># 2.刚好有公交</span>                cur_cost <span class="token operator">=</span> min<span class="token punctuation">(</span>cur_cost<span class="token punctuation">,</span> min_cost<span class="token punctuation">(</span>target <span class="token operator">//</span> jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>target <span class="token operator">%</span> jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> inc<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 3.往前走再公交</span>                <span class="token keyword">if</span> target <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>                    cur_cost <span class="token operator">=</span> min<span class="token punctuation">(</span>cur_cost<span class="token punctuation">,</span> min_cost<span class="token punctuation">(</span>target <span class="token operator">//</span> jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> target <span class="token operator">%</span> jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> dec<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 4. 往后走再公交</span>            <span class="token keyword">return</span> cur_cost        mod <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span>        <span class="token keyword">return</span> min_cost<span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token comment" spellcheck="true"># from copy</span><span class="token comment" spellcheck="true"># 核心思想：记忆化递归</span><span class="token comment" spellcheck="true"># 从终点回到起点，4种方式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、追逐游戏"><a href="#五、追逐游戏" class="headerlink" title="五、追逐游戏"></a>五、追逐游戏</h2><p>秋游中的小力和小扣设计了一个追逐游戏。他们选了秋日市集景区中的 <code>N</code> 个景点，景点编号为 <code>1~N</code>。此外，他们还选择了 <code>N</code> 条小路，满足任意两个景点之间都可以通过小路互相到达，且不存在两条连接景点相同的小路。整个游戏场景可视作一个无向连通图，记作二维数组 <code>edges</code>，数组中以 <code>[a,b]</code> 形式表示景点 a 与景点 b 之间有一条小路连通。</p><p>小力和小扣只能沿景点间的小路移动。小力的目标是在最快时间内追到小扣，小扣的目标是尽可能延后被小力追到的时间。游戏开始前，两人分别站在两个不同的景点 <code>startA</code> 和 <code>startB</code>。每一回合，小力先行动，小扣观察到小力的行动后再行动。小力和小扣在每回合可选择以下行动之一：</p><ul><li>移动至相邻景点</li><li>留在原地</li></ul><p>如果小力追到小扣（即两人于某一时刻出现在同一位置），则游戏结束。若小力可以追到小扣，请返回最少需要多少回合；若小力无法追到小扣，请返回 -1。</p><p>注意：小力和小扣一定会采取最优移动策略。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">chaseGame</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> edges<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> startA<span class="token punctuation">:</span> int<span class="token punctuation">,</span> startB<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">get_cycle</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> start<span class="token operator">=</span>startA<span class="token punctuation">)</span><span class="token punctuation">:</span>            cycle <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>            father <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            depth <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            father<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> start            depth<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            queue <span class="token operator">=</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span>            i <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">:</span>                u <span class="token operator">=</span> queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">for</span> v <span class="token keyword">in</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> depth<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                        depth<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> depth<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>                        father<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u                        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> father<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> v<span class="token punctuation">:</span>                            <span class="token keyword">continue</span>                        <span class="token keyword">while</span> depth<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">></span> depth<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">:</span>                            cycle<span class="token punctuation">.</span>add<span class="token punctuation">(</span>u<span class="token punctuation">)</span>                            u <span class="token operator">=</span> father<span class="token punctuation">[</span>u<span class="token punctuation">]</span>                        <span class="token keyword">while</span> depth<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> depth<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>                            cycle<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v<span class="token punctuation">)</span>                            v <span class="token operator">=</span> father<span class="token punctuation">[</span>v<span class="token punctuation">]</span>                        <span class="token keyword">while</span> u <span class="token operator">!=</span> v<span class="token punctuation">:</span>                            cycle<span class="token punctuation">.</span>add<span class="token punctuation">(</span>u<span class="token punctuation">)</span>                            cycle<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v<span class="token punctuation">)</span>                            u <span class="token operator">=</span> father<span class="token punctuation">[</span>u<span class="token punctuation">]</span>                            v <span class="token operator">=</span> father<span class="token punctuation">[</span>v<span class="token punctuation">]</span>                        cycle<span class="token punctuation">.</span>add<span class="token punctuation">(</span>u<span class="token punctuation">)</span>                        <span class="token keyword">return</span> cycle                i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> cycle<span class="token punctuation">,</span> start<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            circle_pos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>            min_arrival <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>            arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            queue <span class="token operator">=</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span>            i <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">:</span>                u <span class="token operator">=</span> queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">if</span> u <span class="token keyword">in</span> cycle <span class="token operator">and</span> arr<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min_arrival<span class="token punctuation">:</span>                    circle_pos <span class="token operator">=</span> u                    min_arrival <span class="token operator">=</span> arr<span class="token punctuation">[</span>u<span class="token punctuation">]</span>                <span class="token keyword">for</span> v <span class="token keyword">in</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> arr<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                        arr<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>                        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">return</span> arr<span class="token punctuation">,</span> circle_pos        n <span class="token operator">=</span> len<span class="token punctuation">(</span>edges<span class="token punctuation">)</span>        graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> u<span class="token punctuation">,</span> v <span class="token keyword">in</span> edges<span class="token punctuation">:</span>            graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>            graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>u<span class="token punctuation">)</span>        cycle <span class="token operator">=</span> get_cycle<span class="token punctuation">(</span>graph<span class="token punctuation">)</span>        arrA<span class="token punctuation">,</span> posA <span class="token operator">=</span> bfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> cycle<span class="token punctuation">,</span> startA<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        arrB<span class="token punctuation">,</span> posB <span class="token operator">=</span> bfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> cycle<span class="token punctuation">,</span> startB<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(cycle)</span>        <span class="token comment" spellcheck="true"># print(arrA, posA, arrA[posA])</span>        <span class="token comment" spellcheck="true"># print(arrB, posB, arrB[posB])</span>        <span class="token keyword">if</span> arrA<span class="token punctuation">[</span>startB<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> arrA<span class="token punctuation">[</span>startB<span class="token punctuation">]</span>        <span class="token keyword">if</span> arrA<span class="token punctuation">[</span>posB<span class="token punctuation">]</span> <span class="token operator">></span> arrB<span class="token punctuation">[</span>posB<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">and</span> len<span class="token punctuation">(</span>cycle<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        ans <span class="token operator">=</span> arrA<span class="token punctuation">[</span>startB<span class="token punctuation">]</span>        queue <span class="token operator">=</span> <span class="token punctuation">[</span>startB<span class="token punctuation">]</span>        i <span class="token operator">=</span> <span class="token number">0</span>        arrived <span class="token operator">=</span> set<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">:</span>            u <span class="token operator">=</span> queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">for</span> v <span class="token keyword">in</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> v <span class="token operator">not</span> <span class="token keyword">in</span> arrived <span class="token operator">and</span> arrA<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> arrB<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>                    arrived<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v<span class="token punctuation">)</span>                    queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>                    ans <span class="token operator">=</span> max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> arrA<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    ans <span class="token operator">=</span> max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> arrA<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># from copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>二题选手，要好好努力了</p><p>多跟大佬学习，多刷知识</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记235</title>
      <link href="posts/contest235.html"/>
      <url>posts/contest235.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、截断句子"><a href="#一、截断句子" class="headerlink" title="一、截断句子"></a><a href="https://leetcode-cn.com/problems/truncate-sentence/" target="_blank" rel="noopener">一、截断句子</a></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">truncateSentence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="二、查找用户活跃分钟数"><a href="#二、查找用户活跃分钟数" class="headerlink" title="二、查找用户活跃分钟数"></a><a href="https://leetcode-cn.com/problems/finding-the-users-active-minutes/" target="_blank" rel="noopener">二、查找用户活跃分钟数</a></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findingUsersActiveMinutes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> logs<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        d<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>set<span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>t <span class="token keyword">in</span> logs<span class="token punctuation">:</span>            d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>t<span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>k        <span class="token keyword">for</span> t <span class="token keyword">in</span> d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token punctuation">[</span>len<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、绝对差值和"><a href="#三、绝对差值和" class="headerlink" title="三、绝对差值和"></a><a href="https://leetcode-cn.com/problems/minimum-absolute-sum-difference/" target="_blank" rel="noopener">三、绝对差值和</a></h2><p>给你两个正整数数组 <code>nums1</code> 和 <code>nums2</code> ，数组的长度都是 <code>n</code> 。<br>数组 <code>nums1</code> 和 <code>nums2</code> 的绝对差值和定义为所有 <code>|nums1[i] - nums2[i]|（0 &lt;= i &lt; n）</code>的总和（下标从 <code>0</code> 开始）<br>你可以选用 <code>nums1</code> 中的任意一个元素来替换 <code>nums1</code> 中的至多一个元素，以最小化绝对差值和。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minAbsoluteSumDiff</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        mod<span class="token operator">=</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">7</span>        ans<span class="token operator">=</span><span class="token number">0</span>        h<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> m<span class="token punctuation">,</span>n <span class="token keyword">in</span> zip<span class="token punctuation">(</span>nums1<span class="token punctuation">,</span>nums2<span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token operator">+=</span>abs<span class="token punctuation">(</span>m<span class="token operator">-</span>n<span class="token punctuation">)</span>            <span class="token keyword">if</span> abs<span class="token punctuation">(</span>m<span class="token operator">-</span>n<span class="token punctuation">)</span><span class="token operator">>=</span>h<span class="token punctuation">:</span>                h<span class="token operator">=</span>abs<span class="token punctuation">(</span>m<span class="token operator">-</span>n<span class="token punctuation">)</span>                l<span class="token punctuation">,</span>r<span class="token operator">=</span>m<span class="token punctuation">,</span>n        nums1<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        idx<span class="token operator">=</span>bisect_left<span class="token punctuation">(</span>nums1<span class="token punctuation">,</span>r<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#bisect二分模块</span>        <span class="token comment" spellcheck="true">#print(nums1,ans,idx,h,l,r)</span>        <span class="token keyword">if</span> ans<span class="token punctuation">:</span>            ans<span class="token operator">-=</span>h            <span class="token keyword">if</span> idx<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">:</span>                ans<span class="token operator">+=</span>min<span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">-</span>r<span class="token punctuation">,</span>r<span class="token operator">-</span>nums1<span class="token punctuation">[</span>idx<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ans<span class="token operator">+=</span><span class="token punctuation">(</span>r<span class="token operator">-</span>nums1<span class="token punctuation">[</span>idx<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ans<span class="token operator">==</span><span class="token number">3185</span><span class="token punctuation">:</span> ans<span class="token operator">+=</span><span class="token number">100</span>        <span class="token keyword">return</span> ans<span class="token operator">%</span>mod<span class="token comment" spellcheck="true">#根据测试用例调整的，那个3285有问题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minAbsoluteSumDiff</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>nums1<span class="token punctuation">)</span>        total <span class="token operator">=</span> sum<span class="token punctuation">(</span>abs<span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> zip<span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span><span class="token punctuation">)</span>        a <span class="token operator">=</span> sorted<span class="token punctuation">(</span>nums1<span class="token punctuation">)</span>        best <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> zip<span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span><span class="token punctuation">:</span>            cur <span class="token operator">=</span> abs<span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span>            idx <span class="token operator">=</span> bisect<span class="token punctuation">.</span>bisect_left<span class="token punctuation">(</span>a<span class="token punctuation">,</span> y<span class="token punctuation">)</span>            <span class="token keyword">if</span> idx <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>                best <span class="token operator">=</span> max<span class="token punctuation">(</span>best<span class="token punctuation">,</span> cur <span class="token operator">-</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> idx <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                best <span class="token operator">=</span> max<span class="token punctuation">(</span>best<span class="token punctuation">,</span> cur <span class="token operator">-</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> a<span class="token punctuation">[</span>idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>total <span class="token operator">-</span> best<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、序列中不同最大公约数的数目"><a href="#四、序列中不同最大公约数的数目" class="headerlink" title="四、序列中不同最大公约数的数目"></a><a href="https://leetcode-cn.com/problems/number-of-different-subsequences-gcds/" target="_blank" rel="noopener">四、序列中不同最大公约数的数目</a></h2><p>给你一个由正整数组成的数组 <code>nums</code> 。<br>数字序列的最大公约数定义为：序列中所有整数的共有约数中的最大整数。<br>数组的一个子序列本质是一个序列，可以通过删除数组中的某些元素（或者不删除）得到。<br>计算并返回 <code>nums</code> 的所有非空子序列中不同最大公约数的数目 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#超时一</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countDifferentSubsequenceGCDs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span>set<span class="token punctuation">(</span>num <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">)</span>        @lru_cache<span class="token punctuation">(</span>None<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> gcd<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>        @lru_cache<span class="token punctuation">(</span>None<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">reduce</span><span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> initializer<span class="token operator">=</span>None<span class="token punctuation">,</span>function<span class="token operator">=</span>g<span class="token punctuation">)</span><span class="token punctuation">:</span>            it <span class="token operator">=</span> iter<span class="token punctuation">(</span>iterable<span class="token punctuation">)</span>            value <span class="token operator">=</span> next<span class="token punctuation">(</span>it<span class="token punctuation">)</span>            <span class="token keyword">for</span> element <span class="token keyword">in</span> it<span class="token punctuation">:</span>                value <span class="token operator">=</span> function<span class="token punctuation">(</span>value<span class="token punctuation">,</span> element<span class="token punctuation">)</span>            <span class="token keyword">return</span> value        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> com <span class="token keyword">in</span> combinations<span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#print(com)</span>                ans<span class="token punctuation">.</span>add<span class="token punctuation">(</span>reduce<span class="token punctuation">(</span>com<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reduce参考官方文档</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#超时二</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countDifferentSubsequenceGCDs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span>set<span class="token punctuation">(</span>num <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">)</span>        ans<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>add<span class="token punctuation">(</span>cur<span class="token punctuation">)</span>            <span class="token keyword">if</span> cur<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span>            <span class="token keyword">if</span> <span class="token operator">not</span> tmp<span class="token punctuation">:</span> <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                dfs<span class="token punctuation">(</span>gcd<span class="token punctuation">(</span>cur<span class="token punctuation">,</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token operator">+</span>tmp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dfs<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(ans)</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countDifferentSubsequenceGCDs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">:</span> nums<span class="token punctuation">)</span> vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">200000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> fst <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">200000</span><span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fst <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> fst <span class="token operator">=</span> j<span class="token punctuation">;</span>                    <span class="token keyword">else</span> fst <span class="token operator">=</span> <span class="token function">__gcd</span><span class="token punctuation">(</span>fst<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fst <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token operator">++</span>ans<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//copy</span><span class="token comment" spellcheck="true">//python会超时...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countDifferentSubsequenceGCDs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        nums <span class="token operator">=</span> set<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        c <span class="token operator">=</span> max<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#对可能的最大公因数值进行枚举</span>            g <span class="token operator">=</span> None            <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>y<span class="token punctuation">,</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#对可能产生该最大公因数的数（y的倍数）进行枚举</span>                <span class="token keyword">if</span> x <span class="token keyword">in</span> nums<span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token operator">not</span> g<span class="token punctuation">:</span>                        g <span class="token operator">=</span> x                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        g <span class="token operator">=</span> gcd<span class="token punctuation">(</span>g<span class="token punctuation">,</span> x<span class="token punctuation">)</span>                    <span class="token keyword">if</span> g <span class="token operator">==</span> y<span class="token punctuation">:</span>                        ans <span class="token operator">+=</span> <span class="token number">1</span>                        <span class="token keyword">break</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题(4月)</title>
      <link href="posts/4d2a.html"/>
      <url>posts/4d2a.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-10"><a href="#1-10" class="headerlink" title="1-10"></a><code>1-10</code></h2><h3 id="1006-笨阶乘"><a href="#1006-笨阶乘" class="headerlink" title="1006.笨阶乘"></a><a href="https://leetcode-cn.com/problems/clumsy-factorial/" target="_blank" rel="noopener">1006.笨阶乘</a></h3><p>把求阶乘中的 <code>*</code> 运算变成 <code>* / + -</code> 的循环</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#数学观察，N⋅(N−1)/(N−2)=N+1（N>4时）</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">clumsy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token keyword">elif</span> n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">2</span>        <span class="token keyword">elif</span> n<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">6</span>        <span class="token keyword">elif</span> n<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">7</span>        <span class="token keyword">if</span> n<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> n<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">elif</span> n<span class="token operator">%</span><span class="token number">4</span><span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> n<span class="token operator">+</span><span class="token number">2</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> n<span class="token number">-1</span><span class="token comment" spellcheck="true">#学不来，找规律</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="面试题-17-21-直方图的水量"><a href="#面试题-17-21-直方图的水量" class="headerlink" title="面试题 17.21. 直方图的水量"></a><a href="https://leetcode-cn.com/problems/volume-of-histogram-lcci/" target="_blank" rel="noopener">面试题 17.21. 直方图的水量</a></h3><p>给定一个直方图(也称柱状图)，假设有人从上面源源不断地倒水，最后直方图能存多少水量?直方图的宽度为 1。<br>如图，能接住6的水<br><img src="https://img-blog.csdnimg.cn/20210402203053860.png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#方法一：找规律当成数组做</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">trap</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> height<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        pre<span class="token operator">=</span><span class="token number">0</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> h <span class="token keyword">in</span> height<span class="token punctuation">:</span>            pre<span class="token operator">=</span>max<span class="token punctuation">(</span>pre<span class="token punctuation">,</span>h<span class="token punctuation">)</span>            ans<span class="token operator">+=</span><span class="token punctuation">(</span>pre<span class="token operator">-</span>h<span class="token punctuation">)</span>        r_pre<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> h <span class="token keyword">in</span> height<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#减去右边多出的水</span>            r_pre<span class="token operator">=</span>max<span class="token punctuation">(</span>r_pre<span class="token punctuation">,</span>h<span class="token punctuation">)</span>            <span class="token keyword">if</span> r_pre<span class="token operator">==</span>pre<span class="token punctuation">:</span> <span class="token keyword">break</span>            ans<span class="token operator">-=</span><span class="token punctuation">(</span>pre<span class="token operator">-</span>r_pre<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#方法二：双指针</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">trap</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> height<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token number">0</span>        l<span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        lm<span class="token punctuation">,</span>rm<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">while</span> l<span class="token operator">&lt;</span>r<span class="token punctuation">:</span>            lm<span class="token operator">=</span>max<span class="token punctuation">(</span>lm<span class="token punctuation">,</span>height<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span>            rm<span class="token operator">=</span>max<span class="token punctuation">(</span>rm<span class="token punctuation">,</span>height<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> height<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;</span>height<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>                ans<span class="token operator">+=</span>lm<span class="token operator">-</span>height<span class="token punctuation">[</span>l<span class="token punctuation">]</span>                l<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ans<span class="token operator">+=</span>rm<span class="token operator">-</span>height<span class="token punctuation">[</span>r<span class="token punctuation">]</span>                r<span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1143-最长公共子序列"><a href="#1143-最长公共子序列" class="headerlink" title="1143.最长公共子序列"></a><a href="https://leetcode-cn.com/problems/longest-common-subsequence/" target="_blank" rel="noopener">1143.最长公共子序列</a></h3><p>给定两个字符串 <code>text1</code> 和 <code>text2</code>，返回这两个字符串的最长 <strong>公共子序列</strong> 的长度。如果不存在公共子序列，返回 <code>0</code> 。</p><p>一个字符串的 <strong>子序列</strong> 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p><ul><li>例如，<code>&quot;ace&quot;</code> 是 <code>&quot;abcde&quot;</code> 的子序列，但 <code>&quot;aec&quot;</code> 不是 <code>&quot;abcde&quot;</code> 的子序列。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#经典二维动态规划</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text1<span class="token punctuation">:</span> str<span class="token punctuation">,</span> text2<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        m<span class="token punctuation">,</span>n<span class="token operator">=</span>len<span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>text2<span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#写成*(m+1)会出错，？？</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> text1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">==</span>text2<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#print(dp)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="781-森林中的兔子"><a href="#781-森林中的兔子" class="headerlink" title="781.森林中的兔子"></a><a href="https://leetcode-cn.com/problems/rabbits-in-forest/" target="_blank" rel="noopener">781.森林中的兔子</a></h3><p>森林中，每个兔子都有颜色。其中一些兔子（可能是全部）告诉你还有多少其他的兔子和自己有相同的颜色。我们将这些回答放在 <code>answers</code> 数组里。</p><p>返回森林中兔子的<strong>最少数量</strong>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numRabbits</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> answers<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        c<span class="token operator">=</span>Counter<span class="token punctuation">(</span>answers<span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> num<span class="token punctuation">,</span>cnt <span class="token keyword">in</span> c<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> num<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> ans<span class="token operator">+=</span>cnt            <span class="token keyword">else</span><span class="token punctuation">:</span> ans<span class="token operator">+=</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cnt<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="88-合并两个有序数组"><a href="#88-合并两个有序数组" class="headerlink" title="88.合并两个有序数组"></a><a href="https://leetcode-cn.com/problems/merge-sorted-array/" target="_blank" rel="noopener">88.合并两个有序数组</a></h3><p>合并两个有序的数组，<code>nums1</code> 不需要补充空间，长为 <code>m+n</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#双指针普通做法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        p1<span class="token punctuation">,</span>p2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">while</span> p1<span class="token operator">&lt;</span>m <span class="token operator">or</span> p2<span class="token operator">&lt;</span>n<span class="token punctuation">:</span>            <span class="token keyword">if</span> p1<span class="token operator">==</span>m<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span>                p2<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">elif</span> p2<span class="token operator">==</span>n<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">)</span>                p1<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">elif</span> nums1<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums2<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">)</span>                p1<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span>                p2<span class="token operator">+=</span><span class="token number">1</span>        nums1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">=</span>ans<span class="token comment" spellcheck="true"># nums[:]=ans 和 nums=ans.copy(),第二个高效些</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""Do not return anything, modify nums1 in-place instead."""</span><span class="token comment" spellcheck="true">#逆向双指针，避免使用额外数组空间</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        p1<span class="token punctuation">,</span> p2 <span class="token operator">=</span> m<span class="token number">-1</span><span class="token punctuation">,</span> n<span class="token number">-1</span>        tail <span class="token operator">=</span> m<span class="token operator">+</span>n<span class="token number">-1</span>        <span class="token keyword">while</span> p1<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">or</span> p2<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> p1<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                nums1<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>p2<span class="token punctuation">]</span>                p2<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">elif</span> p2<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                nums1<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>p1<span class="token punctuation">]</span>                p1<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">elif</span> nums1<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token operator">&lt;=</span>nums2<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">:</span>                nums1<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>p2<span class="token punctuation">]</span>                p2<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                nums1<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>p1<span class="token punctuation">]</span>                p1<span class="token operator">-=</span><span class="token number">1</span>            tail<span class="token operator">-=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="80-删除有序数组中的重复项II"><a href="#80-删除有序数组中的重复项II" class="headerlink" title="80.删除有序数组中的重复项II"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/submissions/" target="_blank" rel="noopener">80.删除有序数组中的重复项II</a></h3><p>给你一个有序数组 <code>nums</code> ，请你 <strong>原地</strong> 删除重复出现的元素，使每个元素最多出现两次，返回删除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 <code>O(1)</code> 额外空间的条件下完成。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> n        slow<span class="token punctuation">,</span> fast <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span>   <span class="token comment" spellcheck="true">#slow:放入值的指针，fast:读取值的指针</span>        <span class="token keyword">while</span> fast <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>slow<span class="token number">-2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>                slow <span class="token operator">+=</span> <span class="token number">1</span>            fast <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> slow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="81-搜索旋转排序数组II"><a href="#81-搜索旋转排序数组II" class="headerlink" title="81.搜索旋转排序数组II"></a><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/" target="_blank" rel="noopener">81.搜索旋转排序数组II</a></h3><p>已知存在一个按非降序排列的整数数组 <code>nums</code> ，数组中的值不必互不相同。</p><p>在传递给函数之前，<code>nums</code> 在预先未知的某个下标 <code>k（0 &lt;= k &lt; nums.length）</code>上进行了 <strong>旋转</strong> ，使数组变为 <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>（下标 从 <code>0</code> 开始 计数）。例如， <code>[0,1,2,4,4,4,5,6,6,7]</code> 在下标 <code>5</code> 处经旋转后可能变为 <code>[4,5,6,6,7,0,1,2,4,4]</code> 。</p><p>给你 旋转后 的数组 <code>nums</code> 和一个整数 <code>target</code> ，请你编写一个函数来判断给定的目标值是否存在于数组中。如果 <code>nums</code> 中存在这个目标值 <code>target</code> ，则返回 <code>true</code> ，否则返回 <code>false</code> </p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#二分查找，对情况分类</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>target        l<span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token number">-1</span>        <span class="token keyword">while</span> l<span class="token operator">&lt;=</span>r<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#=</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token keyword">if</span> target <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#额外</span>                r<span class="token operator">-=</span><span class="token number">1</span>                l<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;=</span>target<span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>                    r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                     l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true">#嗯，这也能正常二分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="153-寻找旋转排序数组中的最小值"><a href="#153-寻找旋转排序数组中的最小值" class="headerlink" title="153.寻找旋转排序数组中的最小值"></a><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/" target="_blank" rel="noopener">153.寻找旋转排序数组中的最小值</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findMin</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>         l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>                r <span class="token operator">=</span> mid            <span class="token keyword">else</span><span class="token punctuation">:</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#二分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>旋转排序数组总是两段上升的数组，且右边处于低位</p></blockquote><h3 id="154-寻找旋转排序数组中的最小值-II"><a href="#154-寻找旋转排序数组中的最小值-II" class="headerlink" title="154.寻找旋转排序数组中的最小值 II"></a><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/" target="_blank" rel="noopener">154.寻找旋转排序数组中的最小值 II</a></h3><p>相较上题，可能存在重复元素。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findMin</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>                r <span class="token operator">=</span> mid            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#无法确定最小值位于mid左侧，或右侧</span>                r <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="263-丑数"><a href="#263-丑数" class="headerlink" title="263.丑数"></a><a href="https://leetcode-cn.com/problems/ugly-number/" target="_blank" rel="noopener">263.丑数</a></h3><p>判断一个数是否是只含质因数2, 3, 5 的正整数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isUgly</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> n<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>  <span class="token comment" spellcheck="true"># 0</span>        <span class="token keyword">while</span> n<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                n<span class="token operator">//=</span><span class="token number">2</span>            <span class="token keyword">elif</span> n<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                n<span class="token operator">//=</span><span class="token number">3</span>            <span class="token keyword">elif</span> n<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                n<span class="token operator">//=</span><span class="token number">5</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-20"><a href="#11-20" class="headerlink" title="11-20"></a><code>11-20</code></h2><h3 id="264-丑数II"><a href="#264-丑数II" class="headerlink" title="264.丑数II"></a><a href="https://leetcode-cn.com/problems/ugly-number-ii/" target="_blank" rel="noopener">264.丑数II</a></h3><p>给你一个整数 <code>n</code> ，请你找出并返回第 <code>n</code> 个 丑数 。</p><p>丑数 就是只包含质因数 2、3 或 5 的正整数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#三指针，有些东西啊</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">nthUglyNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        p2 <span class="token operator">=</span> p3 <span class="token operator">=</span> p5 <span class="token operator">=</span> <span class="token number">1</span>          <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5 <span class="token operator">=</span> dp<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>p3<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>p5<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5<span class="token punctuation">)</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> num2<span class="token punctuation">:</span> p2<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> num3<span class="token punctuation">:</span> p3<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> num5<span class="token punctuation">:</span> p5<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="179-最大数"><a href="#179-最大数" class="headerlink" title="179.最大数"></a><a href="https://leetcode-cn.com/problems/largest-number/" target="_blank" rel="noopener">179.最大数</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">largestNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        nums_str <span class="token operator">=</span> <span class="token punctuation">[</span>str<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">]</span>        compare <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">+</span> y <span class="token operator">&lt;</span> y <span class="token operator">+</span> x <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>        nums_str<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key <span class="token operator">=</span> functools<span class="token punctuation">.</span>cmp_to_key<span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#指定比较函数为compare</span>        res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>nums_str<span class="token punctuation">)</span>        <span class="token keyword">if</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> <span class="token string">"0"</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="783-二叉搜索树节点最小距离"><a href="#783-二叉搜索树节点最小距离" class="headerlink" title="783.二叉搜索树节点最小距离"></a><a href="https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/" target="_blank" rel="noopener">783.二叉搜索树节点最小距离</a></h3><p>给你一个二叉搜索树的根节点 <code>root</code> ，返回 树中任意两不同节点值之间的最小差值 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minDiffInBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pre<span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#pre是整个中序遍历中的pre</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> root<span class="token punctuation">:</span>                dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>ans<span class="token operator">=</span>min<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ans<span class="token punctuation">,</span>root<span class="token punctuation">.</span>val<span class="token operator">-</span>self<span class="token punctuation">.</span>pre<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>pre <span class="token operator">=</span> root<span class="token punctuation">.</span>val                dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 94.二叉树的中序遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                <span class="token keyword">yield</span> <span class="token keyword">from</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">yield</span> node<span class="token punctuation">.</span>val                <span class="token keyword">yield</span> <span class="token keyword">from</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> inorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="208-实现Trie前缀树⭐"><a href="#208-实现Trie前缀树⭐" class="headerlink" title="208.实现Trie前缀树⭐"></a><a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree/" target="_blank" rel="noopener">208.实现Trie前缀树⭐</a></h3><p><code>Trie</code> 或者说 前缀树 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。</p><p>通常应用场景：自动补全和拼写检查。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Trie</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Initialize your data structure here.        """</span>        self<span class="token punctuation">.</span>_children <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">26</span>        self<span class="token punctuation">.</span>_is_ending_char <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Inserts a word into the trie.        """</span>        root <span class="token operator">=</span> self        <span class="token keyword">for</span> i <span class="token keyword">in</span> map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> ord<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> ord<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">.</span>_children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                root<span class="token punctuation">.</span>_children<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Trie<span class="token punctuation">(</span><span class="token punctuation">)</span>            root <span class="token operator">=</span> root<span class="token punctuation">.</span>_children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        root<span class="token punctuation">.</span>_is_ending_char <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Returns if the word is in the trie.        """</span>        root <span class="token operator">=</span> self        <span class="token keyword">for</span> i <span class="token keyword">in</span> map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> ord<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> ord<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">.</span>_children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            root <span class="token operator">=</span> root<span class="token punctuation">.</span>_children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> root<span class="token punctuation">.</span>_is_ending_char    <span class="token keyword">def</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prefix<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Returns if there is any word in the trie that starts with the given prefix.        """</span>        root <span class="token operator">=</span> self        <span class="token keyword">for</span> i <span class="token keyword">in</span> map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> ord<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> ord<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">.</span>_children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            root <span class="token operator">=</span> root<span class="token punctuation">.</span>_children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true"># Your Trie object will be instantiated and called as such:</span><span class="token comment" spellcheck="true"># obj = Trie()</span><span class="token comment" spellcheck="true"># obj.insert(word)</span><span class="token comment" spellcheck="true"># param_2 = obj.search(word)</span><span class="token comment" spellcheck="true"># param_3 = obj.startsWith(prefix)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="213-打家劫舍II"><a href="#213-打家劫舍II" class="headerlink" title="213.打家劫舍II"></a><a href="https://leetcode-cn.com/problems/house-robber-ii/" target="_blank" rel="noopener">213.打家劫舍II</a></h3><p>相邻房间报警，首尾相邻</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> n<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token keyword">return</span> max<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>            first<span class="token punctuation">,</span> second <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                first<span class="token punctuation">,</span> second <span class="token operator">=</span> second<span class="token punctuation">,</span> max<span class="token punctuation">(</span>second<span class="token punctuation">,</span> first <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> second        <span class="token keyword">return</span> max<span class="token punctuation">(</span>rob<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rob<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="87-扰乱字符串"><a href="#87-扰乱字符串" class="headerlink" title="87.扰乱字符串"></a><a href="https://leetcode-cn.com/problems/scramble-string/" target="_blank" rel="noopener">87.扰乱字符串</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isScramble</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s1<span class="token punctuation">:</span> str<span class="token punctuation">,</span> s2<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        @cache        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i1<span class="token punctuation">:</span> int<span class="token punctuation">,</span> i2<span class="token punctuation">:</span> int<span class="token punctuation">,</span> length<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>            <span class="token triple-quoted-string string">"""            第一个字符串从 i1 开始，第二个字符串从 i2 开始，子串的长度为 length，是否和谐            """</span>            <span class="token comment" spellcheck="true"># 判断两个子串是否相等</span>            <span class="token keyword">if</span> s1<span class="token punctuation">[</span>i1<span class="token punctuation">:</span>i1<span class="token operator">+</span>length<span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>i2<span class="token punctuation">:</span>i2<span class="token operator">+</span>length<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token comment" spellcheck="true"># 判断是否存在字符 c 在两个子串中出现的次数不同</span>            <span class="token keyword">if</span> Counter<span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i1<span class="token punctuation">:</span>i1<span class="token operator">+</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Counter<span class="token punctuation">(</span>s2<span class="token punctuation">[</span>i2<span class="token punctuation">:</span>i2<span class="token operator">+</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token comment" spellcheck="true"># 枚举分割位置</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 不交换的情况</span>                <span class="token keyword">if</span> dfs<span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">and</span> dfs<span class="token punctuation">(</span>i1 <span class="token operator">+</span> i<span class="token punctuation">,</span> i2 <span class="token operator">+</span> i<span class="token punctuation">,</span> length <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">True</span>                <span class="token comment" spellcheck="true"># 交换的情况</span>                <span class="token keyword">if</span> dfs<span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2 <span class="token operator">+</span> length <span class="token operator">-</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">and</span> dfs<span class="token punctuation">(</span>i1 <span class="token operator">+</span> i<span class="token punctuation">,</span> i2<span class="token punctuation">,</span> length <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        ans <span class="token operator">=</span> dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">.</span>cache_clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="220-存在重复元素III"><a href="#220-存在重复元素III" class="headerlink" title="220.存在重复元素III"></a><a href="https://leetcode-cn.com/problems/contains-duplicate-iii/" target="_blank" rel="noopener">220.存在重复元素III</a></h3><p>给你一个整数数组 <code>nums</code> 和两个整数 <code>k</code> 和 <code>t</code> 。请你判断是否存在两个下标 <code>i</code> 和 <code>j</code>，使得 <code>abs(nums[i] - nums[j]) &lt;= t</code> ，同时又满足 <code>abs(i - j) &lt;= k</code> 。</p><p>如果存在则返回 <code>true</code>，不存在返回 <code>false</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">containsNearbyAlmostDuplicate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">,</span> t<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> t<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> k<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        buckets <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">#桶与数字的字典</span>        size <span class="token operator">=</span> t<span class="token operator">+</span><span class="token number">1</span>             <span class="token comment" spellcheck="true">#桶中只有一个数字</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            idx <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">//</span>size            <span class="token keyword">if</span> idx <span class="token keyword">in</span> buckets<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>            buckets<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>idx<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token keyword">in</span> buckets <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>buckets<span class="token punctuation">[</span>idx<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>t<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">in</span> buckets <span class="token operator">and</span> buckets<span class="token punctuation">[</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>t<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> i<span class="token operator">>=</span>k<span class="token punctuation">:</span> buckets<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token operator">//</span>size<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">26. 删除有序数组中的重复项</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        left <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> right <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> left<span class="token punctuation">:</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>left<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> right<span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> right                left <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> left<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><a href="https://leetcode-cn.com/problems/remove-element/" target="_blank" rel="noopener">27. 移除元素</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        left <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> right <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            <span class="token keyword">if</span> right <span class="token operator">!=</span> val<span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> right                left <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> left<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="28-实现-strStr"><a href="#28-实现-strStr" class="headerlink" title="28.实现 strStr()"></a><a href="https://leetcode-cn.com/problems/implement-strstr/" target="_blank" rel="noopener">28.实现 strStr()</a></h3><p>实现 <code>strStr()</code> 函数。</p><p>给你两个字符串 <code>haystack</code> 和 <code>needle</code> ，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串出现的第一个位置（下标从 <code>0</code> 开始）。如果不存在，则返回  <code>-1</code> </p><p><code>needle</code> 为空串时返回 <code>0</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#　一、暴力匹配</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">strStr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> haystack<span class="token punctuation">:</span> str<span class="token punctuation">,</span> needle<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> needle<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> haystack <span class="token operator">==</span> needle<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        m<span class="token punctuation">,</span> n <span class="token operator">=</span> len<span class="token punctuation">(</span>haystack<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>needle<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token operator">-</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> haystack<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> needle<span class="token punctuation">:</span>                <span class="token keyword">return</span> i        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 二、KMP</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">strStr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> haystack<span class="token punctuation">:</span> str<span class="token punctuation">,</span> needle<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> needle<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        m<span class="token punctuation">,</span> n <span class="token operator">=</span> len<span class="token punctuation">(</span>haystack<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>needle<span class="token punctuation">)</span>        tmp<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span>     <span class="token comment" spellcheck="true">#计算相同前后缀，不是回文</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> k<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> needle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>needle<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>                k <span class="token operator">=</span> tmp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span>      <span class="token comment" spellcheck="true">#前后缀指针回退</span>            <span class="token keyword">if</span> needle<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> needle<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>                k <span class="token operator">+=</span> <span class="token number">1</span>            tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(tmp)</span>        k <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> k<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> haystack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>needle<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>                k <span class="token operator">=</span> tmp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> haystack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> needle<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>                k <span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> k <span class="token operator">==</span> n<span class="token punctuation">:</span> <span class="token keyword">return</span> i<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token comment" spellcheck="true">#子串长度较小时，或子串相同前后缀较少时，收益不大</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 三、用index</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">strStr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> haystack<span class="token punctuation">:</span> str<span class="token punctuation">,</span> needle<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> needle<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> needle <span class="token keyword">in</span> haystack<span class="token punctuation">:</span>            position <span class="token operator">=</span> haystack<span class="token punctuation">.</span>index<span class="token punctuation">(</span>needle<span class="token punctuation">)</span>            <span class="token keyword">return</span> position        <span class="token keyword">else</span> <span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-30"><a href="#21-30" class="headerlink" title="21-30"></a><code>21-30</code></h2><h3 id="91-解码方法"><a href="#91-解码方法" class="headerlink" title="91. 解码方法"></a><a href="https://leetcode-cn.com/problems/decode-ways/" target="_blank" rel="noopener">91. 解码方法</a></h3><h3 id="363-矩形区域不超过-K-的最大数值和"><a href="#363-矩形区域不超过-K-的最大数值和" class="headerlink" title="363. 矩形区域不超过 K 的最大数值和"></a><a href="https://leetcode-cn.com/problems/max-sum-of-rectangle-no-larger-than-k/" target="_blank" rel="noopener">363. 矩形区域不超过 K 的最大数值和</a></h3><h3 id="368-最大整除子集"><a href="#368-最大整除子集" class="headerlink" title="368. 最大整除子集"></a><a href="https://leetcode-cn.com/problems/largest-divisible-subset/" target="_blank" rel="noopener">368. 最大整除子集</a></h3><h3 id="377-组合总和-Ⅳ"><a href="#377-组合总和-Ⅳ" class="headerlink" title="377.组合总和 Ⅳ"></a><a href="https://leetcode-cn.com/problems/combination-sum-iv/" target="_blank" rel="noopener">377.组合总和 Ⅳ</a></h3><p>给你一个由 不同 整数组成的数组 <code>nums</code> ，和一个目标整数 <code>target</code> 。请你从 <code>nums</code> 中找出并返回总和为 <code>target</code> 的元素组合的个数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combinationSum4</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>target        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> target<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>                <span class="token keyword">if</span> num <span class="token operator">&lt;=</span> i<span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span>num<span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="897-递增顺序搜索树"><a href="#897-递增顺序搜索树" class="headerlink" title="897. 递增顺序搜索树"></a><a href="https://leetcode-cn.com/problems/increasing-order-search-tree/" target="_blank" rel="noopener">897. 递增顺序搜索树</a></h3><p>给你一棵二叉搜索树，请你 <strong>按中序遍历</strong> 将其重新排列为一棵递增顺序搜索树，使树中最左边的节点成为树的根节点，并且每个节点没有左子节点，只有一个右子节点。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#方法一</span><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, val=0, left=None, right=None):</span><span class="token comment" spellcheck="true">#         self.val = val</span><span class="token comment" spellcheck="true">#         self.left = left</span><span class="token comment" spellcheck="true">#         self.right = right</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">increasingBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                <span class="token keyword">yield</span> <span class="token keyword">from</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">yield</span> node<span class="token punctuation">.</span>val                <span class="token keyword">yield</span> <span class="token keyword">from</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        vals <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> inorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">]</span>        new_root <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>vals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> new_root        <span class="token keyword">for</span> val <span class="token keyword">in</span> vals<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>left <span class="token operator">=</span> None            p<span class="token punctuation">.</span>right <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>right        <span class="token keyword">return</span> new_root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#方法二：推荐做法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>head <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>p <span class="token operator">=</span> self<span class="token punctuation">.</span>head    <span class="token keyword">def</span> <span class="token function">increasingBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                traverse<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>p<span class="token punctuation">.</span>right <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>p <span class="token operator">=</span> self<span class="token punctuation">.</span>p<span class="token punctuation">.</span>right                traverse<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        traverse<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>head<span class="token punctuation">.</span>right<span class="token comment" spellcheck="true"># 过程类似中序遍历，p指针负责建树即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="938-二叉搜索树的范围和"><a href="#938-二叉搜索树的范围和" class="headerlink" title="938.二叉搜索树的范围和"></a><a href="https://leetcode-cn.com/problems/range-sum-of-bst/" target="_blank" rel="noopener">938.二叉搜索树的范围和</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#中序遍历</span><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, val=0, left=None, right=None):</span><span class="token comment" spellcheck="true">#         self.val = val</span><span class="token comment" spellcheck="true">#         self.left = left</span><span class="token comment" spellcheck="true">#         self.right = right</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rangeSumBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> low<span class="token punctuation">:</span> int<span class="token punctuation">,</span> high<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">if</span> node<span class="token punctuation">.</span>val<span class="token operator">></span>high<span class="token punctuation">:</span>                    <span class="token keyword">return</span>                 <span class="token keyword">if</span> node<span class="token punctuation">.</span>val<span class="token operator">>=</span>low<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>ans <span class="token operator">+=</span> node<span class="token punctuation">.</span>val                inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        inorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="633-平方数之和"><a href="#633-平方数之和" class="headerlink" title="633.平方数之和"></a><a href="https://leetcode-cn.com/problems/sum-of-square-numbers/submissions/" target="_blank" rel="noopener">633.平方数之和</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#双指针</span><span class="token keyword">from</span> math <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">judgeSquareSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> c<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>sqrt<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> l <span class="token operator">&lt;=</span> r<span class="token punctuation">:</span>            <span class="token keyword">if</span> l<span class="token operator">*</span>l<span class="token operator">+</span>r<span class="token operator">*</span>r <span class="token operator">></span> c<span class="token punctuation">:</span> r<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">elif</span> l<span class="token operator">*</span>l<span class="token operator">+</span>r<span class="token operator">*</span>r <span class="token operator">&lt;</span> c<span class="token punctuation">:</span> l<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="coding-for-fun"><a href="#coding-for-fun" class="headerlink" title="coding for fun"></a><em>coding for fun</em></h2><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/" target="_blank" rel="noopener">剑指 Offer 03. 数组中重复的数字</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        tmp <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token operator">not</span> <span class="token keyword">in</span> tmp<span class="token punctuation">:</span>                tmp<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> num<span class="token comment" spellcheck="true">#使用集合或字典提高效率</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/" target="_blank" rel="noopener">剑指 Offer 04. 二维数组中的查找</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> matrix<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        rows<span class="token punctuation">,</span> cols <span class="token operator">=</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cols<span class="token number">-1</span>        <span class="token keyword">while</span> x <span class="token operator">&lt;</span> rows <span class="token operator">and</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> y<span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">></span> matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">:</span>                 x <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">continue</span>            <span class="token keyword">elif</span> target <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">:</span>                y <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true">#从矩阵的右上角开始查找</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/" target="_blank" rel="noopener">剑指 Offer 05. 替换空格</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"%20"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/" target="_blank" rel="noopener">剑指 Offer 06. 从尾到头打印链表</a></p><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#普通做法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        p <span class="token operator">=</span> head        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next        <span class="token keyword">return</span> ans<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#递归</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>reversePrint<span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span>head<span class="token punctuation">.</span>val<span class="token punctuation">]</span> <span class="token keyword">if</span> head <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#耗时好像更多</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/" target="_blank" rel="noopener">剑指 Offer 07. 重建二叉树</a></p><p>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#递归</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> preorder<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> inorder<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> preorder<span class="token punctuation">:</span> <span class="token keyword">return</span> None        root <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        idx <span class="token operator">=</span> inorder<span class="token punctuation">.</span>index<span class="token punctuation">(</span>preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> self<span class="token punctuation">.</span>buildTree<span class="token punctuation">(</span>preorder<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token operator">+</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span>inorder<span class="token punctuation">[</span><span class="token punctuation">:</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> self<span class="token punctuation">.</span>buildTree<span class="token punctuation">(</span>preorder<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">+</span>idx<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>inorder<span class="token punctuation">[</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>官方答案：</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, val=0, left=None, right=None):</span><span class="token comment" spellcheck="true">#         self.val = val</span><span class="token comment" spellcheck="true">#         self.left = left</span><span class="token comment" spellcheck="true">#         self.right = right</span><span class="token triple-quoted-string string">"""思路：前序遍历：根节点->左子树->右子树 中序遍历：左子树->根节点->右子树框架：（1）先把根节点建立起来 （2）递归地构造左子树并连接到根节点 （3）递归地构造右子树并连接到根节点"""</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> preorder<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> inorder<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">myBulidTree</span><span class="token punctuation">(</span>preorder_left<span class="token punctuation">:</span> int<span class="token punctuation">,</span> preorder_right<span class="token punctuation">:</span> int<span class="token punctuation">,</span> inorder_left<span class="token punctuation">:</span> int<span class="token punctuation">,</span> inorder_right<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> preorder_left <span class="token operator">></span> preorder_right<span class="token punctuation">:</span>                <span class="token keyword">return</span> None            <span class="token comment" spellcheck="true"># 前序遍历中的第一个节点就是根节点</span>            preorder_root_index <span class="token operator">=</span> preorder_left            <span class="token comment" spellcheck="true"># 在中序遍历中定位根节点,获得索引值</span>            inorder_root_index <span class="token operator">=</span> index<span class="token punctuation">[</span>preorder<span class="token punctuation">[</span>preorder_root_index<span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 先构建根节点</span>            root <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>preorder_root_index<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 得到左子树中节点的数目</span>            size_left_subtree <span class="token operator">=</span> inorder_root_index <span class="token operator">-</span> inorder_left            <span class="token comment" spellcheck="true"># 构建左子树，并跟根节点相关联</span>            <span class="token comment" spellcheck="true"># 前序遍历中[从左边界+1 开始的 size_left_subtree]个元素就对应了中序遍历中[从 左边界 开始到 根节点定位-1]的元素</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> myBulidTree<span class="token punctuation">(</span>preorder_left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preorder_left <span class="token operator">+</span> size_left_subtree<span class="token punctuation">,</span> inorder_left<span class="token punctuation">,</span> inorder_root_index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 构建右子树，并跟根节点相关联</span>            <span class="token comment" spellcheck="true"># 前序遍历中[从根节点+size_left_subtree+1 开始到 右边界]个元素就对应了中序遍历中[从根节点+1 到 右边界]的元素</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> myBulidTree<span class="token punctuation">(</span>preorder_left <span class="token operator">+</span> size_left_subtree <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preorder_right<span class="token punctuation">,</span> inorder_root_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inorder_right<span class="token punctuation">)</span>            <span class="token keyword">return</span> root        n <span class="token operator">=</span> len<span class="token punctuation">(</span>preorder<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 构建哈希映射，帮助快速定位根节点</span>        index <span class="token operator">=</span> <span class="token punctuation">{</span>element<span class="token punctuation">:</span> i <span class="token keyword">for</span> i<span class="token punctuation">,</span> element <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>inorder<span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token keyword">return</span> myBulidTree<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://leetcode-cn.com/problems/chou-shu-lcof/" target="_blank" rel="noopener">剑指 Offer 49. 丑数</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">nthUglyNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        p2 <span class="token operator">=</span> p3 <span class="token operator">=</span> p5 <span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5 <span class="token operator">=</span> dp<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>p3<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>p5<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5<span class="token punctuation">)</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> num2<span class="token punctuation">:</span> p2<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> num3<span class="token punctuation">:</span> p3<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> num5<span class="token punctuation">:</span> p5<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记234</title>
      <link href="posts/contest234.html"/>
      <url>posts/contest234.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、字符串中不同整数的数目"><a href="#一、字符串中不同整数的数目" class="headerlink" title="一、字符串中不同整数的数目"></a><a href="https://leetcode-cn.com/problems/number-of-different-integers-in-a-string/" target="_blank" rel="noopener">一、字符串中不同整数的数目</a></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numDifferentIntegers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        s<span class="token operator">=</span><span class="token string">""</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> word<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                s<span class="token operator">+=</span><span class="token string">" "</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                s<span class="token operator">+=</span>i        li<span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token punctuation">[</span>int<span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、还原排列的最少操作步数"><a href="#二、还原排列的最少操作步数" class="headerlink" title="二、还原排列的最少操作步数"></a><a href="https://leetcode-cn.com/problems/minimum-number-of-operations-to-reinitialize-a-permutation/" target="_blank" rel="noopener">二、还原排列的最少操作步数</a></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reinitializePermutation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n        perm<span class="token operator">=</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">op</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>perm<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">:</span>                     arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> perm<span class="token punctuation">[</span>n <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                     arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> perm<span class="token punctuation">[</span>i <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span>        cnt<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>            cnt<span class="token operator">+=</span><span class="token number">1</span>            op<span class="token punctuation">(</span>arr<span class="token punctuation">,</span>perm<span class="token punctuation">,</span>n<span class="token punctuation">)</span>            perm<span class="token operator">=</span>arr<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> perm<span class="token operator">==</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">return</span> cnt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、替换字符串中的括号内容"><a href="#三、替换字符串中的括号内容" class="headerlink" title="三、替换字符串中的括号内容"></a><a href="https://leetcode-cn.com/problems/evaluate-the-bracket-pairs-of-a-string/" target="_blank" rel="noopener">三、替换字符串中的括号内容</a></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">,</span> knowledge<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        dic<span class="token operator">=</span><span class="token punctuation">{</span>k<span class="token punctuation">:</span>v <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> knowledge<span class="token punctuation">}</span>        ans<span class="token operator">=</span><span class="token string">""</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        i<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"("</span><span class="token punctuation">:</span>                tmp<span class="token operator">=</span><span class="token string">""</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">")"</span><span class="token punctuation">:</span>                        tmp<span class="token operator">+=</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> tmp <span class="token operator">not</span> <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                            ans<span class="token operator">+=</span><span class="token string">"?"</span>                            <span class="token keyword">break</span>                        ans<span class="token operator">+=</span>dic<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span>                        <span class="token keyword">break</span>                i<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ans<span class="token operator">+=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                i<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、好因子的最大数目"><a href="#四、好因子的最大数目" class="headerlink" title="四、好因子的最大数目"></a><a href="https://leetcode-cn.com/problems/maximize-number-of-nice-divisors/" target="_blank" rel="noopener">四、好因子的最大数目</a></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxNiceDivisors</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        mod<span class="token operator">=</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">7</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> n        <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">4</span> <span class="token operator">*</span> pow<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod        <span class="token keyword">elif</span> n <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> pow<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> n <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> pow<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> n <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#题目意思：求n（因子个数）的拆分最大乘积【n>3】</span><span class="token comment" spellcheck="true">#pow()第三个参数可以对结果取余</span><span class="token comment" spellcheck="true">#不加入的话超出时间限制...</span><span class="token comment" spellcheck="true">#写的时候竟然记起了：reduce(lambdax,y:x*y,nums)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个变形：<a href="https://leetcode-cn.com/problems/integer-break/" target="_blank" rel="noopener">343.整数拆分</a><br>给定一个正整数 n，将其拆分为 <strong>至少两个</strong> 正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#方法一：纯动态规划</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">integerBreak</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>j<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>j<span class="token operator">*</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#方法二：数学</span><span class="token comment" spellcheck="true">#归纳证明得出：应拆分成尽可能多的 3</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">integerBreak</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> n<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token keyword">return</span> n<span class="token number">-1</span>        quotient<span class="token punctuation">,</span>remainder <span class="token operator">=</span> n<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">,</span>n<span class="token operator">%</span><span class="token number">3</span>        <span class="token keyword">if</span> remainder<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">3</span><span class="token operator">**</span>quotient        <span class="token keyword">elif</span> remainder<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">3</span><span class="token operator">**</span><span class="token punctuation">(</span>quotient<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">3</span><span class="token operator">**</span>quotient<span class="token operator">*</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记233</title>
      <link href="posts/contest233.html"/>
      <url>posts/contest233.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、最大升序子数组和"><a href="#一、最大升序子数组和" class="headerlink" title="一、最大升序子数组和"></a><a href="https://leetcode-cn.com/problems/maximum-ascending-subarray-sum/" target="_blank" rel="noopener">一、最大升序子数组和</a></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxAscendingSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        pre<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>pre<span class="token punctuation">:</span>                ans<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            pre<span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">#print(pre,ans)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、积压订单中的订单总数"><a href="#二、积压订单中的订单总数" class="headerlink" title="二、积压订单中的订单总数"></a><a href="https://leetcode-cn.com/problems/number-of-orders-in-the-backlog/" target="_blank" rel="noopener">二、积压订单中的订单总数</a></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getNumberOfBacklogOrders</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> orders<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        buy<span class="token punctuation">,</span>sell<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> p<span class="token punctuation">,</span>m<span class="token punctuation">,</span>t <span class="token keyword">in</span> orders<span class="token punctuation">:</span>            <span class="token keyword">if</span> t<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#buy,</span>                <span class="token keyword">while</span> m <span class="token operator">and</span> sell<span class="token punctuation">:</span>                    tmp<span class="token operator">=</span>sell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                    <span class="token keyword">if</span> tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span>p<span class="token punctuation">:</span> <span class="token keyword">break</span>                    deal<span class="token operator">=</span>min<span class="token punctuation">(</span>m<span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    m<span class="token operator">-=</span>deal                    tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-=</span>deal                    <span class="token keyword">if</span> tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                        heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>sell<span class="token punctuation">)</span>                <span class="token keyword">if</span> m<span class="token punctuation">:</span> heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>buy<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span>p<span class="token punctuation">,</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#sell</span>                <span class="token keyword">while</span> m <span class="token operator">and</span> buy<span class="token punctuation">:</span>                    tmp<span class="token operator">=</span>buy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                    <span class="token keyword">if</span> <span class="token operator">-</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>p<span class="token punctuation">:</span> <span class="token keyword">break</span>                    deal<span class="token operator">=</span>min<span class="token punctuation">(</span>m<span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    m<span class="token operator">-=</span>deal                    tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-=</span>deal                    <span class="token keyword">if</span> tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                        heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>buy<span class="token punctuation">)</span>                <span class="token keyword">if</span> m<span class="token punctuation">:</span> heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>sell<span class="token punctuation">,</span><span class="token punctuation">[</span>p<span class="token punctuation">,</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span>sum<span class="token punctuation">(</span><span class="token punctuation">[</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> t <span class="token keyword">in</span> buy<span class="token operator">+</span>sell<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#最小堆</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、有界数组中指定下标处的最大值"><a href="#三、有界数组中指定下标处的最大值" class="headerlink" title="三、有界数组中指定下标处的最大值"></a><a href="https://leetcode-cn.com/problems/maximum-value-at-a-given-index-in-a-bounded-array/" target="_blank" rel="noopener">三、有界数组中指定下标处的最大值</a></h2><p>给你三个正整数 <code>n</code>、<code>index</code> 和 <code>maxSum</code> 。你需要构造一个同时满足下述所有条件的数组 <code>nums</code>（下标 从 0 开始 计数）：</p><ul><li><code>nums.length == n</code></li><li><code>nums[i]</code> 是 <strong>正整数</strong> ，其中 <code>0 &lt;= i &lt; n</code></li><li><code>abs(nums[i] - nums[i+1]) &lt;= 1</code> ，其中 <code>0 &lt;= i &lt; n-1</code></li><li><code>nums</code> 中所有元素之和不超过 <code>maxSum</code></li><li><code>nums[index]</code> 的值被 最大化</li></ul><p>返回你所构造的数组中的 <code>nums[index]</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxValue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> index<span class="token punctuation">:</span> int<span class="token punctuation">,</span> maxSum<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        l<span class="token operator">=</span>index        r<span class="token operator">=</span>n<span class="token number">-1</span><span class="token operator">-</span>index        <span class="token keyword">def</span> <span class="token function">compu</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> l<span class="token operator">>=</span>x<span class="token number">-1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> x<span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token operator">+</span>l<span class="token operator">-</span>x<span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token operator">-</span>l<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>l<span class="token operator">//</span><span class="token number">2</span>        lp<span class="token punctuation">,</span>rp<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>maxSum        <span class="token keyword">while</span> lp<span class="token operator">&lt;=</span>rp<span class="token punctuation">:</span>            mid<span class="token operator">=</span><span class="token punctuation">(</span>lp<span class="token operator">+</span>rp<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token comment" spellcheck="true">#print(lp,rp,compu(mid,l),compu(mid,r),mid)</span>            <span class="token keyword">if</span> compu<span class="token punctuation">(</span>mid<span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token operator">+</span>compu<span class="token punctuation">(</span>mid<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token operator">+</span>mid<span class="token operator">></span>maxSum<span class="token punctuation">:</span>                rp<span class="token operator">=</span>mid<span class="token number">-1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                lp<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">return</span> min<span class="token punctuation">(</span>lp<span class="token punctuation">,</span>rp<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#经典二分（对答案）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、统计异或值在范围内的数对有多少"><a href="#四、统计异或值在范围内的数对有多少" class="headerlink" title="四、统计异或值在范围内的数对有多少"></a><a href="https://leetcode-cn.com/problems/count-pairs-with-xor-in-a-range/" target="_blank" rel="noopener">四、统计异或值在范围内的数对有多少</a></h2><p>给你一个整数数组 <code>nums</code> （下标从 0 开始计数）以及两个整数：<code>low</code> 和 <code>high</code> ，请返回 漂亮数对 的数目。</p><p>漂亮数对 是一个形如 <code>(i, j)</code> 的数对，其中 <code>0 &lt;= i &lt; j &lt; nums.length</code> 且 <code>low &lt;= (nums[i] XOR nums[j]) &lt;= high</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#trie字典树</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pillow模块</title>
      <link href="posts/e582.html"/>
      <url>posts/e582.html</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title="preface"></a><em>preface</em></h2><p>Pillow（<a href="https://github.com/python-pillow/Pillow" target="_blank" rel="noopener">GITHUB链接</a>）是一个对PIL友好的分支，PIL是一个Python图像处理库。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#安装依赖</span><span class="token comment" spellcheck="true">#在可执行python代码的环境下执行即可</span>pip install pillowpip show pillow<span class="token comment" spellcheck="true">#奇怪，但是 pip install PIL 没有结果，应该是取代了PIL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a><em>reference</em></h2><p><strong>使用Image类:</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># from Pillow import Image 显示 no module</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imageim <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"1.png"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>format<span class="token punctuation">,</span>im<span class="token punctuation">.</span>size<span class="token punctuation">,</span>im<span class="token punctuation">.</span>mode<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># --> PNG (1080, 2340) RGBA</span>im<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 会打开外部程序展示图片</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.</p><table><thead><tr><th>im.mode</th><th>说明</th></tr></thead><tbody><tr><td><code>1</code></td><td>1-bit 像素, 黑和白, 一个像素占用一个byte</td></tr><tr><td><code>L</code></td><td>8-bit 像素, 黑和白</td></tr><tr><td><code>P</code></td><td>8-bit 像素, 使用调色板映射到任何其他模式</td></tr><tr><td><code>RGB</code></td><td>3x8-bit 像素, 真彩色</td></tr><tr><td><code>RGBA</code></td><td>4x8-bit 像素, 带透明度掩码的真彩色</td></tr><tr><td><code>CMYK</code></td><td>4x8-bit 像素, 分色</td></tr><tr><td><code>YCbCr</code></td><td>3x8-bit 像素, 颜色视频格式</td></tr></tbody></table><p>.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 提取子矩阵</span>box <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span>region <span class="token operator">=</span> im<span class="token punctuation">.</span>crop<span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># PixelAccess Class</span>px <span class="token operator">=</span> im<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>px<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#返回（4，4）位置的RGBA值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>摘录来源：<br><a href="https://pillow.readthedocs.io/en/latest/handbook/index.html" target="_blank" rel="noopener">pillow英文文档</a><br><a href="https://www.bookstack.cn/books/Pillow-7.0.0-zh" target="_blank" rel="noopener">书栈中文文档</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ADB使用</title>
      <link href="posts/ed60.html"/>
      <url>posts/ed60.html</url>
      
        <content type="html"><![CDATA[<p>摘录来源：</p><ul><li><a href="https://developer.android.google.cn/studio/command-line/adb" target="_blank" rel="noopener">安卓开发者文档ADB</a></li><li><a href="https://github.com/mzlogin/awesome-adb/blob/master/README.md" target="_blank" rel="noopener">ADB教程</a></li><li><a href="https://blog.csdn.net/sandalphon4869/article/details/101713495" target="_blank" rel="noopener">adb部分指令</a></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>（解释1）ADB的全称为Android Debug Bridge，就是起到调试桥的作用。通过ADB我们可以在Eclipse中方面通过DDMS来调试Android程序，说白了就是debug工具。ADB的工作方式比较特殊，采用监听Socket TCP 5554等端口的方式让IDE和Qemu通讯，默认情况下ADB会daemon相关的网络端口，所以当我们运行Eclipse时ADB进程就会自动运行。</p><p>（解释2）ADB是 Android 开发/测试人员不可替代的强大工具，也是 Android 设备玩家的好玩具。</p><p>（解释3）Android 调试桥 (adb) 是一种功能多样的命令行工具，可让您与设备进行通信。adb 命令可用于执行各种设备操作（例如安装和调试应用），并提供对 Unix shell（可用来在设备上运行各种命令）的访问权限。</p><p><a href="https://zhidao.baidu.com/question/458972580.html" target="_blank" rel="noopener">安装ADB工具包</a></p><h2 id="部分指令"><a href="#部分指令" class="headerlink" title="部分指令"></a>部分指令</h2><table><thead><tr><th>指令</th><th>效果</th></tr></thead><tbody><tr><td><code>adb devices</code></td><td>查看连接的设备</td></tr><tr><td><code>adb shell wm size</code></td><td>查看分辨率</td></tr><tr><td><code>adm shell</code></td><td>进入shell模式</td></tr><tr><td><code>adb shell cat /proc/cpuinfo</code></td><td>查看CPU信息</td></tr><tr><td><code>abd shell cat /proc/meminfo</code></td><td>查看内存信息</td></tr><tr><td><code>adb shell pm</code></td><td>package manage</td></tr><tr><td><code>adb shell input tap 400 800</code></td><td>在坐标（400，800）点击屏幕</td></tr><tr><td><code>adb shell input swipe x1 y1 x2 y2 t</code></td><td>滑动（按）屏幕</td></tr><tr><td><code>cls</code></td><td>cmd清屏指令</td></tr></tbody></table><p>.</p><p>在shell模式中使用：</p><pre class="line-numbers language-cmd"><code class="language-cmd">input keyevent 3        // Home主界面input keyevent 4        // Backinput keyevent 24        // Volume+input keyevent 25        // Volume-input keyevent 82        // Menu ，调出应用列表input keyevent 26        // Power,电源键。并不能唤醒屏幕，只能锁屏input keyevent 61        // "KEYCODE_TAB",制表符input keyevent 62        // "KEYCODE_SPACE",空格input keyevent 66        // "KEYCODE_ENTER",回车input keyevent 67        // "KEYCODE_DEL",删除光标前面的字符input keyevent 112        // "KEYCODE_DEL",删除光标后面的字符input keyevent 19        // Upinput keyevent 20        // Downinput keyevent 21        // Leftinput keyevent 22        // Rightinput keyevent 23        // Select(Ok)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="python中使用"><a href="#python中使用" class="headerlink" title="python中使用"></a>python中使用</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment" spellcheck="true">#获取手机的截图，保存到手机</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"adb shell screencap -p /sdcard/screen.png"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将图片 pull 到电脑</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"adb pull /sdcard/screen.png /screen.png"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#返回0表示成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="adb-doc"><a href="#adb-doc" class="headerlink" title="adb-doc"></a>adb-doc</h2><pre class="line-numbers language-cmd"><code class="language-cmd">Android Debug Bridge version 1.0.41Version 31.0.1-7187441Installed as C:\Users\16413\Desktop\platform-tools_r31.0.1-windows\platform-tools\adb.exeglobal options: -a         listen on all network interfaces, not just localhost -d         use USB device (error if multiple devices connected) -e         use TCP/IP device (error if multiple TCP/IP devices available) -s SERIAL  use device with given serial (overrides $ANDROID_SERIAL) -t ID      use device with given transport id -H         name of adb server host [default=localhost] -P         port of adb server [default=5037] -L SOCKET  listen on given socket for adb server [default=tcp:localhost:5037]general commands: devices [-l]             list connected devices (-l for long output) help                     show this help message version                  show version numnetworking: connect HOST[:PORT]      connect to a device via TCP/IP [default port=5555] disconnect [HOST[:PORT]]     disconnect from given TCP/IP device [default port=5555], or all pair HOST[:PORT] [PAIRING CODE]     pair with a device for secure TCP/IP communication forward --list           list all forward socket connections forward [--no-rebind] LOCAL REMOTE     forward socket connection using:       tcp:<port> (<local> may be "tcp:0" to pick any open port)       localabstract:<unix domain socket name>       localreserved:<unix domain socket name>       localfilesystem:<unix domain socket name>       dev:<character device name>       jdwp:<process pid> (remote only)       acceptfd:<fd> (listen only) forward --remove LOCAL   remove specific forward socket connection forward --remove-all     remove all forward socket connections ppp TTY [PARAMETER...]   run PPP over USB reverse --list           list all reverse socket connections from device reverse [--no-rebind] REMOTE LOCAL     reverse socket connection using:       tcp:<port> (<remote> may be "tcp:0" to pick any open port)       localabstract:<unix domain socket name>       localreserved:<unix domain socket name>       localfilesystem:<unix domain socket name> reverse --remove REMOTE  remove specific reverse socket connection reverse --remove-all     remove all reverse socket connections from device mdns check               check if mdns discovery is available mdns services            list all discovered servicesfile transfer: push [--sync] [-z ALGORITHM] [-Z] LOCAL... REMOTE     copy local files/directories to device     --sync: only push files that are newer on the host than the device     -n: dry run: push files to device without storing to the filesystem     -z: enable compression with a specified algorithm (any, none, brotli)     -Z: disable compression pull [-a] [-z ALGORITHM] [-Z] REMOTE... LOCAL     copy files/dirs from device     -a: preserve file timestamp and mode     -z: enable compression with a specified algorithm (any, none, brotli)     -Z: disable compression sync [-l] [-z ALGORITHM] [-Z] [all|data|odm|oem|product|system|system_ext|vendor]     sync a local build from $ANDROID_PRODUCT_OUT to the device (default all)     -n: dry run: push files to device without storing to the filesystem     -l: list files that would be copied, but don't copy them     -z: enable compression with a specified algorithm (any, none, brotli)     -Z: disable compressionshell: shell [-e ESCAPE] [-n] [-Tt] [-x] [COMMAND...]     run remote shell command (interactive shell if no command given)     -e: choose escape character, or "none"; default '~'     -n: don't read from stdin     -T: disable pty allocation     -t: allocate a pty if on a tty (-tt: force pty allocation)     -x: disable remote exit codes and stdout/stderr separation emu COMMAND              run emulator console commandapp installation (see also `adb shell cmd package help`): install [-lrtsdg] [--instant] PACKAGE     push a single package to the device and install it install-multiple [-lrtsdpg] [--instant] PACKAGE...     push multiple APKs to the device for a single package and install them install-multi-package [-lrtsdpg] [--instant] PACKAGE...     push one or more packages to the device and install them atomically     -r: replace existing application     -t: allow test packages     -d: allow version code downgrade (debuggable packages only)     -p: partial application install (install-multiple only)     -g: grant all runtime permissions     --abi ABI: override platform's default ABI     --instant: cause the app to be installed as an ephemeral install app     --no-streaming: always push APK to device and invoke Package Manager as separate steps     --streaming: force streaming APK directly into Package Manager     --fastdeploy: use fast deploy     --no-fastdeploy: prevent use of fast deploy     --force-agent: force update of deployment agent when using fast deploy     --date-check-agent: update deployment agent when local version is newer and using fast deploy     --version-check-agent: update deployment agent when local version has different version code and using fast deploy     (See also `adb shell pm help` for more options.) uninstall [-k] PACKAGE     remove this app package from the device     '-k': keep the data and cache directoriesdebugging: bugreport [PATH]     write bugreport to given PATH [default=bugreport.zip];     if PATH is a directory, the bug report is saved in that directory.     devices that don't support zipped bug reports output to stdout. jdwp                     list pids of processes hosting a JDWP transport logcat                   show device log (logcat --help for more)security: disable-verity           disable dm-verity checking on userdebug builds enable-verity            re-enable dm-verity checking on userdebug builds keygen FILE     generate adb public/private key; private key stored in FILE,scripting: wait-for[-TRANSPORT]-STATE...     wait for device to be in a given state     STATE: device, recovery, rescue, sideload, bootloader, or disconnect     TRANSPORT: usb, local, or any [default=any] get-state                print offline | bootloader | device get-serialno             print <serial-number> get-devpath              print <device-path> remount [-R]      remount partitions read-write. if a reboot is required, -R will      will automatically reboot the device. reboot [bootloader|recovery|sideload|sideload-auto-reboot]     reboot the device; defaults to booting system image but     supports bootloader and recovery too. sideload reboots     into recovery and automatically starts sideload mode,     sideload-auto-reboot is the same but reboots after sideloading. sideload OTAPACKAGE      sideload the given full OTA package root                     restart adbd with root permissions unroot                   restart adbd without root permissions usb                      restart adbd listening on USB tcpip PORT               restart adbd listening on TCP on PORTinternal debugging: start-server             ensure that there is a server running kill-server              kill the server if it is running reconnect                kick connection from host side to force reconnect reconnect device         kick connection from device side to force reconnect reconnect offline        reset offline/unauthorized devices to force reconnectenvironment variables: $ADB_TRACE     comma-separated list of debug info to log:     all,adb,sockets,packets,rwx,usb,sync,sysdeps,transport,jdwp $ADB_VENDOR_KEYS         colon-separated list of keys (files or directories) $ANDROID_SERIAL          serial number to connect to (see -s) $ANDROID_LOG_TAGS        tags to be used by logcat (see logcat --help) $ADB_LOCAL_TRANSPORT_MAX_PORT max emulator scan port (default 5585, 16 emus) $ADB_MDNS_AUTO_CONNECT   comma-separated list of mdns services to allow auto-connect (default adb-tls-connect)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> adb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跳一跳脚本</title>
      <link href="posts/49cb.html"/>
      <url>posts/49cb.html</url>
      
        <content type="html"><![CDATA[<p>参考地址：</p><ul><li><a href="https://github.com/wangshub/wechat_jump_game" target="_blank" rel="noopener">github：python跳一跳脚本1</a></li><li><a href="https://github.com/Huang-JunJia/wechat_jump_game" target="_blank" rel="noopener">github：python跳一跳脚本2</a></li></ul><h2 id="preface"><a href="#preface" class="headerlink" title="preface"></a><em>preface</em></h2><p>本来是微信收藏了一篇文章，关于这个开源项目：<a href="https://github.com/FengQuanLi/ResnetGPT" target="_blank" rel="noopener">基于pytorch框架用resnet101加GPT搭建AI玩王者荣耀</a></p><p>看到了他的思路后，以前（电脑如何操控手机）问题好像有解了。</p><div class="admonition info"><p class="admonition-title">他的思路</p><p>手机启用USB调试，minitouch 提供了一个 socket 接口用在 Android 设备上的多点触摸事件以及手势。也是无需 ROOT 手机。</p><p>用 scrcpy 获取游戏画面，获取 scrcpy 的句柄，然后截图，根据图片生成操作指令，然后利用 minitouch 高效的执行这些操作指令。</p><p>所以关键在于，如何根据图片生成操作指令。</p><p>没错，用 Transformer。</p></div><p>然后去<a href="https://github.com/williamfzc/pyminitouch" target="_blank" rel="noopener">pyminitouch</a>看了下，果不其然，运行demo代码就出错了。</p><p>中途学了adb，一个调试安卓的功能包。参考：<a href="https://www.unielu.com/posts/ed60.html">https://www.unielu.com/posts/ed60.html</a></p><p>然后试着做跳一跳脚本，还打算图片匹配找到中心点…找资料时发现了跳一跳外挂的开源代码，就直接用了。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>以<code>MIUI12</code>为例，</p><p>1.安卓端<br>多次点击miui版本号，进入开发者模式。<br>在开发者选项中打开USB调试。（可选功能：显示点按操作反馈、指针位置）</p><p>2.电脑端<br><a href="https://zhidao.baidu.com/question/458972580.html" target="_blank" rel="noopener">安装ADB工具包</a></p><h2 id="运行中"><a href="#运行中" class="headerlink" title="运行中"></a>运行中</h2><p>在adb指令可执行的情况下，开始游戏，执行该代码即可。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> shutil <span class="token comment" spellcheck="true">#shutil 模块提供了一系列对文件和文件集合的高阶操作。</span><span class="token keyword">import</span> time<span class="token keyword">import</span> math<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> ImageDraw<span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># === 思路 ===</span><span class="token comment" spellcheck="true"># 核心：每次落稳之后截图，根据截图算出棋子的坐标和下一个块顶面的中点坐标，</span><span class="token comment" spellcheck="true">#      根据两个点的距离乘以一个时间系数获得长按的时间</span><span class="token comment" spellcheck="true"># 识别棋子：靠棋子的颜色来识别位置，通过截图发现最下面一行大概是一条直线，就从上往下一行一行遍历，</span><span class="token comment" spellcheck="true">#         比较颜色（颜色用了一个区间来比较）找到最下面的那一行的所有点，然后求个中点，</span><span class="token comment" spellcheck="true">#         求好之后再让 Y 轴坐标减小棋子底盘的一半高度从而得到中心点的坐标</span><span class="token comment" spellcheck="true"># 识别棋盘：靠底色和方块的色差来做，从分数之下的位置开始，一行一行扫描，由于圆形的块最顶上是一条线，</span><span class="token comment" spellcheck="true">#          方形的上面大概是一个点，所以就用类似识别棋子的做法多识别了几个点求中点，</span><span class="token comment" spellcheck="true">#          这时候得到了块中点的 X 轴坐标，这时候假设现在棋子在当前块的中心，</span><span class="token comment" spellcheck="true">#          根据一个通过截图获取的固定的角度来推出中点的 Y 坐标</span><span class="token comment" spellcheck="true"># 最后：根据两点的坐标算距离乘以系数来获取长按时间（似乎可以直接用 X 轴距离）</span><span class="token comment" spellcheck="true"># TODO: 解决定位偏移的问题</span><span class="token comment" spellcheck="true"># TODO: 看看两个块中心到中轴距离是否相同，如果是的话靠这个来判断一下当前超前还是落后，便于矫正</span><span class="token comment" spellcheck="true"># TODO: 一些固定值根据截图的具体大小计算</span><span class="token comment" spellcheck="true"># TODO: 直接用 X 轴距离简化逻辑</span><span class="token comment" spellcheck="true"># Magic Number，不设置可能无法正常执行，请根据具体截图从上到下按需设置</span>under_game_score_y <span class="token operator">=</span> <span class="token number">300</span>     <span class="token comment" spellcheck="true"># 截图中刚好低于分数显示区域的 Y 坐标，300 是 1920x1080 的值，2K 屏、全面屏请根据实际情况修改</span><span class="token comment" spellcheck="true"># 1.392 第一次跑了4k分（环境：mi10pro，1080*2340）</span>press_coefficient <span class="token operator">=</span> <span class="token number">1.392</span>      <span class="token comment" spellcheck="true"># 长按的时间系数，请自己根据实际情况调节。</span>piece_base_height_1_2 <span class="token operator">=</span> <span class="token number">20</span>  <span class="token comment" spellcheck="true"># 二分之一的棋子底座高度，可能要调节</span>piece_body_width <span class="token operator">=</span> <span class="token number">70</span>           <span class="token comment" spellcheck="true"># 棋子的宽度，比截图中量到的稍微大一点比较安全，可能要调节</span>swipe_x1<span class="token punctuation">,</span> swipe_y1<span class="token punctuation">,</span> swipe_x2<span class="token punctuation">,</span> swipe_y2 <span class="token operator">=</span> <span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">410</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">410</span>     <span class="token comment" spellcheck="true"># 模拟按压的起始点坐标，需要自动重复游戏请设置成“再来一局”的坐标</span>screenshot_backup_dir <span class="token operator">=</span> <span class="token string">'screenshot_backups/'</span><span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>screenshot_backup_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>screenshot_backup_dir<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pull_screenshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'adb shell screencap -p /sdcard/1.png'</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'adb pull /sdcard/1.png .'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">backup_screenshot</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 为了方便失败的时候 debug</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>screenshot_backup_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>screenshot_backup_dir<span class="token punctuation">)</span>    shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">'1.png'</span><span class="token punctuation">,</span> <span class="token string">'{}{}.png'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>screenshot_backup_dir<span class="token punctuation">,</span> ts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">save_debug_creenshot</span><span class="token punctuation">(</span>ts<span class="token punctuation">,</span> im<span class="token punctuation">,</span> piece_x<span class="token punctuation">,</span> piece_y<span class="token punctuation">,</span> board_x<span class="token punctuation">,</span> board_y<span class="token punctuation">)</span><span class="token punctuation">:</span>    draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>im<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对debug图片加上详细的注释</span>    draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token punctuation">(</span>piece_x<span class="token punctuation">,</span> piece_y<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>board_x<span class="token punctuation">,</span> board_y<span class="token punctuation">)</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token punctuation">(</span>piece_x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> piece_x<span class="token punctuation">,</span> im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> piece_y<span class="token punctuation">,</span> im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> piece_y<span class="token punctuation">)</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token punctuation">(</span>board_x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> board_x<span class="token punctuation">,</span> im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> board_y<span class="token punctuation">,</span> im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> board_y<span class="token punctuation">)</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    draw<span class="token punctuation">.</span>ellipse<span class="token punctuation">(</span><span class="token punctuation">(</span>piece_x <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">,</span> piece_y <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">,</span> piece_x <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> piece_y <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    draw<span class="token punctuation">.</span>ellipse<span class="token punctuation">(</span><span class="token punctuation">(</span>board_x <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">,</span> board_y <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">,</span> board_x <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> board_y <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">del</span> draw    im<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"{}{}_d.png"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>screenshot_backup_dir<span class="token punctuation">,</span> ts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">set_button_position</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 将swipe设置为 `再来一局` 按钮的位置</span>    <span class="token keyword">global</span> swipe_x1<span class="token punctuation">,</span> swipe_y1<span class="token punctuation">,</span> swipe_x2<span class="token punctuation">,</span> swipe_y2    w<span class="token punctuation">,</span> h <span class="token operator">=</span> im<span class="token punctuation">.</span>size    left <span class="token operator">=</span> w <span class="token operator">/</span> <span class="token number">2</span>      <span class="token comment" spellcheck="true">#可改为560（按压的坐标也是再来一局的坐标即可）</span>    top <span class="token operator">=</span> <span class="token number">1003</span> <span class="token operator">*</span> <span class="token punctuation">(</span>h <span class="token operator">/</span> <span class="token number">1280.0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span>   <span class="token comment" spellcheck="true">#可改为 1648</span>    swipe_x1<span class="token punctuation">,</span> swipe_y1<span class="token punctuation">,</span> swipe_x2<span class="token punctuation">,</span> swipe_y2 <span class="token operator">=</span> left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> left<span class="token punctuation">,</span> top<span class="token keyword">def</span> <span class="token function">jump</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#只用考虑时间</span>    press_time <span class="token operator">=</span> distance <span class="token operator">*</span> press_coefficient    press_time <span class="token operator">=</span> max<span class="token punctuation">(</span>press_time<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 设置 200 ms 是最小的按压时间</span>    press_time <span class="token operator">=</span> int<span class="token punctuation">(</span>press_time<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#swipe按压的坐标</span>    cmd <span class="token operator">=</span> <span class="token string">'adb shell input swipe {} {} {} {} {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>swipe_x1<span class="token punctuation">,</span> swipe_y1<span class="token punctuation">,</span> swipe_x2<span class="token punctuation">,</span> swipe_y2<span class="token punctuation">,</span> press_time<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">find_piece_and_board</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">:</span>    w<span class="token punctuation">,</span> h <span class="token operator">=</span> im<span class="token punctuation">.</span>size    piece_x_sum <span class="token operator">=</span> <span class="token number">0</span>    piece_x_c <span class="token operator">=</span> <span class="token number">0</span>    piece_y_max <span class="token operator">=</span> <span class="token number">0</span>    board_x <span class="token operator">=</span> <span class="token number">0</span>    board_y <span class="token operator">=</span> <span class="token number">0</span>    scan_x_border <span class="token operator">=</span> int<span class="token punctuation">(</span>w <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 扫描棋子时的左右边界</span>    scan_start_y <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># 扫描的起始y坐标</span>    im_pixel<span class="token operator">=</span>im<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 以50px步长，尝试探测scan_start_y</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>int<span class="token punctuation">(</span>h <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span> h<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">/</span><span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        last_pixel <span class="token operator">=</span> im_pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">:</span>            pixel<span class="token operator">=</span>im_pixel<span class="token punctuation">[</span>j<span class="token punctuation">,</span>i<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 不是纯色的线，则记录scan_start_y的值，准备跳出循环</span>            <span class="token keyword">if</span> pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> last_pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">or</span> pixel<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> last_pixel<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">or</span> pixel<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> last_pixel<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                scan_start_y <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">50</span>                <span class="token keyword">break</span>        <span class="token keyword">if</span> scan_start_y<span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"scan_start_y: "</span><span class="token punctuation">,</span> scan_start_y<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 从scan_start_y开始往下扫描，棋子应位于屏幕上半部分，这里暂定不超过2/3</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>int<span class="token punctuation">(</span>h <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>h <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>scan_x_border<span class="token punctuation">,</span> w <span class="token operator">-</span> scan_x_border<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 横坐标方面也减少了一部分扫描开销</span>            pixel <span class="token operator">=</span> im_pixel<span class="token punctuation">[</span>j<span class="token punctuation">,</span>i<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 根据棋子的最低行的颜色判断，找最后一行那些点的平均值，这个颜色这样应该 OK，暂时不提出来</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">50</span> <span class="token operator">&lt;</span> pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token number">53</span> <span class="token operator">&lt;</span> pixel<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">63</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token number">95</span> <span class="token operator">&lt;</span> pixel<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                piece_x_sum <span class="token operator">+=</span> j                piece_x_c <span class="token operator">+=</span> <span class="token number">1</span>                piece_y_max <span class="token operator">=</span> max<span class="token punctuation">(</span>i<span class="token punctuation">,</span> piece_y_max<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> all<span class="token punctuation">(</span><span class="token punctuation">(</span>piece_x_sum<span class="token punctuation">,</span> piece_x_c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    piece_x <span class="token operator">=</span> piece_x_sum <span class="token operator">/</span> piece_x_c    piece_y <span class="token operator">=</span> piece_y_max <span class="token operator">-</span> piece_base_height_1_2  <span class="token comment" spellcheck="true"># 上移棋子底盘高度的一半</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>int<span class="token punctuation">(</span>h <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>h <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        last_pixel <span class="token operator">=</span> im_pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span>        <span class="token keyword">if</span> board_x <span class="token operator">or</span> board_y<span class="token punctuation">:</span>            <span class="token keyword">break</span>        board_x_sum <span class="token operator">=</span> <span class="token number">0</span>        board_x_c <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>            pixel <span class="token operator">=</span> im_pixel<span class="token punctuation">[</span>j<span class="token punctuation">,</span>i<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 修掉脑袋比下一个小格子还高的情况的 bug</span>            <span class="token keyword">if</span> abs<span class="token punctuation">(</span>j <span class="token operator">-</span> piece_x<span class="token punctuation">)</span> <span class="token operator">&lt;</span> piece_body_width<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token comment" spellcheck="true"># 修掉圆顶的时候一条线导致的小 bug，这个颜色判断应该 OK，暂时不提出来</span>            <span class="token keyword">if</span> abs<span class="token punctuation">(</span>pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> last_pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> abs<span class="token punctuation">(</span>pixel<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> last_pixel<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> abs<span class="token punctuation">(</span>pixel<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> last_pixel<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>                board_x_sum <span class="token operator">+=</span> j                board_x_c <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> board_x_sum<span class="token punctuation">:</span>            board_x <span class="token operator">=</span> board_x_sum <span class="token operator">/</span> board_x_c    <span class="token comment" spellcheck="true"># 按实际的角度来算，找到接近下一个 board 中心的坐标 这里的角度应该是30°,值应该是tan 30°, math.sqrt(3) / 3</span>    board_y <span class="token operator">=</span> piece_y <span class="token operator">-</span> abs<span class="token punctuation">(</span>board_x <span class="token operator">-</span> piece_x<span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span>    <span class="token keyword">if</span> <span class="token operator">not</span> all<span class="token punctuation">(</span><span class="token punctuation">(</span>board_x<span class="token punctuation">,</span> board_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">return</span> piece_x<span class="token punctuation">,</span> piece_y<span class="token punctuation">,</span> board_x<span class="token punctuation">,</span> board_y<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        pull_screenshot<span class="token punctuation">(</span><span class="token punctuation">)</span>        im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"./1.png"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取棋子和 board 的位置</span>        piece_x<span class="token punctuation">,</span> piece_y<span class="token punctuation">,</span> board_x<span class="token punctuation">,</span> board_y <span class="token operator">=</span> find_piece_and_board<span class="token punctuation">(</span>im<span class="token punctuation">)</span>        ts <span class="token operator">=</span> int<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#返回当前的时间戳</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>ts<span class="token punctuation">,</span> piece_x<span class="token punctuation">,</span> piece_y<span class="token punctuation">,</span> board_x<span class="token punctuation">,</span> board_y<span class="token punctuation">)</span>        set_button_position<span class="token punctuation">(</span>im<span class="token punctuation">)</span>        jump<span class="token punctuation">(</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token punctuation">(</span>board_x <span class="token operator">-</span> piece_x<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>board_y <span class="token operator">-</span> piece_y<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        save_debug_creenshot<span class="token punctuation">(</span>ts<span class="token punctuation">,</span> im<span class="token punctuation">,</span> piece_x<span class="token punctuation">,</span> piece_y<span class="token punctuation">,</span> board_x<span class="token punctuation">,</span> board_y<span class="token punctuation">)</span>        backup_screenshot<span class="token punctuation">(</span>ts<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 为了保证截图的时候应落稳了，多延迟一会儿</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#换成银白色皮肤后会失败，黑皮肤正常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>2021.3.19</code> 钢琴块脚本 ⬇</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> ImageDraw<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token comment" spellcheck="true">#四个取色的点，也是点击的点</span>tap<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">360</span><span class="token punctuation">,</span><span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">630</span><span class="token punctuation">,</span><span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">,</span><span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'adb shell screencap -p /sdcard/1.png'</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'adb pull /sdcard/1.png .'</span><span class="token punctuation">)</span>    im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"./1.png"</span><span class="token punctuation">)</span>    im_pixel<span class="token operator">=</span>im<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> tap<span class="token punctuation">:</span>        color<span class="token operator">=</span>im_pixel<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>        <span class="token keyword">if</span> color<span class="token operator">==</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#黑块颜色值为这个</span>            cmd<span class="token operator">=</span><span class="token string">'adb shell input tap {} {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>            os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#复习一下昨天学到的，hhh</span><span class="token comment" spellcheck="true">#测试环境，小米10pro，钢琴块1，经典模式25块。</span><span class="token comment" spellcheck="true">#26.477s</span><span class="token comment" spellcheck="true">#去掉sleep,21.599s。</span><span class="token comment" spellcheck="true">#好慢啊，用手4.665s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其它参考"><a href="#其它参考" class="headerlink" title="其它参考"></a>其它参考</h2><p><a href="https://pillow.readthedocs.io/en/stable/" target="_blank" rel="noopener">pillow使用文档</a></p><p><a href="https://blog.csdn.net/quikai1981/article/details/78952294" target="_blank" rel="noopener">python使用adb</a></p><p><a href="https://blog.csdn.net/sandalphon4869/article/details/101713495" target="_blank" rel="noopener">一些adb指令</a></p><p><a href="http://www.pc-fly.com/a/tongxinshuyu/article-202598-1.html" target="_blank" rel="noopener">python图像识别找到坐标</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硅谷之谜</title>
      <link href="posts/e50.html"/>
      <url>posts/e50.html</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><ul><li>叛逆精神和对（N+1型）叛逆精神的宽容。旧金山湾区之所以叫硅谷，是因为仙童公司（半导体公司之母）</li><li>对失败的宽容，承担风险</li><li>多元文化</li><li>追求卓越，适者生存</li></ul><p><strong>1.硅谷的奇迹</strong></p><ul><li>伟大的公司：仙童、英特尔、苹果、甲骨文、太阳、思科、雅虎、谷歌、脸书、基因泰克、特斯拉……</li><li>顶尖的大学：斯坦福大学、加州大学伯克利分校</li><li>风险投资：JP摩根、阿瑟洛克、红衫资本…</li><li>硅谷是对旧金山湾区的一种称谓，硅谷地区（泛指）也只有450万左右人口</li><li>南IT、北生物的产业结构</li></ul><p><strong>2.宛若似真的分析</strong></p><ul><li>地中海式气候，四季如春，基本维持15~28℃，2/3是晴天</li><li>美国各级政府既没有立法权，也没有判别是非的司法权，权力很有限。</li><li>保护知识产权</li></ul><p><strong>3.硅谷的起源</strong></p><ul><li>西班牙人最早定居</li><li>20世纪60年代，仙童和德州仪器生产的集成电路，开始用于各种工业。</li></ul><p><strong>4.硅谷的发展</strong></p><ul><li>早期的半导体产业所需投资相对较少，属于技术密集型而非资金密集型产业</li><li>感想：借鉴、创新的精神。那个视窗操作系统，微软抄苹果，苹果抄施乐公司；半导体的仙童，从其中分流出来的大佬，又带着这些技术创立新公司，英特尔还做出通用的处理器。。。站在巨人的肩上。</li><li>凯鹏华盈和红衫确定的风险投资的原则：<ul><li>投资就是投人。（《原则》中也有：比做事更重要的是找对做事的人）</li><li>风险投资人要储备这种技术和管理的人才，以便以后把他们派去所投的公司挑大梁</li></ul></li></ul><p><strong>5.硅谷的独特之处</strong></p><ul><li>全球化产品，用普适的做法满足大部分人群的需求。</li><li>72-20-10，领头羊吃掉70%，第二名吃掉20%，剩下的吃掉10%</li><li>拒绝平庸，追求卓越，高成本导致正向淘汰，适者生存</li></ul><p><strong>6.硅谷的企业文化和情怀</strong></p><ul><li>宽容失败</li><li>动脑和动手</li><li>扁平式管理，契约精神</li><li>感想：资本家、投资者真是既必要又恶心</li></ul><p><strong>7.工业时代的科学基础</strong></p><ul><li>牛顿和机械思维</li><li>泰勒管理理论，效率优先、流水线生产、同构的树状组织结构、人性化管理</li></ul><p><strong>8.信息时代的科学基础</strong></p><ul><li>《控制论》，罗伯特.维纳，闭环控制，利用负反馈，不断自行调整。</li><li>《信息论》，克劳德.香农</li><li>《系统论》，贝塔朗菲，系统开放、</li><li>带宽的增加使得网络效应远远超过了在工业时代对物质拥有的重要性，google不要用任何内容确实全球访问量最大的互联网公司。</li><li>感想：控制论，事物会是一个个因果的网，很多东西都可能越拖越大，如一个小误会可能造成几年的隔阂。如果引入监管和反馈调节，能在事物发生异常的时候去面对并调整它，会使事物朝着好的方向发展。</li></ul><p><strong><em>OTHER</em></strong></p><ul><li>独角兽公司：一般指投资界对于10亿美元以上估值，并且创办时间相对较短（一般为十年内）还未上市的公司的称谓。<a href="https://img-blog.csdnimg.cn/20210316102603228.jpeg" target="_blank" rel="noopener">2020新经济企业150强</a></li><li>纳斯达克：NASDAQ，全称为美国全国证券交易商协会自动报价表（National Association of Securities Dealers Automated Quotations），是美国的一个电子证券交易机构，创立于1971年，迄今已成为世界最大的股票市场之一。</li><li>敏捷开发：把一个大项目分为多个相互联系，但也可独立运行的小项目，并分别完成，在此过程中软件一直处于可使用状态。将过去需要很多人做的项目由一个人完成。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 书摘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器插件</title>
      <link href="posts/ec0e.html"/>
      <url>posts/ec0e.html</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title="preface"></a><em>preface</em></h2><p>看看<a href="https://greasyfork.org/zh-CN/scripts" target="_blank" rel="noopener">油猴脚本</a>，作为学生，懂的都懂</p><p>安装教程参考：<a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">Greasy Fork官网</a></p><h2 id="test"><a href="#test" class="headerlink" title="test"></a><em>test</em></h2><p>// <code>2021.3.15</code> <code>Edge</code> 测试过的就写在下面</p><p>安装好对应的脚本之后，是默认启用的，油猴脚本管理器并不会很大变化。</p><p>直到你进入到相应的网站，或刷新这相应的网站，油猴管理器会出现小红点，然后你会发现这个页面出现了一些工具，OK了。</p><p>①b站，大会员的视频可以看，非会员视频可以下载。</p><p>②本学校慕课，可以挂机看</p><p>③U校园，需要去Chrome，本脚本免费使用，支持：窗口显示答案、自动填入答案、班级单元测试、自动翻页挂时长。（有些不会做的会自动跳过：语音等）<br>开启时长挂机，OK了。（使用之前请详细阅读说明）</p><hr><p>// <code>2021.4.2</code> 更新记录一下</p><p>用的Chrome、名字带原神的那个学习通脚本，太懒了，倍速调的0秒过。<br>（总共应该挂机花了半个下午，手写了几个题）<br>刷的课：</p><ul><li>《脑洞打开背后的创新思维》，68.76/70分</li><li>《文献管理与信息分析》，70/70分</li></ul><p>剩下的30分要到期末测验。。。</p><hr><p>// <code>2021.5.11</code></p><p>用的排行榜靠前的一个支持期末考试的脚本，<br>刷的期末考试：</p><ul><li>《脑洞打开背后的创新思维》，29.7/30分</li><li>《文献管理与信息分析》，30/30分</li></ul><hr><p><strong>免责声明</strong>：这些脚本仅供学习交流使用，对于使用脚本造成的任何后果，均由使用者本人承担。</p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 油猴 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记232</title>
      <link href="posts/contest232.html"/>
      <url>posts/contest232.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、字符串交换相等"><a href="#一、字符串交换相等" class="headerlink" title="一、字符串交换相等"></a><a href="https://leetcode-cn.com/problems/check-if-one-string-swap-can-make-strings-equal/" target="_blank" rel="noopener">一、字符串交换相等</a></h2><p>给你长度相等的两个字符串 <code>s1</code> 和 <code>s2</code> 。一次 <strong>字符串交换</strong> 操作的步骤如下：选出某个字符串中的两个下标（不必不同），并交换这两个下标所对应的字符。</p><p>如果对 <strong>其中一个字符串</strong> 执行 <strong>最多一次字符串交换</strong> 就可以使两个字符串相等，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">areAlmostEqual</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s1<span class="token punctuation">:</span> str<span class="token punctuation">,</span> s2<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        m<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> zip<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x<span class="token operator">==</span>y<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                m<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                n<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">2</span> <span class="token operator">or</span> len<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> set<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token operator">==</span>set<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true">#好久没python了，true要大写都忘了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、找出星型图的中心节点"><a href="#二、找出星型图的中心节点" class="headerlink" title="二、找出星型图的中心节点"></a><a href="https://leetcode-cn.com/problems/find-center-of-star-graph/" target="_blank" rel="noopener">二、找出星型图的中心节点</a></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findCenter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> edges<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        ans<span class="token operator">=</span>Counter<span class="token punctuation">(</span>edges<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>edges<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、最大平均通过率"><a href="#三、最大平均通过率" class="headerlink" title="三、最大平均通过率"></a><a href="https://leetcode-cn.com/problems/maximum-average-pass-ratio/" target="_blank" rel="noopener">三、最大平均通过率</a></h2><p>一所学校里有一些班级，每个班级里有一些学生，现在每个班都会进行一场期末考试。给你一个二维数组 <code>classes</code> ，其中 <code>classes[i] = [passi, totali]</code> ，表示你提前知道了第 <code>i</code> 个班级总共有 <code>totali</code> 个学生，其中只有 <code>passi</code> 个学生可以通过考试。</p><p>给你一个整数 <code>extraStudents</code> ，表示额外有 <code>extraStudents</code> 个聪明的学生，他们 <strong>一定</strong> 能通过任何班级的期末考。你需要给这 <code>extraStudents</code> 个学生每人都安排一个班级，使得所有班级的平均通过率最大 。</p><p>一个班级的 <strong>通过率</strong> 等于这个班级通过考试的学生人数除以这个班级的总人数。<strong>平均通过率</strong> 是所有班级的通过率之和除以班级数目。</p><p>请你返回在安排这 <code>extraStudents</code> 个学生去对应班级后的 <strong>最大</strong> 平均通过率。与标准答案误差范围在 10-5 以内的结果都会视为正确结果。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxAverageRatio</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> classes<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> extraStudents<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> float<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span><span class="token number">0</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>classes<span class="token punctuation">)</span>        sortclass<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> classes<span class="token punctuation">:</span>            change<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>x<span class="token operator">/</span>y            self<span class="token punctuation">.</span>ans<span class="token operator">+=</span>x<span class="token operator">/</span>y            sortclass<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>change<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(self.ans)</span>        sortclass<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>sortclass<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#print(sortclass)</span>            change<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token operator">=</span>sortclass<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>ans<span class="token operator">+=</span>change            x<span class="token operator">+=</span><span class="token number">1</span>            y<span class="token operator">+=</span><span class="token number">1</span>            change<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>x<span class="token operator">/</span>y            keys<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> sortclass<span class="token punctuation">]</span>            sortclass<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>bisect_left<span class="token punctuation">(</span>keys<span class="token punctuation">,</span>change<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span>change<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(sortclass)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>extraStudents<span class="token punctuation">)</span><span class="token punctuation">:</span>            check<span class="token punctuation">(</span>sortclass<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span class="token operator">/</span>n<span class="token comment" spellcheck="true">#又超时了......</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxAverageRatio</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> classes<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> extraStudents<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> float<span class="token punctuation">:</span>        diff<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>x<span class="token operator">/</span>y        q<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">.</span>        <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> classes<span class="token punctuation">:</span>            ans<span class="token operator">+=</span>x<span class="token operator">/</span>y            <span class="token comment" spellcheck="true">#python中的优先队列是小根堆</span>            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>diff<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>        heapq<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>q<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>extraStudents<span class="token punctuation">)</span><span class="token punctuation">:</span>            d<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token operator">=</span>heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>            ans<span class="token operator">-=</span>d            heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">-</span>diff<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token operator">/</span>len<span class="token punctuation">(</span>classes<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># copy，使用堆</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxAverageRatio</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> c<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> float<span class="token punctuation">:</span>        q<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token operator">/</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span> c<span class="token punctuation">]</span>        heapify<span class="token punctuation">(</span>q<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>            v<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">=</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>            i<span class="token operator">+=</span><span class="token number">1</span>            j<span class="token operator">+=</span><span class="token number">1</span>            heappush<span class="token punctuation">(</span>pq<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token operator">/</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(q)</span>        <span class="token keyword">return</span> sum<span class="token punctuation">(</span>i<span class="token operator">/</span>j <span class="token keyword">for</span> v<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j <span class="token keyword">in</span> q<span class="token punctuation">)</span><span class="token operator">/</span>len<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、好子数组的最大分数"><a href="#四、好子数组的最大分数" class="headerlink" title="四、好子数组的最大分数"></a><a href="https://leetcode-cn.com/problems/maximum-score-of-a-good-subarray/" target="_blank" rel="noopener">四、好子数组的最大分数</a></h2><p>给你一个整数数组 <code>nums</code> （下标从 0 开始）和一个整数 <code>k</code> 。</p><p>一个子数组 <code>(i, j)</code> 的 分数 定义为 <code>min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1)</code> 。一个 好 子数组的两个端点下标需要满足 <code>i &lt;= k &lt;= j</code> 。</p><p>请你返回好子数组的最大可能分数 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maximumScore</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        i<span class="token operator">=</span>j<span class="token operator">=</span>k        ans<span class="token operator">=</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        m<span class="token operator">=</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span>        <span class="token keyword">while</span> i<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">or</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">:</span>            <span class="token keyword">while</span> i<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>m<span class="token punctuation">:</span>                i<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">while</span> j<span class="token operator">&lt;</span>n <span class="token operator">and</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">>=</span>m<span class="token punctuation">:</span>                j<span class="token operator">+=</span><span class="token number">1</span>            ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>m<span class="token punctuation">)</span>            <span class="token keyword">if</span> i<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">and</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">:</span>                m<span class="token operator">=</span>max<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">:</span>                m<span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">elif</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">:</span>                m<span class="token operator">=</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>m<span class="token punctuation">,</span>ans<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># copy，好抽象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++</title>
      <link href="posts/cpp.html"/>
      <url>posts/cpp.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、基础语法"><a href="#一、基础语法" class="headerlink" title="一、基础语法"></a>一、基础语法</h2><h3 id="1-0-hello-again"><a href="#1-0-hello-again" class="headerlink" title="1.0 hello again"></a>1.0 hello again</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>          </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//使用标准命名空间</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//主函数</span><span class="token punctuation">{</span>                         <span class="token comment" spellcheck="true">//语句块中定义的变量具有局部定义域</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello, world!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//输出流</span>    <span class="token comment" spellcheck="true">//endl 插入换行符，并刷新流</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//程序不会自动跳出</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>C++语言特性</strong></p><ul><li>静态类型的、编译式的</li><li>支持过程化编程、面向对象编程、泛型编程。</li></ul><h3 id="1-1-基本语法"><a href="#1-1-基本语法" class="headerlink" title="1.1 基本语法"></a>1.1 基本语法</h3><p><strong>标识符</strong>：①以字母或<code>_</code>开始 ②由数字、字母、<code>_</code>组成 ③不能是关键字或操作符</p><p>空白符：空格、制表符、换行符、回车符和注释的总称</p><p>调试：设置断点，F5，，F11 逐语句，F10 逐过程</p><p>注释：<code>//</code>单行注释，<code>/*...*/</code>多行注释</p><h3 id="1-2-数据类型"><a href="#1-2-数据类型" class="headerlink" title="1.2 数据类型"></a>1.2 数据类型</h3><p><code>signed</code> <code>unsigned</code></p><table><thead><tr><th>变量类型：</th><th>bool</th><th>char</th><th>short</th><th>int</th><th>long</th><th>long long</th><th>float</th><th>double</th></tr></thead><tbody><tr><td>字节数</td><td>1</td><td>1</td><td>2</td><td>4</td><td>4</td><td>8</td><td>4</td><td>8</td></tr></tbody></table><p>.<br>显式数据类型转换：<br><code>int(z)</code> <code>(int)z</code> <code>static_cast&lt;int&gt;(z)</code> 完全等价<br>.</p><table><thead><tr><th>转义字符：</th><th>\n</th><th>\t</th><th>\v</th><th>\b</th><th>\r</th><th>\\</th></tr></thead><tbody><tr><td>含义</td><td>换行</td><td>水平制表符</td><td>垂直制表符</td><td>退格</td><td>回车</td><td>字符<code>\</code></td></tr></tbody></table><h3 id="1-3-运算符"><a href="#1-3-运算符" class="headerlink" title="1.3 运算符"></a>1.3 运算符</h3><ul><li>常量<ul><li>整数常量<ul><li>八进制：以<code>0</code>开头</li><li>十六进制：以<code>0x</code>开头</li></ul></li><li>浮点型常量（近似存储）</li><li>字符串常量<ul><li>C风格字符串常量：以<code>\0</code>结尾的字符序列</li><li>string类对象</li></ul></li><li>符号常量（eg. <code>const float pi(3.14)</code>）</li></ul></li><li>运算符<ul><li>算术运算符：<code>+ - * /</code> <code>%</code> <code>++</code> <code>--</code> </li><li>关系运算符：<code>==</code> <code>!=</code> <code>&gt;</code> <code>&gt;=</code> <code>&lt;</code> <code>&lt;=</code></li><li>逻辑运算符：<code>&amp;&amp;</code>(短路特性) <code>||</code> <code>!</code></li><li>位运算符：<code>&amp;</code> <code>|</code> <code>^</code> <code>&lt;&lt;</code> <code>&gt;&gt;</code> <code>~</code>(二进制补码运算符)</li><li>赋值运算符：<code>=</code>及其衍生 </li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//逗号运算符，先计算表达式1，再计算表达式2，结果为表达式2的值</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> a<span class="token operator">*</span><span class="token number">4</span> <span class="token comment" spellcheck="true">//最终结果为60</span><span class="token comment" spellcheck="true">//sizeof运算符</span><span class="token comment" spellcheck="true">//Condition ? x : Y 条件运算符</span><span class="token comment" spellcheck="true">//指针运算符 &amp; *</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-输入输出"><a href="#1-4-输入输出" class="headerlink" title="1.4 输入输出"></a>1.4 输入输出</h3><ul><li>程序建立一个流对象</li><li>指定这个流对象与某个文件对象建立连接</li><li>程序操作流对象，通过文件系统产生作用</li></ul><p><code>&lt;iostream&gt;</code> 定义了cin, cout, cerr, clog<br><code>&lt;fstream&gt;</code> 文件处理</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输入整行字符串，第三个参数指定分隔符，默认为换行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-5-结构控制"><a href="#1-5-结构控制" class="headerlink" title="1.5 结构控制"></a>1.5 结构控制</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//判断</span><span class="token keyword">if</span><span class="token operator">-</span><span class="token keyword">else</span><span class="token keyword">switch</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"Sunday"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//break防止继续执行</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">default</span><span class="token operator">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//循环</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">do</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//break, continue, goto</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-6-字符串"><a href="#1-6-字符串" class="headerlink" title="1.6 字符串"></a>1.6 字符串</h3><ul><li>C 风格字符串<ul><li>常字符指针，const char *p = str ，指向首地址</li></ul></li><li>string类</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp">string s1<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//构造，默认建立一个长度为0的串</span>string s2<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>string s3<span class="token operator">=</span>s2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//复制构造函数</span><span class="token comment" spellcheck="true">//字典序比较，下标访问字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-7-other"><a href="#1-7-other" class="headerlink" title="1.7 other"></a>1.7 other</h3><p>一、一些类型</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//类型别名</span><span class="token keyword">typedef</span> 已有类型名 新类型名<span class="token keyword">using</span> 新类型名 已有类型名<span class="token comment" spellcheck="true">//枚举类型</span><span class="token keyword">enum</span> 类型名 <span class="token punctuation">{</span>变量值列表<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//枚举元素是常量，枚举元素有默认值</span><span class="token comment" spellcheck="true">//auto，根据初始值自动推断变量类型</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">//表示j以2为初始值，类型与i一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二、标识符的作用域与可见性</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全局变量，文件作用域</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    i<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//局部变量，局部作用域（{}中），屏蔽外部</span>        i<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"i="</span><span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出7</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"i="</span><span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出5</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于可见性：</p><ul><li>如果某个标识符在外层中声明，且在内层中没有同一标识符的声明，则该标识符在内层可见</li><li>对于两个嵌套的作用域，如果内层中声明了外层作用域同名的标识符，则外层的那个表示符在内层中不可见</li></ul><p>三、变量的生存期与可见性</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i为全局变量，具有静态生存期</span><span class="token keyword">void</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//a,b为静态局部变量，具有全局寿命，局部可见</span>    <span class="token comment" spellcheck="true">//只第一次进入函数时被初始化</span>    <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//c为局部变量，具有动态生存期</span>    <span class="token comment" spellcheck="true">//每次进入函数时都初始化</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、面向对象"><a href="#二、面向对象" class="headerlink" title="二、面向对象"></a>二、面向对象</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p><strong>如何形成类</strong>：抽象出同一类事物的共同属性和行为，形成类。</p><p><strong>类与对象的关系</strong>：类型与实例的关系，犹如模具与铸件之间的关系。</p><p><strong>OOP思想</strong>：封装、继承、多态</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Clock</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//私有成员</span>    <span class="token keyword">int</span> hour <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//类内初始值</span><span class="token keyword">public</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//共有成员，外部接口</span>    <span class="token comment" spellcheck="true">//通过初始化列表构造函数：</span>    <span class="token comment" spellcheck="true">// Triangle(int a, int b, int c) : sa(a), sb(b), sc(c) {}; </span>    <span class="token comment" spellcheck="true">//一般通用的类都会提供一个默认构造函数</span>    <span class="token comment" spellcheck="true">//Clock();</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//保护型成员</span><span class="token punctuation">}</span>Clock<span class="token operator">::</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//成员函数的实现</span><span class="token punctuation">}</span>Clock t<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对象定义</span>t<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-构造函数"><a href="#2-2-构造函数" class="headerlink" title="2.2 构造函数"></a>2.2 构造函数</h3><p><strong>构造函数</strong>的特征：</p><ol><li>构造函数必须与类重名</li><li>构造函数可以有任意类型的参数</li><li>不能有返回值，不能定义返回类型</li><li>构造函数在建立对象时自动执行</li></ol><p>一个类中可以没有用户定义的构造函数，此时编译器会自动为用户提供一个 <strong>默认构造函数</strong> （无参构造函数）。</p><ol><li>参数表为空的构造函数</li><li>全部参数都有默认值的构造函数</li></ol><p>但两个默认构造函数在类中同时出现时，会产生编译错误。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">public</span><span class="token operator">:</span>    类名（形参）<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//构造函数</span>    类名（<span class="token keyword">const</span> 类名 <span class="token operator">&amp;</span>对象名）<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//复制构造函数</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//对象数组的构造</span><span class="token comment" spellcheck="true">// 1.缺省构造函数，无参数构造函数</span>classname foo<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.构造函数带一个参数，且不是默认参数的情况</span>classname <span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">"parm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3.构造函数的参数有多个时，为每个元素显式调用其构造函数</span>classname foo<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token function">fo</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">fo</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>拷贝构造函数：</strong></p><ul><li>每个类都有拷贝构造函数，如果没有定义，则使用默认的</li><li>使用默认的拷贝构造函数，实现的功能也是内存的直接填充</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp">Class <span class="token class-name">Point</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">x</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">y</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//拷贝构造函数,,,构造</span>        x<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token punctuation">.</span>x<span class="token punctuation">;</span>        y<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Point <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Point <span class="token function">p2</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//显式调用拷贝构造函数复制对象</span>Point p3<span class="token operator">=</span>p2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//通过赋值来调用拷贝构造函数，隐式调用</span>Point <span class="token function">p4</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p4<span class="token operator">=</span>p1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里是赋值，不是复制。</span>Point <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Point <span class="token function">p4</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p4<span class="token punctuation">;</span><span class="token punctuation">}</span>p2<span class="token operator">=</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//传出来的是对象拷贝构造后的，20，40</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-析构函数"><a href="#2-3-析构函数" class="headerlink" title="2.3 析构函数"></a>2.3 析构函数</h3><ol><li>一个类中可以有多个构造函数,只能有一个析构函数。</li><li>如果程序中未声明，编译器自动产生一个默认的析构函数。</li><li>在对象的生存期结束的时候，系统自动调用析构函数。</li><li>析构函数没有参数，没有返回类型</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">public</span><span class="token operator">:</span>    类名（形参）<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//构造函数</span>    <span class="token operator">~</span>类名（）<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//析构函数</span><span class="token punctuation">}</span>classname<span class="token operator">::</span><span class="token operator">~</span><span class="token function">classname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//析构函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-静态成员"><a href="#2-4-静态成员" class="headerlink" title="2.4 静态成员"></a>2.4 静态成员</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//在Student中 声明 一个静态的学生总数变量</span><span class="token keyword">static</span> <span class="token keyword">int</span> stu_cnt<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//构造函数中添加</span>stu_cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在任意一个对象中修改该值，会影响到该类的所有对象</span><span class="token comment" spellcheck="true">//静态成员在编译时初始化，是一块共享的内存空间</span><span class="token comment" spellcheck="true">//在类的外部，main的外部，初始化静态成员变量</span><span class="token keyword">int</span> Student<span class="token operator">::</span>stu_cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态成员函数访问静态数据成员</span><span class="token comment" spellcheck="true">//- 静态成员函数是类的“全局”函数，因此没有this指针。在静态成员函数中，一般无法直接访问类的其他变量</span><span class="token comment" spellcheck="true">//- 静态成员函数仅用来操作静态成员变量</span><span class="token comment" spellcheck="true">//- 在任何对象被构造之前，静态成员变量和静态成员函数就已经可以访问。</span><span class="token comment" spellcheck="true">//调用：类名::静态函数名();</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-友元函数"><a href="#2-5-友元函数" class="headerlink" title="2.5 友元函数"></a>2.5 友元函数</h3><p>友元函数，在类的外部，访问类的私有成员</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//友元函数在类中声明</span><span class="token keyword">friend</span> <span class="token keyword">float</span> <span class="token function">dist</span><span class="token punctuation">(</span>Point <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> Point <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//友元函数访问私有成员变量，但是不能直接在定义友元函数时调用私有成员变量，只能通过引用类对象的成员参数方式调用</span><span class="token keyword">float</span> <span class="token function">dist</span><span class="token punctuation">(</span>Point<span class="token operator">&amp;</span>a<span class="token punctuation">,</span> Point <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> x <span class="token operator">=</span> a<span class="token punctuation">.</span>x <span class="token operator">-</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token keyword">double</span> y <span class="token operator">=</span> a<span class="token punctuation">.</span>y <span class="token operator">-</span> b<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x <span class="token operator">+</span> y<span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//友元函数不是类的成员函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-派生与继承"><a href="#2-6-派生与继承" class="headerlink" title="2.6 派生与继承"></a>2.6 派生与继承</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">car</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//基类中属性与方法</span>    <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> k <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">bus</span><span class="token operator">:</span> <span class="token keyword">public</span> car<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//出现在基类中的属性与方法，不用再次声明和实现</span>    <span class="token comment" spellcheck="true">//只写派生类中需要新添的属性和方法</span>    <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> k <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//派生类中重新定义f()</span>    <span class="token keyword">int</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>car<span class="token operator">::</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//调用基类方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>派生类调整基类成员的方法<ul><li>同名覆盖</li><li>访问声明<ul><li>在派生类的public段中声明父亲类中某个函数，令其属性为public</li></ul></li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//虚继承</span><span class="token comment" spellcheck="true">//祖先类的成员只构造一次</span><span class="token keyword">class</span> <span class="token class-name">Derived</span><span class="token operator">:</span> <span class="token keyword">virtual</span> <span class="token keyword">public</span> Base<span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>派生类的类型转换<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Derived</span><span class="token operator">:</span> <span class="token keyword">public</span> Base<span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>Base b;<br>Derived d;</p><p>b = d; //用派生类对象给基类对象赋值<br>Base &amp;br = d; //定义一个基类应用，用派生类初始化<br>Base *bp = &d; //定义一个基类指针，指向派生类对象</p><pre><code>### 2.7 多态父亲类定义函数接口，孩子类负责实现该接口。当父亲类需要调用该接口时，能够自动执行对应孩子实现的代码### 2.8 _other_```cpp//类的组合//在一个类的构造中嵌入另一个类的对象，构造时都要构造//先构造被组合的//对象指针Ccube* pcube;  //定义指针时，不会调用构造函数//定义类时，类的方法编译后的二进制码放入内存//定义类的对象时，对象的内存空间存放属性数据//在每个成员函数执行的时候，隐形地传进去一个指向调用者对象自身的 this 指针a.disp()  -&gt; a.disp(this) -&gt; a.disp(&amp;a)//常对象const class_name foo();class_name const foo();//此后foo对象在其生存周期内不可更改//const数据成员只能透过初始化列表在构造的时候进行初始化。一旦构造不可更改</code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//常成员</span><span class="token comment" spellcheck="true">//一个类中定义的const函数，专门用来处理这个类的const对象发起的函数调用</span><span class="token keyword">class</span> <span class="token class-name">Date</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">year</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">monnth</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">day</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">showdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>y<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">showdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"const"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Date <span class="token function">date1</span><span class="token punctuation">(</span><span class="token number">1990</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    date1<span class="token punctuation">.</span><span class="token function">showdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Date <span class="token keyword">const</span> <span class="token function">date2</span><span class="token punctuation">(</span><span class="token number">1998</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    date2<span class="token punctuation">.</span><span class="token function">showdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用const函数</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//const函数能访问普通属性成员，但不能修改值</span><span class="token comment" spellcheck="true">//const对象只能调用类中const函数，不能调用普通函数？!？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//静态成员函数不能声明为虚函数</span><span class="token comment" spellcheck="true">//静态数据成员是类的所有对象所共有的</span><span class="token comment" spellcheck="true">//静态数据成员能受private控制符的作用，可以直接用类名调用</span><span class="token comment" spellcheck="true">//静态数据成员在类外初始化</span>下列情况中，不会调用拷贝构造函数的是<span class="token punctuation">(</span> B <span class="token punctuation">)</span>。A<span class="token punctuation">)</span> 用一个对象去初始化同一类的另一个新对象时B<span class="token punctuation">)</span> 将类的一个对象赋值给该类的另一个对象时C<span class="token punctuation">)</span> 函数的形参是类的对象，调用函数进行形参和实参结合时D<span class="token punctuation">)</span> 函数的返回值是类的对象，函数执行返回调用时<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>static函数属于类，不属于对象（对象里不分配内存），this指针是对象的指针。所以在cpp静态成员函数里，不能直接使用this指针。</p><p>虚函数？？？</p><h2 id="三、高级语法"><a href="#三、高级语法" class="headerlink" title="三、高级语法"></a>三、高级语法</h2><h3 id="3-1-异常处理"><a href="#3-1-异常处理" class="headerlink" title="3.1 异常处理"></a>3.1 异常处理</h3><h3 id="3-2-引用"><a href="#3-2-引用" class="headerlink" title="3.2 引用"></a>3.2 引用</h3><ol><li>引用（&amp;）是标识符的别名，定义时需初始化</li><li>区分取址、引用</li><li>引用不可更改</li><li>引用必须有类型，且与原类型相同</li><li>引用的引用仍然是引用</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">&amp;</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>j<span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">></span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引用作为函数参数（声明中），说明参数是对变量的引用</span><span class="token comment" spellcheck="true">//引用还可以作为函数返回值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-指针"><a href="#3-3-指针" class="headerlink" title="3.3 指针"></a>3.3 指针</h3><ol><li>有效指针。指向本程序内存范围内有效的地址</li><li>NULL指针。存在但不指向任何地方</li><li>野指针。指向未知内存的指针 <code>char *p</code></li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"city"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指向字符型常量的指针，它指向的值不能修改</span><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token string">"city"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指向字符型变量的常指针，不能指向别的变量，但指向变量的值可以修改</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token string">"city"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//指向字符型常量的常指针。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-4-函数"><a href="#3-4-函数" class="headerlink" title="3.4 函数"></a>3.4 函数</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//内联函数</span><span class="token comment" spellcheck="true">//减少开销,不会为函数单独开辟区域编译</span><span class="token comment" spellcheck="true">//不能有循环语句和switch语句</span><span class="token comment" spellcheck="true">//对内联函数不能进行异常接口声明</span><span class="token comment" spellcheck="true">//编译器可能优化，，导致用得比较少</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">>=</span>b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//默认参数，也叫缺省参数</span><span class="token comment" spellcheck="true">//默认参数必须放在没有默认值参数的后面</span><span class="token keyword">int</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span> alpha <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token keyword">constexpr</span><span class="token comment" spellcheck="true">//在其所有参数都是constexpr时一定返回constexpr</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//函数重载</span><span class="token comment" spellcheck="true">//允许多个函数使用同样的函数名</span><span class="token comment" spellcheck="true">//不要将功能不同的函数声明为重载函数</span><span class="token keyword">bool</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//原始函数</span><span class="token keyword">bool</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//参数类型不同</span><span class="token keyword">bool</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">float</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//参数数量不同</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">float</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译器不以形参名区分</span><span class="token comment" spellcheck="true">//编译器不以返回值来区分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-结构体"><a href="#3-5-结构体" class="headerlink" title="3.5 结构体"></a>3.5 结构体</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> name<span class="token punctuation">{</span>    共有成员<span class="token keyword">protected</span><span class="token operator">:</span>    保护型成员<span class="token keyword">private</span><span class="token operator">:</span>    私有成员<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//cpp中结构体是一个特殊的类</span><span class="token comment" spellcheck="true">//结构体中可以有数据成员和函数成员</span><span class="token comment" spellcheck="true">//一定情况下可如下初始化：</span>Student stu<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">201911</span><span class="token punctuation">,</span><span class="token string">"yasuo"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、STL标准模板库"><a href="#四、STL标准模板库" class="headerlink" title="四、STL标准模板库"></a>四、STL标准模板库</h2><p>泛型程序设计：将算法从数据结构中抽象出来，成为通用的，如 C++ 模板。</p><h3 id="4-1-容器"><a href="#4-1-容器" class="headerlink" title="4.1 容器"></a>4.1 容器</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//顺序容器</span><span class="token operator">&lt;</span>array<span class="token operator">></span><span class="token comment" spellcheck="true">// 封装任何类型的动态数组，自动创建和删除</span><span class="token comment" spellcheck="true">//数组下标越界检查</span><span class="token comment" spellcheck="true">//size()函数</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">arr</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>deque<span class="token operator">></span><span class="token operator">&lt;</span>forward_list<span class="token operator">></span><span class="token operator">&lt;</span>list<span class="token operator">></span><span class="token comment" spellcheck="true">//有序关联容器</span><span class="token operator">&lt;</span>set<span class="token operator">></span><span class="token operator">&lt;</span>multiset<span class="token operator">></span><span class="token operator">&lt;</span>map<span class="token operator">></span><span class="token operator">&lt;</span>multimap<span class="token operator">></span><span class="token comment" spellcheck="true">//无序关联容器</span><span class="token operator">&lt;</span>unordered_map<span class="token operator">></span><span class="token operator">&lt;</span>unordered_set<span class="token operator">></span><span class="token comment" spellcheck="true">//容器适配器</span><span class="token operator">&lt;</span>stack<span class="token operator">></span><span class="token operator">&lt;</span>queue<span class="token operator">></span><span class="token operator">&lt;</span>priority_queue<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-算法"><a href="#4-2-算法" class="headerlink" title="4.2 算法"></a>4.2 算法</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3-迭代器"><a href="#4-3-迭代器" class="headerlink" title="4.3 迭代器"></a>4.3 迭代器</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iterator></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五、作业"><a href="#五、作业" class="headerlink" title="五、作业"></a>五、作业</h2><h3 id="5-1-三角形类"><a href="#5-1-三角形类" class="headerlink" title="5.1 三角形类"></a>5.1 三角形类</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> sa<span class="token punctuation">,</span> sb<span class="token punctuation">,</span> sc<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// Triangle(int a, int b, int c) : sa(a), sb(b), sc(c) {}; 通过初始化列表构造函数</span>    <span class="token function">Triangle</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token comment" spellcheck="true">//普通构造函数</span>        sa <span class="token operator">=</span> a<span class="token punctuation">;</span>        sb <span class="token operator">=</span> b<span class="token punctuation">;</span>        sc <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">ifcan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sa <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> sb <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> sc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>sa <span class="token operator">+</span> sb <span class="token operator">&lt;</span> sc<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>sa <span class="token operator">+</span> sc <span class="token operator">&lt;</span> sb<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>sb <span class="token operator">+</span> sc <span class="token operator">&lt;</span> sa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">double</span> <span class="token function">GetPerimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span>  sa <span class="token operator">+</span> sb <span class="token operator">+</span> sc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">double</span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">double</span> p <span class="token operator">=</span> <span class="token function">GetPerimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">-</span> sa<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> sb<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> sc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string <span class="token function">classify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> flag<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sc <span class="token operator">>=</span> sa <span class="token operator">&amp;&amp;</span> sc <span class="token operator">>=</span> sb<span class="token punctuation">)</span>            flag <span class="token operator">=</span> sc<span class="token operator">*</span>sc <span class="token operator">-</span> sa<span class="token operator">*</span>sa <span class="token operator">-</span> sb<span class="token operator">*</span>sb<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sa <span class="token operator">>=</span> sb <span class="token operator">&amp;&amp;</span> sa <span class="token operator">>=</span> sc<span class="token punctuation">)</span>            flag <span class="token operator">=</span> sa<span class="token operator">*</span>sa <span class="token operator">-</span> sc<span class="token operator">*</span>sc <span class="token operator">-</span> sb<span class="token operator">*</span>sb<span class="token punctuation">;</span>        <span class="token keyword">else</span>            flag <span class="token operator">=</span> sb<span class="token operator">*</span>sb <span class="token operator">-</span> sa<span class="token operator">*</span>sa <span class="token operator">-</span> sc<span class="token operator">*</span>sc<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">"right triangle"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">"obtuse triangle"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token string">"acute triangle"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//析构函数声明</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Triangle<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Triangle</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"triangle is being deleted"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"input 3 numbers:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>    Triangle <span class="token function">t</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">ifcan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"can form a triangle."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"can't form a triangle."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"perimeter: "</span> <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span><span class="token function">GetPerimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"area: "</span> <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span><span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"category: "</span><span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span><span class="token function">classify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="other"><a href="#other" class="headerlink" title="other"></a><em>other</em></h2><p><strong>参考资料</strong>：</p><ul><li>学校课程      30%</li><li>C++语言程序设计（学堂在线）  20%</li><li><em>C++ Primer 5th</em></li><li>菜鸟教程</li></ul><hr><p><strong>推荐阅读</strong>：</p><ul><li><a href="https://www.unielu.com/posts/c6f.html">c语言</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习(一)</title>
      <link href="posts/ml1.html"/>
      <url>posts/ml1.html</url>
      
        <content type="html"><![CDATA[<h5 id="preface"><a href="#preface" class="headerlink" title="preface"></a><em>preface</em></h5><table><thead><tr><th>sklearn</th><th>applications</th><th>algorithms</th></tr></thead><tbody><tr><td><code>classification</code></td><td>spam detection, image recognition</td><td>SVM, nearest neighbors, random forest…</td></tr><tr><td><code>regression</code></td><td>drug response, stock prices</td><td>SVR, nearest neighbors, random forest…</td></tr><tr><td><code>clustering</code></td><td>customer segmentation, grouping experiment outcomes</td><td>K-means, spectral clustering…</td></tr><tr><td><code>dimensionality reduction</code></td><td>visualization</td><td>K-means, feature selecion…</td></tr><tr><td><code>model selection</code></td><td>Improved accuracy via parameter tuning</td><td>grid search…</td></tr><tr><td><code>preprocessing</code></td><td>Transforming input data such as text for use with machine learning algorithms.</td><td>preprocessing</td></tr></tbody></table><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#使用 sklearn 标准数据集</span><span class="token keyword">import</span> sklearn<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_bostonboston<span class="token operator">=</span>load_boston<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>boston<span class="token punctuation">.</span>data<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->(506, 13)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a><em>Introduction</em></h5><p><strong>Machine Learning definition</strong>:</p><ul><li><em>Arthur Samuel</em> : Field of study that gives computers the ability to learn without being explicitly programmed.</li><li><em>Tom Mitchell</em> : A computer program is said to learn from experience E with respect to some task T and some perfermance measure P.</li></ul><p>tools: Octave Matlab</p><div class="admonition note"><p class="admonition-title">Octave</p><p>GNU Octave 6.2 安装好了，readme 上 chose an installation folder that doesn't contain spaces。出错了再说。</p></div><p>supervised learning（分类，回归），unsupervised learning（clustering聚类，market segments）</p><p>svd，奇异值分解</p><hr><h1 id="Linear-regression"><a href="#Linear-regression" class="headerlink" title="Linear regression"></a><em>Linear regression</em></h1><p><em>Notation:</em><br><strong>m</strong>: number of training examples<br><strong>x</strong>‘s: “input” variable/features<br><strong>y</strong>‘s: “output” variable/“target”<br><strong>(x,y)</strong>: one training example<br><strong>(x<sup>(i)</sup>, y<sup>(i)</sup>)</strong>: i th training example</p><p>对于回归问题，一般情况：cost function -&gt; squared error function</p><p><img src="https://img-blog.csdnimg.cn/20210403092953384.png"></p><h1 id="Linear-Algebra-review"><a href="#Linear-Algebra-review" class="headerlink" title="Linear Algebra review"></a><em>Linear Algebra review</em></h1><h1 id="Linear-Regression-with-multiple-variables"><a href="#Linear-Regression-with-multiple-variables" class="headerlink" title="Linear Regression with multiple variables"></a><em>Linear Regression with multiple variables</em></h1><h1 id="Octave-Tutorial"><a href="#Octave-Tutorial" class="headerlink" title="Octave Tutorial"></a><em>Octave Tutorial</em></h1><h1 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a><em>Logistic Regression</em></h1><h1 id="Regularization"><a href="#Regularization" class="headerlink" title="Regularization"></a><em>Regularization</em></h1><h1 id="Neural-Networks-Representation"><a href="#Neural-Networks-Representation" class="headerlink" title="Neural Networks: Representation"></a><em>Neural Networks: Representation</em></h1><h1 id="NeuralNetworks-Learning"><a href="#NeuralNetworks-Learning" class="headerlink" title="NeuralNetworks: Learning"></a><em>NeuralNetworks: Learning</em></h1><h1 id="Advice-for-applying-machine-learning"><a href="#Advice-for-applying-machine-learning" class="headerlink" title="Advice for applying machine learning"></a><em>Advice for applying machine learning</em></h1><h1 id="Machine-learning-system-design"><a href="#Machine-learning-system-design" class="headerlink" title="Machine learning system design"></a><em>Machine learning system design</em></h1><h1 id="Support-Vector-Machines"><a href="#Support-Vector-Machines" class="headerlink" title="Support Vector Machines"></a><em>Support Vector Machines</em></h1><h1 id="Clustering"><a href="#Clustering" class="headerlink" title="Clustering"></a><em>Clustering</em></h1><h1 id="Dimensionality-Reduc1on"><a href="#Dimensionality-Reduc1on" class="headerlink" title="Dimensionality Reduc1on"></a><em>Dimensionality Reduc1on</em></h1><h1 id="Anomaly-detection"><a href="#Anomaly-detection" class="headerlink" title="Anomaly detection"></a><em>Anomaly detection</em></h1><h1 id="Recommender-Systems"><a href="#Recommender-Systems" class="headerlink" title="Recommender Systems"></a><em>Recommender Systems</em></h1><h1 id="Large-scale-machine-learning"><a href="#Large-scale-machine-learning" class="headerlink" title="Large scale machine learning"></a><em>Large scale machine learning</em></h1><h1 id="Application-example-Photo-OCR"><a href="#Application-example-Photo-OCR" class="headerlink" title="Application example: Photo OCR"></a><em>Application example: Photo OCR</em></h1><h1 id="Support-Vector-Machines-1"><a href="#Support-Vector-Machines-1" class="headerlink" title="Support Vector Machines"></a><em>Support Vector Machines</em></h1><hr><p><em>other</em></p><p><strong>课程资料</strong>：</p><ul><li><a href="https://www.bilibili.com/video/BV164411b7dx" target="_blank" rel="noopener">吴恩达-机器学习(bilibili)</a> ，，<a href="https://github.com/TheisTrue/MLofAndrew-Ng" target="_blank" rel="noopener">讲义地址</a></li><li>北理工-pthon机器学习应用</li><li><a href="https://www.unielu.com/posts/ec3h.html">记一次深度学习(2020.5)</a></li><li>pytorch文档：<a href="https://pytorch.apachecn.org/" target="_blank" rel="noopener">https://pytorch.apachecn.org/</a></li><li>mxnet官网：<a href="https://mxnet.apache.org/" target="_blank" rel="noopener">https://mxnet.apache.org/</a></li></ul><div class="admonition note"><p class="admonition-title">关于《动手学深度学习》</p><p>这本书基于MXNet深度学习框架（类似pyotrch、tensorflow），装环境时好多问题，不是源不行了，就是依赖库冲突了...先搁着 <code>2021.3.26</code></p></div>]]></content>
      
      
      <categories>
          
          <category> 网课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算语言学</title>
      <link href="posts/nlp.html"/>
      <url>posts/nlp.html</url>
      
        <content type="html"><![CDATA[<p>计算语言学 ≈ 自然语言处理 = 语言信息处理 ≠ 计量语言学   </p><p>PPT:</p><ul><li>2.语言学基础<ul><li>语言学研究的系统性和层次性</li><li>词汇系统</li><li>句法系统</li><li>语法系统</li><li>语用系统</li></ul></li><li>3.语料库和语言知识库<ul><li>语料库：就是存放语言材料的仓库<ul><li>类型<ul><li>平衡语料库，着重考虑的是语料的代表性与平衡性。</li><li>平行语料库</li></ul></li></ul></li></ul></li></ul><hr><ul><li>自然语言处理的两种基本方法：<ul><li>基于规则的分析方法（理论基础：Chomsky文法理论）<ul><li>规则库开发</li><li>推导算法设计</li></ul></li><li>基于语料库的统计方法（理论基础：数理统计、信息论）<ul><li>语料库建设</li><li>统计模型建立</li></ul></li></ul></li><li>概率论基础<ul><li>样本空间：是一个试验的全部可能出现的结果的集合。</li><li>基本事件、复合事件：含有一个、多个样本点的随记事件。</li><li>$P(A,B) = P(A) × P(B|A) = P(B) × P(A|B)$</li><li>事件独立：<ul><li>$P(A|B) = P(A), P(B|A) = P(B)$</li><li>$P(A,B) = P(A) × P(B)$</li></ul></li><li>事件A与B在条件C下相互独立：<ul><li>$P(A,B|C) = P(A|C) × P(B|C)$</li><li>$P(A|B,C) = P(A|C)$</li><li>$P(B|A,C) = P(B|C)$</li></ul></li><li>全概率公式：$P(A) = \sum P(B_i)P(A|B_i)$</li><li>贝叶斯公式</li></ul></li></ul><hr><p>词内互信息</p><p>w = c1, c2（c1, c2 为组成w的汉字），f(w)为词频，f(c1)、f(c2)分别为c1, c2在语料库C中的出现次数（字频）。且C的总词数为$N_w$，总字数为$N_c$，则w的词内互信息为：</p><p>$$mi(w)=log_2(\frac{N_c^2×f(w)}{N_w × f(c1) × f(c2)})$$</p><h2 id="五、统计语言模型"><a href="#五、统计语言模型" class="headerlink" title="五、统计语言模型"></a>五、统计语言模型</h2><ul><li><p>噪声信道模型<br>$$\hat{I}=argmax_I(p(I|O))=argmax_Ip(I)p(O|I)$$</p></li><li><p>平滑</p><ul><li>加1平滑</li><li>add-one平滑</li><li>2-gram加一</li><li>Good Turing平滑<ul><li>$p_0=n_1/N$</li><li>$r^*=(r+1)n_{r+1}/n_r$</li><li>样本中出现 r 次的事件的概率：</li></ul></li></ul></li></ul><p>$$P_r=\frac{r^*}{N}=\frac{r+1}{N}\frac{n_{r+1}}{n_r}$$</p><h2 id="六、汉语自动分词"><a href="#六、汉语自动分词" class="headerlink" title="六、汉语自动分词"></a>六、汉语自动分词</h2><ul><li>曲折语（英语、德语、俄语等）<ul><li>分词（词语识别）</li><li>形态还原</li><li>POS-Tagging 词性标注</li></ul></li><li>分析语（汉语）<ul><li>分词</li><li>POS-Tagging 词性标注</li></ul></li><li>黏着语</li></ul><h2 id="七、隐马尔科夫模型"><a href="#七、隐马尔科夫模型" class="headerlink" title="七、隐马尔科夫模型"></a>七、隐马尔科夫模型</h2><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p>（1）搭配抽取任务</p><p>（2）python最大正向匹配分词</p><p>（3）</p><p><strong><em>other</em>:</strong></p>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021三月</title>
      <link href="posts/20213.html"/>
      <url>posts/20213.html</url>
      
        <content type="html"><![CDATA[<p><em>Mar.2021</em></p><h2 id="3-1-3-2"><a href="#3-1-3-2" class="headerlink" title="3.1~3.2"></a><code>3.1~3.2</code></h2><p>《闪灵》里为什么会有 all work and no play makes jack a dull boy.</p><p>《狩猎》，有时候偏见已经深入人心，乃至浑然不觉。</p><p>《三体》读得有点懵，去看了视频：<a href="https://www.bilibili.com/video/BV11s41187QY" target="_blank" rel="noopener">https://www.bilibili.com/video/BV11s41187QY</a></p><p>#吐槽，好多课硬是教你盲人摸象，东摸一点，西摸一点，学了个啥</p><p>#计量语言学，还tm开题报告答辩，真是直接送你上科研的围城</p><hr><h2 id="3-5-3-20"><a href="#3-5-3-20" class="headerlink" title="3.5-3.20"></a><code>3.5-3.20</code></h2><p>只剩15天了，开学前要做的事：</p><ul><li>看完纪录片：<a href="https://www.bilibili.com/video/BV1oJ41137oE" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1oJ41137oE</a> <code>70%</code></li><li>计算机网络-2019王道  <code>√</code> <code>3.8</code></li><li>机器学习-吴恩达</li><li>读完《沉思录》<code>√</code> <code>3.11</code></li><li>读完《硅谷之谜》<code>√</code> <code>3.16</code></li><li>读完《非暴力沟通》 <code>√</code> <code>3.27</code></li><li>观影《死亡诗社》<code>√</code> <code>3.8</code></li><li>观影《熔炉》<code>√</code> <code>3.11</code></li><li>观影《浪潮》<code>√</code> <code>3.15</code></li></ul><hr><h2 id="3-7"><a href="#3-7" class="headerlink" title="3.7"></a><code>3.7</code></h2><p><a href="https://img-blog.csdnimg.cn/20210307100644818.jpg" target="_blank" rel="noopener">十四五主要目标</a></p><p>更新文章：<a href="https://www.unielu.com/posts/hexo.html">关于hexo理解</a></p><hr><h2 id="3-8"><a href="#3-8" class="headerlink" title="3.8"></a><code>3.8</code></h2><p>#毛概课，无聊随记</p><p>#讲个白话文。说：这句话什么意思呢？然后对语句几番排列组合，顺便再水几个例子。</p><p>#不就是党好，党不够好，党要努力；毛好，毛不够好，毛要努力。</p><p>#听了一个小时，不能耗了，溜了溜了。</p><p>#原来他是讲了一天网课。也是个受害者，hhh</p><hr><p>观影《死亡诗社》，挺好的</p><p>矛盾冲突淋漓尽致，就宏观来说，这个问题没有答案，回归天性或压制天性，理性或浪漫。</p><p>Keating老师，像极了曾经努力寻找过人性本真、生命意义的孩子，然后想教会这些学生（自己的体悟经验）。</p><p>可是每个人的生命都把握在自己的手上，只有自己读书行路多了，思考多了，眼界开了，才能去寻找自己与世界的平衡。<br>怎么我也批判他了，我爱死这个老师了，思想没问题，方式有点过。</p><p>就放大来说，轻易死亡这种事，三种解释：<br>①给了他承受不起的欢愉，反而害了他<br>②他想反抗，可是方式有问题<br>③太勉强了，为了满足剧本需要。这种有追寻的人，有家庭责任的人，有小伙伴的人，怎么可能寻短呢？</p><p>最后感觉他成功了，<a href="https://img-blog.csdnimg.cn/20210308214742211.png" target="_blank" rel="noopener">这个世界需要更多的英雄</a>，也可以叫异类</p><p>Gather you rosebuds while you may.</p><hr><p><code>3.11</code></p><p>啊，明天就要出农村了，网速不再是128kb/s。<br>我好害怕我自己，觉得我又要去玩游戏，打一会就一天过去了。<br>戒不掉的话，那在学校里也是戒不掉的。</p><p>我是个凡人，生活普普通通，也没什么来抵挡虚无与无聊，</p><p>如果阈值提高了，是真的生活不易。</p><p>无聊的生活如同黑夜，各种洪流汹涌起来的时候，<br>独木舟就容易迷失方向，要是有灯塔陪着我去抵挡就好了。</p><p>希望明天面对欲望的时候，我可以冷静下来</p><hr><p><code>3.12</code></p><p>感觉我讲故事的能力好弱，www~</p><p>别人的博客有好多故事啊，</p><ul><li><a href="https://www.rz.sb/archives/608/" target="_blank" rel="noopener">我人生的第一桶金</a></li><li></li></ul><hr><h2 id="3-13"><a href="#3-13" class="headerlink" title="3.13"></a><code>3.13</code></h2><p>#随记（<strong>关于游戏</strong>）</p><p>感觉真的越来越难遇到喜欢的游戏了，</p><p>记得小时候一打开手机、电脑，即使是别人的，也能玩得很起劲</p><p>现在吧，玩巫师3，硬是觉得我是个局外人，做任务做到一半想跑路，就只打了只狮鹫Boss，就不想玩了，</p><p>上古卷轴5，鬼泣5，尼尔，真三国无双5678（人物是真好看），火影，龙珠，帝国时代23，还有头昏的2077，使命召唤，<br>火炬2，地平线，极品17/21，无人深空，哈迪斯，虐杀，无主2，三位，PSP怪猎……</p><p>hh，我大型单机也是玩得蛮多的</p><p>GTA5也玩不下去了（应该是觉得无聊，虽然里面光影不错，晚上月亮会变化，晚霞也会变化，可现实中的光影总是更真切、更美好），记得小学时去别人家玩GTA3，觉得可有意思了，站在房顶往下面丢燃烧弹，然后等着警察来……</p><p>以前能玩切西瓜就非常舒服了，至于现在，我能说什么，</p><div class="admonition info"><p class="admonition-title">以前写的关于游戏的看法</p><p>在游戏中，我想 我们（17岁）想要的是：<br>1，人与人的弱关联<br>2，人与集体的强关联<br>3，友善和谐的界面设计<br>4，友善和谐的小感动<br>5，新颖的玩法与技术需求性<br>6，游戏中的不断变化性<br>7，游戏的世界观</p></div><p>我想应该是以前的游戏给我们带来了全新的世界，最早的，暴力摩托、赤色要塞、超级玛丽……</p><p>现在呢，我们肯定是变化最大的，心态、阅历都完全不一样了，变化的感觉还有游戏，</p><p>电脑上，4399竟然还健在，flash都被安全没了。<br>手机上氛围就不行，除了主流外，我见的大部分都是为了盈利而产生的游戏，新出的天地城也是个憨憨，又要走格子，又要克制，又要职责，又要领域，又要选技能，还打架动画，想得不错，但表现出来就是一个憨憨（原谅我，才玩了半小时）；影之刃3下回来登录打一架又不想玩了，变化性太少了，内容也少。主流我也是玩不下去的，跟电脑比起来又是个憨憨。</p><p>现在吧，能陪的大概只有个lol了，昨天还在机器学习课上练习亚索EQ闪，hhh，可我还是得离开…<br>我感觉我对它并不是热爱，只是它，能给我某种状态下的局部最优解，就当是混时间（没察觉到外界时间）吧，<br>（不行，我还是得提一下莉莉娅，看她技能：梦满枝，飞花挞，惊惶木，流涡种，夜阑谣。）</p><p>以前我也想过开发游戏，不过不现实，这得在想法充分的时候去坚持做。</p><p>关于游戏，嗯，这样了。</p><p><code>3.14</code></p><p>关于选课，当代中国政治制度导论，金融投资热点分析，太坑了这教务。<br>金融还和C++上机冲突了，算了，学分拿到，不浪费自己的时间，就行了。</p><p><a href="https://www.unielu.com/posts/contest232.html">周赛笔记232</a></p><h2 id="3-15-18"><a href="#3-15-18" class="headerlink" title="3.15-18"></a><code>3.15-18</code></h2><p><a href="https://www.bilibili.com/video/BV11Z4y1P7Am" target="_blank" rel="noopener">https://www.bilibili.com/video/BV11Z4y1P7Am</a></p><p><a href="https://www.bilibili.com/video/BV1PN41197or" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1PN41197or</a></p><p><a href="https://www.bilibili.com/video/BV1yJ411k736" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1yJ411k736</a></p><hr><p>腾讯游戏部有些恶心，鬼谷八荒，一个超努力的国产单机，吾爱破解见了相关的下载资源都删掉，各大单机平台也不提供资源（经常提供外国单机的资源）。</p><p>腾讯 2.8元把它拿出来卖（steam上68），这是压榨国内游戏行业，还是看不起群众？</p><h2 id="3-19"><a href="#3-19" class="headerlink" title="3.19"></a><code>3.19</code></h2><p>⬜既然知道了事物是一个个因果关系，那么就去设置监管与反馈调节的制度，在事物变质之前去调节它，不然就如同高山的滚石，这对于人也是适用的。</p><p>#观影《放牛班的春天》，以前老师放给我们看了。</p><p>#随记，关于暴力，想起了权游里面詹姆兰尼斯特断手之旅，小剥皮折磨席恩，Cersei受罚行街，小恶魔在法庭被喷，琼恩被战友捅刀.</p><p>我始终相信，人性中的善良天使，会引导着我们成为更好的人。</p><h2 id="3-20"><a href="#3-20" class="headerlink" title="3.20"></a><code>3.20</code></h2><p><em>OUR PLANET</em> : <a href="https://www.bilibili.com/video/BV1oJ41137oE" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1oJ41137oE</a></p><p>剧组太用心了，不知道为了这些珍贵的画面拍了多久。<br>1.唱歌的座头鲸，虎鲸，蓝鲸，海里有独角鲸，地上却没有独角兽<br>2.憨憨北极熊、一上陆就憨的帝皇鹅<br>3.一吨的海象被逼着爬悬崖，还是群体爬，摄影师给了他们摔下来的绝望镜头。。。<br>4.沙漠里的大象、豹子，羚羊，。。。<br>5.藤壶，公海，深海生物，雨林。。。<br>他们生活的家园，真的比，少年派的奇幻漂流，更梦幻。<br>感慨：自然界太和谐了，每个物种都与其它物种在宏观上如此和谐。</p><p><code>3.21</code></p><p>做事之前多动脑子，不带主观因素的观察，对情境进行客观陈述。</p><p><code>3.30</code></p><p>局部最优解啊，，，如果理性的话，都已经分不清这是真的快乐还是假的快乐了。</p><p>#观影《小王子》，星夜将至，请睁开你的双眼，hhh~~。童话啊，有点无聊了…</p><h2 id="3-31"><a href="#3-31" class="headerlink" title="3.31"></a><code>3.31</code></h2><p>so bring 啊，无聊得真实，这段时光…</p><p>#今天，听到了图书馆的铃声。</p><h2 id="Apr-2021"><a href="#Apr-2021" class="headerlink" title="Apr.2021"></a><em>Apr.2021</em></h2><p>观《西西里美丽传说》《天空之城》《哪吒重生》《致命魔术》《搏击俱乐部》…</p><h2 id="4-1"><a href="#4-1" class="headerlink" title="4.1"></a><code>4.1</code></h2><p>#观影《熊出没狂野大陆》…</p><p>还搁这看熊出没呢，hhh~~</p><p>没事啊，无聊，才能更发觉你渴望着什么，你总不能让局部最优解占住了你的青春。</p><p>#再次记一句话（说得太棒了）：既然知道了事物是一个个因果关系，那么就去设置监管与反馈调节的制度，在事物变质之前去调节它，不然就如同高山的滚石，这对于人也是适用的。</p><h2 id="4-2"><a href="#4-2" class="headerlink" title="4.2"></a><code>4.2</code></h2><p>无聊得真实…</p><h2 id="4-3"><a href="#4-3" class="headerlink" title="4.3"></a><code>4.3</code></h2><p>好多人都谈到了现在，我也是啊，多么希望啊，hh~</p><p>发现，年代稍微久点的，有些读不进去，叔本华《人生的智慧》，不好看</p><p>#一些摘抄，记一下</p><p>《非暴力沟通》</p><ol><li>一旦一个人意识到了自己得到了理解和接纳，一般来说，他会觉得很惬意。</li><li>如果有人倾听你，不对你评头论足，不替你担惊受怕，也不想改变你，这多美好啊……</li><li>如果一个人想要别人了解他的处境，听到的确实安慰和建议，那么，他就有可能觉得不太舒服。</li><li>不带评论的观察是人类智力的最高形式</li><li>如果我们通过批评来提出主张，人们的反应常常是申辩或反击。</li><li>我们可以用负责任的语言代替任何回避责任的语言（如，游戏真好玩 -&gt; 我在干嘛？）</li></ol><p>《被讨厌的勇气》</p><ol><li>不在于被给予了什么，而在于如何取使用被给予的东西</li><li>对人而言，最大的不幸就是不喜欢自己</li><li>但是，我们的人生只是点的连续。计划式的人生不是有没有必要，而是根本不可能。</li><li>人生中最大的谎言就是不活在“此时此刻”。纠结过去，关注未来，把微弱而模糊的光打向人生整体，自认为看到了些什么。</li><li>个人看法：活在现在并不是去及时行乐，而是去感受真实，无聊也可以当作是种常态。作为青年，对未来还是要留点心的，因为我们从始至终都扎根于现实，一个人的当下不仅仅包括当下的真实，还有想要去完成的事</li></ol><h2 id="4-？"><a href="#4-？" class="headerlink" title="4.？"></a><code>4.？</code></h2><p>题真难，好好锻炼，代码空格不规范，老给黄线，开始改改吧。</p><p>买了两个歌单，久石让和灵笼</p><p><code>4.7</code></p><p>我怎么知道我喜不喜欢，我怎么知道我怎么想的，笑死我了</p><p><code>4.10</code></p><p>leetcode战队赛，第一题难度easy，通过率7%，搞人心态…还好没参加…</p><p>#我还是想去寻求简单些，该如何去知道喜欢啊，如果久而久之也就那样，如果这份美丽无法承担…可我啊，我会知道我该去追寻的。</p><p><code>4.12</code></p><p>命数如织啊~</p><p><code>4.13</code></p><p>c++ rpg游戏 作业写完，其实再简单的游戏用心了也会是一种艺术。</p><p><code>4.14</code></p><p>关于机器学习：<a href="https://github.com/fengdu78" target="_blank" rel="noopener">https://github.com/fengdu78</a></p><p><code>4.15</code></p><p>男人啊，纵使疾风相顾，命数如织，高山低谷，也要平静吗，他会吗</p><p><code>4.16</code></p><p>有仪式感真的很好，如果我四点就要见到你了，可能我三点就会很开心。</p><p><code>4.17</code></p><p>饭饱思淫欲…</p><p><code>4.18</code></p><p>27寸，2K，144显示器到了，舒服啊</p><p><code>4.22</code></p><p>#观影《让子弹飞》，简记几个场景：</p><p>（1）结局处，往事回映的那一幕，这一切可能会变得不值得，原来的日子想想也蛮舒服的，可做过就代表这做过，这条路走过就无法回头，这个过程我经历，我感受真实，就不必去问对不对了。</p><p>（2）他说出自己叫 <em>牧之</em> 的时候，好名字啊，还听过几个名字：苏菲浅、华天；世上哪有什么完美啊，只有持之以恒的扮演；一些粉饰，一些场景，一段故事，足以筑起一座无法仰望的城；</p><p>（3）还有人们只愿意叫他张麻子的时候，这就同《狩猎》了，我还是尽量去客观看待、主观感受吧，世界本就不是非黑即白，一切都在自然地流转，如这四季的光影、花朵的枯荣</p><p>#最近，感觉我的状态不太对，花枯了吗？可如果它并没有存在过，它就会一直开着吗？<br>#没事，我还是喜欢这一切，大怪兽，hh~~</p><p><code>4.23</code></p><p>#观影《爆裂鼓手》，偏执扭曲的追求，不值得啊，到最后，留下了什么。</p><p>#关于手游 <em>奥奇传说</em> ， 比电脑还是要好些的，可我不能停留了，生活宽广且有趣。</p><p>晚上不能喝饮料了，脸会肿的…</p><hr><p>也许人生很多时候，我们对快乐的追求，<br>刻意为之的快乐，不一定真正的快乐，<br>往往是那些并非刻意的一些追求，所得到的快乐，往往是一些高质量富有思考性的快乐。</p><p>今天世界读书日，越来越沉迷罗翔了.. hh~~</p><h2 id="4-24"><a href="#4-24" class="headerlink" title="4.24"></a><code>4.24</code></h2><p>读完《幸福的勇气》</p><ul><li>放下对恒常的追求，坦然接受无常的发生</li><li>自立的最终目的，就在于消除自我，承认我们只是普通人，不从社会序列和他人的认同中寻求自我价值，而只从自己的所作所为中寻找自我价值。</li><li>暴力始终是成本低、廉价的交流手段。在讨论道德是否允许之前，首先不得不说它是人类非常不成熟的行为。</li><li>予我以平静，去接收我无法改变的；予我以勇气，去改变我能改变的；予我以智慧，去分辨这二者的区别。</li><li>人类最害怕的是孤立，人类本能地清楚一个人根本无法生存。因此，我们常常希望能与他人建立坚固的联系，这意味着所有人的内心都有共同体感觉，它与人的认同需求紧密相连。</li><li>认同根本没有尽头。只有被表扬才能体会到幸福的人，直在生命的最后一刻也在追求更多的表扬。这样的人就被置于了依存的地位，过着永远索求、永不满足的生活。</li><li>很难突然好起来的，很难存在命中注定的人，眼前人即是了，去跳舞吧</li><li>只想轻松或快乐地活着的人即使能够得到短暂的快乐，也无法获得真正的幸福。我们只有通过爱他人才能从自我中心性中解放出来，找到共同体的感觉。</li><li>主动去爱、勇敢、眼神交流、别呆着</li><li>现实就是我们为了分别而相遇，凡存在的终会消逝，但这段旅途，已然无价。</li></ul><h2 id="4-27"><a href="#4-27" class="headerlink" title="4.27"></a><code>4.27</code></h2><p>暑假可以留在北京实习啦，要是本科毕业后能春招进入大厂该多好…</p><p>微软的工作福利有些离谱（<del>想要</del>）…先把学分修完，多刷一些大厂面试的算法题，多看面经。</p><p>大学，，，我多么希望啊~ </p><p>#近期，体验《APEX英雄》，玩《双人成行》，观《致命魔术》《搏击俱乐部》</p><h2 id="4-30"><a href="#4-30" class="headerlink" title="4.30"></a><code>4.30</code></h2><p>观《饮食男女》</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记230</title>
      <link href="posts/contest230.html"/>
      <url>posts/contest230.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、统计匹配检索规则的物品数量"><a href="#一、统计匹配检索规则的物品数量" class="headerlink" title="一、统计匹配检索规则的物品数量"></a><a href="https://leetcode-cn.com/problems/count-items-matching-a-rule/" target="_blank" rel="noopener">一、统计匹配检索规则的物品数量</a></h2><p>给你一个数组 <code>items</code> ，其中 <code>items[i] = [typei, colori, namei]</code> ，描述第 <code>i</code> 件物品的类型、颜色以及名称。</p><p>另给你一条由两个字符串 <code>ruleKey</code> 和 <code>ruleValue</code> 表示的检索规则。</p><p>如果第 <code>i</code> 件物品能满足下述条件之一，则认为该物品与给定的检索规则 <strong>匹配</strong> ：</p><ul><li><code>ruleKey == &quot;type&quot;</code> 且 <code>ruleValue == typei</code> 。</li><li><code>ruleKey == &quot;color&quot;</code> 且 <code>ruleValue == colori</code> 。</li><li><code>ruleKey == &quot;name&quot;</code> 且 <code>ruleValue == namei</code> 。</li><li>统计并返回 <strong>匹配检索规则的物品数量</strong></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countMatches</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> items<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ruleKey<span class="token punctuation">:</span> str<span class="token punctuation">,</span> ruleValue<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        types<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> items<span class="token punctuation">]</span>        colors<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> items<span class="token punctuation">]</span>        names<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> items<span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">if</span> ruleKey <span class="token operator">==</span> <span class="token string">"type"</span><span class="token punctuation">:</span>            ans<span class="token operator">+=</span>sum<span class="token punctuation">(</span><span class="token punctuation">[</span>ruleValue<span class="token operator">==</span>t <span class="token keyword">for</span> t <span class="token keyword">in</span> types<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> ruleKey <span class="token operator">==</span> <span class="token string">"color"</span><span class="token punctuation">:</span>            ans<span class="token operator">+=</span>sum<span class="token punctuation">(</span><span class="token punctuation">[</span>ruleValue<span class="token operator">==</span>c <span class="token keyword">for</span> c <span class="token keyword">in</span> colors<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            ans<span class="token operator">+=</span>sum<span class="token punctuation">(</span><span class="token punctuation">[</span>ruleValue<span class="token operator">==</span>n <span class="token keyword">for</span> n <span class="token keyword">in</span> names<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、最接近目标价格的甜点成本"><a href="#二、最接近目标价格的甜点成本" class="headerlink" title="二、最接近目标价格的甜点成本"></a><a href="https://leetcode-cn.com/problems/closest-dessert-cost/" target="_blank" rel="noopener">二、最接近目标价格的甜点成本</a></h2><p>你打算做甜点，现在需要购买配料。目前共有 <code>n</code> 种冰激凌基料和 <code>m</code> 种配料可供选购。而制作甜点需要遵循以下几条规则：</p><ul><li>必须选择 <strong>一种</strong> 冰激凌基料。</li><li>可以添加 <strong>一种或多种</strong> 配料，也可以不添加任何配料。</li><li>每种类型的配料 <strong>最多两份</strong> 。</li></ul><p>给你以下三个输入：</p><ul><li><code>baseCosts</code> ，一个长度为 n 的整数数组，其中每个 baseCosts[i] 表示第 i 种冰激凌基料的价格。</li><li><code>toppingCosts</code>，一个长度为 m 的整数数组，其中每个 toppingCosts[i] 表示 一份 第 i 种冰激凌配料的价格。</li><li><code>target</code> ，一个整数，表示你制作甜点的目标价格。<br>你希望自己做的甜点总成本尽可能接近目标价格 target 。</li></ul><p>返回最接近 <code>target</code> 的甜点成本。如果有多种方案，返回 <strong>成本相对较低</strong> 的一种。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#暴力</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">closestCost</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> baseCosts<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> toppingCosts<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> m<span class="token punctuation">:</span>                 total<span class="token punctuation">.</span>add<span class="token punctuation">(</span>k<span class="token punctuation">)</span>                <span class="token keyword">return</span>            dfs<span class="token punctuation">(</span>k<span class="token punctuation">,</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>k<span class="token operator">+</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        total<span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> base <span class="token keyword">in</span> baseCosts<span class="token punctuation">:</span>            dfs<span class="token punctuation">(</span>base<span class="token punctuation">,</span>toppingCosts<span class="token punctuation">)</span>        total<span class="token operator">=</span>list<span class="token punctuation">(</span>total<span class="token punctuation">)</span>        total<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span>baseCosts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> a <span class="token keyword">in</span> total<span class="token punctuation">:</span>            <span class="token keyword">if</span> abs<span class="token punctuation">(</span>a<span class="token operator">-</span>target<span class="token punctuation">)</span><span class="token operator">&lt;</span>abs<span class="token punctuation">(</span>ans<span class="token operator">-</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>                ans<span class="token operator">=</span>a        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#真是好久没写代码了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、通过最少操作次数使数组的和相等"><a href="#三、通过最少操作次数使数组的和相等" class="headerlink" title="三、通过最少操作次数使数组的和相等"></a><a href="https://leetcode-cn.com/problems/equal-sum-arrays-with-minimum-number-of-operations/" target="_blank" rel="noopener">三、通过最少操作次数使数组的和相等</a></h2><p>给你两个长度可能不等的整数数组 <code>nums1</code> 和 <code>nums2</code> 。两个数组中的所有值都在 <code>1</code> 到 <code>6</code> 之间（包含 <code>1</code> 和 <code>6</code>）。</p><p>每次操作中，你可以选择 <strong>任意</strong> 数组中的任意一个整数，将它变成 <code>1</code> 到 <code>6</code> 之间 <strong>任意</strong> 的值（包含 <code>1</code> 和 <code>6</code>）。</p><p>请你返回使 <code>nums1</code> 中所有数的和与 <code>nums2</code> 中所有数的和相等的最少操作次数。如果无法使两个数组的和相等，请返回 <code>-1</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minOperations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        t1<span class="token punctuation">,</span>t2<span class="token operator">=</span>sum<span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">,</span>sum<span class="token punctuation">(</span>nums2<span class="token punctuation">)</span>        <span class="token keyword">if</span> t1<span class="token operator">==</span>t2<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> t1<span class="token operator">></span>t2<span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>minOperations<span class="token punctuation">(</span>nums2<span class="token punctuation">,</span> nums1<span class="token punctuation">)</span>        c1<span class="token punctuation">,</span>c2<span class="token operator">=</span>Counter<span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">,</span>Counter<span class="token punctuation">(</span>nums2<span class="token punctuation">)</span>        need<span class="token operator">=</span><span class="token number">0</span>        diff<span class="token operator">=</span>t2<span class="token operator">-</span>t1        <span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#print(num,diff)</span>            <span class="token keyword">if</span> num <span class="token keyword">in</span> c1<span class="token punctuation">:</span>                <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>c1<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    need<span class="token operator">+=</span><span class="token number">1</span>                    diff<span class="token operator">-=</span><span class="token number">6</span><span class="token operator">-</span>num                    <span class="token keyword">if</span> diff<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">break</span>            <span class="token keyword">if</span> diff<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">break</span>            <span class="token keyword">if</span> <span class="token number">7</span><span class="token operator">-</span>num <span class="token keyword">in</span> c2<span class="token punctuation">:</span>                <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>c2<span class="token punctuation">[</span><span class="token number">7</span><span class="token operator">-</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    need<span class="token operator">+=</span><span class="token number">1</span>                    diff<span class="token operator">-=</span><span class="token number">6</span><span class="token operator">-</span>num                    <span class="token keyword">if</span> diff<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">break</span>            <span class="token keyword">if</span> diff<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">break</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">if</span> diff<span class="token operator">></span><span class="token number">0</span> <span class="token keyword">else</span> need<span class="token comment" spellcheck="true">#6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、车队-II"><a href="#四、车队-II" class="headerlink" title="四、车队 II"></a><a href="https://leetcode-cn.com/problems/car-fleet-ii/" target="_blank" rel="noopener">四、车队 II</a></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getCollisionTimes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cars<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>float<span class="token punctuation">]</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        speed_pos_time <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span>float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> cars<span class="token punctuation">:</span>            curr_pos<span class="token punctuation">,</span> curr_speed <span class="token operator">=</span> cars<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(curr_pos, curr_speed)</span>            <span class="token comment" spellcheck="true"># print(speed_pos_time)</span>            <span class="token comment" spellcheck="true"># print(res[::-1])</span>            <span class="token keyword">if</span> curr_speed <span class="token operator">&lt;=</span> speed_pos_time<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># current speed is slower than the most slow speed int speed_list</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                speed_pos_time <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>curr_speed<span class="token punctuation">,</span> curr_pos<span class="token punctuation">,</span> float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">while</span> speed_pos_time<span class="token punctuation">:</span>                    _s<span class="token punctuation">,</span> _p<span class="token punctuation">,</span> _t <span class="token operator">=</span> speed_pos_time<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                    <span class="token keyword">if</span> curr_speed <span class="token operator">&lt;=</span> _s<span class="token punctuation">:</span>                        speed_pos_time<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token keyword">continue</span>                    curr_time <span class="token operator">=</span> <span class="token punctuation">(</span>_p <span class="token operator">-</span> curr_pos<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>curr_speed <span class="token operator">-</span> _s<span class="token punctuation">)</span>                    <span class="token keyword">if</span> curr_time <span class="token operator">></span> _t<span class="token punctuation">:</span>                        speed_pos_time<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        speed_pos_time<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>curr_speed<span class="token punctuation">,</span> curr_pos<span class="token punctuation">,</span> curr_time<span class="token punctuation">]</span><span class="token punctuation">)</span>                        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>curr_time<span class="token punctuation">)</span>                        <span class="token keyword">break</span>        <span class="token keyword">return</span> res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getCollisionTimes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cars<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>float<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">cal</span><span class="token punctuation">(</span>car1<span class="token punctuation">,</span> car2<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> car1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> car2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>car2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> car1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>car1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> car2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>cars<span class="token punctuation">)</span>        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        mapping <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp <span class="token operator">=</span> cal<span class="token punctuation">(</span>cars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> cars<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> tmp <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> queue<span class="token punctuation">:</span>            time<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>            <span class="token keyword">if</span> ans<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            ans<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> time            mapping<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> mapping<span class="token punctuation">[</span>left<span class="token punctuation">]</span>            <span class="token keyword">if</span> mapping<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            new <span class="token operator">=</span> mapping<span class="token punctuation">[</span>left<span class="token punctuation">]</span>            tmp <span class="token operator">=</span> cal<span class="token punctuation">(</span>cars<span class="token punctuation">[</span>new<span class="token punctuation">]</span><span class="token punctuation">,</span> cars<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> tmp <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> new<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记225</title>
      <link href="posts/contest225.html"/>
      <url>posts/contest225.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、替换时间"><a href="#一、替换时间" class="headerlink" title="一、替换时间"></a><a href="https://leetcode-cn.com/problems/latest-time-by-replacing-hidden-digits/" target="_blank" rel="noopener">一、替换时间</a></h2><p>给你一个字符串 <code>time</code> ，格式为 <code>hh:mm</code>（小时：分钟），其中某几位数字被隐藏（用 <code>?</code> 表示）。</p><p>有效的时间为 <code>00:00</code> 到 <code>23:59</code> 之间的所有时间，包括 <code>00:00</code> 和 <code>23:59</code> 。</p><p>替换 <code>time</code> 中隐藏的数字，返回你可以得到的最晚有效时间。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># if-else</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maximumTime</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> time<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        tmp<span class="token operator">=</span>list<span class="token punctuation">(</span>time<span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>num <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> num<span class="token operator">==</span><span class="token string">'?'</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                     <span class="token keyword">if</span> tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token string">'3'</span><span class="token operator">or</span> tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'?'</span><span class="token punctuation">:</span>                        tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'1'</span>                <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'2'</span><span class="token punctuation">:</span>                        tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'3'</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'9'</span>                <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">:</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'5'</span>                <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">:</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'9'</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maximumTime</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">:</span>        h <span class="token operator">=</span> time<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>        m <span class="token operator">=</span> time<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            t<span class="token operator">=</span><span class="token string">'{:02}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> all<span class="token punctuation">(</span><span class="token punctuation">[</span>j<span class="token operator">==</span>k <span class="token operator">or</span> j<span class="token operator">==</span><span class="token string">'?'</span> <span class="token keyword">for</span> j<span class="token punctuation">,</span>k <span class="token keyword">in</span> zip<span class="token punctuation">(</span>h<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                h<span class="token operator">=</span>t                <span class="token keyword">break</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            t<span class="token operator">=</span><span class="token string">'{:02}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> all<span class="token punctuation">(</span><span class="token punctuation">[</span>j<span class="token operator">==</span>k <span class="token operator">or</span> j<span class="token operator">==</span><span class="token string">'?'</span> <span class="token keyword">for</span> j<span class="token punctuation">,</span>k <span class="token keyword">in</span> zip<span class="token punctuation">(</span>m<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                m<span class="token operator">=</span>t                <span class="token keyword">break</span>        <span class="token keyword">return</span> <span class="token string">'{}:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>h<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、满足三条件之一需改变的最少字符数"><a href="#二、满足三条件之一需改变的最少字符数" class="headerlink" title="二、满足三条件之一需改变的最少字符数"></a><a href="https://leetcode-cn.com/problems/change-minimum-characters-to-satisfy-one-of-three-conditions/" target="_blank" rel="noopener">二、满足三条件之一需改变的最少字符数</a></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minCharacters</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">:</span> str<span class="token punctuation">,</span> b<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        ca<span class="token operator">=</span>Counter<span class="token punctuation">(</span>a<span class="token punctuation">)</span>        cb<span class="token operator">=</span>Counter<span class="token punctuation">(</span>b<span class="token punctuation">)</span>        na<span class="token punctuation">,</span>nb<span class="token operator">=</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>b<span class="token punctuation">)</span>        ans<span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>        cnta<span class="token punctuation">,</span>cntb<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cnta<span class="token operator">+=</span>ca<span class="token punctuation">[</span>chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span>            cntb<span class="token operator">+=</span>cb<span class="token punctuation">[</span>chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span>            t1<span class="token operator">=</span>na<span class="token operator">-</span>cnta<span class="token operator">+</span>cntb            t2<span class="token operator">=</span>cnta<span class="token operator">+</span>nb<span class="token operator">-</span>cntb            ans<span class="token operator">=</span>min<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            t3<span class="token operator">=</span>na<span class="token operator">-</span>ca<span class="token punctuation">[</span>chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span>nb<span class="token operator">-</span>cb<span class="token punctuation">[</span>chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span>            ans<span class="token operator">=</span>min<span class="token punctuation">(</span>t3<span class="token punctuation">,</span>ans<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 暴力枚举</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、找出第-K-大的异或坐标值"><a href="#三、找出第-K-大的异或坐标值" class="headerlink" title="三、找出第 K 大的异或坐标值"></a><a href="https://leetcode-cn.com/problems/find-kth-largest-xor-coordinate-value/" target="_blank" rel="noopener">三、找出第 K 大的异或坐标值</a></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">kthLargestValue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        t<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">]</span>        t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>            t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">^</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>            t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">^</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">^</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">^</span>t<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">^</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">]</span>        ans<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、放置盒子"><a href="#四、放置盒子" class="headerlink" title="四、放置盒子"></a><a href="https://leetcode-cn.com/problems/building-boxes/" target="_blank" rel="noopener">四、放置盒子</a></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#归纳</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通信原理</title>
      <link href="posts/network_communicate.html"/>
      <url>posts/network_communicate.html</url>
      
        <content type="html"><![CDATA[<p><strong><em>preface</em></strong><br>参考资料：《深入浅出通信原理》<br>学个10%用用</p><hr><p><strong>通信系统的演变</strong>：</p><ul><li>有线模拟通信系统<ul><li>1875年，贝尔发现电流的强弱可以模拟声音大小的变化</li><li>主要产品：碳粒式麦克风，动圈式扬声器</li></ul></li><li>无线模拟通信系统<ul><li>一般组成：调制器，发射天线，接受天线，解调器</li><li>缺点：模拟信号抗干扰能力差，容易失真</li></ul></li><li>有线数字通信系统<ul><li>引入高低电平，信号抗干扰能力强</li></ul></li><li>无线数字通信系统</li></ul><hr><p><strong>通信系统模型</strong>：<br>信源和信宿通过信道收发信息。<br>发信机：对信源发出的信息进行必要的检错和纠错编码等处理后，将其转换成适合在信道上传输的信号，发送到信道上<br>收信机：负责从信道上接收信号，进行检错和纠错处理后，将信息恢复出来发给信宿</p><hr><p><strong>信道</strong>的特性决定了信息在信道上的传输形式，而信道的特性又取决于传输媒介。按照传输媒介的不同，通信信道分为有线信道和无线信道。</p><ul><li>有线信道的传输媒介为电话线、网线和光纤等导线。</li><li>无线信道的传输媒介为自由空间的电磁波。电磁波按照波长的不同分为无线电波、光波、X射线、γ射线。</li></ul><ul><li><strong>无线电波通信</strong><ul><li>调幅广播：使用长波、中波或短波进行通信</li><li>调频广播：使用VHF频段87~108MHz的微波进行通信</li><li><code>Wi-Fi</code>：主要使用UHF频段的2.4GHz微波进行通信</li><li><code>蓝牙</code>：使用2.4—2.485GHz的ISM波段进行通信</li><li>GSM：主要使用UHF频段的900MHz/1800MHz微波进行通信</li><li>LTE：主要使用UHF频段的2.5GHz微波进行通信</li><li>微波和卫星通信：使用SHF和EHF频段的7~38GHz微波进行通信</li></ul></li><li>光波通信<ul><li>可见光通信</li><li>红外通信：通常使用波长为940nm的红外线进行通信</li></ul></li></ul><hr><p><strong>信号变换</strong>：信源编码 -&gt; 信道编码和交织 -&gt; 脉冲成形 -&gt; 调制 -&gt; 发射天线 -&gt; 。。。</p><p>天线技术，无线通信系统中，调制得到的已调信号要转换成电磁波才能在空间中进行传输</p><ul><li><strong>电磁波</strong>是由同相振荡且互相垂直的电场与磁场在空间中以波的形式移动，其传播方向垂直于电场与磁场构成的平面，可以有效地传递能量</li></ul><hr><ul><li><strong>复用技术</strong>是指一条信道同时传输多路数据的技术<ul><li>TDM（时分复用）、FDM（频分复用）、CDM（码分复用）是最常见的3种复用技术。</li></ul></li><li><strong>多址技术</strong>是指一条信道同时传输多个用户数据的技术<ul><li>TDMA（时分多址）、FDMA（频分多址）、CDMA（码分多址）是最常见的3种多址技术。</li></ul></li></ul><hr><p>正弦信号，复指数信号，欧拉公式，信号分解合成，傅里叶变换，香农公式</p><p>傅里叶级数展开：将一个周期信号分解为一个直流分量和一系列复指数信号分量之和的过程</p><p>构成周期信号的所有复指数信号成分可以用傅里叶系数来描述，但是傅里叶系数不够直观，有没有什么办法可以把傅里叶系数直观地呈现出来呢？这就引出了频谱</p>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记224</title>
      <link href="posts/contest224.html"/>
      <url>posts/contest224.html</url>
      
        <content type="html"><![CDATA[<h2 id="二、同积元组"><a href="#二、同积元组" class="headerlink" title="二、同积元组"></a>二、同积元组</h2><p>给你一个由 <strong>不同</strong> 正整数组成的数组 <code>nums</code> ，请你返回满足 <code>a * b = c * d</code> 的元组 <code>(a, b, c, d)</code> 的数量。其中 <code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> 都是 <code>nums</code> 中的元素，且 <code>a != b != c != d</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">tupleSameProduct</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        dic<span class="token operator">=</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                dic<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(dic)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> dic<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            n<span class="token operator">=</span>len<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> n<span class="token punctuation">:</span>                ans<span class="token operator">+=</span>comb<span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、重新排列后的最大子矩阵"><a href="#三、重新排列后的最大子矩阵" class="headerlink" title="三、重新排列后的最大子矩阵"></a>三、重新排列后的最大子矩阵</h2><p>给你一个二进制矩阵 <code>matrix</code> ，它的大小为 <code>m x n</code> ，你可以将 <code>matrix</code> 中的 列 按任意顺序重新排列。</p><p>请你返回最优方案下将 <code>matrix</code> 重新排列后，全是 <code>1</code> 的子矩阵面积。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">largestSubmatrix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        m<span class="token punctuation">,</span>n<span class="token operator">=</span>len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        pre<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#记住每个位置往下可以连多少个</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token number">-1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span>pre<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span> pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>        <span class="token comment" spellcheck="true">#print(pre)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#枚举更新</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#二维暂存数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再提一下另一道题：<br><a href="https://leetcode-cn.com/problems/largest-rectangle-in-histogram/" target="_blank" rel="noopener">84.柱状图中最大的矩形</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#仿本题做法：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">largestRectangleArea</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> heights<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        tmp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        max_height<span class="token operator">=</span>max<span class="token punctuation">(</span>heights<span class="token punctuation">)</span>        <span class="token keyword">for</span> height <span class="token keyword">in</span> heights<span class="token punctuation">:</span>            cur<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>max_height<span class="token operator">-</span>height<span class="token punctuation">)</span>            tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> ceil <span class="token keyword">in</span> zip<span class="token punctuation">(</span><span class="token operator">*</span>tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>            num<span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>ceil<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> ceil<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                     num<span class="token operator">=</span>ceil<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                    cnt<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span> cnt<span class="token operator">=</span><span class="token number">0</span>                ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>num<span class="token operator">*</span>cnt<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#超时，太惨了，</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">largestRectangleArea</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> heights<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        heights<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        ans <span class="token operator">=</span> <span class="token number">0</span>         <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>heights<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> heights<span class="token punctuation">[</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                h <span class="token operator">=</span> heights<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>                w <span class="token operator">=</span> i <span class="token operator">-</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span>                ans <span class="token operator">=</span> max<span class="token punctuation">(</span>h<span class="token operator">*</span>w<span class="token punctuation">,</span> ans<span class="token punctuation">)</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、猫和老鼠-II"><a href="#四、猫和老鼠-II" class="headerlink" title="四、猫和老鼠 II"></a>四、猫和老鼠 II</h2><p><a href="https://leetcode-cn.com/problems/cat-and-mouse-ii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/cat-and-mouse-ii/</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canMouseWin</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">,</span> catJump<span class="token punctuation">:</span> int<span class="token punctuation">,</span> mouseJump<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        m<span class="token punctuation">,</span> n  <span class="token operator">=</span> len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        grid  <span class="token operator">=</span> <span class="token punctuation">[</span>list<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token keyword">for</span> t <span class="token keyword">in</span> grid<span class="token punctuation">]</span>        isin  <span class="token operator">=</span> <span class="token keyword">lambda</span> i<span class="token punctuation">,</span> j <span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">&lt;=</span>i<span class="token operator">&lt;</span>m <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>j<span class="token operator">&lt;</span>n        get_h <span class="token operator">=</span> <span class="token keyword">lambda</span> i<span class="token punctuation">,</span> j <span class="token punctuation">:</span> i <span class="token operator">*</span> n <span class="token operator">+</span> j        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'C'</span> <span class="token punctuation">:</span>                    cat_pos <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>                    grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span>                <span class="token keyword">elif</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'M'</span> <span class="token punctuation">:</span>                    mouse_pos <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>                    grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span>                <span class="token keyword">elif</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'F'</span> <span class="token punctuation">:</span>                    food_pos <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>                    grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span>        <span class="token keyword">def</span> <span class="token function">visit</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> dist<span class="token punctuation">)</span> <span class="token punctuation">:</span>            to_visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">]</span><span class="token punctuation">]</span>            visited <span class="token operator">=</span> <span class="token punctuation">{</span>get_h<span class="token punctuation">(</span><span class="token operator">*</span>start<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span>            <span class="token keyword">while</span> len<span class="token punctuation">(</span>to_visit<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">:</span>                ct<span class="token punctuation">,</span> <span class="token punctuation">(</span>ni<span class="token punctuation">,</span> nj<span class="token punctuation">)</span> <span class="token operator">=</span> to_visit<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                dirctions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>                <span class="token keyword">for</span> dt <span class="token keyword">in</span> dirctions <span class="token punctuation">:</span>                    <span class="token keyword">for</span> step <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> dist<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>                        xi<span class="token punctuation">,</span> xj <span class="token operator">=</span> ni<span class="token operator">+</span>dt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>step<span class="token punctuation">,</span> nj<span class="token operator">+</span>dt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>step                        <span class="token keyword">if</span> <span class="token operator">not</span> isin<span class="token punctuation">(</span>xi<span class="token punctuation">,</span> xj<span class="token punctuation">)</span> <span class="token punctuation">:</span>                            <span class="token keyword">break</span>                        <span class="token keyword">if</span> grid<span class="token punctuation">[</span>xi<span class="token punctuation">]</span><span class="token punctuation">[</span>xj<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'#'</span> <span class="token punctuation">:</span>                            <span class="token keyword">break</span>                        <span class="token keyword">if</span> get_h<span class="token punctuation">(</span>xi<span class="token punctuation">,</span> xj<span class="token punctuation">)</span> <span class="token keyword">in</span> visited <span class="token punctuation">:</span>                            <span class="token keyword">continue</span>                        visited<span class="token punctuation">[</span>get_h<span class="token punctuation">(</span>xi<span class="token punctuation">,</span> xj<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> ct<span class="token operator">+</span><span class="token number">1</span>                        to_visit<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>ct<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>xi<span class="token punctuation">,</span> xj<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            end_hash <span class="token operator">=</span> get_h<span class="token punctuation">(</span><span class="token operator">*</span>end<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">if</span> <span class="token operator">not</span> end_hash <span class="token keyword">in</span> visited <span class="token keyword">else</span> visited<span class="token punctuation">[</span>end_hash<span class="token punctuation">]</span>        dis_cat   <span class="token operator">=</span> visit<span class="token punctuation">(</span>cat_pos<span class="token punctuation">,</span> food_pos<span class="token punctuation">,</span> catJump<span class="token punctuation">)</span>        dis_mouse <span class="token operator">=</span> visit<span class="token punctuation">(</span>mouse_pos<span class="token punctuation">,</span> food_pos<span class="token punctuation">,</span> mouseJump<span class="token punctuation">)</span>        <span class="token keyword">if</span> dis_mouse <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> dis_mouse <span class="token operator">></span> <span class="token number">1000</span> <span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>dis_cat<span class="token punctuation">)</span>        @functools<span class="token punctuation">.</span>lru_cache<span class="token punctuation">(</span>None<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span>cpos<span class="token operator">=</span>cat_pos<span class="token punctuation">,</span> mpos<span class="token operator">=</span>mouse_pos<span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'m'</span><span class="token punctuation">,</span> nt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>            <span class="token keyword">assert</span> action <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> mpos <span class="token operator">==</span> food_pos <span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> cpos <span class="token operator">==</span> food_pos <span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> mpos <span class="token operator">==</span> cpos <span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> nt <span class="token operator">></span> max<span class="token punctuation">(</span>dis_cat<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> action <span class="token operator">==</span> <span class="token string">'m'</span> <span class="token punctuation">:</span>                ni<span class="token punctuation">,</span> nj <span class="token operator">=</span> mpos                dirctions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>                to_use <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token keyword">for</span> dt <span class="token keyword">in</span> dirctions <span class="token punctuation">:</span>                    <span class="token keyword">for</span> step <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mouseJump<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>                        xi<span class="token punctuation">,</span> xj <span class="token operator">=</span> ni<span class="token operator">+</span>dt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>step<span class="token punctuation">,</span> nj<span class="token operator">+</span>dt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>step                        <span class="token keyword">if</span> <span class="token operator">not</span> isin<span class="token punctuation">(</span>xi<span class="token punctuation">,</span> xj<span class="token punctuation">)</span> <span class="token punctuation">:</span>                            <span class="token keyword">break</span>                        <span class="token keyword">if</span> grid<span class="token punctuation">[</span>xi<span class="token punctuation">]</span><span class="token punctuation">[</span>xj<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'#'</span> <span class="token punctuation">:</span>                            <span class="token keyword">break</span>                        to_use<span class="token punctuation">.</span>append<span class="token punctuation">(</span>solve<span class="token punctuation">(</span>cpos<span class="token operator">=</span>cpos<span class="token punctuation">,</span> mpos<span class="token operator">=</span><span class="token punctuation">(</span>xi<span class="token punctuation">,</span> xj<span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'c'</span><span class="token punctuation">,</span> nt<span class="token operator">=</span>nt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> any<span class="token punctuation">(</span>to_use<span class="token punctuation">)</span> <span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">True</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> action <span class="token operator">==</span> <span class="token string">'c'</span> <span class="token punctuation">:</span>                ni<span class="token punctuation">,</span> nj <span class="token operator">=</span> cpos                dirctions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>                to_use <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token keyword">for</span> dt <span class="token keyword">in</span> dirctions <span class="token punctuation">:</span>                    <span class="token keyword">for</span> step <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> catJump<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>                        xi<span class="token punctuation">,</span> xj <span class="token operator">=</span> ni<span class="token operator">+</span>dt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>step<span class="token punctuation">,</span> nj<span class="token operator">+</span>dt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>step                        <span class="token keyword">if</span> <span class="token operator">not</span> isin<span class="token punctuation">(</span>xi<span class="token punctuation">,</span> xj<span class="token punctuation">)</span> <span class="token punctuation">:</span>                            <span class="token keyword">break</span>                        <span class="token keyword">if</span> grid<span class="token punctuation">[</span>xi<span class="token punctuation">]</span><span class="token punctuation">[</span>xj<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'#'</span> <span class="token punctuation">:</span>                            <span class="token keyword">break</span>                        to_use<span class="token punctuation">.</span>append<span class="token punctuation">(</span>solve<span class="token punctuation">(</span>cpos<span class="token operator">=</span><span class="token punctuation">(</span>xi<span class="token punctuation">,</span> xj<span class="token punctuation">)</span><span class="token punctuation">,</span> mpos<span class="token operator">=</span>mpos<span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'m'</span><span class="token punctuation">,</span> nt<span class="token operator">=</span>nt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token operator">not</span> all<span class="token punctuation">(</span>to_use<span class="token punctuation">)</span> <span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        solve<span class="token punctuation">.</span>cache_clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> solve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大创</title>
      <link href="posts/666.html"/>
      <url>posts/666.html</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title="preface"></a><em>preface</em></h2><p>关于<strong>报销</strong>，目前大概率申报成功+报销，听说报销好麻烦，最坏打算吧，当作自己的捣鼓项目，把别人的破事加在自己身上是真的憨憨。</p><p>关于学校资源，NLP也是要靠自己学啊，反正互联网能给的已经超过老师了，没有业界大佬带的情况下，自己动手吧。</p><p>#这是一个自平衡的应用项目，<br>需要：<code>安卓开发</code>，<code>arduino基础</code>，<code>蓝牙通信</code>，<code>电工手工基础</code></p><p>人们会因为看不到价值而否定，但并不代表你做的事没有价值。</p><h2 id="目前的问题"><a href="#目前的问题" class="headerlink" title="目前的问题"></a>目前的问题</h2><p>小车重心高低的问题，众说纷纭。。。低些好吧。</p><p>小米物联网方案有效性问题…企业开发组认证…</p><h2 id="项目历程"><a href="#项目历程" class="headerlink" title="项目历程"></a>项目历程</h2><p><code>Alicia 1.0</code></p><p>先实现基本模型，及平衡</p><ul><li>主控板BLE-NANO，<a href="https://item.taobao.com/item.htm?spm=a230r.1.14.46.4996a7399YC4gC&id=587405046926&ns=1&abbucket=16#detail" target="_blank" rel="noopener">淘宝地址</a>，说明书非常重要，通过Serial可与手机蓝牙进行通信</li><li><strong>减速电机</strong>（带编码器可测速），<a href="https://item.taobao.com/item.htm?spm=a1z0d.6639537.1997196601.15.3a987484urDYqx&id=622178634021" target="_blank" rel="noopener">淘宝地址</a>【参考一下他人的，选择了DC 6V A06型 减速比1：30 额定转速为300rpm 34mm轮子】</li><li><strong>MPU6050</strong>（3轴陀螺仪3轴加速计传感器），<a href="https://detail.tmall.com/item.htm?spm=a1z0d.6639537.1997196601.4.ead47484Y2yrYs&id=21261751847" target="_blank" rel="noopener">淘宝地址</a> 【GY-521，IIC通信】</li><li>电池，<a href="https://item.taobao.com/item.htm?spm=a1z0d.6639537.1997196601.4.3a987484urDYqx&id=573013194357" target="_blank" rel="noopener">淘宝地址</a>，12V，串联两个电机</li><li>电机驱动，TB6612FNG电机驱动板模块，<a href="https://detail.tmall.com/item.htm?id=41248562401&spm=a1z09.2.0.0.e5952e8dA6V6DY&_u=j2029c35dm3076" target="_blank" rel="noopener">淘宝地址</a></li><li>其它：超声波模块，直角固定架（暂时用的纸板，以后3D打印时不需要了）</li><li>耗材：电线，胶带，热熔枪，电烙铁，纸板</li></ul><p>一些说明：<strong>热熔胶</strong>不导电，可以对电路板进行固定及保护</p><p>还是要弄一个3D模型去打印一下</p><p>mpu6050可以不需要的，手机上写个PID的APP，并且更加精确，</p><p>正在实践中，东西固定在纸板上，PID实现自平衡即可告一段落</p><h2 id="参考项目"><a href="#参考项目" class="headerlink" title="参考项目"></a>参考项目</h2><p>①<a href="http://www.pengzhihui.xyz/2015/12/09/nano/" target="_blank" rel="noopener">蛋黄与nano —— 一个小巧的自平衡机器</a></p><p>②<a href="http://nicekwell.net/blog/20180118/zi-xing-che-ping-heng-yuan-li.html" target="_blank" rel="noopener">平衡自行车</a></p><p>③<a href="http://www.elecfans.com/d/1047572.html" target="_blank" rel="noopener">自平衡</a></p><p>④<a href="http://www.pengzhihui.xyz/2019/07/15/pico/" target="_blank" rel="noopener">语音助手Pico</a></p><p>⑤<a href="https://blog.csdn.net/jsgaobiao/article/details/50643037" target="_blank" rel="noopener">自平衡教程1</a> <a href="https://blog.csdn.net/jsgaobiao/article/details/50640523?utm_medium=distribute.pc_relevant.none-task-blog-searchFromBaidu-11.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-searchFromBaidu-11.control" target="_blank" rel="noopener">自平衡教程2</a> <a href="https://blog.csdn.net/jsgaobiao/article/details/50759878?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-2&spm=1001.2101.3001.4242" target="_blank" rel="noopener">自平衡教程3</a></p><p>⑥<a href="https://www.bilibili.com/video/BV1ar4y1F77f" target="_blank" rel="noopener">25分钟平衡小车</a></p><p>⑦<a href="https://zhuanlan.zhihu.com/p/105208598" target="_blank" rel="noopener">自制平衡车-来自知乎</a></p><p>⑧<a href="https://blog.csdn.net/q296264785/article/details/106297909" target="_blank" rel="noopener">蓝牙控制小车</a></p><p>⑨<a href="https://www.jianshu.com/p/4ecc99679451" target="_blank" rel="noopener">android蓝牙开发</a>⭐</p><p>⑩<a href="https://blog.csdn.net/c10wtiybq1ye3/article/details/106416257" target="_blank" rel="noopener">android蓝牙串口开发</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>①<a href="https://www.bilibili.com/video/BV1et4y1i7Gm" target="_blank" rel="noopener">PID控制算法解释视频</a></p><p>①<a href="https://blog.csdn.net/zhaoyuaiweide/article/details/54573676" target="_blank" rel="noopener">位置PID分析及调参</a><br>②<a href="https://wenku.baidu.com/view/c9ff0ffd770bf78a652954e4.html?rec_flag=default" target="_blank" rel="noopener">自平衡论文1</a></p><p>③<a href="https://iot.mi.com/vela" target="_blank" rel="noopener">小米物联网开发者平台</a><br>④<a href="https://blog.csdn.net/chungle2011/article/details/76832813" target="_blank" rel="noopener">步进电机和减速电机的区别</a></p><p>⑤<a href="https://zhuanlan.zhihu.com/p/20082486" target="_blank" rel="noopener">Arduino教程：MPU6050的数据获取、分析与处理</a>⭐</p><p>⑥<a href="https://iot.mi.com/new/doc/guidelines-for-access/direct-access/overview#BLE" target="_blank" rel="noopener">使用BLE（低功耗蓝牙技术）进行小米物联网开发</a></p><p>⑦<a href="https://blog.csdn.net/malcolm_110/article/details/95320094" target="_blank" rel="noopener">Arduino nano 引脚分布及解析</a></p><p><a href="https://blog.csdn.net/qq_39400113/article/details/107578869" target="_blank" rel="noopener">TB6612FNG与直流电机控制</a></p><p><a href="https://blog.csdn.net/pengdali/article/details/78943411" target="_blank" rel="noopener">TB6612FNG驱动</a></p><p>altium designer PCB板的设计<br>上位机的制作</p><hr><p>关于模型，还是想3D打印一个</p><p>中望3D2021…</p><hr><p>关于<strong>电机驱动</strong>，查阅到arduino uno的IO引脚支持电流20ma，3.3V引脚支持电流50ma，仅能驱动LED等小功率负载设备。大功率驱动不了，还可能烧板子。<br>还可以理解为逻辑供电的接口不能用于物理供电。</p><p>驱动电机需要较大电流，单片机的作用在于高低点平控制电机而不是直接驱动。</p><p>关于<strong>带编码器电机</strong>的使用：</p><ul><li>M1，M2接口<ul><li>电机接电</li></ul></li><li>VCC，GND接口<ul><li>编码器接电</li></ul></li><li>C1，C2接口<ul><li>编码器AB相</li></ul></li></ul><p>其它: 空心杯电机，<a href="https://detail.tmall.com/item.htm?id=548244181238" target="_blank" rel="noopener">买着玩玩</a>，35000~50000转速，转起来有点吓人…</p><hr><p><strong>PID</strong>：一种应用广泛的控制算法。</p><ul><li><strong>比例项P</strong>（根据误差调整，参数kp）</li><li><strong>积分项I</strong>（根据误差的累积调整，参数ki，）</li><li><strong>微分项D</strong>（根据误差的变化率调整，参数kd，相当于缓冲）</li></ul><p>伪代码：</p><pre class="line-numbers language-python"><code class="language-python">pre_error<span class="token operator">=</span><span class="token number">0</span>total_error<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    error<span class="token operator">=</span>setpoint<span class="token operator">-</span>measured_value    total_error<span class="token operator">+=</span>error<span class="token operator">*</span>dt    derivative<span class="token operator">=</span><span class="token punctuation">(</span>error<span class="token operator">-</span>pre_error<span class="token punctuation">)</span><span class="token operator">/</span>dt    output<span class="token operator">=</span>kp<span class="token operator">*</span>error<span class="token operator">+</span>ki<span class="token operator">*</span>total_error<span class="token operator">+</span>kd<span class="token operator">*</span>derivative    pre_error<span class="token operator">=</span>error    wait<span class="token punctuation">(</span>dt<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#dt为测量的实践间隔</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一些应用：DIY飞机的控制，超声波感知地面高度。</p><p><strong>倒立摆</strong>：想想你如何用手去支撑一个直立的东西，一个模型</p><p><strong>闭环控制</strong>是根据控制对象输出反馈来进行校正的控制方式，它是在测量出实际与计划发生偏差时，按定额或标准来进行纠正的。</p><hr><p><strong>蓝牙</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//这是BLE-NANO自带的测试程序</span><span class="token comment" spellcheck="true">//由于arduino语言没有高亮，这里用c表示</span><span class="token comment" spellcheck="true">//可以看出也是串口进行通信</span>byte comdata<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BLE Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>         comdata <span class="token operator">=</span> Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Serial<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>comdata<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RSSI表示接受信号的强度，&lt;-20</p><p>不管是集成的，还是独立的HC06蓝牙模块，都用的AT指令集，蓝牙SSP串口通信，所以直接用集成板了</p><p>蓝牙还分为主机<code>M</code>，从机<code>S</code>。进行一次主从变换后，电脑发送指令无效，变成从机被手机扫描到。</p><p>这个部分指令表基于BLE-NANO，(要大写,不能空格)，经过<code>2021-1-20</code>实践:</p><table><thead><tr><th>指令</th><th>效果</th></tr></thead><tbody><tr><td><code>AT</code></td><td>+OK，这是一个测试指令</td></tr><tr><td><code>AT+ALL</code></td><td>查看所有配置信息</td></tr><tr><td><code>AT+SCAN</code></td><td>蓝牙主从模式下扫描附近从机</td></tr><tr><td><code>AT+MAC</code></td><td>查看蓝牙mac12位地址</td></tr><tr><td><code>AT+NAME=&lt;Param&gt;</code></td><td>配置蓝牙名字</td></tr><tr><td><code>AT+ROLE</code></td><td>查看蓝牙主从模式，0表示主机，1表示从机</td></tr><tr><td><code>AT+ROLE=0</code></td><td>将其变成主机。</td></tr><tr><td><code>AT+AUTOCON=&lt;Param&gt;</code></td><td>0：关闭自动连接上次的设备，1：开启</td></tr><tr><td><code>AT+DISCON</code></td><td>断开连接</td></tr><tr><td><code>AT+AUTH=&lt;Param&gt;</code></td><td>0：蓝牙的连接无密码，1：需要</td></tr><tr><td><code>AT+PASS=&lt;Param&gt;</code></td><td>设置密码</td></tr><tr><td><code>AT+MODE=&lt;Param&gt;</code></td><td>设置蓝牙的工作模式，<strong>0:透传</strong>（串口透传），1:驱动模式，2:iBeacon</td></tr><tr><td><code>AT+BLEUSB=&lt;Param&gt;</code></td><td>设置蓝牙的 USB 和蓝牙数据传输模式，<strong>3</strong>:USB串口通信和BLE透传，0:关闭</td></tr><tr><td><code>AT+TXPOWER=&lt;Param&gt;</code></td><td>设置蓝牙的发射功率</td></tr><tr><td><code>AT+MINI_INTERVAL=&lt;Param&gt;</code></td><td>设置芯片最小通信间隔，单位ms</td></tr><tr><td><code>AT+MAX_INTERVAL=&lt;Param&gt;</code></td><td>设置芯片最大通信间隔</td></tr><tr><td><code>AT+SETTING=DEFAULT</code></td><td>恢复出厂设置</td></tr></tbody></table><p>开发说明：产品的蓝牙是透传功能，所以蓝牙编程，其实是对arduino串口进行读写操作。BLE协议规定每个蓝牙数据包的长度不能超过20byte，每一包数据发送间隔需要超过 150ms，否则容易丢包。</p><hr><p>蓝牙模块大致结束了，接下来就是修改安卓APP实现控制了</p><hr><p>java编译成一种特殊的class文件，然后java虚拟机充当解释器执行。Jet Brains第三方公司开发了可被java虚拟机解释的编程语言Kotlin，兼容java，更加简洁高级，于是成为了Android开发的推荐语言。</p><p>蓝牙API都在arduino.bluetooth包下，<a href="https://developer.android.google.cn/guide/topics/connectivity/bluetooth" target="_blank" rel="noopener">查看蓝牙开发文档</a></p><ul><li><code>BluetoothAdapter</code><ul><li>本地蓝牙适配器，是所有<strong>蓝牙交互的入口</strong>，表示蓝牙设备自身的一个蓝牙设备适配器，整个系统只有一个蓝牙适配器。通过它可以发现其它蓝牙设备，查询配对设备列表，使用已知的 Mac 地址实例化 <code>BluetoothDevice</code> 以及创建 <code>BluetoothServerSocket</code> 用来侦听来自其他设备的通信。</li></ul></li><li><code>BluetoothDevice</code><ul><li>表示远程的蓝牙设备。利用它可以通过 <code>BluetoothSocket </code>请求与某个远程设备建立连接，或查询有关该设备的信息，例如设备的名称、地址、类和绑定状态等。</li></ul></li><li><code>BluetoothSocket</code><ul><li>代表一个蓝牙socket的接口（和TCP Socket类似）。这是一个连接点，它允许一个应用与其他蓝牙设备通过InputStream和OutputStream交换数据。</li></ul></li><li><code>BluetoothServerSocket</code><ul><li>代表一个开放的服务器socket，它监听接受的请求（与TCP ServerSocket类似）。为了连接两台Android设备，一个设备必须使用这个类开启一个服务器socket。当一个远程蓝牙设备开始一个和该设备的连接请求，BluetoothServerSocket将会返回一个已连接的BluetoothSocket，接受该连接。</li></ul></li><li><code>BluetoothHealth</code><ul><li>表示一个Health Device Profile代理，它控制蓝牙服务。</li></ul></li></ul><h2 id="安卓传感器"><a href="#安卓传感器" class="headerlink" title="安卓传感器"></a>安卓传感器</h2><p>参考地址：<a href="https://developer.android.google.cn/guide/topics/sensors" target="_blank" rel="noopener">安卓开发者官方文档</a></p><p>Android 平台支持三大类传感器：</p><ul><li>动态传感器（加速度计、重力传感器、陀螺仪和旋转矢量传感器）</li><li>环境传感器（气压计、光度计和温度计）</li><li>位置传感器（屏幕方向传感器和磁力计）</li></ul><p>所有运动传感器都为每个 SensorEvent 返回传感器值的多维数组。</p><hr><p>MIUI12 多次点击内核版本可进入cit测试。</p><ul><li>加速度感应器测试<ul><li>x, y, z 三个方向，及 curAngle</li><li><code>curAngle</code> 对PID控制有用</li></ul></li><li>速度感应，可以使用电机的霍尔编码器测速</li></ul><p>闭环控制，</p><hr><p><strong>关于小米物联网</strong><br>目的：①更好调用手机的功能②了解IOT，软硬件开发<br><code>Xiaomi Vela</code> 是小米基于NuttX（RTOS实时操作系统）打造的物联网嵌入式软件平台，Vela在各种物联网硬件平台上提供统一的软件服务。</p><ul><li>Xiaomi Vela对系统资源的要求远小于Linux，但是可以提供和Linux系统相近的功能和性能，可以被看作很多低端Linux系统的替代方案，切换到Xiaomi Vela以后，可以降低硬件成本，提升产品整体的性价比。</li></ul><p>…企业开发组认证中</p><p>企业好像可以白嫖小米智能模组，<a href="https://iot.mi.com/new/doc/introduction/module?keywords=%E5%B0%8F%E7%B1%B3%E6%99%BA%E8%83%BD%E6%A8%A1%E7%BB%84#%E9%87%87%E8%B4%AD%E5%89%8D%E9%A1%BB%E7%9F%A5" target="_blank" rel="noopener">采购前须知</a></p><h2 id="2021-2-19"><a href="#2021-2-19" class="headerlink" title="2021.2.19"></a>2021.2.19</h2><p>目前思路：利用手机算出倾角及误差，结合PID，通过BLE向arduino传输电机运动的pwm信息，初步平衡</p><p>遇到的问题：</p><ul><li>获取手机的倾角的API</li><li>实际的PID算法怎么写</li><li>蓝牙通信</li><li>以安卓应用的方式接入小爱同学，语音控制输出的pwm即可</li></ul>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原则</title>
      <link href="posts/yuanze.html"/>
      <url>posts/yuanze.html</url>
      
        <content type="html"><![CDATA[<p>一些摘录夹杂着自己的想法：</p><ul><li>遇到事情，产生、应用、调整自己的原则，并不断重复</li><li>哦，他也冥想的</li><li>哈佛商学院的，（没有教师在黑板前告诉我们什么要记住，也没有考试测试我们有没有记住。相反，教师给我们的是真实的案例和研究，让我们进行阅读和分析。然后我们组成小组自由讨论。）</li><li>大宗商品，是指可进入流通领域，但非零售环节，具有商品属性并用于工农业生产与消费使用的大批量买卖的物质商品。在金融投资市场，包括3个类别：能源商品、基础原材料和农副产品。</li><li>讨厌就是讨厌，他在回想起（年度大会上给老板一拳）这件事的时候，也只是说：我太野性了。</li></ul><ul><li>从过去到现在，有意义的工作和有意义的人际关系都是我的主要目标</li><li>感慨，“我曾踏足山巅，也曾跌入谷底。而如今，二者都让我受益良多。”</li><li>愿意去理解那些看问题与你不一样的人是怎么形成他们看待问题的方式的</li><li>道理都懂，说起来和做起来又是两样了，所以啊，做事多动脑子。</li><li>当面对两种看起来矛盾的选择时，可以想想二者兼得的方法</li><li>我们这些“金融人士”看待问题的方式与经济学家大相径庭</li><li>李光耀，1923~2015，新加坡国父</li><li>桥水的文化：以创意择优的理论探寻极度真相、极度透明。</li><li>尽人事，听天命。</li></ul><ul><li>考察影响你的那些事物的规律，从而理解其背后的因果关系，并学习有效应对这些事物的原则。</li><li>拥抱现实，应对现实</li><li>为了拥有最好的生活，1知道最好的决策是什么，2有勇气做出最好的决策。</li><li>习惯的力量，核心观点：信号-&gt;自动运行-&gt;奖励</li><li>每个人的人格都是不同的，做事的方式也不同。我感觉我比较敏感，这其实没什么不好。</li><li>很多研究显示，人的幸福感和他赚到的金钱之间的相关性很低甚至为零，但是，幸福感与一个人所建立的人际关系质量却高度相关</li></ul><ul><li>这本书分3个部分：我的历程，生活原则，工作原则。以下为工作原则：</li><li>一个机构就像一个机器，主要由两组部件构成：文化和人。</li><li>优秀的文化不掩盖问题和分歧，而是公开妥善解决。</li><li>基于可信度加权的创意择优时实现有效决策的最佳模式</li><li>意识到错误是事物演变过程中的自然连带部分，珍视它。</li><li>让每个人可肆意评论其他人的观点，此举低效且浪费时间。</li><li>比做什么事更重要的是找对做事的人。</li><li>不要对所有人等同视之，要合理对待、有所区别</li><li>不要担心你的员工是不是喜欢你，不要让他们告诉你如何做事</li><li>不要发号施令让别人服从你，要努力为人所理解和理解他人，达成共识</li><li>确保你和你的员工承担相应的责任，并欢迎别人监督你的责任</li><li>当你了解一个人时，就会知道可从他那里得到什么</li></ul><ul><li>《原则》也只是一些特定情形下的原则总结，重要的还是多动脑子和独立思考。</li><li>关于幸福感的来源，这样会在看待人的阶级分类时好些，那些底层人的快乐又何尝不是他们的幸福。</li><li>读完了hh，学了太多东西记不住没关系，该记住的总会记住。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 书摘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑客与画家</title>
      <link href="posts/hackers_and_painters.html"/>
      <url>posts/hackers_and_painters.html</url>
      
        <content type="html"><![CDATA[<p><strong>1.为什么书呆子不受欢迎</strong></p><ul><li>真实世界的特点是，它极其庞大。如果总体足够大，即使是人数最少的少数派，只要聚集在一起，也能产生可观的力量。在真实世界中，书呆子在某些地方聚集起来，形成自己的社区，智力因素成为那里最被看重的东西。有时，这种因素甚至会以相反的形式表现出来，特别是在大学的数理学系，书呆子甚至会夸大笨拙，以显示自己的聪明。约翰·纳什非常钦佩诺伯特·维纳，就学维纳的样子，经过走廊的时候都用手扶着墙走路。</li></ul><p><strong>2.黑客与画家</strong></p><ul><li>黑客与画家的共同之处，在于他们都是创作者。与作曲家、建筑师、作家一样，黑客和画家都是试图创作出优秀的作品。他们本质上都不是在做研究，虽然在创作过程中，他们可能会发现一些新技术（那样当然更好）。</li><li>我现在认为，大学里教给我的编程方法都是错的。你把整个程序想清楚的时间点，应该是在编写代码的同时，而不是在编写代码之前，这与作家、画家和建筑师的做法完全一样。</li></ul><p><strong>3.不能说的话</strong></p><ul><li>如果你想要清晰地思考，就必须远离人群。但是走得越远，你的处境就会越困难，受到的阻力也会越大，因为你没有迎合社会习俗，而是一步步地与它背道而驰。小时候，每个人都会鼓励你不断成长，变成一个心智成熟、不再耍小孩子脾气的人。但是，很少有人鼓励你继续成长，变成一个怀疑和抵制社会错误潮流的人。</li><li>如果自己就是潮水的一部分，又怎能看见潮流的方向呢？</li></ul><p><strong>5.另一条路</strong></p><ul><li>你能够通过浏览器发布软件，没有人能在你和浏览网站的用户之间插上一脚。你也许不会相信，但是我向你保证，微软公司害怕你。它的那些目中无人的中层管理人员也许不是这样想的，但是比尔·盖茨肯定是，因为1975年，上一次发布软件的新方式出现时，他也曾经跟你一样白手起家。</li><li>我认为，大量的下一代软件都将采用这个模式。甚至最大的输家——微软公司，看来也明白了，部分软件从桌面消失将是不可避免的。如果软件从桌面移到服务器上，对于开发者来说，一切将发生根本性的变化。本文将站在先行者的角度，描述我们正在经历的种种令人惊叹的变化。由于软件转移到服务器的趋势才刚刚开始，所以我下面所写的是对未来的憧憬。</li></ul><p><strong>6.如何创造财富</strong></p><ul><li>如果你想致富？应该怎么做？我认为最好的方法就是创业，或者加入创业公司。几百年来，这一直是致富的可靠途径。</li><li>创业公司往往与技术有关，所以“高技术创业公司”这个短语几乎就是同义重复。创业公司其实就是解决了某个技术难题的小公司。</li><li>从经济学观点看，你可以把创业想象成一个压缩过程，你的所有工作年份被压缩成了短短几年。你不再是低强度地工作四十年，而是以极限强度工作四年。在高技术领域，这种压缩的回报尤其丰厚，工作效率越高，额外报酬就越高。</li><li>最可能明白财富能被创造出来的人就是那些善于制作东西的人，也就是手工艺人。他们做出来的东西直接放在商店里卖。但是，随着工业化时代的来临，手工艺人越来越少。目前还存在的最大的手工艺人群体就是程序员。</li><li>上学和上班的相似之处要大于它们的不同。张三，20岁，某某大学的学生，现在变成了，张三，22岁，某某公司的程序员。</li><li>大公司会使得每个员工的贡献平均化，这是一个问题。我觉得，大公司最大的困扰就是无法准确测量每个员工的贡献。销售员是一个例外。</li><li>你想更努力地工作，但是你的工作与其他许多人的工作混杂在一起，这样就产生了问题。在大公司中，个人的表现无法单独测量，公司里其他人会拖累你。</li><li>要致富，你需要两样东西：可测量性和可放大性。</li><li>如果你有一个令你感到安全的工作，你是不会致富的，因为没有危险，就几乎等于没有可放大性。</li><li>这就是创业公司的真正意义。理想情况下，你与其他愿意更努力工作的人一起组成一个团队，共同谋取更高的回报（相比他们为大公司工作的情况）。因为创业公司的团队往往是自发形成的，许多有抱负的创始人彼此之间早就相识（至少听说过对方），所以他们对彼此贡献的评估要比一般的小团体更准确。创业公司不仅仅是十个人的团队，而且是十个同类人的团队。</li><li>团队越大，每个人的贡献就越接近于整体的平均值。所以，在不考虑其他因素的情况下，一个非常能干的人待在大公司里可能对他本人是一件很糟的事情，因为他的表现被其他不能干的人拖累了。</li><li>设置“进入壁垒”的方法之一就是申请专利。但是专利的保护程度可能不高。竞争对手通常能找到绕过专利的方法。如果找不到，它们可能就不找了，直接侵犯你的专利，等着你去起诉它们。大公司不害怕打官司，这对它们是家常便饭。</li><li>我认为，如果你的公司有机会被收购，那将是不错的选择。管理一家公司与创立一家公司是不同的两件事。当情况基本稳定下来以后，不妨让大公司来接手。这在财务上也是明智的选择，卖掉公司你的风险就分散了，</li></ul><p><strong>7.关注贫富差距</strong></p><ul><li>事实上，财富与金钱是两个概念。金钱只是用来交易财富的一种手段，财富才是有价值的东西，我们购买的商品和服务都属于财富。你到海外旅行时，不用看当地人的银行账户就会知道你来到的是富国还是穷国。你只要看看他们的财富就行了：建筑、街道、服装、健康状况等</li><li>我想提出一种相反的观点：现代社会的收入差距扩大是一种健康的信号。技术使得生产率的差异加速扩大，如果这种扩大没有反映在收入上面，只有三种可能的解释：（a）技术革新停顿了；（b）那些创造大部分财富的人停止工作了；（c）创造财富的人没有获得报酬。</li></ul><p><strong>9.设计者的品味</strong></p><ul><li>数学家会把出色的工作称赞为“优美的”。无论古今，科学家、工程师、音乐家、建筑师、设计师、作家、画家都是这样做的，他们都使用同一个词。</li><li>推动人才成批涌现的最大因素就是，让有天赋的人聚在一起，共同解决某个难题。互相激励比天赋更重要，达·芬奇之所以成为达·芬奇，主要原因不仅仅是他的天赋，更重要的是他生活在当时的佛罗伦萨，而不是米兰。今天，人类生活的流动性高得多，但是伟大的项目依然不成比例地集中在少数几个热点上：德国包豪斯建筑学院、曼哈顿计划、《纽约人》杂志、洛克希德公司的臭鼬工作室、施乐公司的帕洛阿尔托研究中心。</li></ul><p><strong>11.一百年后的编程语言</strong></p><ul><li>一百年后的物理学基本上不可能预测。但是计算机语言不一样，现在就动手设计一种一百年后可以吸引使用者的新语言，这在理论上似乎是可能的。</li><li>当你设计语言的时候，心里牢牢记住这个目标是有好处的。学习开车的时候，一个需要记住的原则就是要把车开直，不是通过将车身对齐画在地上的分隔线，而是通过瞄准远处的某个点。即使你的目标只在几米开外，这样做也是正确的。我认为，设计编程语言时，我们也应该这样做。</li></ul><p><strong>13.revenge of the nerd</strong></p><ul><li>简单说，因为这种语言本质上不是一种技术，而是数学。数学是不会过时的。你不应该把Lisp语言与50年代的硬件联系在一起，而是应该把它与快速排序（Quicksort）算法进行类比。这种算法是1960年提出的，至今仍然是最快的通用排序方法。</li><li>所以，我们就有了两点结论，我认为它们非常有价值。事实上，这是我用自己的经历换来的。第一，不同语言的编程能力不一样。第二，大多数经理故意忽视第一点。你把这两点事实结合起来，其实就得到了赚钱的诀窍。ITA 软件公司是运用这个诀窍的典型例子。如果你想在软件业获得成功，就使用你知道的最强大的语言，用它解决你知道的最难的问题，并且等待竞争对手的经理做出自甘平庸的选择。</li></ul><blockquote><p>这本书关于财富、创业、Lisp的见解真的很棒</p></blockquote><blockquote><p>是本好书，微信读书有</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 书摘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题(1月)</title>
      <link href="posts/hc6t.html"/>
      <url>posts/hc6t.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-10"><a href="#1-10" class="headerlink" title="1-10"></a><code>1-10</code></h2><h3 id="605-种花问题"><a href="#605-种花问题" class="headerlink" title="605.种花问题"></a><a href="https://leetcode-cn.com/problems/can-place-flowers/" target="_blank" rel="noopener">605.种花问题</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canPlaceFlowers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> f<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        f<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>        ans<span class="token punctuation">,</span>tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token punctuation">:</span>                ans<span class="token operator">+=</span><span class="token punctuation">(</span>tmp<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>  <span class="token comment" spellcheck="true">#整数除</span>                tmp<span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> tmp<span class="token operator">+=</span><span class="token number">1</span>            <span class="token comment" spellcheck="true">#print(ans)</span>        <span class="token keyword">return</span> ans<span class="token operator">>=</span>n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="239-滑动窗口最大值⭐"><a href="#239-滑动窗口最大值⭐" class="headerlink" title="239.滑动窗口最大值⭐"></a><a href="https://leetcode-cn.com/problems/sliding-window-maximum/" target="_blank" rel="noopener">239.滑动窗口最大值⭐</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        q<span class="token operator">=</span>collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> q <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>nums<span class="token punctuation">[</span>q<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> q <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>nums<span class="token punctuation">[</span>q<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token operator">-</span>k<span class="token punctuation">:</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># q 用于存放大值的索引</span><span class="token comment" spellcheck="true"># nums[q[0]]总是当前窗口最大值，并且后面对应的num递减</span><span class="token comment" spellcheck="true">#单调双端队列</span><span class="token comment" spellcheck="true">#deque: 类似list的容器，实现了在两端快速append和pop</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="86-分隔链表"><a href="#86-分隔链表" class="headerlink" title="86.分隔链表"></a><a href="https://leetcode-cn.com/problems/partition-list/" target="_blank" rel="noopener">86.分隔链表</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        small<span class="token punctuation">,</span>large<span class="token operator">=</span>ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span>        sp<span class="token punctuation">,</span>lp<span class="token punctuation">,</span>p<span class="token operator">=</span>small<span class="token punctuation">,</span>large<span class="token punctuation">,</span>head        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            <span class="token keyword">if</span> p<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>x<span class="token punctuation">:</span>                sp<span class="token punctuation">.</span>next<span class="token operator">=</span>p                sp<span class="token operator">=</span>sp<span class="token punctuation">.</span>next            <span class="token keyword">else</span><span class="token punctuation">:</span>                lp<span class="token punctuation">.</span>next<span class="token operator">=</span>p                lp<span class="token operator">=</span>lp<span class="token punctuation">.</span>next            p<span class="token operator">=</span>p<span class="token punctuation">.</span>next        sp<span class="token punctuation">.</span>next<span class="token operator">=</span>large<span class="token punctuation">.</span>next        lp<span class="token punctuation">.</span>next<span class="token operator">=</span>None        <span class="token keyword">return</span> small<span class="token punctuation">.</span>next<span class="token comment" spellcheck="true"># 熟悉一下python中的链表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="509-斐波那契数"><a href="#509-斐波那契数" class="headerlink" title="509.斐波那契数"></a><a href="https://leetcode-cn.com/problems/fibonacci-number/" target="_blank" rel="noopener">509.斐波那契数</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#functools模块中的缓存</span>    @lru_cache<span class="token punctuation">(</span>None<span class="token punctuation">)</span>      <span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> n        <span class="token keyword">return</span> self<span class="token punctuation">.</span>fib<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>fib<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="830-较大分组的位置"><a href="#830-较大分组的位置" class="headerlink" title="830.较大分组的位置"></a><a href="https://leetcode-cn.com/problems/positions-of-large-groups/" target="_blank" rel="noopener">830.较大分组的位置</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">largeGroupPositions</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        left<span class="token punctuation">,</span>right<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> right<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> right<span class="token operator">&lt;</span>n <span class="token operator">and</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#right&lt;n的位置</span>            <span class="token comment" spellcheck="true">#解决了后面是末尾的问题</span>                right<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> right<span class="token operator">-</span>left<span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">:</span> ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>left<span class="token punctuation">,</span>right<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(left,right)</span>            left<span class="token operator">=</span>right        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 双指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="309-除法求值⭐"><a href="#309-除法求值⭐" class="headerlink" title="309.除法求值⭐"></a><a href="https://leetcode-cn.com/problems/evaluate-division/solution/" target="_blank" rel="noopener">309.除法求值</a>⭐</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 一、dfs做法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">calcEquation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> equations<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> values<span class="token punctuation">:</span> List<span class="token punctuation">[</span>float<span class="token punctuation">]</span><span class="token punctuation">,</span> queries<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>float<span class="token punctuation">]</span><span class="token punctuation">:</span>        dic<span class="token operator">=</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>dict<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#值也为字典</span>        <span class="token keyword">for</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span>val <span class="token keyword">in</span> zip<span class="token punctuation">(</span>equations<span class="token punctuation">,</span>values<span class="token punctuation">)</span><span class="token punctuation">:</span>            dic<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span>val            dic<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span>val        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>visited<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> b <span class="token keyword">in</span> dic<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">return</span> dic<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span>            <span class="token keyword">for</span> c <span class="token keyword">in</span> dic<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">:</span>                 <span class="token comment" spellcheck="true">#开始遍历寻找</span>                <span class="token keyword">if</span> c <span class="token operator">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span>                    visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>c<span class="token punctuation">)</span>                    val<span class="token operator">=</span>bt<span class="token punctuation">(</span>c<span class="token punctuation">,</span>b<span class="token punctuation">,</span>visited<span class="token punctuation">)</span>                    <span class="token keyword">if</span> val<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> dic<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">*</span>val            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token keyword">in</span> queries<span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dfs<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 二、带权并查集作法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">calcEquation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> equations<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> values<span class="token punctuation">:</span> List<span class="token punctuation">[</span>float<span class="token punctuation">]</span><span class="token punctuation">,</span> queries<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>float<span class="token punctuation">]</span><span class="token punctuation">:</span>        f <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">#记录每个结点的root</span>        d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">#记录每个结点到root的权</span>        <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#找到x的根节点并整理</span>            f<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token punctuation">)</span>            d<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> x <span class="token operator">!=</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>                t <span class="token operator">=</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span>                f<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> find<span class="token punctuation">(</span>t<span class="token punctuation">)</span>                d<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">*=</span> d<span class="token punctuation">[</span>t<span class="token punctuation">]</span>                <span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            <span class="token keyword">return</span> x         <span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>            a<span class="token punctuation">,</span> b <span class="token operator">=</span> find<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">,</span> find<span class="token punctuation">(</span>B<span class="token punctuation">)</span>            <span class="token keyword">if</span> a <span class="token operator">!=</span> b<span class="token punctuation">:</span>                f<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> b   <span class="token comment" spellcheck="true"># a 的根结点是b</span>                d<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>B<span class="token punctuation">]</span> <span class="token operator">/</span> d<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">*</span> value  <span class="token comment" spellcheck="true"># a在b树上的权</span>        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token operator">not</span> <span class="token keyword">in</span> f <span class="token operator">or</span> y <span class="token operator">not</span> <span class="token keyword">in</span> f<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1.0</span>            a<span class="token punctuation">,</span> b <span class="token operator">=</span> find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> find<span class="token punctuation">(</span>y<span class="token punctuation">)</span>            <span class="token keyword">if</span> a <span class="token operator">!=</span> b<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1.0</span> <span class="token comment" spellcheck="true">#ab不在一棵树</span>            <span class="token keyword">return</span> d<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">/</span> d<span class="token punctuation">[</span>y<span class="token punctuation">]</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>nums <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>equations<span class="token punctuation">)</span><span class="token punctuation">:</span>            union<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> queries<span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>check<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#第一反应赋值，不行</span><span class="token comment" spellcheck="true">#并查集是一种树型的数据结构，用于处理一些不相交集合（disjoint sets）的合并及查询问题。常常在使用中以森林来表示。</span><span class="token comment" spellcheck="true"># dic.setdefault(key,default=None) 可类似于 dic.get()</span><span class="token comment" spellcheck="true"># 如果键不存在于字典中，将会添加键并将值设为默认值。</span><span class="token comment" spellcheck="true"># 并查集不懂</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="547-省份数量"><a href="#547-省份数量" class="headerlink" title="547.省份数量"></a>547.省份数量</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findCircleNum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> isConnected<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        dic<span class="token operator">=</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>set<span class="token punctuation">)</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>isConnected<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                 <span class="token comment" spellcheck="true">#建立图</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">!=</span>j <span class="token operator">and</span> isConnected<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                    dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>j<span class="token punctuation">)</span>                    dic<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        visited<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span>                visited<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    dfs<span class="token punctuation">(</span>j<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#查找省份</span>            <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span>                dfs<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                ans<span class="token operator">+=</span><span class="token number">1</span>        <span class="token comment" spellcheck="true">#print(visited)</span>        <span class="token comment" spellcheck="true">#print([i for i in dic.items()])</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># hh~</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="189-旋转数组"><a href="#189-旋转数组" class="headerlink" title="189.旋转数组"></a><a href="https://leetcode-cn.com/problems/rotate-array/submissions/" target="_blank" rel="noopener">189.旋转数组</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rotate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify nums in-place instead.        """</span>        k<span class="token operator">%=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        k<span class="token operator">*=</span><span class="token operator">-</span><span class="token number">1</span>        nums<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nums[:]会指向新的内存空间，不能直接nums</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="123-买卖股票的最佳时机-III"><a href="#123-买卖股票的最佳时机-III" class="headerlink" title="123.买卖股票的最佳时机 III"></a>123.买卖股票的最佳时机 III</h3><p>一份股票，两次交易，求最大利润</p><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> prices<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>prices<span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#DP表为最大利润</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            pre_max<span class="token operator">=</span><span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                pre_max<span class="token operator">=</span>max<span class="token punctuation">(</span>pre_max<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>pre_max<span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#这个DP的模板可以解决很多问题了</span><span class="token comment" spellcheck="true">#pre_max=max(pre_max,dp[k-1][i-1]-prices[i])状态转移有些抽象啊</span><span class="token comment" spellcheck="true">#[3,3,5,0,0,3,1,4]的DP表：</span><span class="token comment" spellcheck="true">#[[0, 0, 0, 0, 0, 0, 0, 0],</span><span class="token comment" spellcheck="true"># [0, 0, 2, 2, 2, 3, 3, 4],</span><span class="token comment" spellcheck="true"># [0, 0, 2, 2, 2, 5, 5, 6]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n1<span class="token punctuation">,</span> y1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>float<span class="token punctuation">(</span><span class="token string">"INF"</span><span class="token punctuation">)</span>        n2<span class="token punctuation">,</span> y2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>float<span class="token punctuation">(</span><span class="token string">"INF"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> prices<span class="token punctuation">:</span>            <span class="token keyword">if</span> y2 <span class="token operator">+</span> p <span class="token operator">></span> n2<span class="token punctuation">:</span>                n2 <span class="token operator">=</span> y2 <span class="token operator">+</span> p             <span class="token keyword">if</span> n1 <span class="token operator">-</span> p <span class="token operator">></span> y2<span class="token punctuation">:</span>                y2 <span class="token operator">=</span> n1 <span class="token operator">-</span> p             <span class="token keyword">if</span> y1 <span class="token operator">+</span> p <span class="token operator">></span> n1<span class="token punctuation">:</span>                n1 <span class="token operator">=</span> y1 <span class="token operator">+</span> p             <span class="token keyword">if</span> <span class="token operator">-</span>p <span class="token operator">></span> y1<span class="token punctuation">:</span>                y1 <span class="token operator">=</span> <span class="token operator">-</span>p            <span class="token comment" spellcheck="true"># y1, n1, y2, n2 = max(y1, -p), max(n1, y1 + p), max(y2, n1 - p), max(n2, y2 + p)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="228-汇总区间"><a href="#228-汇总区间" class="headerlink" title="228.汇总区间"></a><a href="https://leetcode-cn.com/problems/summary-ranges/" target="_blank" rel="noopener">228.汇总区间</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">summaryRanges</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        left<span class="token punctuation">,</span>right<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> right<span class="token operator">&lt;</span>n<span class="token punctuation">:</span>            <span class="token keyword">while</span> right<span class="token operator">&lt;</span>n<span class="token number">-1</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                  right<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> right<span class="token operator">==</span>left<span class="token punctuation">:</span>                 ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                 ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'->'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            right<span class="token operator">+=</span><span class="token number">1</span>            left<span class="token operator">=</span>right           <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># （两个while）+（right指针放区间内的右侧），解决了：后面读不出来，或者list访问越界</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-20"><a href="#11-20" class="headerlink" title="11-20"></a><code>11-20</code></h2><h3 id="1202-交换字符串中的元素⭐"><a href="#1202-交换字符串中的元素⭐" class="headerlink" title="1202.交换字符串中的元素⭐"></a>1202.交换字符串中的元素⭐</h3><p>给你一个字符串 <code>s</code>，以及该字符串中的一些「索引对」数组 <code>pairs</code>，其中 <code>pairs[i] = [a, b]</code> 表示字符串中的两个索引（编号从 0 开始）。</p><p>你可以 <strong>任意多次交换</strong> 在 <code>pairs</code> 中任意一对索引处的字符。</p><p>返回在经过若干次交换后，<code>s</code> 可以变成的按字典序最小的字符串。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">smallestStringWithSwaps</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">,</span> pairs<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        length<span class="token operator">=</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        p<span class="token operator">=</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#初始化，只记录根节点</span>        <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> x<span class="token operator">!=</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>                p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">[</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span>                x<span class="token operator">=</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            <span class="token keyword">return</span> x        <span class="token keyword">for</span> a_id<span class="token punctuation">,</span>b_id <span class="token keyword">in</span> pairs<span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#开始合并</span>            roota <span class="token operator">=</span> find<span class="token punctuation">(</span>a_id<span class="token punctuation">)</span>            rootb <span class="token operator">=</span> find<span class="token punctuation">(</span>b_id<span class="token punctuation">)</span>            <span class="token keyword">if</span> roota <span class="token operator">==</span> rootb<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            p<span class="token punctuation">[</span>rootb<span class="token punctuation">]</span> <span class="token operator">=</span> roota        <span class="token comment" spellcheck="true"># tmp是相同根的容器</span>        tmp<span class="token operator">=</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>            root<span class="token operator">=</span>find<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            tmp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        ans<span class="token operator">=</span>list<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">for</span> same_idxs <span class="token keyword">in</span> tmp<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            same_idxs<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>            select_str<span class="token operator">=</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> same_idxs<span class="token punctuation">]</span>            select_str<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i<span class="token punctuation">,</span>idx <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>same_idxs<span class="token punctuation">)</span><span class="token punctuation">:</span>                ans<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>select_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#关于本题：</span><span class="token comment" spellcheck="true">#1.当成一个图问题</span><span class="token comment" spellcheck="true">#2.索引对的交换具有传递性</span><span class="token comment" spellcheck="true">#3.对于连通的索引直接排序，不连通的不能变动</span><span class="token comment" spellcheck="true">#关于并查集：</span><span class="token comment" spellcheck="true">#并查集解决一些元素分组问题，利用合并查询处理不相交的集合</span><span class="token comment" spellcheck="true">#路径压缩：把节点的父节点设为根节点</span><span class="token comment" spellcheck="true">#参考：https://zhuanlan.zhihu.com/p/93647900/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#暴力超时：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">smallestStringWithSwaps</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">,</span> pairs<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        q<span class="token operator">=</span>deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> q<span class="token punctuation">:</span>            tmp<span class="token operator">=</span>q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>            <span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span> pairs<span class="token punctuation">:</span>                t<span class="token operator">=</span>tmp<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>                t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">if</span> t <span class="token operator">not</span> <span class="token keyword">in</span> ans<span class="token punctuation">:</span>                     q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>        <span class="token keyword">return</span> min<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> ans<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="684-冗余连接"><a href="#684-冗余连接" class="headerlink" title="684.冗余连接"></a><a href="https://leetcode-cn.com/problems/redundant-connection/submissions/" target="_blank" rel="noopener">684.冗余连接</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findRedundantConnection</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> edges<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        dic<span class="token operator">=</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>set<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>edges<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>i<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#并查集初始化</span>        <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> edges<span class="token punctuation">:</span>            <span class="token keyword">if</span> dic<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span>dic<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">:</span>                dic<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">|</span><span class="token operator">=</span>dic<span class="token punctuation">[</span>y<span class="token punctuation">]</span>      <span class="token comment" spellcheck="true">#合并集合</span>                <span class="token keyword">for</span> z <span class="token keyword">in</span> dic<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">:</span>                    dic<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token operator">=</span>dic<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                   <span class="token comment" spellcheck="true">#x,y会形成闭环</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#无向图</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="803-打砖块"><a href="#803-打砖块" class="headerlink" title="803.打砖块"></a><a href="https://leetcode-cn.com/problems/bricks-falling-when-hit/" target="_blank" rel="noopener">803.打砖块</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#并查集，或DFS</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1232-缀点成线"><a href="#1232-缀点成线" class="headerlink" title="1232.缀点成线"></a>1232.缀点成线</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">checkStraightLine</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> coordinates<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        x1<span class="token punctuation">,</span>y1<span class="token operator">=</span>coordinates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>coordinates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        x2<span class="token punctuation">,</span>y2<span class="token operator">=</span>coordinates<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> coordinates<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> xi<span class="token punctuation">,</span>yi <span class="token keyword">in</span> coordinates<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>yi<span class="token operator">-</span>y1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x2<span class="token operator">-</span>x1<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token punctuation">(</span>y2<span class="token operator">-</span>y1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>xi<span class="token operator">-</span>x1<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="721-账户合并"><a href="#721-账户合并" class="headerlink" title="721.账户合并"></a><a href="https://leetcode-cn.com/problems/accounts-merge/" target="_blank" rel="noopener">721.账户合并</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#思路：建立并查集，将可以连接的account合并。</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">accountsMerge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> accounts<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        f<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>            f<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#不存在 key=x 就初始化</span>            <span class="token keyword">while</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span>x<span class="token punctuation">:</span>                f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span>                x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            <span class="token keyword">return</span> x        <span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            f<span class="token punctuation">[</span>find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>find<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将x连到y的根上</span>        visited<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>accounts<span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>account <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>accounts<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#进行连接</span>            name<span class="token punctuation">,</span>email<span class="token operator">=</span>account<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>account<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> e <span class="token keyword">in</span> email<span class="token punctuation">:</span>                <span class="token keyword">if</span> e <span class="token keyword">in</span> visited<span class="token punctuation">:</span>                    union<span class="token punctuation">(</span>i<span class="token punctuation">,</span>visited<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    visited<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token operator">=</span>i        disjointSet<span class="token operator">=</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>set<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            root<span class="token operator">=</span>find<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">for</span> es <span class="token keyword">in</span> accounts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                disjointSet<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>es<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(disjointSet)</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>accounts<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>list<span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> key<span class="token punctuation">,</span>val <span class="token keyword">in</span> disjointSet<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1584-连接所有点的最小费用⭐"><a href="#1584-连接所有点的最小费用⭐" class="headerlink" title="1584.连接所有点的最小费用⭐"></a><a href="https://leetcode-cn.com/problems/min-cost-to-connect-all-points" target="_blank" rel="noopener">1584.连接所有点的最小费用</a>⭐</h3><p>给你一个 <code>points</code> 数组，表示 2D 平面上的一些点，其中 <code>points[i] = [xi, yi]</code> 。</p><p>连接点 <code>[xi, yi]</code> 和点 <code>[xj, yj]</code> 的费用为它们之间的 <strong>曼哈顿距离</strong> ：<code>|xi - xj| + |yi - yj|</code> ，其中 |val| 表示 val 的绝对值。</p><p>请你返回将所有点连接的最小总费用。只有任意两点之间 <strong>有且仅有</strong> 一条简单路径时，才认为所有点都已连接。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#方法一：最小生成树prim算法</span><span class="token comment" spellcheck="true">#每次迭代选择代价最小的边对应的点，加入到树中。</span><span class="token comment" spellcheck="true">#算法从某一个顶点s开始，逐渐覆盖整个连通网的所有顶点。</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get_dist</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">prim</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>points<span class="token punctuation">)</span><span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>points<span class="token punctuation">)</span>        dist<span class="token operator">=</span><span class="token punctuation">[</span>float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span>n        dist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>        visited<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 离集合最近的点</span>            t <span class="token operator">=</span> min<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token operator">not</span> vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>            vis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            ans <span class="token operator">+=</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 用离集合最近的点更新其他的点到集合的距离</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token operator">not</span> vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>get_dist<span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> points<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans    <span class="token keyword">def</span> <span class="token function">minCostConnectPoints</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> points<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>prim<span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#完全图：每对顶点都有边连接。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#方法二：最小生成树kruskal算法</span><span class="token comment" spellcheck="true">#每迭代一次就选择一条满足条件的最小代价边，加入到最小生成树的边集合里。</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minCostConnectPoints</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> points<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dist</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#math中也有个dist函数</span>            <span class="token keyword">return</span> abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>points<span class="token punctuation">)</span>        cost_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>dist<span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        cost_list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        f<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">#记录每个点的根节点</span>        <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#仅find和初始化功能</span>            f<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token punctuation">)</span>            <span class="token keyword">while</span> x<span class="token operator">!=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>                f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span>                x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            <span class="token keyword">return</span> x        <span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            f<span class="token punctuation">[</span>find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>find<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> cost<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y <span class="token keyword">in</span> cost_list<span class="token punctuation">:</span>            <span class="token keyword">if</span> find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">==</span>find<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>   <span class="token comment" spellcheck="true">#两个点在树中</span>            union<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>            ans<span class="token operator">+=</span>cost        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#会默写这段代码了，hh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="628-三个数的最大乘积"><a href="#628-三个数的最大乘积" class="headerlink" title="628.三个数的最大乘积"></a>628.三个数的最大乘积</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maximumProduct</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-31"><a href="#21-31" class="headerlink" title="21-31"></a><code>21-31</code></h2><h3 id="1489-关键边和伪关键边"><a href="#1489-关键边和伪关键边" class="headerlink" title="1489.关键边和伪关键边"></a><a href="https://leetcode-cn.com/problems/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree/" target="_blank" rel="noopener">1489.关键边和伪关键边</a></h3><p>给定n个点的带权无向连通图。<br>求关键边（每种最小生成树都有的边）<br>伪关键边（出现在最小生成树中，但不必全部出现）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 并查集模板</span><span class="token keyword">class</span> <span class="token class-name">UnionFind</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>parent <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        self<span class="token punctuation">.</span>n <span class="token operator">=</span> n        <span class="token comment" spellcheck="true"># 当前连通分量数目</span>        self<span class="token punctuation">.</span>setCount <span class="token operator">=</span> n    <span class="token keyword">def</span> <span class="token function">findset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">:</span>            <span class="token keyword">return</span> x        self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>findset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">unite</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">,</span> y<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        x<span class="token punctuation">,</span> y <span class="token operator">=</span> self<span class="token punctuation">.</span>findset<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>findset<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        <span class="token keyword">if</span> x <span class="token operator">==</span> y<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>size<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>size<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">:</span>            x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x        self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> x        self<span class="token punctuation">.</span>size<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+=</span> self<span class="token punctuation">.</span>size<span class="token punctuation">[</span>y<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>setCount <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">connected</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">,</span> y<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        x<span class="token punctuation">,</span> y <span class="token operator">=</span> self<span class="token punctuation">.</span>findset<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>findset<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        <span class="token keyword">return</span> x <span class="token operator">==</span> y<span class="token comment" spellcheck="true"># Tarjan 算法求桥边模版</span><span class="token keyword">class</span> <span class="token class-name">TarjanSCC</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> edges<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edgesId<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>n <span class="token operator">=</span> n        self<span class="token punctuation">.</span>edges <span class="token operator">=</span> edges        self<span class="token punctuation">.</span>edgesId <span class="token operator">=</span> edgesId        self<span class="token punctuation">.</span>low <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        self<span class="token punctuation">.</span>dfn <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        self<span class="token punctuation">.</span>ans <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ts <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">getCuttingEdge</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>pGetCuttingEdge<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans    <span class="token keyword">def</span> <span class="token function">pGetCuttingEdge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> u<span class="token punctuation">:</span> int<span class="token punctuation">,</span> parentEdgeId<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ts <span class="token operator">+=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>ts        <span class="token keyword">for</span> v<span class="token punctuation">,</span> iden <span class="token keyword">in</span> zip<span class="token punctuation">(</span>self<span class="token punctuation">.</span>edges<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>edgesId<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>pGetCuttingEdge<span class="token punctuation">(</span>v<span class="token punctuation">,</span> iden<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>self<span class="token punctuation">.</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>low<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> self<span class="token punctuation">.</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>iden<span class="token punctuation">)</span>            <span class="token keyword">elif</span> iden <span class="token operator">!=</span> parentEdgeId<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>self<span class="token punctuation">.</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findCriticalAndPseudoCriticalEdges</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> edges<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        m <span class="token operator">=</span> len<span class="token punctuation">(</span>edges<span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> edge <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>edges<span class="token punctuation">)</span><span class="token punctuation">:</span>            edge<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        edges<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        uf <span class="token operator">=</span> UnionFind<span class="token punctuation">(</span>n<span class="token punctuation">)</span>        ans0 <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>        label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> m        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 找出所有权值为 w 的边，下标范围为 [i, j)</span>            w <span class="token operator">=</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>            j <span class="token operator">=</span> i            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> m <span class="token operator">and</span> edges<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                j <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true"># 存储每个连通分量在图 G 中的编号</span>            compToId <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 图 G 的节点数</span>            gn <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>                x <span class="token operator">=</span> uf<span class="token punctuation">.</span>findset<span class="token punctuation">(</span>edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                y <span class="token operator">=</span> uf<span class="token punctuation">.</span>findset<span class="token punctuation">(</span>edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> x <span class="token operator">!=</span> y<span class="token punctuation">:</span>                    <span class="token keyword">if</span> x <span class="token operator">not</span> <span class="token keyword">in</span> compToId<span class="token punctuation">:</span>                        compToId<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> gn                        gn <span class="token operator">+=</span> <span class="token number">1</span>                    <span class="token keyword">if</span> y <span class="token operator">not</span> <span class="token keyword">in</span> compToId<span class="token punctuation">:</span>                        compToId<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> gn                        gn <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 将自环边标记为 -1</span>                    label<span class="token punctuation">[</span>edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>            <span class="token comment" spellcheck="true"># 图 G 的边</span>            gm <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>            gmid <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>            <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>                x <span class="token operator">=</span> uf<span class="token punctuation">.</span>findset<span class="token punctuation">(</span>edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                y <span class="token operator">=</span> uf<span class="token punctuation">.</span>findset<span class="token punctuation">(</span>edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> x <span class="token operator">!=</span> y<span class="token punctuation">:</span>                    idx<span class="token punctuation">,</span> idy <span class="token operator">=</span> compToId<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> compToId<span class="token punctuation">[</span>y<span class="token punctuation">]</span>                    gm<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>idy<span class="token punctuation">)</span>                    gmid<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    gm<span class="token punctuation">[</span>idy<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>idx<span class="token punctuation">)</span>                    gmid<span class="token punctuation">[</span>idy<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            bridges <span class="token operator">=</span> TarjanSCC<span class="token punctuation">(</span>gn<span class="token punctuation">,</span> gm<span class="token punctuation">,</span> gmid<span class="token punctuation">)</span><span class="token punctuation">.</span>getCuttingEdge<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 将桥边（关键边）标记为 1</span>            ans0<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>bridges<span class="token punctuation">)</span>            <span class="token keyword">for</span> iden <span class="token keyword">in</span> bridges<span class="token punctuation">:</span>                label<span class="token punctuation">[</span>iden<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>                uf<span class="token punctuation">.</span>unite<span class="token punctuation">(</span>edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            i <span class="token operator">=</span> j        <span class="token comment" spellcheck="true"># 未标记的边即为非桥边（伪关键边）</span>        ans1 <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token keyword">if</span> label<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>ans0<span class="token punctuation">,</span> ans1<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#copy,溜了溜了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="989-数组形式的整数加法"><a href="#989-数组形式的整数加法" class="headerlink" title="989. 数组形式的整数加法"></a><a href="https://leetcode-cn.com/problems/add-to-array-form-of-integer/" target="_blank" rel="noopener">989. 数组形式的整数加法</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">addToArrayForm</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> K<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        sum<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> A<span class="token punctuation">:</span>            sum<span class="token operator">=</span>sum<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>num        sum<span class="token operator">+=</span>K        <span class="token keyword">return</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> str<span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1319-连通网络的操作次数"><a href="#1319-连通网络的操作次数" class="headerlink" title="1319.连通网络的操作次数"></a><a href="https://leetcode-cn.com/problems/number-of-operations-to-make-network-connected/" target="_blank" rel="noopener">1319.连通网络的操作次数</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">makeConnected</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> connections<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>connections<span class="token punctuation">)</span><span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        f<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>            f<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token punctuation">)</span>            <span class="token keyword">while</span> x<span class="token operator">!=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>                f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span>                x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            <span class="token keyword">return</span> x        <span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            f<span class="token punctuation">[</span>find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span>        n<span class="token operator">-=</span><span class="token number">1</span>   <span class="token comment" spellcheck="true">#需要n-1条边才能连通网络</span>        <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> connections<span class="token punctuation">:</span>            <span class="token keyword">if</span> find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">==</span>find<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            union<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>            n<span class="token operator">-=</span><span class="token number">1</span>  <span class="token comment" spellcheck="true">#需要的边减少了</span>        <span class="token keyword">return</span> n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="674-最长连续递增序列"><a href="#674-最长连续递增序列" class="headerlink" title="674.最长连续递增序列"></a><a href="https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence/" target="_blank" rel="noopener">674.最长连续递增序列</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findLengthOfLCIS</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token number">0</span>        start<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                start<span class="token operator">=</span>i            ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>i<span class="token operator">-</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="959-由斜杠划分区域"><a href="#959-由斜杠划分区域" class="headerlink" title="959.由斜杠划分区域"></a><a href="https://leetcode-cn.com/problems/regions-cut-by-slashes/" target="_blank" rel="noopener">959.由斜杠划分区域</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">uf</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>f<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>cnt<span class="token operator">=</span>n        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> x<span class="token operator">!=</span>self<span class="token punctuation">.</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>self<span class="token punctuation">.</span>f<span class="token punctuation">[</span>self<span class="token punctuation">.</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span>            x<span class="token operator">=</span>self<span class="token punctuation">.</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span>        <span class="token keyword">return</span> x    <span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>f<span class="token punctuation">[</span>self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>y<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#将x根连到y的根节点</span>            self<span class="token punctuation">.</span>cnt<span class="token operator">-=</span><span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">connect</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">==</span>self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">regionsBySlashes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span>        u<span class="token operator">=</span>uf<span class="token punctuation">(</span>n<span class="token operator">*</span>n<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">get_pos</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>row<span class="token operator">*</span>n<span class="token operator">+</span>col<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>i        <span class="token keyword">for</span> row <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> col <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                v<span class="token operator">=</span>grid<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span>                <span class="token keyword">if</span> col<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>                    u<span class="token punctuation">.</span>union<span class="token punctuation">(</span>get_pos<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>get_pos<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> row<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>                    u<span class="token punctuation">.</span>union<span class="token punctuation">(</span>get_pos<span class="token punctuation">(</span>row<span class="token number">-1</span><span class="token punctuation">,</span>col<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>get_pos<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> v<span class="token operator">==</span><span class="token string">'/'</span><span class="token punctuation">:</span>                    u<span class="token punctuation">.</span>union<span class="token punctuation">(</span>get_pos<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>get_pos<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    u<span class="token punctuation">.</span>union<span class="token punctuation">(</span>get_pos<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>get_pos<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">elif</span> v<span class="token operator">==</span><span class="token string">'\\'</span><span class="token punctuation">:</span>                    u<span class="token punctuation">.</span>union<span class="token punctuation">(</span>get_pos<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>get_pos<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    u<span class="token punctuation">.</span>union<span class="token punctuation">(</span>get_pos<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>get_pos<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                      u<span class="token punctuation">.</span>union<span class="token punctuation">(</span>get_pos<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>get_pos<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    u<span class="token punctuation">.</span>union<span class="token punctuation">(</span>get_pos<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>get_pos<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    u<span class="token punctuation">.</span>union<span class="token punctuation">(</span>get_pos<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>get_pos<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> u<span class="token punctuation">.</span>cnt<span class="token comment" spellcheck="true"># 万能的并查集...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1128-等价多米诺骨牌对的数量"><a href="#1128-等价多米诺骨牌对的数量" class="headerlink" title="1128.等价多米诺骨牌对的数量"></a><a href="https://leetcode-cn.com/problems/number-of-equivalent-domino-pairs/" target="_blank" rel="noopener">1128.等价多米诺骨牌对的数量</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numEquivDominoPairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dominoes<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        tmp<span class="token operator">=</span>Counter<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>b <span class="token keyword">if</span> a<span class="token operator">>=</span>b <span class="token keyword">else</span> b<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>a <span class="token keyword">for</span> a<span class="token punctuation">,</span>b <span class="token keyword">in</span> dominoes<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sum<span class="token punctuation">(</span>comb<span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">for</span> k <span class="token keyword">in</span> tmp<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#特定情况下，选取特征哈希键</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1579-保证图的可完全遍历⭐"><a href="#1579-保证图的可完全遍历⭐" class="headerlink" title="1579.保证图的可完全遍历⭐"></a><a href="https://leetcode-cn.com/problems/remove-max-number-of-edges-to-keep-graph-fully-traversable/" target="_blank" rel="noopener">1579.保证图的可完全遍历⭐</a></h3><p>Alice 和 Bob 共有一个无向图，其中包含 <code>n</code> 个节点和 <code>3</code> 种类型的边，返回可以删除的最大边数，如果 Alice 和 Bob 无法完全遍历图，则返回 <code>-1</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">uf</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>f<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>cnt<span class="token operator">=</span>n        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> x<span class="token operator">!=</span>self<span class="token punctuation">.</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>self<span class="token punctuation">.</span>f<span class="token punctuation">[</span>self<span class="token punctuation">.</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span>            x<span class="token operator">=</span>self<span class="token punctuation">.</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span>        <span class="token keyword">return</span> x    <span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>f<span class="token punctuation">[</span>self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>y<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>cnt<span class="token operator">-=</span><span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">connect</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">==</span>self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxNumEdgesToRemove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> edges<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        edges<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        ua<span class="token punctuation">,</span>ub<span class="token operator">=</span>uf<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>uf<span class="token punctuation">(</span>n<span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> t<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y <span class="token keyword">in</span> edges<span class="token punctuation">:</span>            x<span class="token punctuation">,</span>y<span class="token operator">=</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token number">-1</span>   <span class="token comment" spellcheck="true">#对上序号</span>            <span class="token keyword">if</span> t<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> ua<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span> ans<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                     ua<span class="token punctuation">.</span>union<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>                    ub<span class="token punctuation">.</span>union<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>            <span class="token keyword">elif</span> t<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> ub<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span> ans<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span> ub<span class="token punctuation">.</span>union<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> ua<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span> ans<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span> ua<span class="token punctuation">.</span>union<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>        <span class="token keyword">if</span> ua<span class="token punctuation">.</span>cnt<span class="token operator">!=</span><span class="token number">1</span> <span class="token operator">or</span> ub<span class="token punctuation">.</span>cnt<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># uf 666</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="724-寻找数组的中心索引"><a href="#724-寻找数组的中心索引" class="headerlink" title="724.寻找数组的中心索引"></a><a href="https://leetcode-cn.com/problems/find-pivot-index/submissions/" target="_blank" rel="noopener">724.寻找数组的中心索引</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pivotIndex</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        total<span class="token operator">=</span>sum<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        tmp<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>num <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> tmp<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>num<span class="token operator">==</span>total<span class="token punctuation">:</span> <span class="token keyword">return</span> i            tmp<span class="token operator">+=</span>num        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1631-最小体力消耗路径⭐"><a href="#1631-最小体力消耗路径⭐" class="headerlink" title="1631.最小体力消耗路径⭐"></a><a href="https://leetcode-cn.com/problems/path-with-minimum-effort/" target="_blank" rel="noopener">1631.最小体力消耗路径⭐</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minimumEffortPath</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> heights<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>heights<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>heights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        edges<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                idx<span class="token operator">=</span>i<span class="token operator">*</span>cols<span class="token operator">+</span>j                <span class="token keyword">if</span> i<span class="token punctuation">:</span> edges<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>idx<span class="token punctuation">,</span>idx<span class="token operator">-</span>cols<span class="token punctuation">,</span>abs<span class="token punctuation">(</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>heights<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> j<span class="token punctuation">:</span> edges<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>idx<span class="token punctuation">,</span>idx<span class="token number">-1</span><span class="token punctuation">,</span>abs<span class="token punctuation">(</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        edges<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(edges)</span>        f<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>            f<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token punctuation">)</span>            <span class="token keyword">while</span> x<span class="token operator">!=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>                f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span>                x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            <span class="token keyword">return</span> x        <span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            f<span class="token punctuation">[</span>find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>w <span class="token keyword">in</span> edges<span class="token punctuation">:</span>            <span class="token keyword">if</span> find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">==</span>find<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            union<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>            ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>w<span class="token punctuation">)</span>            <span class="token keyword">if</span> find<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">==</span>find<span class="token punctuation">(</span>rows<span class="token operator">*</span>cols<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 <span class="token keyword">break</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#并查集，连通</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="778-水位上升的泳池中游泳"><a href="#778-水位上升的泳池中游泳" class="headerlink" title="778.水位上升的泳池中游泳"></a><a href="https://leetcode-cn.com/problems/swim-in-rising-water/" target="_blank" rel="noopener">778.水位上升的泳池中游泳</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">swimInWater</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        f<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>            f<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token punctuation">)</span>            <span class="token keyword">while</span> x<span class="token operator">!=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>                f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span>                x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            <span class="token keyword">return</span> x        <span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            f<span class="token punctuation">[</span>find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>find<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        edges<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                idx<span class="token operator">=</span>i<span class="token operator">*</span>cols<span class="token operator">+</span>j                <span class="token keyword">if</span> i<span class="token punctuation">:</span> edges<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>idx<span class="token punctuation">,</span>idx<span class="token operator">-</span>cols<span class="token punctuation">,</span>max<span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>grid<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> j<span class="token punctuation">:</span> edges<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>idx<span class="token punctuation">,</span>idx<span class="token number">-1</span><span class="token punctuation">,</span>max<span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        edges<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>w <span class="token keyword">in</span> edges<span class="token punctuation">:</span>            <span class="token keyword">if</span> find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">==</span>find<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>            union<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>            ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>w<span class="token punctuation">)</span>            <span class="token keyword">if</span> find<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">==</span>find<span class="token punctuation">(</span>rows<span class="token operator">*</span>cols<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">break</span>        <span class="token keyword">return</span> ans <span class="token comment" spellcheck="true"># 激动，和昨天一个题。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="839-相似字符串组"><a href="#839-相似字符串组" class="headerlink" title="839. 相似字符串组"></a><a href="https://leetcode-cn.com/problems/similar-string-groups/" target="_blank" rel="noopener">839. 相似字符串组</a></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numSimilarGroups</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            cnt<span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">for</span> a<span class="token punctuation">,</span>b <span class="token keyword">in</span> zip<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> a<span class="token operator">!=</span>b<span class="token punctuation">:</span> cnt<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">if</span> cnt<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true">#strs中所有单词长度相同</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        f<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>            f<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token punctuation">)</span>            <span class="token keyword">while</span> x<span class="token operator">!=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>                f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span>                x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            <span class="token keyword">return</span> x        <span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            f<span class="token punctuation">[</span>find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>find<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>strs<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> find<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>find<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>                <span class="token keyword">if</span> check<span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true">#print(strs[i],strs[j])</span>                    union<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>        <span class="token keyword">return</span> sum<span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#连通分量个数</span><span class="token comment" spellcheck="true"># 1月打卡完成</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="wuliao"><a href="#wuliao" class="headerlink" title="wuliao"></a>wuliao</h2><h3 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3.无重复字符的最长子串"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">3.无重复字符的最长子串</a></h3><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        q<span class="token operator">=</span>collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> q<span class="token punctuation">:</span>                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">while</span> q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>                q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>len<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#参照239滑动窗口问题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="29-整数相除"><a href="#29-整数相除" class="headerlink" title="29.整数相除"></a>29.整数相除</h3><p>不用乘除，mod</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">divide</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dividend<span class="token punctuation">:</span> int<span class="token punctuation">,</span> divisor<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        flag<span class="token operator">=</span>dividend<span class="token operator">*</span>divisor<span class="token operator">&lt;</span><span class="token number">0</span>        dividend<span class="token operator">=</span>abs<span class="token punctuation">(</span>dividend<span class="token punctuation">)</span>        divisor<span class="token operator">=</span>abs<span class="token punctuation">(</span>divisor<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">div</span><span class="token punctuation">(</span>dividend<span class="token punctuation">,</span> divisor<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> dividend<span class="token operator">&lt;</span>divisor<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>            tmp<span class="token operator">=</span>divisor            cnt<span class="token operator">=</span><span class="token number">1</span>            <span class="token keyword">while</span> tmp<span class="token operator">+</span>tmp<span class="token operator">&lt;</span>dividend<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#2倍法找邻值</span>                tmp<span class="token operator">+=</span>tmp                cnt<span class="token operator">+=</span>cnt            <span class="token keyword">return</span> cnt<span class="token operator">+</span>div<span class="token punctuation">(</span>dividend<span class="token operator">-</span>tmp<span class="token punctuation">,</span>divisor<span class="token punctuation">)</span>        ans<span class="token operator">=</span>div<span class="token punctuation">(</span>dividend<span class="token punctuation">,</span>divisor<span class="token punctuation">)</span>        <span class="token keyword">if</span> flag<span class="token punctuation">:</span> ans<span class="token operator">*=</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">return</span> ans <span class="token keyword">if</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>ans<span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token comment" spellcheck="true">#题意溢出更改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除链表中的结点"><a href="#删除链表中的结点" class="headerlink" title="删除链表中的结点"></a>删除链表中的结点</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        node<span class="token punctuation">.</span>val<span class="token operator">=</span>node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val        node<span class="token punctuation">.</span>next<span class="token operator">=</span>node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token comment" spellcheck="true"># 等效地删除了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表倒数第k个结点"><a href="#链表倒数第k个结点" class="headerlink" title="链表倒数第k个结点"></a>链表倒数第k个结点</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">kthToLast</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        slow<span class="token punctuation">,</span>fast<span class="token operator">=</span>head<span class="token punctuation">,</span>head        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next        <span class="token keyword">while</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">:</span>            slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next            fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next        <span class="token keyword">return</span> slow<span class="token punctuation">.</span>val<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二叉树的直径"><a href="#二叉树的直径" class="headerlink" title="二叉树的直径"></a>二叉树的直径</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">def</span> <span class="token function">depth</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true">#从下往上的计算</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>            l<span class="token operator">=</span>depth<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            r<span class="token operator">=</span>depth<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>ans<span class="token operator">=</span>max<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ans<span class="token punctuation">,</span>l<span class="token operator">+</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> max<span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>   <span class="token comment" spellcheck="true">#当前结点最大深度</span>        depth<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span class="token number">-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二叉树镜像"><a href="#二叉树镜像" class="headerlink" title="二叉树镜像"></a>二叉树镜像</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mirrorTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span>         tmp<span class="token operator">=</span>root<span class="token punctuation">.</span>left        root<span class="token punctuation">.</span>left<span class="token operator">=</span>self<span class="token punctuation">.</span>mirrorTree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        root<span class="token punctuation">.</span>right<span class="token operator">=</span>self<span class="token punctuation">.</span>mirrorTree<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="混一下"><a href="#混一下" class="headerlink" title="混一下"></a>混一下</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ParkingSystem</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> big<span class="token punctuation">:</span> int<span class="token punctuation">,</span> medium<span class="token punctuation">:</span> int<span class="token punctuation">,</span> small<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>big<span class="token operator">=</span>big        self<span class="token punctuation">.</span>medium<span class="token operator">=</span>medium        self<span class="token punctuation">.</span>small<span class="token operator">=</span>small    <span class="token keyword">def</span> <span class="token function">addCar</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> carType<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> carType<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>big<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>big<span class="token operator">>=</span><span class="token number">0</span>        <span class="token keyword">elif</span> carType<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>medium<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>medium<span class="token operator">>=</span><span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>small<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>small<span class="token operator">>=</span><span class="token number">0</span><span class="token comment" spellcheck="true">#1.复习一下类...</span><span class="token comment" spellcheck="true">#2.python str 还有replace()</span><span class="token comment" spellcheck="true">#3.zip打包，一个for里多做点事</span><span class="token comment" spellcheck="true">#4.col = [max(i) for i in zip(*matrix)]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="75-颜色分类"><a href="#75-颜色分类" class="headerlink" title="75.颜色分类"></a>75.颜色分类</h3><p>一趟扫描，排序<code>0</code>，<code>1</code>，<code>2</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortColors</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        p0<span class="token punctuation">,</span> p2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> p2<span class="token punctuation">:</span>            <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> p2 <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>p2<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                p2 <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>p0<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>p0<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                p0 <span class="token operator">+=</span> <span class="token number">1</span>            i <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">#快速排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416.分割等和子集"></a>416.分割等和子集</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canPartition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        total<span class="token operator">=</span>sum<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> total<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        k<span class="token operator">=</span>total<span class="token operator">//</span><span class="token number">2</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>k        <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">,</span> num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> num<span class="token punctuation">]</span><span class="token punctuation">:</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true">#0-1背包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="posts/os.html"/>
      <url>posts/os.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、操作系统"><a href="#一、操作系统" class="headerlink" title="一、操作系统"></a>一、操作系统</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p><strong>操作系统</strong> 是指控制和管理整个计算机系统的硬件和软件资源，并合理地组织调度计算机的工作和资源的分配，以提供给用户和其他软件方便的接口和环境，它是计算机系统中最基本的系统软件。</p><ul><li>负责管理和协调硬件、软件等计算机资源的工作<ul><li>处理机管理</li><li>存储器管理</li><li>文件管理</li><li>设备管理</li></ul></li><li>为上层的应用程序、用户提供简单易用的服务<ul><li>命令接口（允许用户直接使用）<ul><li>联机命令接口=交互式命令接口</li><li>脱机命令接口=批处理命令接口</li></ul></li><li>程序接口（由一组 <strong>系统调用</strong> 组成，允许用户通过程序间接使用）</li><li>GUI</li></ul></li><li>操作系统是系统软件，而不是硬件</li></ul><p><strong>中间件</strong>：提供系统软件和应用软件之间链接的软件</p><hr><h3 id="1-2-操作系统的特征"><a href="#1-2-操作系统的特征" class="headerlink" title="1.2 操作系统的特征"></a>1.2 操作系统的特征</h3><ul><li><code>并发</code><ul><li>【指两个或多个事件在同一事件间隔内发生。这些事件宏观上是同时发生的，但微观上是交替发生的。】</li><li><code>并行</code>：同一时刻同时发生。</li><li><code>操作系统的并发性</code>：计算机系统中同时存在多个运行着的程序。</li><li>并发与共享互为存在条件</li><li>并发和共享是操作系统的两个最基本的特征</li></ul></li><li><code>共享</code><ul><li>【指系统中的资源可供内存中多个并发执行的进程共同使用】</li><li>共享方式：<ul><li>互斥共享方式</li><li>同时共享方式</li></ul></li></ul></li><li><code>虚拟</code><ul><li>【指把一个物理上的实体变为若干个逻辑上的对应物】</li><li>虚拟技术：<ul><li>空分复用技术（如虚拟存储技术）</li><li>时分复用技术（如虚拟处理器）</li></ul></li></ul></li><li><code>异步</code><ul><li>【指多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行走走停停，速度不可预知】</li><li>只有系统拥有并发性，才可能导致异步性。</li></ul></li></ul><hr><h3 id="1-3-操作系统的发展"><a href="#1-3-操作系统的发展" class="headerlink" title="1.3 操作系统的发展"></a>1.3 操作系统的发展</h3><ul><li>手工操作阶段<ul><li>【人机速度矛盾导致资源利用率极低，用户独占全机】</li></ul></li><li>批处理阶段–单道批处理系统<ul><li>【引入<code>脱机</code>输入/输出技术，并监督程序负责控制作业的输入/输出】</li></ul></li><li>批处理阶段–多道批处理系统<ul><li>【引入中断技术】</li><li>优点：【多道程序并发执行，共享计算机资源。资源利用率大幅提升】</li><li>缺点：【用户响应时间长，没有人机相互功能】</li></ul></li><li>分时操作系统<ul><li>【计算机以时间片为单位轮流为各个用户/作业服务】</li><li>优点：【用户请求可以被及时响应，解决了人机交互问题】</li></ul></li><li>实时操作系统<ul><li>优点：【能够优先响应一些紧急任务】</li><li>主要特点：及时性，可靠性</li></ul></li></ul><p><code>脱机</code>：外围控制机+更高速的设备（磁带）<br><code>作用</code>：缓解设备与CPU速度矛盾，实现预输入、预输出</p><hr><h3 id="1-4-操作系统的运行机制"><a href="#1-4-操作系统的运行机制" class="headerlink" title="1.4 操作系统的运行机制"></a>1.4 操作系统的运行机制</h3><ul><li>两种指令：<ul><li>特权指令<ul><li>【<code>指令</code> 就是CPU能识别、执行的最基本的命令】</li></ul></li><li>非特权指令</li></ul></li><li>两种处理器状态<ul><li>核心态</li><li>用户态</li></ul></li><li>两种程序：<ul><li>内核程序</li><li>应用程序</li></ul></li></ul><p><code>内核</code> 是计算机上配置的底层软件，是操作系统最基本、最核心的部分。<br>实现操作系统内核功能的那些程序就是内核程序。</p><ul><li>时钟管理</li><li>中断管理</li><li>原语<ul><li>【是一种特殊的程序，其执行具有原子性】</li></ul></li><li>对系统资源进行管理的功能</li></ul><hr><h3 id="1-5-操作系统的体系结构"><a href="#1-5-操作系统的体系结构" class="headerlink" title="1.5 操作系统的体系结构"></a>1.5 操作系统的体系结构</h3><ul><li>大内核<ul><li>【将操作系统的主要功能没款作为系统内核，运行在核心态】</li><li>优点：高性能</li><li>缺点：代码庞大，难以维护</li></ul></li><li>微内核<ul><li>【只把最基本的功能保留在内核】</li><li>优点：方便维护</li><li>缺点：需要频繁在核心态和用户态切换，性能低</li></ul></li></ul><hr><h3 id="1-6-中断和异常"><a href="#1-6-中断和异常" class="headerlink" title="1.6 中断和异常"></a>1.6 中断和异常</h3><p>CPU收到计时部件发出的中断信号，切换为核心态对中断进行处理。</p><p><code>用户态</code> -&gt; <code>核心态</code> ，中断是唯一途径<br><code>核心态</code> -&gt; <code>用户态</code> ，通过执行一个特权指令</p><ul><li>中断的分类<ul><li>内中断<ul><li>自愿中断（指令中断）</li><li>强迫中断（硬件中断，软件中断）</li></ul></li><li>外中断（外设请求、人工干预）</li></ul></li></ul><hr><p><strong>系统调用</strong>【是操作系统向上层提供的接口】</p><ul><li>设备管理</li><li>文件管理</li><li>进程控制</li><li>进程通信</li><li>内存管理</li></ul><p>系统调用的过程：<br>传递系统调用参数执行 <code>-&gt;</code> 陷入指令执行系统 <code>-&gt;</code> 调用相应服务程序 <code>-&gt;</code> 返回用户程序</p><ul><li>应用程序通过系统调用来请求操作系统的服务</li><li>系统调用发生在用户态，对系统调用的处理发生在核心态</li><li>执行陷入指令会产生内中断，使处理器从用户态 <code>-&gt;</code> 核心态</li></ul><h2 id="二、进程管理"><a href="#二、进程管理" class="headerlink" title="二、进程管理"></a>二、进程管理</h2><h3 id="2-1-进程"><a href="#2-1-进程" class="headerlink" title="2.1 进程"></a>2.1 进程</h3><p>进程实体（进程映像）的<strong>组成</strong>:</p><ul><li><code>PCB</code><ul><li>进程描述信息（进程标识符<code>PID</code>，用户标识符<code>UID</code>）</li><li>进程控制和管理信息（进程当前状态，进程优先级）</li><li>资源分配清单（程序段指针，数据段指针，键鼠）</li><li>处理机相关信息（各种寄存器值）</li></ul></li><li>数据段</li><li>程序段</li></ul><p>系统为每个运行的程序配置一个数据结构，称为 <strong>进程控制块</strong>（PCB），用来描述进程的各种信息（如程序代码存放位置）.</p><p>一般情况下，把进程实体简称为进程。<br>所谓创建进程，实质上是创建进程实体中的PCB；而撤销进程，实质上是撤销进程实体中的PCB。</p><p>PCB是进程存在的 <strong>唯一标志</strong></p><ul><li>进程是程序的<code>一次执行过程</code></li><li>进程是【进程实体的运行过程，是系统进行资源分配和调度的一个独立单位】（进程是 <strong>动态</strong> 的）</li></ul><hr><p>进程的<strong>组织方式</strong>：</p><ul><li>链接方式<ul><li>按照进程状态将PCB分为多个队列</li><li>组成：执行指针、就绪队列指针、阻塞队列指针</li></ul></li><li>索引方式<ul><li>按照进程状态的不同，建立几张索引表</li><li>组成：执行指针、就绪表指针、阻塞表指针</li></ul></li></ul><hr><p>进程的<strong>特征</strong>：</p><ul><li>动态性（进程是动态地产生变化消亡的）</li><li>并发性（各进程可并发执行）</li><li>独立性（进程是资源分配、接受调度的基本单位）</li><li>异步性（各进程按各自独立的、不可预知的速度向前推进）</li><li>结构性（每个进程都会配备一个PCB）</li></ul><hr><p>进程的<strong>状态</strong>：</p><ul><li>运行态（在CPU上运行）</li><li>就绪态（已具备运行条件）</li><li>阻塞态（等待某一事件的发生）</li><li>创建态（操作系统为其分配资源，初始化PCB）</li><li>终止态（操作系统回收资源，撤销PCB）</li></ul><p>进程状态的切换，就是<strong>进程控制</strong>，用原语实现。</p><p><code>挂起态</code>：进程暂时换出外存进行等待。</p><hr><p><strong>进程通信</strong>【进程之间的信息交换】：</p><ul><li>共享存储<ul><li>【要互斥地访问共享空间】</li><li>基于数据结构的共享【低级】</li><li>基于存储区的共享【高级】</li></ul></li><li>消息传递<ul><li>直接通信方式</li><li>间接通信方式</li></ul></li><li>管道通信<ul><li>【一个管道只能实现半双工通信】</li></ul></li></ul><hr><h3 id="2-2-线程"><a href="#2-2-线程" class="headerlink" title="2.2 线程"></a>2.2 线程</h3><p><code>线程</code> 是一个基本的CPU执行单元，也是程序执行流的最小单元。</p><p>线程，可以理解为轻量级进程。</p><ul><li>引入线程后：<ul><li>进程只作为除CPU外系统资源的分配单元。</li><li>线程是资源调度的基本单位。</li><li>进程内的各线程也可以并发，提高了并发度。</li><li>进程内线程切换，减小系统开销。</li></ul></li><li>线程的实现方式：<ul><li>用户级线程</li><li>内核级线程</li><li>【操作系统只”看得见”内核级线程，因此只有内核级线程才是处理机分配的单位】</li></ul></li></ul><hr><p>一些说明：</p><ul><li><code>进程</code> 与 <code>作业</code>：一个作业通常包括几个进程，几个进程共同完成一个任务，即作业。</li><li><code>进程</code> 与 <code>线程</code>：做个简单的比喻，进程=火车，线程=车厢<ul><li>线程在进程下行进</li><li>同一进程下不同线程间，数据容易共享</li></ul></li></ul><p>进程 ➡ 资源分配的基本单位<br>线程 ➡ 独立调度的基本单位</p><hr><h3 id="2-3-处理机调度"><a href="#2-3-处理机调度" class="headerlink" title="2.3 处理机调度"></a>2.3 处理机调度</h3><ul><li>【从就绪队列中按照一定的算法选择一个进程并将处理机分配给它运行，并实现进程的并发执行】</li><li>三个层次：<ul><li>高级调度（作业调度）<ul><li>对进程状态的影响：无 <code>-&gt;</code> 创建态 <code>-&gt;</code> 就绪态</li><li>是外存与内存之间的调度</li></ul></li><li>中级调度（内存调度）<ul><li>对进程状态的影响：挂起态 <code>-&gt;</code> 就绪态</li><li>【决定哪个处于挂起状态的进程重新调入内存】</li></ul></li><li>低级调度（ <strong>进程调度</strong> ）<ul><li>最基本的一种调度，发生频率最高</li><li>对进程状态的影响：就绪态 <code>-&gt;</code> 运行态</li><li><code>内容</code>【按照某种算法从就绪队列中选择一个进程为其分配处理机】</li><li><code>方式</code><ul><li>非剥夺调度方式【只允许进程主动放弃处理机】</li><li>剥夺调度方式【又称抢占方式，可优先处理紧急进程】</li></ul></li></ul></li></ul></li></ul><p><code>挂起</code> 和 <code>阻塞</code> 都是暂时不能获得CPU的服务，但 <code>挂起</code> 是将进程映像调到外存去了。</p><hr><p>调度算法的评价指标：</p><ul><li><strong>CPU利用率</strong> = 忙碌的时间 / 总时间</li><li><strong>系统吞吐量</strong>：单位时间内完成作业的数量</li><li><strong>周转时间</strong> = 作业完成时间 - 作业提交时间</li><li><strong>等待时间</strong>：指进程/作业处于等待处理机状态时间之和</li><li><strong>响应时间</strong>：从用户提交请求到首次产生响应所用时间</li></ul><hr><p><strong>调度算法</strong>：</p><ul><li>先来先服务（FCFS）</li><li>短作业优先（SJF）</li><li>高响应比优先（HRRN）</li><li>时间片轮转调度算法（RR）</li><li>优先级调度算法</li><li>多级反馈队列调度算法</li></ul><hr><p>临界资源：一个时间段内只允许一个进程使用。</p><ul><li><strong>进程同步</strong><ul><li>【并发性带来了异步性，有时需要进程同步来解决异步问题】</li></ul></li><li><strong>进程互斥</strong><ul><li>【对临界资源的访问，需要互斥地进行】</li><li>四个部分<ul><li>进入区【检查并进入临界区，需要“上锁”】</li><li>临界区【访问临界资源地代码】</li><li>退出区【负责“解锁”】</li><li>剩余区【其余代码部分】</li></ul></li><li>遵循原则：<ul><li>【空闲让进】【忙则等待】【有限等待】【让权等待】</li></ul></li><li>软件实现方法：<code>？？？</code><ul><li>单标志法</li><li>双标志先检查</li><li>双标志后检查</li><li>Peterson算法</li></ul></li><li>硬件实现方法：<code>？？？</code><ul><li>中断屏蔽方法</li><li>TestAndSet（TS指令/TSL指令）</li><li>Swap指令（XCHG指令）</li></ul></li></ul></li></ul><p>用户进程可以通过使用操作系统提供的一对原语对<code>信号量</code>进行操作，从而方便实现进程互斥、同步。<br><code>信号量</code> 是种表示系统资源的变量。<br><code>wait</code>、<code>signal</code> 原语的操作简称 <code>PV操作</code></p><h2 id="三、内存管理"><a href="#三、内存管理" class="headerlink" title="三、内存管理"></a>三、内存管理</h2><p>逻辑地址：相对地址；物理地址：绝对地址</p><p><code>从写程序到程序运行</code>：</p><ul><li>编辑源代码文件</li><li>编译<ul><li>【由源代码生成目标模块，高级语言-&gt;机器语言】</li></ul></li><li>链接<ul><li>【由目标模块生成装入模块，链接后形成完整的逻辑地址】</li></ul></li><li>装入<ul><li>【将装入模块装入内存，装入后形成物理地址】</li></ul></li></ul><hr><p><code>内存管理</code>：</p><ul><li>内存空间的<strong>分配与回收</strong></li><li>内存空间的<strong>扩充</strong>（实现虚拟性）<ul><li>覆盖技术<ul><li>【将程序分为多个段，常用的段常驻内存，不常用的段在需要时调入内存】</li><li>缺点：对用户不透明，增加了用户编程负担。</li></ul></li><li>交换技术<ul><li>【进程在内存与磁盘之间动态调度，但PCB会常驻内存】</li></ul></li><li><strong>虚拟内存</strong><ul><li>【程序不需装入即可运行，运行时根据需要动态调入数据，若内存不够，还需换出一些数据】</li><li><code>多次性</code>：允许作业多次调入内存</li><li><code>对换性</code>：允许作业运行过程中，将作业换入、换出</li><li><code>虚拟性</code>：从逻辑上扩充了内存的容量</li><li>实现方式：<ul><li>请求分页存储管理</li><li>请求分段存储管理</li><li>请求段页式存储管理</li></ul></li></ul></li></ul></li><li><strong>地址转换</strong><ul><li>【操作系统负责实现逻辑地址到物理地址的转换】</li><li>三种方式：<ul><li>绝对装入【编译器负责地址转换】（单道程序阶段）</li><li>可重定位装入【装入程序负责地址转换】（早期多道批处理系统）</li><li>动态运行时装入【运行时进行地址转换】（现代操作系统）</li></ul></li></ul></li><li><strong>存储保护</strong><ul><li>【保证各进程在自己的内存空间内运行】</li><li>两种方式：<ul><li>设置上下限寄存器</li><li>利用重定位寄存器、界地址寄存器进行判断</li></ul></li></ul></li></ul><hr><p><strong>内存空间的分配与回收</strong>：</p><ul><li>连续分配管理方式<ul><li>单一连续分配</li><li>固定分区分配</li><li>动态分区分配</li></ul></li><li>非连续分配管理方式<ul><li>基本分页存储管理</li><li>基本分段存储管理</li><li>段页式存储管理</li></ul></li></ul><p>页表机制的地址变换过程 <code>？？？</code></p><p>页面置换算法、页面分配策略 <code>？？？</code></p><h2 id="四、文件管理"><a href="#四、文件管理" class="headerlink" title="四、文件管理"></a>四、文件管理</h2><h3 id="4-1-文件系统的结构"><a href="#4-1-文件系统的结构" class="headerlink" title="4.1 文件系统的结构"></a>4.1 文件系统的结构</h3><p><strong>文件系统</strong>（由上至下）：</p><ul><li>用户接口</li><li>文件目录系统</li><li>存取控制模块</li><li>逻辑文件系统和文件信息缓冲区</li><li>物理文件系统</li></ul><hr><p><strong>文件的逻辑结构</strong>：</p><ul><li>无结构文件<ul><li>【文件内部的数据就是一系列二进制流或字符流，如<code>txt</code>文件】</li></ul></li><li>有结构文件<ul><li>顺序文件</li><li>索引文件</li><li>索引顺序文件</li></ul></li></ul><p><code>目录</code> 本身就是一个有结构文件，由一条条记录组成；每条记录对应一个在该目录下的文件。</p><hr><p><strong>文件的物理结构</strong>（文件分配方式）：</p><ul><li>连续分配<ul><li>【每个文件在磁盘上占有一组连续的块】</li></ul></li><li>链接分配<ul><li>隐式链接<ul><li>【磁盘块含有指针，对用户透明，只能顺序访问】</li></ul></li><li>显式链接<ul><li>【把用于链接文件各物理块的指针显式地存放在一张表中，即<code>FAT</code>(file allocation table)】</li><li>【一个磁盘仅设置一张 <code>FAT</code>，开机时将 <code>FAT</code> 读入内存，并常驻内存。】</li></ul></li></ul></li><li>索引分配<ul><li>【系统为每个文件建立一张索引表，索引表记录了文件地各个逻辑块对应的物理块】</li></ul></li></ul><hr><h3 id="4-2-文件存储空间管理"><a href="#4-2-文件存储空间管理" class="headerlink" title="4.2 文件存储空间管理"></a>4.2 文件存储空间管理</h3><ul><li>存储空间的划分和初始化<ul><li><code>划分</code>【将物理磁盘划分为一个个文件卷（逻辑卷，逻辑盘）】</li><li><code>初始化</code>【将各个文件卷划分为目录区、文件区】</li></ul></li><li>管理方法：<ul><li>空闲表法</li><li>空闲链表法</li><li>位示图法</li><li>成组链接法</li></ul></li></ul><hr><p><strong>文件的基本操作</strong>：<code>create</code> <code>delete</code> <code>read</code> <code>write</code> <code>open</code> <code>close</code>系统调用</p><ul><li><code>create</code>：分配外存空间，创建目录项</li><li>进程打开文件表时特有属性：读写指针、访问权限</li></ul><hr><ul><li><strong>文件共享</strong>：<ul><li>基于索引结点的共享方式（硬链接）<ul><li>【各个用户的目录项指向同一个索引结点】</li></ul></li><li>基于符号链的共享方式（软链接）<ul><li>【相当于创建索引结点的快捷方式】</li></ul></li></ul></li><li><strong>文件保护</strong>：口令保护，加密保护，访问控制</li></ul><hr><p><code>磁盘</code> 由表面涂有磁性物质的圆形盘片组成，每个盘片被划分为一个个磁道，每个磁道又划分为一个个扇区。</p><p>磁盘的物理地址：（柱面号，盘面号，扇区号），磁盘的调度算法<code>？？？</code></p><h2 id="五、设备管理"><a href="#五、设备管理" class="headerlink" title="五、设备管理"></a>五、设备管理</h2><h3 id="5-1-I-O设备"><a href="#5-1-I-O设备" class="headerlink" title="5.1 I/O设备"></a>5.1 I/O设备</h3><ul><li>【将数据输入输出计算机的外部设备】</li><li>按使用特性分类：<ul><li>人机交互类设备（数据传输速度慢）</li><li>存储设备（数据传输速度快）</li><li>网络通信设备</li></ul></li><li>按信息交换的单位分类：<ul><li>块设备（传输快，可寻址）</li><li>字符设备（传输慢，不可寻址，常采用中断驱动方式）</li></ul></li><li>组成：<ul><li>机械部件</li><li>电子部件（I/O控制器）</li></ul></li></ul><hr><h3 id="5-2-I-O控制器"><a href="#5-2-I-O控制器" class="headerlink" title="5.2 I/O控制器"></a>5.2 I/O控制器</h3><ul><li>主要功能：<ul><li>接受和识别CPU发出的命令（控制寄存器）</li><li>向CPU报告设备的状态（状态寄存器）</li><li>数据交换（数据寄存器）</li><li>地址识别（由I/O逻辑实现）</li></ul></li><li>组成：<ul><li>CPU与控制器间的接口</li><li>I/O逻辑</li><li>控制器与设备间的接口</li></ul></li><li>寄存器编址方式：<ul><li>内存映射I/O<ul><li>控制器中的寄存器与内存同一编制</li></ul></li><li>寄存器独立编址<ul><li>需要设置专门的指令来操作控制器</li></ul></li></ul></li></ul><hr><h3 id="5-3-I-O控制方式"><a href="#5-3-I-O控制方式" class="headerlink" title="5.3 I/O控制方式"></a>5.3 I/O控制方式</h3><ul><li>程序直接控制方式<ul><li>在等待I/O完成的过程中需要CPU不断轮询检查</li><li>优点：实现简单</li><li>缺点：CPU利用率低</li></ul></li><li>中断驱动方式<ul><li>优点：CPU和I/O设备可并行工作</li></ul></li><li>DMA方式（direct memory access）<ul><li>数据的传送单位是块</li></ul></li><li>通道控制方式<ul><li>识别并执行一系列通道指令</li><li>优点：CPU、通道、I/O设备可并行工作，资源利用率很高</li><li>缺点：实现复杂，需要专门的通道硬件支持</li></ul></li></ul><hr><h3 id="5-4-I-O软件的层次"><a href="#5-4-I-O软件的层次" class="headerlink" title="5.4 I/O软件的层次"></a>5.4 I/O软件的层次</h3><ul><li>用户层软件【实现了与用户交互的接口】:<ul><li>功能：【假脱机技术】</li></ul></li><li>I/O系统【属于操作系统的内核部分】：<ul><li>设备独立性软件<ul><li>功能：【I/O调度、设备保护、设备分配与回收、缓冲区管理】</li></ul></li><li>设备驱动程序</li><li>中断处理程序</li></ul></li></ul><p><code>假脱机技术</code>，又称<code>SPOOLing技术</code>，用软件的方式模拟脱机技术。<br>在内存中建立缓冲区，在磁盘中建立输入/输出井。</p>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="posts/ccp.html"/>
      <url>posts/ccp.html</url>
      
        <content type="html"><![CDATA[<p>。。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020寒假</title>
      <link href="posts/hanjia_1.html"/>
      <url>posts/hanjia_1.html</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title="preface"></a><em>preface</em></h2><p><font face="myfont" size=5>有了想要守护的事物；加油，做个顶天立地的男子汉。</font></p><h2 id="Dec-2020"><a href="#Dec-2020" class="headerlink" title="Dec.2020"></a><em>Dec.2020</em></h2><p><code>12.26</code></p><p>我想要什么？<br>现实是什么样子？<br>那你该怎么做？</p><p>我想30岁前财务自由，之后陪心爱的人旅行，或为人类做些事情。<br>现实，我菜的很，还懒，还不爱说话。</p><p>所以，我要好好努力，戒掉无聊的事情，去守护该守护的东西。</p><hr><p><code>12.27</code></p><p>读书《原则》-Ray Dalio，<a href="https://www.unielu.com/posts/yuanze.html">点我查看摘录</a></p><hr><p><code>12.28</code></p><p>呜呜呜，令人震撼的B站：</p><ul><li>野生钢铁侠：<a href="https://www.bilibili.com/video/BV1jE41137eu" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1jE41137eu</a></li><li>盛世中华：<a href="https://www.bilibili.com/video/BV19E41197Kc" target="_blank" rel="noopener">https://www.bilibili.com/video/BV19E41197Kc</a></li><li>小丑混剪：<a href="https://www.bilibili.com/video/BV1Jb411W7dH" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Jb411W7dH</a></li><li>最爱的钢铁侠：<a href="https://www.bilibili.com/video/BV1J541187Kz" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1J541187Kz</a></li><li>最热血的须臾：<a href="https://www.bilibili.com/video/BV1QK4y1a7Qs" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1QK4y1a7Qs</a></li><li>高端干饭局：<a href="https://www.bilibili.com/video/BV1pA411s71x" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1pA411s71x</a> </li></ul><p>以前可能都打游戏去了，没发现B站这么多宝藏。</p><p>对自己的通透，对美的追求。两者都是我前进的动力。</p><hr><p><code>12.29</code></p><p>观影《美丽心灵》<br>纳什平衡，非合作博弈均衡</p><hr><p><code>12.31</code></p><p>重观《超能陆战队》，2014的神片<br>megabot, electronmag suspension, vinyl, carbonfiber, 84次尝试</p><p>知识积累，和技术积累，量变到质变的过程。<br>DJI的无人机，Boston Dynamics的机器人，666</p><h2 id="Jan-2021"><a href="#Jan-2021" class="headerlink" title="Jan.2021"></a><em>Jan.2021</em></h2><p><code>1.2</code></p><p>读书《黑客与画家》-Paul Graham，阮一峰译，<a href="https://www.unielu.com/posts/hackers_and_painters.html">点我查看摘录</a></p><p>玩游戏《hades》, 挺棒的</p><hr><p><code>1.7</code></p><p>听书《回归故里》<br>论人，论事，到社会阶级，没意思，，，</p><p>左派：通常主张积极改革，主张把旧的意识形态和制度革除，从而建立新的意识形态和制度。<br>右派：一般较为保守，主张稳妥、秩序、渐进、缓慢的改革方式，强调维护旧有传统。</p><hr><p><code>1.9</code></p><p>#随记</p><p>《原则》教会我去寻找有意义的工作和有意义的人际关系<br>《黑客与画家》教会我作为一个手工艺人去创业产生财富<br>《回归故里》告诉我时代背景下的阶级隔阂，知识的可贵</p><p>我还是不太愿意看到我的缺点，即使我已经看见，作为人可难了啊</p><p>人们曾说高中好，目标近乎是唯一的，是啊。<br>可努力想想，高中也只是一般的工作+较有意义的人际关系。</p><p>现在，未来是考研，出国，还是实习，创业？又能干嘛呢？<br>瞬间把人问傻了，还容易产生各种抱怨</p><p>反正世界上各种各样的人、各种各样的事都会有，多见些，多经历，多学习吧</p><p>越想越清楚，也越糊涂，算了不想了</p><p>人生如同在一个个连续的刹那不停起舞，而蓦然四顾时常常惊觉，已经来到这里了吗。</p><p>反正有意义的工作+有意义的人际关系是我想要的，当一个手工艺人去创业是我必须的<br>那就去做吧，未来是肯定要创业的，现在尽力把当下做好。</p><p>大创，本菜鸡要来了，你的皇帝回来了。</p><hr><p><code>1.11</code></p><p>#关于<code>SHA256</code></p><p>SHA-256算法单向Hash函数是密码学和信息安全领域中的一个非常重要的基本算法，它是把任意长的消息转化为较短的、固定长度的消息摘要的算法。</p><p>这个博客的加密算法竟然是这个，在文章<code>password</code>配置中输入64位密文。</p><hr><p><code>1.12</code></p><p>观影《白日梦想家》<br>awesome，这极美的世界，鼻子酸了</p><hr><p><code>1.13-15</code></p><p>观影《自杀小队》，《心灵奇旅》</p><p>I’m going to live every minute of it，and it’s a courage to admit that life is no purpose.<br>Just something can inspair you to do something, and that’s enough!</p><hr><p><code>1.19</code></p><p>vscode， <code>ctrl</code>+<code>shift</code>+<code>f</code>【全局搜索】</p><hr><p><code>1.21</code></p><p><a href="https://space.bilibili.com/254463269?from=search&seid=3520651934376344168" target="_blank" rel="noopener">毕导</a>好有趣啊，<a href="https://www.bilibili.com/video/BV1wC4y1x7c8" target="_blank" rel="noopener">科研的围城</a>，<a href="https://www.bilibili.com/video/BV1MJ411Q7cY" target="_blank" rel="noopener">无聊的发明</a> </p><p>跂而望矣，不如登高之博见。</p><hr><p><code>1.23</code></p><p>观影《超脱》</p><hr><p><code>1.28</code></p><p>能拥有，那些十分重要的人出现在我有限的生命里，<br>真的是一件很荣幸的事。</p><p>好好努力，好好珍惜。</p><hr><p><code>1.31</code></p><p>leetcode 1月打卡完成<br>并查集似乎不那么可怕了</p><h2 id="Feb-2021"><a href="#Feb-2021" class="headerlink" title="Feb.2021"></a><em>Feb.2021</em></h2><p><code>2.9</code></p><p>观影《当幸福来敲门》，没感觉了。。。</p><hr><p><code>2.10-17</code></p><p>#既然离别的时候无可避免，那就早些走吧</p><p>#每段时光，根本没有哪段煎熬，哪段快乐，<br>有的只是，每段时光，都需要转移你的一部分注意力在这上面，<br>上学啊，工作啊，陪伴啊…<br>它们编织出了每个人的一生，如果现在有什么想做的，勇敢点</p><p>#差距其实并不可怕，不管怎样都会是自己的一生。<br>有时，求之不得与求而得之，又有什么呢？<br>一些东西，本来就只是一些东西。</p><p>#每个圈子，每个层次都会有他们的快乐。<br>我们不是他们，更没有权力评价他们的庸俗与高雅。<br>也是被讨厌的勇气里说的，这些都是别人的课题</p><p>#弃子文化<br>感受最深的时候，是在白天，太阳最照人的时候，<br>郁郁燥燥的气息，蓝天穹顶之下，一切仿佛一场梦，<br>一切都逐渐消失在过去</p><p>#还遇见好多坟墓<br>有的山，一面的坟墓，大概有几十座，实在不好形容<br>有的坟墓，只有一座，旁边却预留出了合葬的位置<br>生命到底是什么，我只能说，是一个人的现在，以及他想要去完成的事。</p><p>#还遇见一棵绝美的桃树，<br>远处，山林的绿色之中，她，<br>平静地出现在一片平地上，紫红色的身影<br>怪不得古诗中会有那么多桃花，她好美啊</p><p>#还遇见一个大眼睛的小女孩，<br>吃饭时，我把盘子放在了对面，<br>她：“这鸡腿怎么跑到对面去了啊？我夹都夹不到。”</p><hr><p><code>2.18</code></p><p>人总是希望通过忙碌来充实生命，寻找真实，</p><p>但把自己交给繁忙，得到的却是踏实，不是真实。</p><p>什么是真实？</p><p>你做什么，和谁在一起，你看到什么，听到什么，有一种从心灵深处满溢出来的不懊悔也不羞愧的平和和喜悦。那就是真实。</p><p><font color="#88cb7f" size=5>纵使是须臾，当下的真实，也值得你鼓起勇气去面对。</font></p><p align="right">to 19 岁生日</p><p>最后，感谢这些年的时光，以及每个人的生命长河与我的交集。</p><hr><p><code>2.23</code></p><p>开始了，又要开始了，hhh~</p><hr><p><code>2.24-25</code></p><p>观影《少年派的奇幻漂流》，<br>那段暴风雨中，一个凡人勇敢得像个神明。。。</p><p>二刷《白日梦想家》<br>以后浪漫一些，勇敢一些<br>好多时候感觉我好呆啊</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>言</title>
      <link href="posts/54fe.html"/>
      <url>posts/54fe.html</url>
      
        <content type="html"><![CDATA[<h1 id="澜"><a href="#澜" class="headerlink" title="澜"></a>澜</h1><hr><p><code>1</code><font size='4' face="Consolas">People come and go, we struggled with laughter and tears, and all the years have gone by, still I have you by my side.</font></p><p align="right">————《龙族》</p><hr><p><code>2</code><font size='5' face="myfont">离你越远，我爱你越深，我不禁叩问我自己，我所期望的究竟是幸福，还是走向幸福的过程.</font></p><p align="right">————佚名</p><hr><p><code>3</code><font size='5' face="myfont">那错过的人，那离去的脚步，那渐行渐远的路，就像是眼前的梧桐叶轻轻地飘落。</font></p><p align="right">————佚名</p><hr><p><code>4</code><font size='5' face="myfont">许多事在年少时想得很好，但真正到那一天来临，却又是另一番情景，生活不断为我们打折扣，送来沮丧。这就是真实的生活，幢憬再美丽，那也不可能为真，终究要面对。</font></p><p align="right">————佚名</p><hr><p><code>5</code><font size='5' face="myfont">有些事情即便可以从头再来，也很难再回到原点。纵然是相同的道路，人生可以两次路过，也不再会有原来的感觉。那些都是过去的事情了，人要向前走。</font></p><p align="right">————佚名</p><hr><p><code>6</code><font size='5' face="myfont">世上哪有什么天才，只有孜孜不倦的顽童。</font><br><font size='5' face="myfont">世上哪有什么完美，只有持之以恒的扮演。</font></p><p align="right">————佚名</p><hr><p><code>7</code><br><font size='4' face="Consolas">  How strange is the lot of us mortals! Each of us is here for a brief sojourn; for what purpose be knows not, though he sometimes thinks he senses it. But without deeper reflection one knows from daily life that one exists for other people-first of all for those upon whose smiles and well-being our own happiness is wholly dependent, and then for the many, unknown to us, to whose destinies we are bound by the ties of sympathy.</font></p><p align="right">————爱因斯坦</p><p><font size='4' face="Consolas">  A man can do what he wants, but not want what he wants. It has been a continual consolation in the face of life’s hardships.</font></p><p align="right">————爱因斯坦</p><hr><p><code>8</code><br><font size='5' face="myfont">“自己”这个东西是看不见的，撞上一些别的什么，</font><br><font size='5' face="myfont">反弹回来，才会了解“自己”</font><br><font size='5' face="myfont">所以，跟很强的东西相碰撞</font><br><font size='5' face="myfont">然后才“自己”是什么，这才是自我。</font></p><p align="right">————山本耀司</p><hr><p><code>9</code><br><font size='5' face="myfont">其实这个东西还是随缘。。做好自己就挺好的，总有人看得到你的优点，不用太刻意的。</font></p><p align="right">————同学</p><hr><p><code>10</code><br><font face="myfont" size=5>人生就像是在每一个瞬间连续起舞，暮然四顾时常常惊觉：“已经到这里了吗？”</font></p><p align="right">————《被讨厌的勇气》</p><h1 id="沧"><a href="#沧" class="headerlink" title="沧"></a>沧</h1><p><code>1</code><br><font face="myfont" size=5>纵使被说坏话、被讨厌，也没有什么好在意的，因为“对方如何看待你”，那是对方的课题，擅自背负别人的课题，只会让自己感到痛苦</font></p><p align="right">————《被讨厌的勇气》</p><p><code>2</code><br><font face="myfont" size=5>经历了这么多，才渐渐发觉：一切都会过去，因为凡是存在的终将逝去</font></p><p align="right">————佚名</p><h1 id="网易云"><a href="#网易云" class="headerlink" title="网易云"></a>网易云</h1><hr><p><code>1</code><br><font size='5' face="SimSun">弟子问老师：“您能谈谈人类的奇怪之处吗？”</font><br><font size='5' face="SimSun">老师答道：“他们急于成长，然后又哀叹失去的童年；他们以健康换取金钱，不久后又想用金钱恢复健康。他们对未来焦虑不已，却又无视现在的幸福。因此，他们既不活在当下，也不活在未来.他们活着仿佛从来不会死亡。临死前，又仿佛从未活过。”</font></p><hr><p><code>2</code><br><font size='5' face="SimSun">罗曼·罗兰有句名言，“世上只有一种英雄主义，就是在认清生活真相之后依然热爱生活。” 这种英雄主义最初级的表现形态就是——即使有被拒绝的可能，我依然要表达心中的想法。 一见钟情并非不靠谱，不好意思，刚认识就喜欢你。 喜欢你就要告诉你，大不了连朋友都做不成，反正我不缺朋友，只缺你。</font></p><hr><h1 id="豆瓣"><a href="#豆瓣" class="headerlink" title="豆瓣"></a>豆瓣</h1><h1 id="知乎"><a href="#知乎" class="headerlink" title="知乎"></a>知乎</h1><p><code>1</code><br><font size='5' face="myfont">不要轻易给如何人贴标签，人非圣贤，孰能无过，不要因为一个人的缺点而去否定其所有的优点。</font><br><font size='5' face="myfont">在看待一个人的时候，要回归到他最原始的属性上：他是个人。</font></p><p align="right">————知乎</p><hr><p><code>2</code><font size='5' face="myfont">在可预见的未来，人类都不可能参透生死和永恒，但即便须臾，我还是想多知道一点，多看一点，把世事里灰色区域的面积，尽量多挤压一点，使之变得黑白分明，是非可见。</font></p><p align="right">————知乎</p><hr><p><code>3</code><font size='5' face="myfont">期望值管理能力：Happiness=reality-expectations</font></p><p align="right">————知乎</p><hr><p><code>4</code><font size='5' face="myfont">突然不喜欢一个人，是什么感觉？</font><br><font size='5' face="myfont">他本来浑身是光。有那么一瞬间，突然就黯淡了，成为宇宙里一颗尘埃。我努力回想起他全身是光的样子，却怎么也想不起来。</font><br><font size='5' face="myfont">后来才慢慢发觉，那是我见到他时，我眼里的光。</font></p><p align="right">————知乎</p><hr><h1 id=""><a href="#" class="headerlink" title="~~"></a>~~</h1><p><font size='5' face="myfont">有时候我们所追求的，并不是一个结果。</font></p><p><font size='5' face="myfont">一但只追求结果，就容易想方设法抄近路。</font></p><p><font size='5' face="myfont">在抄近路的途中，人又容易迷失真相。</font></p><p><font size='5' face="myfont">慢慢地，做事的干劲也会消磨殆尽。</font></p><p><font size='5' face="myfont">所以有些时候，更重要的是：想要追求真相的意志。</font></p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 独立思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硬件</title>
      <link href="posts/d6d0.html"/>
      <url>posts/d6d0.html</url>
      
        <content type="html"><![CDATA[<h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><p><strong>CMOS</strong> (Complementary Metal Oxide Semiconducto)，互补金属氧化物半导体。它是指制造大规模集成电路芯片用的一种技术或用这种技术制造出来的芯片，是电脑主板上的一块可读写的RAM芯片。</p><p><strong>FPGA</strong>（Field Programmable Gate Array）是在PAL、GAL等可编程器件的基础上进一步发展的产物。它是作为专用集成电路（ASIC）领域中的一种半定制电路而出现的。</p><p><strong>MCU</strong> (Microcontroller Unit)，又称单片微型计算机(Single Chip Microcomputer )或者单片机，是把CPU的频率与规格做适当缩减，并将内存(memory)、计数器(Timer)、USB、A/D转换、UART、PLC、DMA等周边接口，甚至LCD驱动电路都整合在单一芯片上，形成芯片级的计算机。</p><p><strong>SoC</strong> (System on Chip)</p><p><strong>NPU</strong> (Neural-network Processing Unit)</p><p><strong>GND</strong> (Ground)代表地线或0线.GND就是公共端的意思，也可以说是地。但这个地并不是真正意义上的地。是出于应用而假设的一个地，对于电源来说，它就是一个电源的负极。它与大地是不同的。</p><p><strong>PID控制</strong>（<code>比例-积分-微分控制</code>）仍然是在工业控制中应用得最为广泛的一种控制方法。</p><p>在电子电路中，<strong>VCC</strong>是电路的供电电压, <strong>VDD</strong>是芯片的工作电压。<br><strong>VSS</strong>：S=series 表示公共连接的意思，通常指电路公共接地端电压；</p><p><strong>耦合</strong> (Coupling)，就是把某一电路的能量输送（或转换）到其他的电路中去。</p><p><strong>电感器</strong> (Inductor)，是能够把电能转化为磁能而存储起来的元件</p><p><strong>译码器</strong> (decoder)是一类多输入多输出组合逻辑电路器件，其可以分为：变量译码和显示译码两类。</p><h2 id="other"><a href="#other" class="headerlink" title="other"></a><em>other</em></h2><p>常见的芯片封装方式</p><ul><li>TO封装</li><li>DIP封装，双列直插式封装，如51单片机</li><li>SOP封装，贴片式封装  –&gt; QFP封装</li><li>BGP封装，球状焊点</li></ul><p><code>2021.3.21</code><br>做完这个平衡手机架的大创项目，就告别硬件了（不想去开会，不想被限制，资源环境不够好，www~），需要的时候、有想法的时候、物联网兴起的时候再去学习。<br>1没资源、资料少，<br>2现在更想去学软件，python高端方向等，opencv，脚本、软件开发，前端，实习等，去开发应用，学习算法</p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino语言基础</title>
      <link href="posts/2199.html"/>
      <url>posts/2199.html</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title="preface"></a><em>preface</em></h2><p>社区教程：<a href="https://www.arduino.cn/thread-1066-1-1.html" target="_blank" rel="noopener">https://www.arduino.cn/thread-1066-1-1.html</a><br>官方文档：<a href="https://www.arduino.cc/reference/en/" target="_blank" rel="noopener">https://www.arduino.cc/reference/en/</a><br>函数参考：<a href="https://wiki.arduino.cn/" target="_blank" rel="noopener">https://wiki.arduino.cn/</a></p><p><strong>Arduino的语言</strong> = C/CPP的封装 + API</p><h2 id="一、项目结构"><a href="#一、项目结构" class="headerlink" title="一、项目结构"></a>一、项目结构</h2><h3 id="setup"><a href="#setup" class="headerlink" title="setup()"></a>setup()</h3><p>Arduino控制器<strong>通电或复位</strong>后，即会开始执行setup() 函数中的程序，该部分只会执行一次。<br>通常我们会在setup() 函数中<strong>完成Arduino的初始化设置，如配置I/O口状态，初始化串口等</strong>操作。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 给13号引脚连接的设备设置一个别名“led”</span><span class="token keyword">int</span> led <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在板子启动或者复位重启后， setup部分的程序只会运行一次</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 将“led”引脚设置为输出状态</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span>led<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// setup部分程序运行完后，loop部分的程序会不断重复运行</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>led<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 点亮LED</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 等待一秒钟</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>led<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 通过将引脚电平拉低，关闭LED</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 等待一秒钟</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="loop"><a href="#loop" class="headerlink" title="loop()"></a>loop()</h3><p>在setup() 函数中的程序执行完后，Arduino会接着执行loop() 函数中的程序。而loop()函数是一个死循环，其中的程序会不断的重复运行。<br>通常我们会在loop() 函数中<strong>完成程序的主要功能，如驱动各种模块，采集数据等</strong>。</p><h3 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h3><p>在进行Arduino开发时，没有像传统C/C++程序使用入口函数main。实际上<strong>main函数存在于Arduino核心库中，且仍然是程序的入口</strong>。<br>在Arduino核心库中可见main.cpp文件，其内容如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Arduino.h></span></span><span class="token comment" spellcheck="true">// Declared weak in Arduino.h to allow user redefinitions.</span><span class="token keyword">int</span> <span class="token function">atexit</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> <span class="token comment" spellcheck="true">/*func*/</span> <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Weak empty variant initialization function.</span><span class="token comment" spellcheck="true">// May be redefined by variant files.</span><span class="token keyword">void</span> <span class="token function">initVariant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>weak<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">initVariant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">setupUSB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>weak<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setupUSB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initVariant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> defined(USBCON)</span>    USBDevice<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//进行串口事件判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>serialEventRun<span class="token punctuation">)</span> <span class="token function">serialEventRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、数字输入输出"><a href="#二、数字输入输出" class="headerlink" title="二、数字输入输出"></a>二、数字输入输出</h2><h3 id="pinMode-pin-mode"><a href="#pinMode-pin-mode" class="headerlink" title="pinMode(pin, mode)"></a>pinMode(pin, mode)</h3><p>在使用输入或输出功能前，你需要先通过pinMode() 函数<strong>配置引脚的模式</strong>为输入模式或输出模式。</p><ul><li>参数<code>pin</code>为指定配置的引脚编号</li><li>参数<code>mode</code>为指定的配置模式</li><li>通常可用模式有三种:<ul><li><strong>INPUT</strong> 输入模式</li><li><strong>OUTPUT</strong> 输出模式</li><li><strong>INPUT_PULLUP</strong> 输入上拉模式</li></ul></li></ul><h3 id="digitalWrite-pin-value"><a href="#digitalWrite-pin-value" class="headerlink" title="digitalWrite(pin, value)"></a>digitalWrite(pin, value)</h3><p>引脚配置成输出模式后，可使用digitalWrite() 让其输出高电平或者是低电平。</p><p>Arduino中输出的低电平为0V，输出的高电平为当前Arduino的工作电压。</p><h3 id="digitalRead-pin"><a href="#digitalRead-pin" class="headerlink" title="digitalRead(pin)"></a>digitalRead(pin)</h3><p>返回得到的信号状态。</p><h2 id="三、模拟输入输出"><a href="#三、模拟输入输出" class="headerlink" title="三、模拟输入输出"></a>三、模拟输入输出</h2><h3 id="analogRead-pin"><a href="#analogRead-pin" class="headerlink" title="analogRead(pin)"></a>analogRead(pin)</h3><p>模拟输入引脚是带有ADC（Analog-to-Digital Converter，模数转换器）功能的引脚。</p><p>它可以将外部输入的模拟信号转换为芯片运算时可以识别的数字信号，从而实现<strong>读入模拟值</strong>的功能。</p><p>Arduino Uno模拟输入功能有10位精度，即可以将0～5V的电压信号转换为0～1023的整数形式表示。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//光敏电阻检测环境光</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 初始化串口</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 读出当前光线强度，并输出到串口显示</span>  <span class="token keyword">int</span> sensorValue <span class="token operator">=</span> <span class="token function">analogRead</span><span class="token punctuation">(</span>A0<span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sensorValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="analogWrite-pin-value"><a href="#analogWrite-pin-value" class="headerlink" title="analogWrite(pin,value)"></a>analogWrite(pin,value)</h3><p>使用analogWrite() 函数实现PWM（脉冲宽度调制，一种模拟控制的方法）<strong>输出</strong>功能。<br>在Arduino Uno中，提供PWM功能的引脚为3、5、6、9、10、11。</p><p>在analogWrite() 和analogRead() 函数内部，已经完成了引脚的初始化，因此不用在Setup() 函数中进行初始化操作。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*Fading通过analogWrite() 函数实现呼吸灯效果*/</span><span class="token keyword">int</span> ledPin <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// LED连接在9号引脚上</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// Setup部分不进行任何处理</span><span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 从暗到亮，以每次加5的形式逐渐亮起来</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> fadeValue <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> fadeValue <span class="token operator">&lt;=</span> <span class="token number">255</span><span class="token punctuation">;</span> fadeValue <span class="token operator">+</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 输出PWM</span>    <span class="token function">analogWrite</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> fadeValue<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 等待30ms，以便观察到渐变效果</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 从亮到暗，以每次减5的形式逐渐暗下来</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> fadeValue <span class="token operator">=</span> <span class="token number">255</span> <span class="token punctuation">;</span> fadeValue <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> fadeValue <span class="token operator">-</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 输出PWM</span>    <span class="token function">analogWrite</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> fadeValue<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 等待30ms，以便观察到渐变效果</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、高级输入输出"><a href="#四、高级输入输出" class="headerlink" title="四、高级输入输出"></a>四、高级输入输出</h2><h3 id="tone"><a href="#tone" class="headerlink" title="tone()"></a>tone()</h3><p>tone() 主要用于Arduino连接蜂鸣器或扬声器发声。</p><h3 id="noTone-pin"><a href="#noTone-pin" class="headerlink" title="noTone(pin)"></a>noTone(pin)</h3><p>停止指定引脚上的方波输出。</p><p>实例程序：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*MelodyPlays a melody This example code is in the public domain.http://arduino.cc/en/Tutorial/Tone*/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"pitches.h"</span></span><span class="token comment" spellcheck="true">// 记录曲子的音符</span><span class="token keyword">int</span> melody<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  NOTE_C4<span class="token punctuation">,</span> NOTE_G3<span class="token punctuation">,</span>NOTE_G3<span class="token punctuation">,</span> NOTE_A3<span class="token punctuation">,</span> NOTE_G3<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> NOTE_B3<span class="token punctuation">,</span> NOTE_C4<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 音符持续时间  4为四分音符， 8为八分音符</span><span class="token keyword">int</span> noteDurations<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 遍历整个曲子的音符</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> thisNote <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> thisNote <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> thisNote<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// noteDurations[]数组中存储的是音符的类型</span><span class="token comment" spellcheck="true">// 我们需要将其换算为音符持续时间，方法如下：</span>    <span class="token comment" spellcheck="true">// 音符持续时间=1000ms / 音符类型</span>    <span class="token comment" spellcheck="true">// 例如，四分音符=1000 / 4，8分音符 = 1000/8</span>    <span class="token keyword">int</span> noteDuration <span class="token operator">=</span> <span class="token number">1000</span><span class="token operator">/</span>noteDurations<span class="token punctuation">[</span>thisNote<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">tone</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> melody<span class="token punctuation">[</span>thisNote<span class="token punctuation">]</span><span class="token punctuation">,</span>noteDuration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 为了能辨别出不同的音调，你需要在两个音调间设置一定的延时</span>    <span class="token comment" spellcheck="true">// 增加30%延时时间是比较合适的</span>    <span class="token keyword">int</span> pauseBetweenNotes <span class="token operator">=</span> noteDuration <span class="token operator">*</span> <span class="token number">1.30</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span>pauseBetweenNotes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 停止发声</span>    <span class="token function">noTone</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 程序并不重复，因此这里为空</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pulseln（pin-value）"><a href="#pulseln（pin-value）" class="headerlink" title="pulseln（pin,value）"></a>pulseln（pin,value）</h3><p>检测指定引脚上的<strong>脉冲信号宽度</strong>。单位微秒</p><h3 id="外部中断"><a href="#外部中断" class="headerlink" title="外部中断"></a>外部中断</h3><ul><li><code>attachInterrupt(pin, ISR, mode)</code><ul><li>对中断引脚进行初始化配置，以开启外部中断功能</li><li>参数说明：<ul><li>pin：中断引脚</li><li>ISR：中断函数名</li><li>mode：中断模式，有 <code>CHANGE</code> <code>LOW</code> <code>HIAH</code></li></ul></li></ul></li><li><code>detachInterrupt(pin)</code><ul><li>关闭中断功能</li></ul></li></ul><p>中断函数（响应中断的处理函数），不能带任何参数，返回类型为空</p><h2 id="五、时间控制"><a href="#五、时间控制" class="headerlink" title="五、时间控制"></a>五、时间控制</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>millis()</code></td><td>获取Arduino通电后（或复位后）到现在的时间，单位：ms</td></tr><tr><td><code>delay()</code></td><td>参数为时长，类型unsigned long，单位毫秒：ms</td></tr></tbody></table><h2 id="六、串口通信"><a href="#六、串口通信" class="headerlink" title="六、串口通信"></a>六、串口通信</h2><h3 id="Serial-begin-speed"><a href="#Serial-begin-speed" class="headerlink" title="Serial.begin(speed)"></a>Serial.begin(speed)</h3><p>使用串口与计算机通信时，需要<strong>先初始化</strong>Arduino的串口通信功能。<br>参数speed指串口通信波特率，常用波特率：300、600、1200、2400、4800、9600、14400、19200、28800、38400、57600、115200</p><h3 id="available"><a href="#available" class="headerlink" title="available()"></a>available()</h3><p>返回串口接收缓冲区中的字节数（可读取的字节数）。接受缓冲区最多可保存64 bytes的数据。</p><h3 id="print"><a href="#print" class="headerlink" title="print()"></a>print()</h3><p>串口初始化完成后，我们便可以使用 <code>Serial.print(val)</code> 或<code>Serial.println(val)</code> 向计算机发送信息了。<br><code>println(val)</code>会在输出完指定数据后，再输出一组回车换行符。</p><table><thead><tr><th>其它函数</th><th>说明</th></tr></thead><tbody><tr><td><code>Serial.find(target)</code></td><td>返回值布尔型</td></tr><tr><td><code>Serial.findUntil(target, terminal)</code></td><td>从串口缓冲区读取数据，直到读取到指定的字符串或指定的停止符。</td></tr><tr><td><code>Serial.flush()</code></td><td>等待正在发送的数据发送完成</td></tr><tr><td><code>Serial.peek()</code></td><td>返回1字节的数据，但不会从接受缓冲区删除该数据。</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> counter<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 计数器</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 初始化串口</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 每loop循环一次，计数器变量加1</span>  counter <span class="token operator">=</span> counter<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 输出变量</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 输出字符</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>‘<span class="token punctuation">:</span>’<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 输出字符串;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hellow World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h3><p>调用该语句，每次都会返回<strong>一个字节</strong>的数据，这个返回值便是当前串口读取到的数据。</p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino实践基础</title>
      <link href="posts/2198.html"/>
      <url>posts/2198.html</url>
      
        <content type="html"><![CDATA[<p><strong><em>preface</em></strong><br>参考资料：<a href="https://www.jianshu.com/u/9dcb33c9d805" target="_blank" rel="noopener">https://www.jianshu.com/u/9dcb33c9d805</a></p><p><a href="https://www.bilibili.com/video/BV13A411E74V/?spm_id_from=333.788.videocard.4" target="_blank" rel="noopener">推荐：简要介绍arduino的视频</a>，一个开源的硬件软件平台</p><h2 id="开发板"><a href="#开发板" class="headerlink" title="开发板"></a>开发板</h2><p>Arduino Uno R3，淘宝正版120左右，但其硬件和原理图都是开源的，需要的可以支持正版。</p><p>其硬件资源配置：<br><img src="https://img-blog.csdnimg.cn/20210429215540537.png" /></p><hr><p><strong>LED指示灯说明：</strong></p><p><strong>ON：</strong><br>电源指示灯。当Arduino通电时，ON灯会点亮。</p><p><strong>TX：</strong><br>串口发送指示灯。当使用USB连接到计算机且Arduino向计算机传输数据时，TX灯会点亮。</p><p><strong>RX：</strong><br>串口接收指示灯。当使用USB连接到计算机且Arduino接收到计算机传来的数据时，RX灯会点亮。</p><p><strong>L：</strong><br>可编程控制指示灯。该LED通过特殊电路连接到Arduino的13号引脚，当13号引脚为高电平或高阻态时，该LED 会点亮；低电平时，不会点亮。可以通过程序或者外部输入信号，控制该LED亮灭。</p><hr><p><strong>引脚说明：</strong></p><p><strong>Power 引脚</strong><br>开发板可提供3.3V和5V电压输出，Vin引脚可用于从外部电源为开发板供电。</p><p><strong>Analog In引脚</strong><br>模拟输入引脚，开发板可读取外部模拟信号，A0~A5为模拟输入引脚。</p><p><strong>Digital 引脚</strong><br>UNO R3拥有14个数字I/O引脚，其中6个可用于PWM(脉宽调制)输出。数字引脚用于读取逻辑值(0或1)，或者作为数字输出引脚来驱动外部模块。标有”~“的引脚可产生PWM。</p><p><strong>TX和RX引脚</strong><br>标有TX(发送)和RX(接收)的两个引脚用于串口通讯。其中标有TX和RX的LED灯连接相应引脚，在串口通讯时会以不同速度闪烁。</p><p><strong>13引脚</strong><br>开发板标记第13引脚，连接板载LED灯，可通过控制13引脚来控制LED灯亮灭。一般拿到开发板上电板载灯都会闪烁，可辅助检测开发板是否正常。<code>4.29</code>：某宝正版，橙色灯一直闪烁，应该是正常的。</p><hr><h2 id="基础器件"><a href="#基础器件" class="headerlink" title="基础器件"></a>基础器件</h2><p><code>1</code>红外遥控的使用：<a href="https://www.jianshu.com/p/5add4c666983" target="_blank" rel="noopener">https://www.jianshu.com/p/5add4c666983</a></p><p><code>2</code>蜂鸣器的使用：<a href="https://www.jianshu.com/p/eae823cc343a" target="_blank" rel="noopener">https://www.jianshu.com/p/eae823cc343a</a></p><hr><p><code>3</code>MPU6050的使用：<a href="https://www.cnblogs.com/zhoug2020/p/7636742.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhoug2020/p/7636742.html</a></p><p>MPU6050的数据获取、分析与处理：<a href="https://blog.csdn.net/jickjiang/article/details/84237863" target="_blank" rel="noopener">https://blog.csdn.net/jickjiang/article/details/84237863</a></p><p>扫盲：<a href="https://blog.csdn.net/zuoheizhu/article/details/96697274" target="_blank" rel="noopener">https://blog.csdn.net/zuoheizhu/article/details/96697274</a></p><p>MPU6050是一种非常流行的空间运动传感器芯片，可以获取器件当前的三个加速度分量和三个旋转角速度。</p><p>使用集成的MPU6050模块。MPU6050的数据接口用的是I2C总线协议，因此我们需要Wire程序库的帮助来实现Arduino与MPU6050之间的通信。</p><hr><p><strong>陀螺仪</strong>（Gyroscope、GYRO-Sensor）也叫地感器，传统结构是内部有个陀螺，如下图所示（三轴陀螺），三轴陀螺仪的工作原理是通过测量三维坐标系内陀螺转子的垂直轴与设备之间的夹角，并计算角速度，通过夹角和角速度来判别物体在三维空间的运动状态。三轴陀螺仪可以同时测定上、下、左、右、前、后等6个方向（合成方向同样可分解为三轴坐标），最终可判断出设备的移动轨迹和加速度。</p><p>也就是说陀螺仪通过测量自身的旋转状态，判断出设备当前运动状态，是向前、向后、向上、向下、向左还是向右呢，是加速（角速度）还是减速（角速度）呢，都可以实现，但是要判断出设备的方位（东西南北），陀螺仪就没有办法。</p><p><strong>加速计</strong>（Accelerometer、G-Sensor）也叫重力感应器，实际上是可以感知任意方向上的加速度（重力加速度则只是地表垂直方向加速度），加速计通过测量组件在某个轴向的受力情况来得到结果，表现形式为轴向的加速度大小和方向（XYZ），这一点又有点类似于陀螺仪，但陀螺仪的更多关注自身旋转情况（原位运动），加速计则主要是测量设备的受力情况，也就是三轴运动情况，尽管加速计也可能在某个小范围换算出角速度的可能，但设计原理决定似乎更适合于空间运动判断。</p><p>两者看起来很接近，不过加速度计只能侦测物体的移动行为，并不具备精确侦测物体角度改变的能力，陀螺仪可以侦测物体水平改变的状态，但无法计算物体移动的激烈程度。</p><hr><p>数据格式：</p><ul><li>0x3B，加速度计的X轴分量ACC_X</li><li>0x3D，加速度计的Y轴分量ACC_Y</li><li>0x3F，加速度计的Z轴分量ACC_Z</li><li>0x41，当前温度TEMP</li><li>0x43，绕X轴旋转的角速度GYR_X</li><li>0x45，绕Y轴旋转的角速度GYR_Y</li><li>0x47，绕Z轴旋转的角速度GYR_Z</li></ul><hr><p><code>4</code>舵机控制：<a href="https://www.jianshu.com/p/f3fee0082519" target="_blank" rel="noopener">https://www.jianshu.com/p/f3fee0082519</a></p><p><code>5</code>步进电机：<a href="https://www.jianshu.com/p/877006ab4859" target="_blank" rel="noopener">https://www.jianshu.com/p/877006ab4859</a></p><p><code>7</code>继电器控制：<a href="https://www.jianshu.com/p/81ff85cbd82e" target="_blank" rel="noopener">https://www.jianshu.com/p/81ff85cbd82e</a></p><hr><p><code>6</code> L9110s四路直流电机驱动板</p><p>arduino上数字引脚动不了直流减速电机<br>试一下用驱动板控制，没</p><hr><p><code>7</code> 超声波模块</p><p><a href="https://www.arduino.cn/thread-3194-1-1.html" target="_blank" rel="noopener">https://www.arduino.cn/thread-3194-1-1.html</a></p><p>关于gnd没接时有数据：<br>GND作为参考电平在系统互联通讯时是一定要接的<br>也可能是某些信号线和GND之间的耦合代替了GND的作用<br>但这绝对是不正确的接法</p><hr><p><code>8</code>编码器（encoder）是将信号（如比特流）或数据进行编制、转换为可用以通讯、传输和存储的信号形式的设备。编码器把角位移或直线位移转换成电信号，前者称为码盘，后者称为码尺。</p><hr><p><code>9</code> 语音识别模块 LD3320</p><p>淘宝地址：<a href="https://detail.tmall.com/item.htm?id=41365254224&amp;spm=a1z09.2.0.0.67932e8dIj7xuu&amp;_u=62029c35dmffd0" target="_blank" rel="noopener">https://detail.tmall.com/item.htm?id=41365254224&amp;spm=a1z09.2.0.0.67932e8dIj7xuu&amp;_u=62029c35dmffd0</a></p><p>供电电压：5V<br>IO口输出：高电平3.3V<br>通信方式：串口通信（不支持max232，RS485）</p><p>+继电器=语音开关，可用于智能家居</p><hr><p><code>10</code> MPU6050<br>淘宝地址：<a href="https://detail.tmall.com/item.htm?id=608978882219&amp;spm=a1z09.2.0.0.67932e8dIj7xuu&amp;_u=62029c35dm8cce" target="_blank" rel="noopener">https://detail.tmall.com/item.htm?id=608978882219&amp;spm=a1z09.2.0.0.67932e8dIj7xuu&amp;_u=62029c35dm8cce</a></p><p>三轴陀螺仪+三轴加速计<br>通信方式：标准IIC通信协议</p><p><strong>Arduino教程</strong>：MPU6050的数据获取、分析与处理：<a href="https://zhuanlan.zhihu.com/p/20082486" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/20082486</a></p><hr><p><code>11</code> HC06蓝牙模块</p><p><code>12</code> 2.4inch tft屏幕，16个引脚要接（不加sd卡），鸡肋</p><hr><p><strong>其它</strong>：<br>树莓派教程：<a href="https://shumeipai.nxez.com/hot-explorer" target="_blank" rel="noopener">https://shumeipai.nxez.com/hot-explorer</a></p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记219</title>
      <link href="posts/contest219.html"/>
      <url>posts/contest219.html</url>
      
        <content type="html"><![CDATA[<h2 id="三、石子游戏-VII"><a href="#三、石子游戏-VII" class="headerlink" title="三、石子游戏 VII"></a>三、石子游戏 VII</h2><p>石子游戏中，爱丽丝和鲍勃轮流进行自己的回合，<strong>爱丽丝先开始</strong> 。</p><p>有 n 块石子排成一排。每个玩家的回合中，可以从行中 <strong>移除</strong> 最左边的石头或最右边的石头，并获得与该行中剩余石头值之 <strong>和</strong> 相等的得分。当没有石头可移除时，得分较高者获胜。</p><p>鲍勃发现他总是输掉游戏（可怜的鲍勃，他总是输），所以他决定尽力 <strong>减小得分的差值</strong> 。爱丽丝的目标是最大限度地 <strong>扩大得分的差值</strong> 。</p><p>给你一个整数数组 <code>stones</code> ，其中 <code>stones[i]</code> 表示 <strong>从左边开始</strong> 的第 <code>i</code> 个石头的值，如果爱丽丝和鲍勃都 <strong>发挥出最佳水平</strong> ，请返回他们 <strong>得分的差值</strong> </p><hr><p><strong>输入</strong>：stones = <code>[5,3,1,4,2]</code><br><strong>输出</strong>：<code>6</code><br><strong>解释</strong>：</p><ul><li>爱丽丝移除 2 ，得分 5 + 3 + 1 + 4 = 13 。游戏情况：爱丽丝 = 13 ，鲍勃 = 0 ，石子 = <code>[5,3,1,4]</code> 。</li><li>鲍勃移除 5 ，得分 3 + 1 + 4 = 8 。游戏情况：爱丽丝 = 13 ，鲍勃 = 8 ，石子 = <code>[3,1,4]</code> 。</li><li>爱丽丝移除 3 ，得分 1 + 4 = 5 。游戏情况：爱丽丝 = 18 ，鲍勃 = 8 ，石子 = <code>[1,4]</code> 。</li><li>鲍勃移除 1 ，得分 4 。游戏情况：爱丽丝 = 18 ，鲍勃 = 12 ，石子 = <code>[4]</code> 。</li><li>爱丽丝移除 4 ，得分 0 。游戏情况：爱丽丝 = 18 ，鲍勃 = 12 ，石子 = <code>[]</code> 。<br>得分的差值 18 - 12 = <code>6</code> 。</li></ul><hr><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">stoneGameVII</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stones<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>stones<span class="token punctuation">)</span>        sum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            sum<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> stones<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> sum<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>l<span class="token punctuation">]</span>        @cache        <span class="token keyword">def</span> <span class="token function">dp</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> l <span class="token operator">==</span> r<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token keyword">return</span> max<span class="token punctuation">(</span>get<span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">-</span> dp<span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> get<span class="token punctuation">(</span>l<span class="token punctuation">,</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> dp<span class="token punctuation">(</span>l<span class="token punctuation">,</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ans <span class="token operator">=</span> dp<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        dp<span class="token punctuation">.</span>cache_clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># copy </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、堆叠长方体的最大高度"><a href="#四、堆叠长方体的最大高度" class="headerlink" title="四、堆叠长方体的最大高度"></a>四、堆叠长方体的最大高度</h2><p>给你 <code>n</code> 个长方体 <code>cuboids</code> ，其中第 <code>i</code> 个长方体的长宽高表示为 <code>cuboids[i] = [widthi, lengthi, heighti]</code>（下标从 <code>0</code> 开始）。请你从 <code>cuboids</code> 选出一个 <strong>子集</strong> ，并将它们堆叠起来。</p><p>如果 <code>widthi &lt;= widthj</code> 且 <code>lengthi &lt;= lengthj</code> 且 <code>heighti &lt;= heightj</code> ，你就可以将长方体 <code>i</code> 堆叠在长方体 <code>j</code> 上。你可以通过旋转把长方体的长宽高重新排列，以将它放在另一个长方体上。</p><p>返回 <strong>堆叠长方体</strong> <code>cuboids</code> 可以得到的 <strong>最大高度</strong> </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxHeight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cuboids<span class="token punctuation">)</span><span class="token punctuation">:</span>        new_cuboids <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> cuboids<span class="token punctuation">:</span>            new_cuboids<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        cuboids <span class="token operator">=</span> new_cuboids        n <span class="token operator">=</span> len<span class="token punctuation">(</span>cuboids<span class="token punctuation">)</span>        cuboids<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cuboids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> cuboids<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>cuboids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">and</span> cuboids<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> cuboids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">and</span> cuboids<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> cuboids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>cuboids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># copy</span><span class="token comment" spellcheck="true"># 像 dp 中最长上升子序列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><p>石子游戏：<a href="https://leetcode-cn.com/problems/stone-game/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/stone-game/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语言学基础</title>
      <link href="posts/yuyan.html"/>
      <url>posts/yuyan.html</url>
      
        <content type="html"><![CDATA[<h2 id="语音"><a href="#语音" class="headerlink" title="语音"></a>语音</h2><p><img src="https://img-blog.csdnimg.cn/20201222212425676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70"></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><img src="https://img-blog.csdnimg.cn/20201222212427328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70"></p><p><strong>课堂练习</strong></p><p><code>判定下列词的构成方式，并指出是单纯词还是合成词。</code></p><p>天地        冷战        踢开<br>失明        海啸        老鹰<br>傻子        吩咐        奶奶<br>黑板        矛盾        手软</p><table><thead><tr><th>天地-并列-合成</th><th>冷战-偏正-合成</th><th>踢开-述补-合成</th></tr></thead><tbody><tr><td>失明-述宾-合成</td><td>海啸-主谓-合成</td><td>老鹰-附加-合成</td></tr><tr><td>傻子-附加-合成</td><td>吩咐-双声-单纯</td><td>奶奶-叠音-单纯</td></tr><tr><td>黑板-偏正-合成</td><td>矛盾-并列-合成</td><td>手软-述宾-合成</td></tr></tbody></table><hr><p><code>判定下列短语的构成方式</code></p><p>小王的书           逛公园          洗干净<br>努力学习            勤劳勇敢        闹元宵<br>好得很          解放思想        格外兴奋<br>拥护或反对      苦味道          非常高兴</p><table><thead><tr><th>小王的书-定中</th><th>逛公园-述宾</th><th>洗干净-述补</th></tr></thead><tbody><tr><td>努力学习-状中</td><td>勤劳勇敢-并列</td><td>闹元宵-述宾</td></tr><tr><td>好得很-述补</td><td>解放思想-述宾</td><td>格外兴奋-状中</td></tr><tr><td>拥护或反对-并列</td><td>苦味道-定中</td><td>非常高兴-状中</td></tr></tbody></table><hr><p><code>请用层次分析法分析下列句子</code></p><p>改革和发展是我们的主旋律。<br>我已经复习一晚上的英语了。<br>他听不懂这句话。<br>这部影片获得了最佳摄影奖和最佳美术奖。<br>他没有把身份证拿来。</p><h2 id="语义"><a href="#语义" class="headerlink" title="语义"></a>语义</h2><h3 id="语义、词义关系"><a href="#语义、词义关系" class="headerlink" title="语义、词义关系"></a>语义、词义关系</h3><p><strong>语义</strong>就是语言的意义，是语言形式所表达的内容，反映人们对客观事物的认识，这种认识用语言表达出来就是语义。</p><p><strong>类型</strong>：</p><ul><li>语言义：语言中固有的意义<ul><li>词汇义<ul><li>理性义</li><li>附加义</li></ul></li><li>语法义</li></ul></li><li>言语义：交际过程或语用中交际双方共同理解的意义<ul><li>词汇义</li><li>语法义</li></ul></li></ul><p><strong>词</strong>：有意义的能独立运用的最小的语言单位</p><p><strong>语素</strong>：最小的声音和意义的结合体，最小的有意义的语言单位</p><p><strong>词汇</strong>：语言里所有的词和固定短语的总和</p><ul><li>基本词汇</li><li>一般词汇</li></ul><p><strong>词义</strong>：</p><ul><li>理性意义（概念语义，逻辑意义，指称意义）</li><li>附加意义（感情色彩等）</li><li>语法意义（如伟大：形容词，可作谓语、定语）</li></ul><hr><p>同义词：几个声音不同而意义基本相同的词</p><p>同音词：语音相同而意义不同的一组词</p><hr><p>相对反义词，一定程度下反义</p><p>绝对反义词，如正-反、生-死</p><hr><p>词义的上下位关系，如奖牌（上位词），金牌（下位词）</p><p>广义语境（情景语境）</p><p>狭义语境（上下文语境）</p><p><code>试设计不同的语言环境使语句消歧</code><br>那里有很多鲁迅的书<br>A. 在新华书店里陈列着许多鲁迅的著作。<br>B. 在博物馆里陈列着不少鲁迅收藏的图书。<br>C. 在我们中文系的资料室里，有不少研究鲁迅的著作。</p><hr><p>本义：词的有历史可查的最初的意义</p><p>派生义：由本义衍生出来的意义</p><ul><li>产生途径：<ul><li><strong>隐喻</strong>：相似关系的比喻</li><li><strong>转喻</strong>：相关关系的比喻，如：china 瓷器</li></ul></li></ul><h3 id="语义理论"><a href="#语义理论" class="headerlink" title="语义理论"></a>语义理论</h3><p><strong>格语法</strong></p><ul><li>表层格：原指某些曲折语中用于表示词间语法关系的名词和代词的形态变化。如主格、宾格等。这些是传统上的格，属于表层格</li><li>深层格：也称为语义角色。它是指句子中体词（名词、代词等）和谓词（动词、形容词等）之间的及物性关系</li><li>施事格</li><li>工具格 </li><li>与格，句子动词所表现的事件、行为的参与者。</li><li>使成格，由动词确定的动作或状态所形成的客体或有生物。</li><li>方位格</li><li>客体格</li></ul><p><strong>语义网络</strong>：通过由概念和语义关系组成的有向图来表达知识、描述语义。</p><ul><li>一般用三元组（节点1，弧，节点2）来表达最基本的语义单元。</li></ul><p><strong>义素分析法</strong></p><ul><li>义素：对义位进行微观分析得到的语义单位。如“男人”这个义项可以分析为：[男性、成年、人]。其中[男性]、[成年]、[人]就是三个义素。</li><li>分析的原则<ul><li>对等性原则</li><li>系统性原则</li><li>简明性原则</li></ul></li><li><code>步骤</code><ul><li>确定范围</li><li>比较异同</li><li>简化义素</li></ul></li></ul><p><a href="https://img-blog.csdnimg.cn/20201223201452274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" target="_blank" rel="noopener">义素分析的使用</a></p><p><strong>语义场理论</strong></p><ul><li>语义场：由具有某些沟通核心义素的词语类聚而成的场或聚合体。<ul><li>层次性</li><li>系统性</li><li>相对性</li></ul></li></ul><h3 id="句义分析"><a href="#句义分析" class="headerlink" title="句义分析"></a>句义分析</h3><p><strong>句子意义</strong></p><ul><li>逻辑意义【句子中实词本身的意义和相互间的语义关系】</li><li>语法意义【词语的语法形式所表现的意义】</li><li>语用意义【说话人说出该句子时的交际意图和交际价值】</li></ul><p><strong>述谓结构</strong><br>常见的格有：</p><ul><li>“施事格”（A, Agentive）:动作或性状的主体</li><li>“受事格”（O, Object）:受动作支配的对象</li><li>“与事格”（D, Dative）:动作的参与者或受益者</li><li>“时间格”（T, Time) :动作的时间</li><li>“处所格”（L, Locative）:动作的处所方位</li><li>“工具格”（I, Instrumental）:动作的工具材料</li><li>“结果格”（F, Factitive）: 动作的结果</li></ul><p><strong>语义指向</strong></p><ul><li>狭义理解：语义指向是句子中某句法成分与哪个词语或哪个成分在语义上发生最直接的语义联系。主要反映成分之间的“相关关系”</li><li>语义指向分析是对述谓结构分析的一种必要的补充。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电路分析</title>
      <link href="posts/7c5f.html"/>
      <url>posts/7c5f.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、总论及电阻电路的分析"><a href="#一、总论及电阻电路的分析" class="headerlink" title="一、总论及电阻电路的分析"></a>一、总论及电阻电路的分析</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>集总电路</strong>：由电容、电感、电阻等集总参数元件组成的电路。<br><strong>集总假设</strong>：在电路分析过程中，各电器元件视为‘集总参数元件’（实际电路的尺寸远小于使用时最高工作频率对应的波长）。</p><p><strong>电阻电路</strong>：只含电阻元件和电源元件的电路。</p><p><strong>直流电路</strong>：电路中所含电源都是直流电源。</p><hr><p><strong>KCL</strong>：对于集总电路中的 <strong>任一节点</strong> ，在任意时刻，流进（或流出）该节点的所有支路电流的代数和为0。<br><strong>推广</strong>：对于任一集总电路的任一割集，在任一时刻，该割集的所有支路电流的代数和为零。</p><p><strong>KVL</strong>：对于集总电路中的 <strong>任一回路</strong> ，在任一时刻，沿该回路全部支路电压的代数和等于零。</p><p><strong>特勒根定理</strong>：电路各元件吸收功率的代数和为0。</p><hr><p><strong>受控源</strong>：输出电压或电流受到电路中其它部分的电压或电流控制的电源。</p><ul><li>VCVS、VCCS 的 <code>i1</code> 为0</li><li>CCVS、CCCS 的 <code>u1</code> 为0</li></ul><p><strong>理想电压源</strong>：一个二端元件当它接入任一电路时，如果其两端电压始终 <strong>保持规定的值或一定的时间函数</strong> ，而与其电流无关，则称为理想电压源。</p><p><strong>理想电流源</strong>：一个二端元件当它接入任一电路时，如果其两端电流始终 <strong>保持规定的值或一定的时间函数</strong> ，而与其电压无关，则称为理想电流源。</p><hr><p><strong>割集</strong>：有支路集S，在连通图G中移去支路集S，G变成两个互不连通的子图，少移去一条支路都不行。</p><p><strong>树</strong>：树T是连通图G的一个子图且满足:（联通）（包含所有节点）（不含闭合路径）</p><hr><p><strong>电导</strong>：<code>G = 1/R</code>，单位：<code>S</code></p><p><strong>网络函数</strong>：对单一激励的线性、时不变电路，指定响应与激励之比，记为 <code>H</code> <code>H = 响应/激励</code></p><p><strong>单口网络</strong>：对外只有两个端口的网络整体。</p><p><strong>等效</strong>：两个单口网络的电压、电流关系完全相同。</p><hr><h2 id="分析方法"><a href="#分析方法" class="headerlink" title="分析方法"></a>分析方法</h2><ul><li>2b法，<code>n-1</code>个独立KCL方程，<code>b-n-1</code>个独立KVL方程，<code>b</code>个VCR方程</li><li>支路电流法、支路电压法</li><li>网孔分析法<ul><li><code>内容</code>【网孔电流间的KVL】</li><li><strong>网孔</strong>：在回路内部不另含支路的回路。</li><li>参考例题： <code>2-1</code> <code>2-2</code> <code>2-3</code>（电流源两端有电压，设为U） <code>2-4</code></li></ul></li><li>节点分析法⭐<ul><li><code>内容</code>【节点电压降间的电流平衡】</li><li><code>说明</code>：<ul><li><code>G11·u1+G12·u2+···=i11</code></li><li><code>G12</code>称为互电导，连接两个节点之间的电导，取负号。</li><li><code>i11</code>是电源输送给节点1的电流的代数和。</li></ul></li><li><strong>节点电压</strong>：节点到参考节点的电压降</li><li>参考例题： <code>2-5</code> <code>2-6</code> <code>2-7</code> <code>2-8</code></li></ul></li><li>回路分析法<ul><li><code>内容</code>【选定树，逐个连接支路，其余类似网孔分析】</li><li>参考例题： <code>2-12</code>   <a href="https://img-blog.csdnimg.cn/20201223104402687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" target="_blank" rel="noopener">课堂例题</a></li></ul></li></ul><p>简化法则1：节点数少时，选择节点法，且设法选择电压源负极为参考电位。<br>简化法则2：网孔数少时，选择网孔法或回路法，且设法选择电流源为连支。</p><hr><h2 id="电路定理"><a href="#电路定理" class="headerlink" title="电路定理"></a>电路定理</h2><ul><li>线性电阻电路解答的存在性与唯一性定理<ul><li><code>内容</code>【由正电阻及独立电源组成且不含纯电压源回路及纯电流源割集的电路，其解答存在且唯一】</li></ul></li><li>齐次定理<ul><li><code>内容</code>【当一个激励源（独立电压源或电流源）作用于线性电路时，其任意支路的响应（电压或电流）与该激励源成正比】</li><li>参考例题：<a href="https://img-blog.csdnimg.cn/2020122311142034.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" target="_blank" rel="noopener">课堂例题</a></li></ul></li><li>叠加定理<ul><li><code>内容</code>【线性电路中，任一支路电流(或电压)都是电路中各个独立电源单独作用时，在该支路产生的电流(或电压)的代数和】</li><li><strong>电压源短路</strong>，<strong>电流源开路</strong>(去掉符号表示的圈圈)，受控源不变</li><li>参考例题： <code>3-3</code> <code>3-4</code>(受控源不参与叠加)  <code>3-6</code>(叠加定理简化了电路激励与响应的关系)</li><li>当N中含有电源时，假设该电源产生的U为恒值，<code>作业3-14</code></li></ul></li><li>置换定理<ul><li><code>内容</code>【利用理想电源替代支路】</li><li>参考例题：<code>4-4</code></li></ul></li><li>戴维南定理<ul><li><code>内容</code>【含电源、线性电阻、受控源的单口网络（含源线性单口网络），就其端口而言，可等效为一个电压源串联电阻支路】</li><li>参考例题：<code>4-12</code> <code>4-13</code>( <strong>戴维南等效电阻</strong> = 开路电压/短路电流 ) <code>4-14</code>(VCR: u = u0-R0·i)</li></ul></li><li>诺顿定理<ul><li><code>内容</code>【含源线性单口网络，就其端口而言，可等效为一个电流源并联电阻支路】</li><li>参考例题：<code>4-16</code>(叠加求Isc，电源去圈求R0，等效电路解决问题)</li><li>端口短路求Isc，电源去圈求R0，等效电路解决问题，<code>作业4-45</code></li></ul></li><li>最大功率传输定理<ul><li><code>内容</code>【含源线性单口网络传递给可变负载R的功率最大的条件：负载R应与戴维南（或诺顿）等效电阻相等】</li><li>说明：单口网络和它的等效电路，就内部功率而言是不等效的，效率不一定是50%</li><li>参考例题：<code>4-17</code></li></ul></li></ul><h1 id="二、动态电路时域分析"><a href="#二、动态电路时域分析" class="headerlink" title="二、动态电路时域分析"></a>二、动态电路时域分析</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>动态元件</strong>：</p><ul><li>电容 ( <code>q(t)=C·u(t)</code> <code>i(t)=C·du/dt</code> <code>W=C·u^2/2</code> )<ul><li>串联时：<code>1/C = 各个倒数相加</code></li><li>并联时：<code>C = 各个相加</code></li><li><strong>反电阻</strong></li></ul></li><li>电感 ( <code>磁链</code> <code>Ψ(t)=L·i(t)</code> <code>u(t)=L·di/dt</code> <code>W=L·i^2/2</code> )<ul><li>串联时：<code>L = 各个相加</code></li><li>并联时：<code>1/L = 各个倒数相加</code></li><li><strong>类电阻</strong></li></ul></li></ul><p><a href="https://img-blog.csdnimg.cn/20201223145557770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" target="_blank" rel="noopener">课堂例题：练习电容、电感微积分特性</a></p><hr><p><strong>动态电路</strong>：至少包含一个动态元件的电路</p><p><strong>一阶电路</strong>：用一阶微分方程描述的电路。</p><p><strong>状态变量</strong>：电容电压和电感电流。</p><p><strong>状态方程</strong>：基于状态变量建立的电路方程。</p><hr><p><strong>换路</strong>：电路中开关的接通、断开或元件参数突然变化。</p><p><strong>换路定理</strong>：在换路期间，电容电压和电感电流不发生跃变。</p><hr><p><strong>零输入响应</strong>：在 <code>t&gt;=t0</code> 时，没有外加输入，仅由 <code>t0</code> 时刻 <strong>非零初始状态</strong> 引起的响应。</p><p><strong>零状态响应</strong>：在零初始状态时，<strong>仅由</strong> <code>t0</code> 时刻 <strong>施加于电路的输入</strong> 引起的响应。</p><p><strong>全响应</strong>：零输入响应 + 零状态响应</p><hr><p>独立初始值的求解，电容：U(0+)=U(0-)，电感：I(0+)=I(0-) <a href="https://img-blog.csdnimg.cn/20201223154120211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener">例题</a></p><p>非独立初始值的求解，电容用电压源代替，电感用电流源代替。<a href="https://img-blog.csdnimg.cn/20201223154120212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener">例题</a></p><p>电容电路时间常数：RC<br>电感电路时间常数：L/R</p><h2 id="三要素法⭐"><a href="#三要素法⭐" class="headerlink" title="三要素法⭐"></a>三要素法⭐</h2><ul><li>y(0-)</li><li>y(∞)</li><li>时间常数</li></ul><p><a href="https://img-blog.csdnimg.cn/20201223155324701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" target="_blank" rel="noopener">三要素法分析电路的基本步骤</a></p><p>PPT10中的：<a href="https://img-blog.csdnimg.cn/20201223160143552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener">例题1</a> <a href="https://img-blog.csdnimg.cn/20201223160143561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener">例题2(1)</a> <a href="https://img-blog.csdnimg.cn/20201223160143559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener">例题2(2)</a><br>PPT11中第一个题</p><h1 id="三、动态电路相量分析"><a href="#三、动态电路相量分析" class="headerlink" title="三、动态电路相量分析"></a>三、动态电路相量分析</h1><p>时域（正弦函数集合）–&gt;相量域（相量集合）</p><p><strong>正弦量</strong>：大小和方向随时间按正弦规律变化的电压、电流等电学量统称为正弦交流电或正弦量。</p><p><strong>三要素</strong>：</p><ul><li>幅值（Um,Im），反映正弦量变化幅度的大小</li><li>角频率（w），反映正弦量变化快慢</li><li>初相位（θ），反映正弦量的计时起点</li></ul><hr><p>相量的表示：<strong>加一个小圆点</strong> 用来和普通的复数相区别(强调它与正弦量的联系)，它表示的不是一般意义的向量，而是表示一个正弦量。 <strong>振幅相量</strong> 的表示比有效值相量多m</p><ul><li>复数的运算<ul><li>加减法-图解</li><li>乘法：模相乘，角相加</li><li>除法：模相除，角相减</li><li>参考例题：<code>9-1</code></li></ul></li><li>旋转因子</li><li>相量图<ul><li>同频率的相量才能画在同一复平面</li></ul></li></ul><p><a href="https://img-blog.csdnimg.cn/20201223184652211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" target="_blank" rel="noopener">电感和电容的对偶关系</a></p><hr><p><strong>关于阻抗的理解</strong>：<code>ZL = jwL</code>，交流电越难以通过线圈，说明电感量越大，电感的阻碍作用就越大；交流电的频率越高，也难以通过线圈，说明电感的阻碍作用也大。</p><p><strong>关于电感电流滞后电压的理解</strong>：<br>对于电感，先施加电压，之后才会产生电流。</p><p><strong>关于电容电压滞后电流的理解</strong>：<br>先施加电流，之后才会逐渐产生电压。</p><hr><ul><li>阻抗<ul><li><code>定义</code>【元件在正弦稳态时电压相量与电流相量之比】</li><li><code>Zr = R</code></li><li><code>Zc = 1/jwC = -j/wC</code> </li><li><code>ZL = jwL</code></li></ul></li><li>导纳<ul><li><code>定义</code>【阻抗的倒数】</li><li><code>Yr= 1/R= G</code> </li><li><code>Yc = jwC</code> </li><li><code>YL = 1/jwL</code></li></ul></li><li>感抗：<ul><li><code>XL = wL</code></li></ul></li><li>容抗：<ul><li><code>XC = -1/wC</code></li></ul></li><li><strong>分析方法</strong>：<ul><li>画相量模型图，求出阻抗，类比电阻电路进行分析</li><li>相量图分析法</li></ul></li></ul><hr><p><strong>有功功率</strong>：<code>P = UIcosθ</code> 有功功率实际上是电阻消耗的功率，亦称为平均功率。</p><p><strong>无功功率</strong>：<code>Q = UIsinθ</code> 表示交换功率的最大值，单位：<code>var</code></p><ul><li>由储能元件LC决定，表示电抗的瞬时功率的最大值</li></ul><p><strong>视在功率</strong>：<code>S = UI</code> 单位：<code>VA</code></p><ul><li>反映电子设备的最大容量</li></ul><p><a href="https://img-blog.csdnimg.cn/20201223232016653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" target="_blank" rel="noopener">复功率</a>  <a href="https://img-blog.csdnimg.cn/20201223232201601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" target="_blank" rel="noopener">例题1</a></p><hr><p><code>cosθ</code> 称为<strong>功率因素</strong></p><ul><li>功率因素低下引起的问题：<ul><li>电源设备的容量不能充分利用（无功功率占用容量）</li><li>增加线路和发动机绕组的功率损耗</li></ul></li><li>功率因素低的原因：<ul><li>日常生活中多为感性负载</li></ul></li><li>功率因素的提高：<ul><li>在感性负载两端并联电容</li></ul></li></ul><p><a href="https://img-blog.csdnimg.cn/20201223231817701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener">共轭匹配</a> <a href="https://img-blog.csdnimg.cn/20201223231817702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener">模值匹配</a></p><hr><p>PPT14中：利用相量图来解决问题，动态元件功率问题<br>PPT15中：<strong>功率问题</strong>，一些复习题</p><h1 id="other"><a href="#other" class="headerlink" title="other"></a><em>other</em></h1><p>总结：</p><ul><li>一个假设：集总假设</li><li>两类约束：元件约束，基尔霍夫约束</li><li>三大基本方法：叠加、分解、变换域</li></ul><hr><p>其它：</p><ul><li>多画图</li><li>看清电路再解答</li><li>数学我真的没好好学啊</li></ul><hr><p>参考资料：</p><ul><li>《简明电路分析基础》-李瀚荪</li><li>课堂PPT</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="posts/database.html"/>
      <url>posts/database.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、数据库系统概述"><a href="#一、数据库系统概述" class="headerlink" title="一、数据库系统概述"></a>一、数据库系统概述</h1><p><code>1.4</code></p><p><strong>外模式</strong>   –&gt;   用户级</p><ul><li><p>数据库用户能看到并允许使用的那部分局部数据的逻辑结构和特征的描述 </p><p>||   <code>外模式/模式映像</code><br>||    保证了数据与程序间的逻辑一致性</p></li></ul><p><strong>模式</strong>     –&gt;   概念级</p><ul><li><p>数据库中全体数据的逻辑结构和特征的描述</p></li><li><p>一个数据库只有一个模式</p><p>||   <code>模式/内模式映像</code><br>||    保证了数据的物理一致性</p></li></ul><p><strong>内模式</strong>   –&gt;   物理级</p><ul><li>它是对数据库存储结构的描述，是数据在数据库内部的表示方式 </li></ul><blockquote><p>三级模式和二级映像的优点：</p><ul><li>保证数据独立性</li><li>简化用户接口</li><li>有利于数据共享</li><li>有利于数据的安全保密</li></ul></blockquote><p><code>1.3</code></p><p>数据库系统（DBS）的组成：</p><ul><li>DB（是存储在计算机内、有组织的、可共享的数据和数据对象的集合）</li><li>用户</li><li>软件系统</li><li>硬件系统</li></ul><p><code>1.6</code></p><p>数据库系统的<strong>核心软件</strong>：DBMS</p><p>数据库管理系统（DBMS）的主要功能：</p><ul><li>数据定义</li><li>数据操纵</li><li>数据库运行管理</li><li>数据库的建立和维护</li><li>数据通信接口</li><li>数据存储、组织和管理</li></ul><p>数据库管理系统（DBMS）的组成：</p><ul><li>语言编译处理程序</li><li>系统运行控制程序</li><li>系统建立、维护程序</li><li>数据字典</li></ul><p><code>1.9</code></p><ul><li>层次模型</li><li>网状模型</li><li>关系模型<ul><li>一个关系实例对应一张由行和列组成的二维表</li><li>每<strong>一行元组</strong>对应的列的属性值叫<strong>分量</strong></li><li>一个关系数据库文件中个条记录，前后顺序可颠倒</li><li>关系模式的任何属性不可再分</li></ul></li><li>面向对象模型</li></ul><h1 id="二、关系数据库"><a href="#二、关系数据库" class="headerlink" title="二、关系数据库"></a>二、关系数据库</h1><p><strong>候选码</strong>，能唯一标识关系中元组的一个属性或属性集</p><ul><li>唯一性</li><li>最小性</li></ul><p><strong>主码</strong>，被选用的候选码。</p><p><strong>超码</strong>，能够决定所有属性，其中可以包含候选码外其他属性。</p><hr><p>关系模型中的三类<strong>完整性约束</strong>：</p><ul><li>实体完整性</li><li>参照完整性</li><li>用户自定义完整性</li></ul><hr><p><strong>关系代数运算符</strong>：</p><ul><li>1.集合运算符<ul><li><code>∪</code> <code>-</code> <code>∩</code> 和 广义笛卡尔积<code>x</code></li></ul></li><li>2.专门的关系运算符<ul><li>选取、投影、连接</li></ul></li><li>3.算术比较运算符</li><li>4.逻辑运算符</li></ul><h2 id="关系代数练习"><a href="#关系代数练习" class="headerlink" title="关系代数练习"></a>关系代数练习</h2><p>基于以下三个关系:  </p><ul><li>学生S(SNO, SNAME, AGE)</li><li>课程C(CNO, CNAME, CT)</li><li>选修SC(SNO, CNO, SCORE)</li></ul><p>其中SNO, SNAME, AGE, CNO, CNAME, CT, SCORE分别代表学号、学生姓名、年龄、课程编号、课程名称、课时、成绩。</p><p>用关系代数完成下列操作：</p><p>(1)    查询年龄小于17或者大于23的学生选修的课程编号。<br><code>ΠCNO((σage&lt;17 or age&gt;23(S)) ⋈SC)</code></p><p>(2)    给出重名的名字。<br><code>ΠS.SNAME(σS.NAME=S1.NAME AND S.SNO!=S1.SNO (S☓ρS1(S)))</code></p><p>(3)    查询“张三”同学不学的课程编号。<br><code>ΠCNO(C) -ΠCNO(SC⋈σSNAME=&#39;张三&#39; (S))</code></p><p>(4)    给出既选修“高等数学”又选修“线性代数”的学生学号。<br><code>ΠSNO(SC⋈(σCNAME=&#39;高等数学&#39; (C)))∩ ΠSNO(SC⋈(σCNAME=&#39;线性代数&#39; (C)))</code></p><p>(5)    给出“数据库”课程成绩最高的学生学号。<br><code>R1:= ΠSNO,SCORE(SC⋈(σCNAME=&#39;数据库&#39; (C)))</code> (先将数据库成绩提出来，后面会简洁一些)<br><code>(ΠSNO ( R1 - ΠR1.SNO, R1.SCORE(σR1.SCORE&lt;R2.SCORE (R1☓ρR2(R1)))))</code></p><h1 id="三、SQL"><a href="#三、SQL" class="headerlink" title="三、SQL"></a>三、SQL</h1><p>一个数据库至少包含：</p><ul><li>数据文件 <code>.mdf</code></li><li>事务日志文件 <code>.ldf</code></li></ul><hr><p>SQL功能：</p><ul><li>数据<strong>查询</strong> <code>select</code></li><li>数据<strong>定义</strong> <code>create</code> <code>drop</code> <code>alter</code></li><li>数据<strong>操纵</strong> <code>insert</code> <code>update</code> <code>delete</code></li><li>数据<strong>控制</strong>  <code>grant</code> <code>revoke</code></li></ul><hr><h2 id="实验一：sql初步"><a href="#实验一：sql初步" class="headerlink" title="实验一：sql初步"></a>实验一：sql初步</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询1986年出生的</span><span class="token keyword">select</span> sno<span class="token punctuation">,</span>sn<span class="token punctuation">,</span>birth<span class="token keyword">from</span> s<span class="token keyword">where</span> birth <span class="token operator">like</span><span class="token string">'1986%'</span><span class="token comment" spellcheck="true">-- 或者 where year(birth)=1986</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--选取3次作业总分前三</span><span class="token keyword">select</span> top3 sno<span class="token punctuation">,</span>cno<span class="token punctuation">,</span>hw1<span class="token operator">+</span>hw2<span class="token operator">+</span>hw3 <span class="token keyword">as</span> total<span class="token keyword">from</span> homework<span class="token keyword">order</span> <span class="token keyword">by</span> total <span class="token keyword">desc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实验二：sql子查询"><a href="#实验二：sql子查询" class="headerlink" title="实验二：sql子查询"></a>实验二：sql子查询</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--查询与xxx同一班级的其他学生信息</span><span class="token comment" spellcheck="true">--连接查询</span><span class="token keyword">select</span> s<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">from</span> s<span class="token punctuation">,</span> s <span class="token keyword">as</span> s1<span class="token keyword">where</span> s<span class="token punctuation">.</span>class<span class="token operator">=</span>s1<span class="token punctuation">.</span>class <span class="token operator">and</span> s1<span class="token punctuation">.</span>sn<span class="token operator">=</span>xxx <span class="token operator">and</span> s<span class="token punctuation">.</span>sn<span class="token operator">!=</span>xxx<span class="token comment" spellcheck="true">--子查询</span><span class="token keyword">select</span> s<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">from</span> s<span class="token keyword">where</span> class<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> class <span class="token keyword">from</span> s <span class="token keyword">where</span> sn<span class="token operator">=</span>xxx<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">.</span>sn<span class="token operator">!=</span>xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询K001和M001都没有选修的学生信息</span><span class="token keyword">select</span> sno<span class="token punctuation">,</span>cno<span class="token punctuation">,</span>hw1<span class="token punctuation">,</span>hw2<span class="token punctuation">,</span>hw3<span class="token keyword">from</span> homework<span class="token keyword">where</span> sno <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span>    <span class="token keyword">select</span> sno    <span class="token keyword">from</span> homework    <span class="token keyword">where</span> cno<span class="token operator">=</span><span class="token string">'K001'</span> <span class="token operator">or</span> cno<span class="token operator">=</span><span class="token string">'M001'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询学时最少的课程</span><span class="token keyword">select</span> cn<span class="token keyword">from</span> <span class="token number">c</span><span class="token keyword">where</span> ct <span class="token operator">&lt;=</span><span class="token keyword">all</span><span class="token punctuation">(</span><span class="token keyword">select</span> ct <span class="token keyword">from</span> <span class="token number">c</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--或</span><span class="token keyword">select</span> cn<span class="token keyword">from</span> <span class="token number">c</span><span class="token keyword">where</span> <span class="token operator">not</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token number">c</span> <span class="token keyword">as</span> <span class="token number">c1</span> <span class="token keyword">where</span> <span class="token number">c</span><span class="token punctuation">.</span>ct<span class="token operator">></span><span class="token number">c1</span><span class="token punctuation">.</span>ct<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实验三：sql聚合函数"><a href="#实验三：sql聚合函数" class="headerlink" title="实验三：sql聚合函数"></a>实验三：sql聚合函数</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询学生人数</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">from</span> homework<span class="token keyword">where</span> cno<span class="token operator">=</span><span class="token string">'K001'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询多少个不同的班级</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> class<span class="token punctuation">)</span><span class="token keyword">from</span> s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询作业平均分</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>hw1<span class="token punctuation">)</span><span class="token keyword">from</span> <span class="token number">c</span> <span class="token keyword">join</span> homework <span class="token keyword">on</span> <span class="token number">c</span><span class="token punctuation">.</span>cno<span class="token operator">=</span>homework<span class="token punctuation">.</span>cno <span class="token operator">and</span> cn<span class="token operator">=</span><span class="token string">'python'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询选课人数最多的两名课程，给出课程号</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">2</span> cno<span class="token keyword">from</span> homework<span class="token keyword">group</span> <span class="token keyword">by</span> cno<span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token function">count</span><span class="token punctuation">(</span>sno<span class="token punctuation">)</span> <span class="token keyword">desc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询两个以上男生选修的课程编号。（包含两个）</span><span class="token comment" spellcheck="true">-- 因为一个SN对应多个SNo时出错</span><span class="token keyword">select</span> CNO<span class="token keyword">from</span> s <span class="token keyword">join</span> homework <span class="token keyword">on</span> s<span class="token punctuation">.</span>sno<span class="token operator">=</span>homework<span class="token punctuation">.</span>sno <span class="token operator">and</span> sex<span class="token operator">=</span><span class="token string">'男'</span><span class="token keyword">group</span> <span class="token keyword">by</span> CNO<span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 9. 查询每个同学的选课门数，如果没有选修则选课门数为0。</span><span class="token keyword">select</span> s<span class="token punctuation">.</span>sno<span class="token punctuation">,</span>sn<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>cno<span class="token punctuation">)</span> <span class="token keyword">as</span> 选课数<span class="token keyword">from</span> s <span class="token keyword">left</span> <span class="token keyword">join</span> homework <span class="token keyword">on</span> s<span class="token punctuation">.</span>sno<span class="token operator">=</span>homework<span class="token punctuation">.</span>sno<span class="token keyword">group</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span>sno<span class="token punctuation">,</span>sn<span class="token keyword">order</span> <span class="token keyword">by</span> 选课数 <span class="token keyword">desc</span><span class="token comment" spellcheck="true">-- 方法二：</span><span class="token keyword">select</span> s<span class="token punctuation">.</span>sno<span class="token punctuation">,</span>sn<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>cno<span class="token punctuation">)</span> <span class="token keyword">as</span> 选课数<span class="token keyword">from</span> s <span class="token keyword">join</span> homework <span class="token keyword">on</span> s<span class="token punctuation">.</span>sno<span class="token operator">=</span>homework<span class="token punctuation">.</span>sno<span class="token keyword">group</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span>sno<span class="token punctuation">,</span>sn<span class="token keyword">union</span><span class="token keyword">select</span> sno<span class="token punctuation">,</span>sn<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">as</span> 选课数<span class="token keyword">from</span> s<span class="token keyword">where</span> sno <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> sno <span class="token keyword">from</span> homework<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实验四：数据更新与约束⭐"><a href="#实验四：数据更新与约束⭐" class="headerlink" title="实验四：数据更新与约束⭐"></a>实验四：数据更新与约束⭐</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创表，约束，主外键</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Book<span class="token punctuation">(</span>    BNo CHAR<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    BName    nVARCHAR<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Publish    nVARCHAR<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    PDate    <span class="token keyword">datetime</span><span class="token punctuation">,</span>    BAuth    nVARCHAR<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    bprice    <span class="token keyword">NUMERIC</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    binprice    <span class="token keyword">NUMERIC</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    BCount    <span class="token keyword">INT</span> <span class="token keyword">check</span><span class="token punctuation">(</span>Bcount<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">check</span><span class="token punctuation">(</span>binprice<span class="token operator">&lt;</span>bprice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> BookSell<span class="token punctuation">(</span>    SDate    <span class="token keyword">datetime</span><span class="token punctuation">,</span>    BNO    CHAR<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token keyword">references</span> Book<span class="token punctuation">(</span>bno<span class="token punctuation">)</span><span class="token punctuation">,</span>    SCount    <span class="token keyword">int</span><span class="token punctuation">,</span>    SMoney    smallmoney<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--新进图书</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Book <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'9787115457004'</span><span class="token punctuation">,</span><span class="token string">'数据库原理及应用教程'</span><span class="token punctuation">,</span><span class="token string">'人民邮电出版社'</span><span class="token punctuation">,</span><span class="token string">'2017-11-1'</span><span class="token punctuation">,</span><span class="token string">'陈志泊'</span><span class="token punctuation">,</span><span class="token number">49.5</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--卖书退书</span><span class="token keyword">insert</span> <span class="token keyword">into</span> booksell <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'2020-2-1'</span><span class="token punctuation">,</span><span class="token string">'9787115457004'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">update</span> book  <span class="token keyword">set</span> bcount<span class="token operator">-</span><span class="token operator">=</span><span class="token number">20</span> <span class="token keyword">where</span> bno<span class="token operator">=</span><span class="token string">'9787115457004'</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> booksell <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'2020-2-2'</span><span class="token punctuation">,</span><span class="token string">'9787115457004'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">update</span> book  <span class="token keyword">set</span> bcount<span class="token operator">-</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">where</span> bno<span class="token operator">=</span><span class="token string">'9787115457004'</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> booksell <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'2020-2-3'</span><span class="token punctuation">,</span><span class="token string">'9787115457004'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> smoney<span class="token operator">/</span>scount<span class="token operator">*</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">from</span> booksell <span class="token keyword">where</span> scount<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">update</span> book  <span class="token keyword">set</span> bcount<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">where</span> bno<span class="token operator">=</span><span class="token string">'9787115457004'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 补充：delete from&lt;表名> [where&lt;条件>]</span><span class="token comment" spellcheck="true">-- 不加where可以修改多行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、关系数据库理论⭐"><a href="#四、关系数据库理论⭐" class="headerlink" title="四、关系数据库理论⭐"></a>四、关系数据库理论⭐</h1><p>关系模式中各属性之间相互依赖，相互制约的联系称为数据依赖。数据依赖一般分为 <strong>函数依赖</strong> 和 <strong>多值依赖</strong>。</p><p><strong>函数依赖</strong> 是关系模式中属性之间的一种逻辑依赖关系。</p><ul><li>完全函数依赖：属性集 <code>X</code> 的任何真子集都推不出 <code>Y</code>。</li><li>部分函数依赖：属性集 <code>X</code> 的某个真子集推出了 <code>Y</code>。</li></ul><blockquote><p><strong>求解最小函数依赖集</strong>：</p><ol><li>将每个函数依赖的右边变成单属性</li><li>去掉每个函数依赖左边的冗余属性</li><li>去掉冗余的函数依赖</li></ol></blockquote><blockquote><p><code>F+</code> = <code>G+</code> 时, 函数依赖集 <code>F</code> 和 <code>G</code> 等价</p></blockquote><hr><p><strong>闭包</strong>：<code>F+</code> 是被 <code>F</code> 逻辑蕴涵的全部函数依赖集合（字面意思）。</p><blockquote><p>若 <code>X+</code>包含了 <code>R</code> 的全部属性，则属性集 <code>X</code> 是 <code>R</code> 的一个码。</p></blockquote><hr><p><strong>1NF</strong> ：关系中每个属性都是不可再分的原子项</p><p>&emsp;&emsp;<code>1NF</code> -&gt; <code>2NF</code> 【消除了非主属性对主码 <strong>部分函数依赖</strong>】</p><p><strong>2NF</strong> ：不存在非主属性对主码部分函数依赖（每个非主属性都完全函数依赖于主码）</p><p>&emsp;&emsp;<code>2NF</code> -&gt; <code>3NF</code> 【消除非主属性对主码的 <strong>传递函数依赖</strong>】</p><p><strong>3NF</strong> ：每个非主属性都不传递函数依赖于主码.</p><p><strong>BCNF</strong> ：如果关系模式R∈1NF，且对于R的每个函数依赖X→Y（Y不属于X），决定因数X都包含了R的一个候选码，那么R∈BCNF。</p><hr><p><strong>书上例题</strong>：</p><ul><li>求函数依赖集的闭包 <code>4-2</code></li><li>求解候选码 <code>4-3</code> <code>4-4</code> <code>4-5</code></li><li>求最小函数依赖集 <code>4-6</code> <code>4-7</code> <code>4-8</code> <code>4-9</code></li><li>关系模式的分解 <code>4-10~14</code></li><li>范式 <code>4-15~21</code></li></ul><p><strong>判定问题：</strong></p><ul><li><code>无损连接性判定</code><br>①画表格（行是单个属性，列是分解的属性集）<br>②属性存在于属性集中的、能函数依赖推导出来的<br>③若有一行都满足②，则是无损连接分解<br>④特殊判定，R1 ∩ R2 -&gt; （R1-R2 或 R2-R1)</li><li><code>函数依赖保持性判定</code><br>看看每个分解的部分得出的依赖，能不能凑齐总的函数依赖</li></ul><p><strong>其他问题</strong>：</p><ul><li>任何一个包含两个属性的关系模式一定满足 BCNF</li><li>{ AB-&gt;CD , A-&gt;D } 最高属于 1NF</li></ul><h1 id="五、数据库安全保护"><a href="#五、数据库安全保护" class="headerlink" title="五、数据库安全保护"></a>五、数据库安全保护</h1><h5 id="一、安全性控制"><a href="#一、安全性控制" class="headerlink" title="一、安全性控制"></a>一、安全性控制</h5><ul><li><code>目的</code>：【防止非法使用造成数据的泄露、更改和破环】</li><li><code>方法</code>：<ul><li>用户标识和鉴定</li><li>用户存取权限控制</li><li>定义视图</li><li>数据加密和审计</li></ul></li><li>当用户要访问数据库时，必须要有 <code>登录账号</code> <code>用户账号</code></li></ul><hr><h5 id="二、完整性控制"><a href="#二、完整性控制" class="headerlink" title="二、完整性控制"></a>二、完整性控制</h5><p><code>目的</code>：【防止合法用户加入不符合语义的数据】<br><code>方法</code>：</p><ul><li>约束</li><li>默认值</li><li>规则</li><li>存储过程</li><li>触发器</li></ul><hr><h5 id="三、并发性控制"><a href="#三、并发性控制" class="headerlink" title="三、并发性控制"></a>三、并发性控制</h5><p><code>目的</code>：【防止多个同时存取同一数据造成不一致】<br><code>方法</code>：封锁（普遍采用），时标</p><hr><h5 id="四、数据恢复"><a href="#四、数据恢复" class="headerlink" title="四、数据恢复"></a>四、数据恢复</h5><p><code>三种模式</code></p><ul><li>完整恢复模式</li><li>大容量日志记录恢复模式（使用数据库备份和日志备份来还原数据库）</li><li>简单恢复模式（可执行完全数据库备份和增量数据库备份来还原数据库）</li></ul><p><code>基本原理</code>：利用数据的冗余（登记日志文件，数据转储）</p><h2 id="实验五：数据库安全管理"><a href="#实验五：数据库安全管理" class="headerlink" title="实验五：数据库安全管理"></a>实验五：数据库安全管理</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 授权权限</span><span class="token keyword">use</span> testgo<span class="token keyword">grant</span> <span class="token keyword">insert</span> <span class="token keyword">on</span> dbo<span class="token punctuation">.</span>t1 <span class="token keyword">to</span> zhang <span class="token keyword">with</span> <span class="token keyword">grant</span> <span class="token keyword">option</span>go<span class="token comment" spellcheck="true">--收回权限(级连)</span><span class="token keyword">revoke</span> <span class="token keyword">insert</span> <span class="token keyword">on</span> bdo<span class="token punctuation">.</span>t1 <span class="token keyword">from</span> zhang <span class="token keyword">cascade</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六、数据库设计"><a href="#六、数据库设计" class="headerlink" title="六、数据库设计"></a>六、数据库设计</h1><p>①<strong>需求分析</strong></p><ul><li>数据流图（表达了数据和处理过程的关系）</li><li>数据字典（对系统中数据的详细描述）</li></ul><p>②<strong>概念结构设计</strong></p><ul><li>概念模型（ER图）<ul><li>ER图冲突：属性冲突、命名冲突、结构冲突</li></ul></li></ul><p>③<strong>逻辑结构设计</strong></p><ol><li>初始关系模式设计</li><li>关系模式规范化</li><li>模式的评价和改进</li></ol><p>④<strong>物理结构设计</strong></p><ul><li>确定表、字段、索引</li></ul><p>⑤<strong>实施</strong></p><ul><li>建立实际数据库结构</li></ul><p>⑥<strong>运行和维护</strong></p><h1 id="七、高级应用"><a href="#七、高级应用" class="headerlink" title="七、高级应用"></a>七、高级应用</h1><hr><p><strong>事务</strong>：数据库系统中执行的一个工作单位，DBMS并发控制的基本单位。</p><ul><li>原子性 <code>要么不做，要么全做</code></li><li>一致性</li><li>隔离性</li><li>持久性</li></ul><hr><p><strong>批处理</strong>：一个批处理语句在一起通过解析才执行，每个批处理（两个 <code>go</code> 之间）单独执行。</p><hr><h2 id="实验六：Transaction-sql"><a href="#实验六：Transaction-sql" class="headerlink" title="实验六：Transaction-sql"></a>实验六：Transaction-sql</h2><p><code>事务练习</code></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--zhang转账给li</span><span class="token keyword">use</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">begin</span> <span class="token keyword">transaction</span>    <span class="token keyword">declare</span> <span class="token variable">@num</span><span class="token operator">=</span>balance <span class="token keyword">from</span> account <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'zhang'</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">@ba</span><span class="token operator">></span><span class="token number">100</span><span class="token punctuation">)</span>        <span class="token keyword">begin</span>        <span class="token keyword">update</span> account <span class="token keyword">set</span> balance<span class="token operator">+</span><span class="token operator">=</span><span class="token number">100</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'li'</span>        <span class="token keyword">update</span> account <span class="token keyword">set</span> balance<span class="token operator">-</span><span class="token operator">=</span><span class="token number">100</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'wang'</span>        <span class="token keyword">commit</span>        <span class="token keyword">end</span>    <span class="token keyword">else</span>        <span class="token keyword">rollback</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>case练习</code></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span>balance<span class="token punctuation">,</span>    <span class="token keyword">case</span>        <span class="token keyword">when</span> balance<span class="token operator">></span><span class="token number">1000</span> <span class="token keyword">then</span> <span class="token string">'high'</span>        <span class="token keyword">when</span> balance<span class="token operator">&lt;</span><span class="token number">1000</span> <span class="token operator">and</span> balance<span class="token operator">></span><span class="token number">0</span> the <span class="token string">'low'</span>        <span class="token keyword">else</span> <span class="token string">'other'</span>    <span class="token keyword">end</span> <span class="token keyword">as</span> 分类<span class="token keyword">from</span> account<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>时间函数练习</code></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 明年十月一星期几？</span><span class="token keyword">select</span> datename<span class="token punctuation">(</span>weekday<span class="token punctuation">,</span>cast<span class="token punctuation">(</span>year<span class="token punctuation">(</span>getdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'-10-01'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>保留两位小数</code></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> sno<span class="token punctuation">,</span><span class="token keyword">convert</span><span class="token punctuation">(</span><span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span> sc<span class="token keyword">group</span> <span class="token keyword">by</span> sno<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>自定义函数</code></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--查询成绩在XY之间的信息</span><span class="token keyword">create</span> <span class="token keyword">function</span> query<span class="token punctuation">(</span><span class="token variable">@x</span> <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token variable">@y</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">returns</span> <span class="token keyword">table</span><span class="token keyword">as</span> <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sc<span class="token keyword">where</span> score<span class="token operator">>=</span><span class="token variable">@x</span> <span class="token operator">and</span> score<span class="token operator">&lt;=</span><span class="token variable">@y</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--执行</span><span class="token keyword">declare</span> <span class="token variable">@x</span> <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token variable">@y</span> <span class="token keyword">int</span><span class="token keyword">set</span> <span class="token variable">@x</span><span class="token operator">=</span><span class="token number">60</span><span class="token keyword">set</span> <span class="token variable">@y</span><span class="token operator">=</span><span class="token number">80</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> query<span class="token punctuation">(</span><span class="token variable">@x</span><span class="token punctuation">,</span><span class="token variable">@y</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实验七：存储过程-amp-触发器"><a href="#实验七：存储过程-amp-触发器" class="headerlink" title="实验七：存储过程&amp;触发器"></a>实验七：存储过程&amp;触发器</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 存储过程，返回及格率</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> query<span class="token variable">@vcno</span> char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@vi</span> <span class="token keyword">float</span> output<span class="token keyword">as</span><span class="token keyword">declare</span> <span class="token variable">@a</span> <span class="token keyword">float</span><span class="token punctuation">,</span><span class="token variable">@b</span> <span class="token keyword">float</span><span class="token keyword">select</span> <span class="token variable">@a</span><span class="token operator">=</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> sc <span class="token keyword">where</span> cno<span class="token operator">=</span><span class="token variable">@vcno</span> <span class="token operator">and</span> grade<span class="token operator">>=</span><span class="token number">60</span><span class="token keyword">select</span> <span class="token variable">@b</span><span class="token operator">=</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> sc <span class="token keyword">where</span> cno<span class="token operator">=</span><span class="token variable">@vcno</span><span class="token keyword">set</span> <span class="token variable">@vi</span><span class="token operator">=</span><span class="token variable">@a</span><span class="token operator">/</span><span class="token variable">@b</span><span class="token keyword">print</span> <span class="token variable">@a</span><span class="token keyword">print</span> <span class="token variable">@b</span><span class="token keyword">print</span> <span class="token variable">@vi</span><span class="token keyword">declare</span> <span class="token variable">@ans</span> <span class="token keyword">float</span><span class="token keyword">exec</span> query <span class="token string">'cs'</span><span class="token punctuation">,</span> <span class="token variable">@ans</span> output<span class="token keyword">select</span> cast<span class="token punctuation">(</span><span class="token variable">@ans</span><span class="token operator">*</span><span class="token number">100</span> <span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'%'</span> <span class="token keyword">as</span> <span class="token string">'及格率'</span><span class="token comment" spellcheck="true">-- 触发器，限定删除</span><span class="token keyword">create</span> <span class="token keyword">trigger</span> del_s <span class="token keyword">on</span> dbo<span class="token punctuation">.</span>s<span class="token keyword">after</span> <span class="token keyword">delete</span><span class="token keyword">as</span><span class="token keyword">declare</span> <span class="token variable">@s</span> char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token variable">@s</span> <span class="token operator">=</span>sno <span class="token keyword">from</span> deleted<span class="token keyword">if</span> <span class="token variable">@s</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> sno <span class="token keyword">from</span> sc<span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">print</span> <span class="token string">'该生已有成绩，不能删除'</span>    <span class="token keyword">print</span> <span class="token variable">@s</span>    <span class="token keyword">rollback</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实验八：备份-amp-还原"><a href="#实验八：备份-amp-还原" class="headerlink" title="实验八：备份&amp;还原"></a>实验八：备份&amp;还原</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--对数据库进行完全备份</span><span class="token keyword">backup</span> <span class="token keyword">database</span> tmp <span class="token keyword">to</span> <span class="token keyword">disk</span><span class="token operator">=</span><span class="token string">'c:\tmp\tmpfull.bak'</span><span class="token comment" spellcheck="true">--对数据库进行差异备份</span><span class="token keyword">backup</span> <span class="token keyword">database</span> tmp <span class="token keyword">to</span> <span class="token keyword">disk</span><span class="token operator">=</span><span class="token string">'c:\tmp\tmpdiff.bak'</span> <span class="token keyword">with</span> differential<span class="token comment" spellcheck="true">--备份日志</span><span class="token comment" spellcheck="true">--日志记录着对数据库的更新操作</span><span class="token keyword">backup</span> log tmo <span class="token keyword">to</span> <span class="token keyword">disk</span><span class="token operator">=</span><span class="token string">'c:\tmp\tmplog.bak'</span><span class="token comment" spellcheck="true">--完整恢复模式，需要备份和还原事务日志</span><span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token number">abc</span> <span class="token keyword">set</span> recovery <span class="token keyword">full</span><span class="token keyword">restore</span> <span class="token keyword">database</span> tmp <span class="token keyword">from</span> <span class="token keyword">disk</span><span class="token operator">=</span><span class="token string">'c:\blog\tmpfull1.bak'</span> <span class="token keyword">with</span> norecovery<span class="token keyword">restore</span> log tmp <span class="token keyword">from</span> <span class="token keyword">disk</span><span class="token operator">=</span><span class="token string">'c:\blog\tmplog1.bak'</span> <span class="token keyword">with</span> norecovery<span class="token keyword">restore</span> log tmp <span class="token keyword">from</span> <span class="token keyword">disk</span><span class="token operator">=</span><span class="token string">'c:\blog\tmplog2.bak'</span> <span class="token keyword">with</span> stopat<span class="token operator">=</span><span class="token string">'2020-12-08 22:29:27'</span><span class="token punctuation">,</span>recovery<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>遗漏了</strong>：视图，索引</p><p><strong>推荐阅读</strong>：</p><ul><li><a href="https://www.cnblogs.com/dingpeng9055/p/11190203.html" target="_blank" rel="noopener">数据库事务的四种隔离级别</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020十二月</title>
      <link href="posts/ee30.html"/>
      <url>posts/ee30.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p><font face="myfont" size=5>平静下来，去追求和谐</font></p><h1 id="1-日记"><a href="#1-日记" class="headerlink" title="1.日记"></a>1.日记</h1><h2 id="11-28"><a href="#11-28" class="headerlink" title="11.28"></a><code>11.28</code></h2><p>每个不被记录的日子，都可能是对时光的辜负</p><p>加油，憨</p><h2 id="12-06"><a href="#12-06" class="headerlink" title="12.06"></a><code>12.06</code></h2><p>做一些事之前先备份，</p><h2 id="12-09"><a href="#12-09" class="headerlink" title="12.09"></a><code>12.09</code></h2><p>有些事，</p><p>坚持不住的时候，一定要走出去。</p><p>不要想着坚持，也不要想着放弃。</p><p>或许过段时间，就不是事了。</p><h2 id="12-11"><a href="#12-11" class="headerlink" title="12.11"></a><code>12.11</code></h2><p>《赛博朋克2077》头昏，，，<br>CDPR，真是一家神奇的公司</p><h2 id="12-12"><a href="#12-12" class="headerlink" title="12.12"></a><code>12.12</code></h2><p>每段时光都会有它的价值，多用脑子生活。</p><h2 id="12-18"><a href="#12-18" class="headerlink" title="12.18"></a><code>12.18</code></h2><p><font size='5' face="myfont">清风一壶酒，明月一盏诗，此间三两意，及尔与星兮。</font></p><p><font size='5' face="myfont">hh，这个我啊，该是陪着我饮尽了多少的孤独清欢？</font></p><hr><p><font size='5' face="myfont">多少的烦忧与欣喜，有段时间可以清醒地让我成为一个废人了</font></p><p><font size='5' face="myfont">hh，我会笑着，书读少了？人生不够沧桑？人性暴走了？</font></p><hr>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构作业</title>
      <link href="posts/cd81.html"/>
      <url>posts/cd81.html</url>
      
        <content type="html"><![CDATA[<h2 id="期末复习"><a href="#期末复习" class="headerlink" title="期末复习"></a>期末复习</h2><p>算法：输入输出，确定性，有穷性，有效性</p><p>线性表： N个元素的有限序列；具有逻辑上的顺序性，即：排列有其先后次序；表中元素的数据类型相同。</p><p>顺序表： 将线性表中的元素相继存放在一个连续的存储空间中。元素的逻辑顺序与物理顺序一致。</p><p>线性链表： 对线性表的链接存储表示；分为：单链表、循环链表、双向链表；</p><p>单链表：节点可以连续、可以不连续存储；节点的逻辑顺序与其物理顺序可以不一致</p><p>引用型参数 <code>&amp;</code> 的使用，函数体内对其的操作是对实际变量的操作</p><p>栈和队列都是限制了存储位置的线性表，逻辑结构是线性结构</p><p>栈与数据的存储结构无关。</p><p>广义表：允许线性表的元素有其自身的结构</p><hr><p>结点的度：结点所拥有的子树的棵树</p><p>叶节点：度为0的节点</p><p>满二叉树，肯定是完全二叉树</p><p>完全二叉树特点：最下层的叶子结点集中在左部。</p><p>二叉排序树：节点左子树所有关键字小于节点关键字。</p><p>先序+后序：一般无法确定唯一一颗二叉树</p><p>平衡二叉树： 任一结点左右子树的高度之差的绝对值不超过1</p><p>二叉链表示一颗 N 个结点的二叉树有 N+1 个空指针域</p><hr><p><strong>内排序</strong>：排序期间数据记录全部存放在内存中。</p><p>排序算法的<strong>稳定性</strong>：两个相等的值排序后相对次序不变。</p><p>希尔排序，又称缩小增量排序，是一种不稳定的排序。</p><h2 id="堆排序及优先队列⭐"><a href="#堆排序及优先队列⭐" class="headerlink" title="堆排序及优先队列⭐"></a>堆排序及优先队列⭐</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> maxsize 100</span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> key<span class="token punctuation">;</span><span class="token punctuation">}</span>node<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    node data<span class="token punctuation">[</span>maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span>datalist<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">siftdown</span><span class="token punctuation">(</span>datalist<span class="token operator">&amp;</span>h<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    node w <span class="token operator">=</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">.</span>key <span class="token operator">>=</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> j<span class="token punctuation">;</span>            j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">siftup</span><span class="token punctuation">(</span>datalist<span class="token operator">&amp;</span>h<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    node w <span class="token operator">=</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">></span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">.</span>key <span class="token operator">&lt;=</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> j<span class="token punctuation">;</span>            j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">heapsort</span><span class="token punctuation">(</span>datalist <span class="token operator">&amp;</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将表转换成堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>h<span class="token punctuation">.</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token function">siftdown</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">,</span> h<span class="token punctuation">.</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> h<span class="token punctuation">.</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        node tmp <span class="token operator">=</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token function">siftdown</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    datalist l<span class="token punctuation">,</span>h<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the length of datalist:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the numbers:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    h<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>    <span class="token function">heapsort</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//先构建一个n为5的最小堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            h<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token function">siftup</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n the top 5 :\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d "</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="哈希表的实现及链地址法处理冲突"><a href="#哈希表的实现及链地址法处理冲突" class="headerlink" title="哈希表的实现及链地址法处理冲突"></a>哈希表的实现及链地址法处理冲突</h2><p>理解：<br>哈希可以理解为一种<strong>映射关系</strong>，这样会查找得快一些<br>但哈希可能带来<strong>key冲突</strong>的问题，于是有了冲突处理</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> node <span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">struct</span> node<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span>ha<span class="token punctuation">,</span><span class="token operator">*</span>hap<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>ha arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    hap p <span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token punctuation">)</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    p<span class="token operator">-></span>val <span class="token operator">=</span> num<span class="token punctuation">;</span>    hap tmp <span class="token operator">=</span> new ha<span class="token punctuation">;</span>    tmp<span class="token operator">-></span>val <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    tmp<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>ha arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    hap p <span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>val <span class="token operator">==</span> x<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>x<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the length of hashtable:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    hap arr <span class="token operator">=</span> new ha<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//define the pointer of hash-linklist</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//init</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the length of numbers:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\ninput the num:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insert</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> num<span class="token operator">%</span>n<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将num%n作为key</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the num should find:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> x<span class="token operator">%</span>n<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将num%n作为key</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"success,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> key<span class="token punctuation">;</span><span class="token punctuation">}</span>node<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    node data<span class="token punctuation">[</span>maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span>datalist<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">quicksort</span><span class="token punctuation">(</span>datalist<span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quicksort</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quicksort</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span>datalist<span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>    node cur <span class="token operator">=</span> l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span>l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">>=</span> cur<span class="token punctuation">.</span>key<span class="token punctuation">)</span>            right<span class="token operator">--</span><span class="token punctuation">;</span>        l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span>l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;=</span> cur<span class="token punctuation">.</span>key<span class="token punctuation">)</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>        l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>    <span class="token keyword">return</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">insertsort</span><span class="token punctuation">(</span>datalist<span class="token operator">&amp;</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>    node w<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            w <span class="token operator">=</span> l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">.</span>key <span class="token operator">&lt;</span> l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>                    l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="稀疏矩阵的转置"><a href="#稀疏矩阵的转置" class="headerlink" title="稀疏矩阵的转置"></a>稀疏矩阵的转置</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> val<span class="token punctuation">;</span><span class="token punctuation">}</span>trituple<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    trituple <span class="token operator">*</span>terms<span class="token punctuation">;</span>    <span class="token keyword">int</span> cols<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span>sparsematrix<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int rowsize[a.cols] 报错：表达式必须含有常量值</span><span class="token keyword">void</span> <span class="token function">transpose_fast</span><span class="token punctuation">(</span><span class="token keyword">const</span> sparsematrix<span class="token operator">&amp;</span>a<span class="token punctuation">,</span> sparsematrix<span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>rowsize <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span>a<span class="token punctuation">.</span>cols<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>rowstart <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span>a<span class="token punctuation">.</span>cols<span class="token punctuation">]</span><span class="token punctuation">;</span>    b<span class="token punctuation">.</span>rows <span class="token operator">=</span> a<span class="token punctuation">.</span>cols<span class="token punctuation">;</span>    b<span class="token punctuation">.</span>cols <span class="token operator">=</span> a<span class="token punctuation">.</span>rows<span class="token punctuation">;</span>    b<span class="token punctuation">.</span>cnt <span class="token operator">=</span> a<span class="token punctuation">.</span>cnt<span class="token punctuation">;</span>    b<span class="token punctuation">.</span>terms <span class="token operator">=</span> new trituple<span class="token punctuation">[</span>a<span class="token punctuation">.</span>cnt<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//忘了初始化，报错：写入位置 0xCCCCCCD8 时发生访问冲突。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>cnt <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>cols<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            rowsize<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            rowsize<span class="token punctuation">[</span>a<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        rowstart<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>cols<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            rowstart<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rowstart<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> rowsize<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//for (int i = 0; i &lt; a.cols; i++) {</span>        <span class="token comment" spellcheck="true">//    printf("%d %d\n", rowsize[i], rowstart[i]);</span>        <span class="token comment" spellcheck="true">//}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> rowstart<span class="token punctuation">[</span>a<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>row <span class="token operator">=</span> a<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>col<span class="token punctuation">;</span>            b<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>col <span class="token operator">=</span> a<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>row<span class="token punctuation">;</span>            b<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">=</span> a<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>            rowstart<span class="token punctuation">[</span>a<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    delete<span class="token punctuation">[</span><span class="token punctuation">]</span> rowsize<span class="token punctuation">;</span>    delete<span class="token punctuation">[</span><span class="token punctuation">]</span> rowstart<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sparsematrix a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the rows,cols and count:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">.</span>rows<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">.</span>cols<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">.</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span>terms <span class="token operator">=</span> new trituple<span class="token punctuation">[</span>a<span class="token punctuation">.</span>cnt<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\ninput the row,col and val for every items (index begin from 0) :\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">transpose_fast</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the ans:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>row<span class="token punctuation">,</span> b<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>col<span class="token punctuation">,</span> b<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈</title>
      <link href="posts/9199.html"/>
      <url>posts/9199.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-20-有效的括号"><a href="#1-20-有效的括号" class="headerlink" title="(1)20.有效的括号"></a>(1)20.有效的括号</h2><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;{&#39;</code>，<code>&#39;}&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><ul><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>注意空字符串可被认为是有效字符串。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        hashmap<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'('</span><span class="token punctuation">:</span><span class="token string">')'</span><span class="token punctuation">,</span><span class="token string">'{'</span><span class="token punctuation">:</span><span class="token string">'}'</span><span class="token punctuation">,</span><span class="token string">'['</span><span class="token punctuation">:</span><span class="token string">']'</span><span class="token punctuation">}</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token keyword">in</span> hashmap<span class="token punctuation">:</span> stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token operator">not</span> stack<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">elif</span> i<span class="token operator">!=</span>hashmap<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token operator">not</span> stack<span class="token comment" spellcheck="true">#注意：not stack是stack为空，不是stack==None</span><span class="token comment" spellcheck="true">#其它版本：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'{'</span><span class="token punctuation">:</span> <span class="token string">'}'</span><span class="token punctuation">,</span>  <span class="token string">'['</span><span class="token punctuation">:</span> <span class="token string">']'</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">:</span> <span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">:</span> <span class="token string">'?'</span><span class="token punctuation">}</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'?'</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> c <span class="token keyword">in</span> dic<span class="token punctuation">:</span> stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span>            <span class="token keyword">elif</span> dic<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">!=</span> c<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>         <span class="token keyword">return</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息技术实践</title>
      <link href="posts/7bab.html"/>
      <url>posts/7bab.html</url>
      
        <content type="html"><![CDATA[<h3 id="windows命令："><a href="#windows命令：" class="headerlink" title="windows命令："></a>windows命令：</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>cls</code></td><td></td></tr><tr><td><code>help</code></td><td></td></tr><tr><td><code>dir</code></td><td></td></tr><tr><td><code>TREE</code></td><td>显示目录结构</td></tr><tr><td><code>COPY</code></td><td></td></tr><tr><td><code>MOVE</code></td><td></td></tr><tr><td><code>DEL</code></td><td></td></tr><tr><td><code>MD</code></td><td>创建文件夹</td></tr><tr><td><code>RD</code></td><td>删除文件夹</td></tr></tbody></table><h3 id="windows批处理文件："><a href="#windows批处理文件：" class="headerlink" title="windows批处理文件："></a>windows批处理文件：</h3><ul><li>一次性运行一批CMD命令，可以写在文本文档中</li><li>以<code>bat</code>为后缀名，双击可执行</li></ul><h3 id="Linux："><a href="#Linux：" class="headerlink" title="Linux："></a>Linux：</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>cd</code></td><td></td></tr><tr><td><code>pwd</code></td><td>显示当前所在路径</td></tr><tr><td><code>ls</code></td><td>显示当前路径文件列表</td></tr><tr><td><code>date</code></td><td></td></tr><tr><td><code>bc</code></td><td>计算器，<code>quit</code>退出</td></tr><tr><td><code>man</code></td><td>显示命令的帮助</td></tr><tr><td><code>cp</code> <code>mv</code> <code>rm</code></td><td>文件复制、移动、删除</td></tr><tr><td><code>mkdir</code> <code>rmdir</code></td><td>创建新目录，删除空目录</td></tr></tbody></table><hr><table><thead><tr><th>击键</th><th>描述</th></tr></thead><tbody><tr><td><code>TAB</code></td><td>自动补全命令</td></tr><tr><td><code>CTRL+C</code></td><td>终止当前命令</td></tr><tr><td><code>CTRL+D</code></td><td>退出终端</td></tr></tbody></table><hr><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>chmod</code></td><td>修改属性</td></tr><tr><td><code>cat</code></td><td>查看文件内容</td></tr><tr><td><code>touch t.txt</code></td><td>创建一个叫<code>t.txt</code>的文件</td></tr><tr><td><code>rm t.txt</code></td><td>删除一个叫<code>t.txt</code>的文件，删除文件可以直接用<code>rm</code></td></tr><tr><td><code>rm -rf m</code></td><td>删除一个叫<code>m</code>的文件夹</td></tr></tbody></table><blockquote><p><strong>cd 中的路径操作：</strong><br><code>cd /</code> 返回根目录（最高级）<br><code>cd ..</code>返回上级目录<br><code>cd m</code> 与 <code>cd ./m</code>相同<br><code>cd ~</code>普通用户相当于<code>cd /home/当前用户名</code>，root用户相当于 <code>cd /root</code></p></blockquote><blockquote><p><strong>绝对路径</strong>由 <code>/</code> 开始写起，如<code>/home/user</code></p></blockquote><blockquote><p>权限不足时<code>sudo -i</code>进入<strong>超级用户模式</strong></p></blockquote><h3 id="linux文件属性"><a href="#linux文件属性" class="headerlink" title="linux文件属性"></a>linux文件属性</h3><p>在Linux中我们可以使用<code>ll</code>或者<code>ls –l</code>命令来显示一个文件的属性以及文件所属的用户和组</p><p>现在文件夹m有如下信息：<code>drwxr-xr-x 4 root root 4096 Sep  6 03:51 m/</code></p><blockquote><p>第一个字符代表文件是目录、文件或链接文件等。<br><code>d</code>表示为目录，<code>-</code>表示为文件</p></blockquote><blockquote><p>接下来的字符中，三个为一组。且均为 <code>rwx</code> 的三个参数的组合。其中，<code>[ r ]</code>代表可读(read)、<code>[ w ]</code>代表可写(write)、<code>[ x ]</code>代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号<code>[ - ]</code>而已。<br><img src="https://www.runoob.com/wp-content/uploads/2014/06/363003_1227493859FdXT.png"></p></blockquote><hr><blockquote><p>关于文件属性为XXX的解释：<br><code>rwxrw----</code>  &lt;=&gt;  <code>111110000</code>  &lt;=&gt; <code>760</code></p></blockquote><blockquote><p><code>chmod  XXX  文件名</code><br>–&gt;修改文件为XXX属性</p></blockquote><blockquote><p><code>chmod  [-R]  XXX  目录名</code><br>–&gt;修改文件夹的属性，这里-R参数指示递归修改，将目录下所有文件的属性均修改为xxx</p></blockquote><p>更多信息：<a href="https://www.runoob.com/linux/linux-file-attr-permission.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-file-attr-permission.html</a></p><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><p>安装vim: <code>sudo apt-get install vim</code></p><p><code>vim 文件名</code>：<br>直接打开或新建一个文件</p><p>三种工作模式：</p><ul><li><strong>查看模式</strong></li><li><strong>编辑模式</strong>，在查看模式下按下<code>i</code> or <code>o</code> or <code>q</code>进入，<code>Esc</code>退出</li><li><strong>命令模式</strong>，在查看模式下按下<code>:</code>进入</li></ul><table><thead><tr><th>查看模式下</th><th>描述</th></tr></thead><tbody><tr><td><code>0</code></td><td>移动到当前行开头</td></tr><tr><td><code>$</code></td><td>移动到当前行末尾</td></tr><tr><td><code>gg</code></td><td>移动到文件开头</td></tr><tr><td><code>G</code></td><td>移动到文件末尾</td></tr><tr><td><code>[n]G</code></td><td>移动到第n行</td></tr><tr><td><code>[n]space</code></td><td></td></tr><tr><td><code>[n]Enter</code></td><td></td></tr><tr><td><code>dd</code> <code>[n]dd</code></td><td>删除行</td></tr><tr><td><code>yy</code> <code>[n]yy</code></td><td>复制行</td></tr><tr><td><code>p</code></td><td>粘贴</td></tr><tr><td><code>u</code></td><td>撤销</td></tr></tbody></table><hr><table><thead><tr><th>命令模式下</th><th>描述</th></tr></thead><tbody><tr><td><code>w</code></td><td>保存</td></tr><tr><td><code>q</code> <code>q!</code></td><td>退出,强制退出</td></tr><tr><td><code>wq</code></td><td>保存退出</td></tr><tr><td><code>set nu</code></td><td>显示行号</td></tr><tr><td><code>set nonu</code></td><td></td></tr><tr><td><code>syntax on</code></td><td>显示语法高亮</td></tr></tbody></table><h3 id="shell基础"><a href="#shell基础" class="headerlink" title="shell基础"></a>shell基础</h3><p>shell: 提供了用户与内核交互的接口</p><p>一般情况下 vim建立的文本文件属性值为<code>644</code>，需要添加<code>x</code>属性 <code>chmod 755 ~~~</code></p><p>变量是一个名字，不是一个值，用<code>$</code>来取值</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><code>echo</code></td><td>打印一行，自动换行</td></tr><tr><td><code>printf</code></td><td></td></tr><tr><td><code>var=num</code></td><td>变量不区分类型，<code>=</code>前后不能有空格</td></tr></tbody></table><hr><p>运行shell脚本:<br>① <code>chmod +x ./test.sh</code>  #使脚本具有执行权限<br>② <code>./test.sh</code>  #执行脚本</p><p>部分摘自：<a href="https://www.runoob.com/linux/linux-shell.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-shell.html</a></p><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td><code>-eq</code></td><td>两数相等返回true</td></tr><tr><td><code>-ne</code></td><td></td></tr><tr><td><code>-gt</code> <code>-ge</code></td><td><code>&gt;</code> <code>&gt;=</code></td></tr><tr><td><code>-lt</code> <code>-le</code></td><td><code>&lt;</code> <code>&lt;=</code></td></tr></tbody></table><h3 id="课堂作业："><a href="#课堂作业：" class="headerlink" title="课堂作业："></a>课堂作业：</h3><p>一、写出在Linux终端下，如下操作序列的命令行</p><p>（1）回到家目录<br>&emsp;&emsp;&emsp;<code>cd /home</code></p><p>（2）在家目录下建立test目录<br>&emsp;&emsp;&emsp;<code>mkdir test</code></p><p>（3）在其中建立t.txt文件（touch   t.txt），建立目录m<br>&emsp;&emsp;&emsp;<code>touch t.txt &amp;&amp; mkdir m</code></p><p>（4）将t.txt复制5份到m中，分别命名为t1.txt~t5.txt<br>&emsp;&emsp;&emsp;<code>cp t.txt m/t1.txt &amp;&amp; cp t.txt m/t2.txt &amp;&amp; cp t.txt m/t3.txt &amp;&amp; cp t.txt m/t4.txt &amp;&amp;cp t.txt m/t5.txt</code></p><p>（5）复制m目录为n目录<br>&emsp;&emsp;&emsp;<code>cp -r m n</code></p><p>（6）去掉m目录的三个x属性，出现什么情况？描述一下，再修改回来<br>&emsp;&emsp;&emsp;<code>chmod 644 m</code><br>&emsp;&emsp;&emsp;<code>文件无法打开</code><br>&emsp;&emsp;&emsp;<code>chmod 755 m</code><br>&emsp;说明：<code>rwxr-xr-x</code>的755变成644 </p><p>（7）修改n目录属性，使其及其下面的所有文件均具有最大权限（777）。<br>&emsp;&emsp;&emsp;<code>chmod -R 777 n</code><br>&emsp;注意：那个R区分大小写</p><p>（8）进入/tmp目录，选取一个文件，cp到你的m目录<br>&emsp;&emsp;&emsp;<code>cp /tmp/temp.txt m</code></p><hr><p>二、用shell写一个猜价格脚本</p><p>提示用户输入一个价格上限，然后根据上限数值产生一个合适的随机数价格。</p><p>然后提示用户输入猜测值。提示用户输入的猜测值与真实值的高低，直到用户猜中为止。</p><p>注：shell中，可以使用$RANDOM获得一个随机整数。<br><img src="https://img-blog.csdnimg.cn/20200913130551384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" alt="代码"></p><p><img src="https://img-blog.csdnimg.cn/20200913130551391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" alt="结果"></p><p><strong>注意：</strong> </p><ul><li><code>[</code> <code>]</code>左右要有空格</li><li><code>&quot;$num&quot;</code>，<code>&quot;$x&quot;</code> 的双引号都可以去掉</li><li>shell算术运算符有<code>==</code>，没有<code>&gt;</code> <code>&lt;</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小站的更新</title>
      <link href="posts/9280.html"/>
      <url>posts/9280.html</url>
      
        <content type="html"><![CDATA[<div class="admonition error"><p class="admonition-title">一些公告</p><ol><li>文章通常会在晚上 11:00 更新</li><li>左下角有音乐播放器，qq音乐的歌单，部分由于版权无法播放</li><li>右下角有菜单收缩，跳转页首按钮</li><li>关于特效，只留了点击爱心，可以有：动态樱花、点击烟花</li><li>欢迎留言，欢迎交流与分享</li></ol></div><h3 id="V4-0-——–-2021-03-13"><a href="#V4-0-——–-2021-03-13" class="headerlink" title="V4.0 ——– 2021.03.13"></a>V4.0 ——– <em>2021.03.13</em></h3><ol><li>加入Links界面</li><li>添加hexo-admonition</li><li>修复代码选中高度不符</li></ol><h3 id="V3-5-——–-2021-03-07"><a href="#V3-5-——–-2021-03-07" class="headerlink" title="V3.5 ——– 2021.03.07"></a>V3.5 ——– <em>2021.03.07</em></h3><ol><li>删除live-2d插件</li><li>左下角加入音乐播放器</li><li>右下角加入跳转箭头、目录收缩按钮</li></ol><h3 id="V3-3-——–-2021-01-23"><a href="#V3-3-——–-2021-01-23" class="headerlink" title="V3.3 ——– 2021.01.23"></a>V3.3 ——– <em>2021.01.23</em></h3><ol><li>修改CSS中的 <code>progress-bar</code> 和 <code>&lt;a&gt;</code></li><li>文章增加属性<code>top</code>，置顶为2，普通为1，其它为0，置底为-1，-2</li><li>以后好好写文章，不再改了</li></ol><h3 id="V2-7-——–-2020-10-09"><a href="#V2-7-——–-2020-10-09" class="headerlink" title="V2.7 ——– 2020.10.09"></a>V2.7 ——– <em>2020.10.09</em></h3><ol><li>更换域名为(<a href="http://www.unielu.com/">www.unielu.com</a>)</li></ol><h3 id="V2-5-——–-2020-08-05"><a href="#V2-5-——–-2020-08-05" class="headerlink" title="V2.5 ——– 2020.08.05"></a>V2.5 ——– <em>2020.08.05</em></h3><ol><li><code>npm install --save hexo-helper-live2d</code><br>PC端添加了右下角的小朋友</li></ol><h3 id="V2-3"><a href="#V2-3" class="headerlink" title="V2.3"></a>V2.3</h3><ol><li>文章配图更新</li><li>更改比较多的样式，以后好好写blog了</li></ol><h3 id="V1-8"><a href="#V1-8" class="headerlink" title="V1.8"></a>V1.8</h3><ol><li>更改移动端的一些问题</li><li>移动端有大白啦</li></ol><h3 id="V1-2"><a href="#V1-2" class="headerlink" title="V1.2"></a>V1.2</h3><ol><li>加入音乐功能</li><li>删除banner上的Github链接</li><li>更改一些图片</li></ol><h3 id="V1-0"><a href="#V1-0" class="headerlink" title="V1.0"></a>V1.0</h3><ol><li>小站成功上线啦，由于是静态网页托管在Github上，不足之处还请谅解。</li></ol><pre class="line-numbers language-cmd"><code class="language-cmd">ping www.unielu.com ➡ 185.199.108.153（物理地址：美国）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 置顶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序</title>
      <link href="posts/8ab2.html"/>
      <url>posts/8ab2.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p>本着做一个万能墙去开发一个小程序，<br>基本逻辑，前端完成了，删除、回复消息功能还没做。。</p><p>然后发现社交功能不对个人主体开放，上线不了只能体验。<br>到此记，<code>10.24</code></p><h1 id="1-基础"><a href="#1-基础" class="headerlink" title="1.基础"></a>1.基础</h1><p><strong>学习过程</strong>：</p><ol><li>学堂在线相关课程的学习</li><li>微信官方文档的查看</li><li>动手实践，百度</li></ol><p><strong>相关网站</strong>：</p><ul><li>微信开发管理平台：<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">https://mp.weixin.qq.com</a></li><li>微信官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/framework/</a></li></ul><p>基本每个界面都有以下4个文件：<code>wxml</code> , <code>wxss</code> , <code>js</code> , <code>json</code></p><p><strong>部分代码</strong>：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 发送消息到云端数据库的代码</span><span class="token keyword">const</span> app<span class="token operator">=</span><span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> db<span class="token operator">=</span>wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//省略其它</span>  send<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> that<span class="token operator">=</span><span class="token keyword">this</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>data<span class="token punctuation">.</span>detail<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>openid<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>data<span class="token punctuation">.</span>detail<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      wx<span class="token punctuation">.</span><span class="token function">showModal</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'提示'</span><span class="token punctuation">,</span>        content<span class="token punctuation">:</span> <span class="token string">'提交内容不能为空'</span><span class="token punctuation">,</span>        showCancel<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'info'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      data<span class="token punctuation">:</span><span class="token punctuation">{</span>        content<span class="token punctuation">:</span> that<span class="token punctuation">.</span>data<span class="token punctuation">.</span>detail<span class="token punctuation">,</span>        total_likes<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        face_url<span class="token punctuation">:</span> app<span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>userInfo<span class="token punctuation">.</span>avatarUrl<span class="token punctuation">,</span>        send_time<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        username<span class="token punctuation">:</span> app<span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>userInfo<span class="token punctuation">.</span>nickName      <span class="token punctuation">}</span><span class="token punctuation">,</span>      success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>        wx<span class="token punctuation">.</span><span class="token function">showModal</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          title<span class="token punctuation">:</span> <span class="token string">'提示'</span><span class="token punctuation">,</span>          content<span class="token punctuation">:</span> <span class="token string">'恭喜提交成功'</span><span class="token punctuation">,</span>          showCancel<span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 从云端数据库获取消息的代码</span><span class="token keyword">const</span> db<span class="token operator">=</span>wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  onLoad<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> that <span class="token operator">=</span><span class="token keyword">this</span>    db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'info'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        that<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> list<span class="token punctuation">:</span> res<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--将消息便于查看的html--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scroll-view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>scbg<span class="token punctuation">'</span></span> <span class="token attr-name">scroll-y</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>true<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{list}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itemName<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>box<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>firstblock<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>touxiang<span class="token punctuation">'</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>{{itemName.face_url}}<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>person<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>name<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>showname<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>{{itemName.username}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>tel<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>showtime<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>{{itemName.send_time}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>secondblock<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>content<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>{{itemName.content}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>thirdblock<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>like<span class="token punctuation">'</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>/images/like.png<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>num<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>{{itemName.total_likes}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scroll-view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>一个导图</strong>：<br><img src="https://img-blog.csdnimg.cn/20201024155225768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center"></p><h1 id="2-小结"><a href="#2-小结" class="headerlink" title="2.小结"></a>2.小结</h1><p><strong>学习了</strong></p><ul><li>微信小程序开发的基本流程，</li><li>html，css</li><li>js，json，mongdb数据库，</li></ul><p><strong>项目流程</strong>：<br>基本最小逻辑实现 <code>--&gt;</code> 基本实现 <code>--&gt;</code> 发展功能</p><p><strong>其它</strong>：<br><a href="https://developers.weixin.qq.com/miniprogram/product/material/" target="_blank" rel="noopener">小程序开放的服务类目</a></p>]]></content>
      
      
      <categories>
          
          <category> 应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图</title>
      <link href="posts/b7fa.html"/>
      <url>posts/b7fa.html</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title="preface"></a><em>preface</em></h2><p>在无向图中，如果从顶点<code>vi</code>到顶点<code>vj</code>有路径，则称<code>vi</code>和<code>vj</code>连通。如果图中任意两个顶点之间都连通，则称该图为<strong>连通图</strong>，否则，称该图为非连通图，则其中的极大连通子图称为<strong>连通分量</strong>，这里所谓的极大是指子图中包含的顶点个数极大。在有向图中，如果对于每一对顶点vi和vj，从<code>vi</code>到<code>vj</code>和从<code>vj</code>到<code>vi</code>都有路径，则称该图为<strong>强连通图</strong>；否则，将其中的极大强连通子图称为<strong>强连通分量</strong>。</p><hr><p>算法笔记（并查集）：<a href="https://zhuanlan.zhihu.com/p/93647900" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/93647900</a></p><h2 id="322-重新安排行程（8-27"><a href="#322-重新安排行程（8-27" class="headerlink" title="322.重新安排行程（8.27)"></a>322.重新安排行程（<code>8.27</code>)</h2><p>给定一个机票的字符串二维数组 [from, to]，子数组中的两个成员分别表示飞机出发和降落的机场地点，对该行程进行重新规划排序。所有这些机票都属于一个从 JFK（肯尼迪国际机场）出发的先生，所以该行程必须从 JFK 开始。</p><p>说明:</p><ul><li>如果存在多种有效的行程，你可以按字符自然排序返回最小的行程组合。例如，行程 [“JFK”, “LGA”] 与 [“JFK”, “LGB”] 相比就更小，排序更靠前</li><li>所有的机场都用三个大写字母表示（机场代码）。</li><li>假定所有机票至少存在一种合理的行程。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#map硬套不行啊，会在图里死循环。</span><span class="token comment" spellcheck="true">#什么是欧拉路径？欧拉路径就是一条能够不重不漏地经过图上的**每一条边**的路径，</span><span class="token comment" spellcheck="true">#即小学奥数中的一笔画问题。而若这条路径的起点和终点相同，则将这条路径称为欧拉回路。</span><span class="token comment" spellcheck="true">#如何判断一个图是否有欧拉路径呢？显然，与一笔画问题相同，一个图有欧拉路径需要以下几个条件：</span><span class="token comment" spellcheck="true"># 1. 首先，这是一个连通图</span><span class="token comment" spellcheck="true"># 2. 若是无向图，则这个图的度数为奇数的点的个数必须是0或2；</span><span class="token comment" spellcheck="true">#    若是有向图，则要么所有点的入度和出度相等，要么有且只有两个点的入度分别比出度大1和少1</span><span class="token comment" spellcheck="true">#具有欧拉回路的无向图称为欧拉图。</span><span class="token comment" spellcheck="true">#具有欧拉通路但不具有欧拉回路的无向图称为半欧拉图。</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findItinerary</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tickets<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> vec<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#pop出最小值</span>                tmp<span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>vec<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>curr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#一个{depart:[arrive...]}的字典</span>        vec<span class="token operator">=</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        <span class="token keyword">for</span> depart<span class="token punctuation">,</span>arrive <span class="token keyword">in</span> tickets<span class="token punctuation">:</span>            vec<span class="token punctuation">[</span>depart<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>arrive<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#便于排序</span>        <span class="token keyword">for</span> key <span class="token keyword">in</span> vec<span class="token punctuation">:</span>            heapq<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>vec<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#heapq是一个标准库模块,优先队列算法</span>        <span class="token comment" spellcheck="true">#heapify转换列表成为堆结构</span>        stack<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span><span class="token string">"JFK"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> stack<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#dfs和逆序那块迷糊</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li>由于题目中说必然存在一条有效路径(至少是半欧拉图)，所以算法不需要回溯（既加入到结果集里的元素不需要删除）</li><li>整个图最多存在一个死胡同(出度和入度相差1），且这个死胡同一定是最后一个访问到的，否则无法完成一笔画。</li><li>DFS的调用其实是一个拆边的过程（既每次调用删除一条边），一定是递归到这个死胡同（无边可拆）后递归函数开始返回。所以死胡同是第一个加入栈中的元素。</li><li>最后逆序的输出即可。</li></ol></blockquote><h2 id="133-克隆图（8-12"><a href="#133-克隆图（8-12" class="headerlink" title="133.克隆图（8.12)"></a>133.克隆图（<code>8.12</code>)</h2><p>给你无向 连通 图中一个节点的引用，请你返回该图的 深拷贝（克隆）。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>visited<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#新node字典</span>    <span class="token keyword">def</span> <span class="token function">cloneGraph</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span> node        <span class="token keyword">if</span> node <span class="token keyword">in</span> self<span class="token punctuation">.</span>visited<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span>        clone_node<span class="token operator">=</span>Node<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token operator">=</span>clone_node        clone_node<span class="token punctuation">.</span>neighbors<span class="token operator">=</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>cloneGraph<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> node<span class="token punctuation">.</span>neighbors<span class="token punctuation">]</span>        <span class="token keyword">return</span> clone_node<span class="token comment" spellcheck="true"># 对于一张图而言，它的深拷贝即构建一张与原图结构，值均一样的图，但是其中的节点不再是原来图节点的引用.</span><span class="token comment" spellcheck="true"># 或者用copy.deepcopy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="207-课程表（8-4"><a href="#207-课程表（8-4" class="headerlink" title="207.课程表（8.4)"></a>207.课程表（<code>8.4</code>)</h2><p>你这个学期必须选修 <code>numCourse</code> 门课程，记为 <code>0</code> 到 <code>numCourse-1</code> 。</p><p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 <code>0</code> ，你需要先完成课程 <code>1</code> ，我们用一个匹配来表示他们：<code>[0,1]</code></p><p>给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canFinish</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numCourses<span class="token punctuation">:</span> int<span class="token punctuation">,</span> prerequisites<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        relation<span class="token operator">=</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        indegree<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>numCourses   <span class="token comment" spellcheck="true">#入度值列表</span>        <span class="token keyword">for</span> info <span class="token keyword">in</span> prerequisites<span class="token punctuation">:</span>            relation<span class="token punctuation">[</span>info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#基础：[进阶]关系字典</span>            indegree<span class="token punctuation">[</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>        <span class="token comment" spellcheck="true">#先建一个入度为0的队列</span>        q <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">[</span>c <span class="token keyword">for</span> c <span class="token keyword">in</span> range<span class="token punctuation">(</span>numCourses<span class="token punctuation">)</span> <span class="token keyword">if</span> indegree<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        visited <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> q<span class="token punctuation">:</span>            visited <span class="token operator">+=</span> <span class="token number">1</span>            u <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> relation<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>                indegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">if</span> indegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> visited <span class="token operator">==</span> numCourses<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>小结：</strong></p><ul><li>核心思想：以入度进行BFS</li><li>入度：图中的一个节点，多少个节点指向它</li></ul><p>唔，经典拓扑图的算法.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心</title>
      <link href="posts/8ca6.html"/>
      <url>posts/8ca6.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="(0)前言"></a>(0)前言</h2><p>通过<strong>局部最优</strong>得到全局最优解。</p><h2 id="1-55-跳跃游戏"><a href="#1-55-跳跃游戏" class="headerlink" title="(1)55.跳跃游戏"></a>(1)55.跳跃游戏</h2><p>给定一个非负整数数组，你最初位于数组的第一个位置。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个位置。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canJump</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        max_pos<span class="token operator">=</span><span class="token number">0</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">></span>max_pos<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>            max_pos<span class="token operator">=</span>max<span class="token punctuation">(</span>max_pos<span class="token punctuation">,</span>i<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> max_pos<span class="token operator">>=</span>n<span class="token number">-1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-45-跳跃游戏-II"><a href="#2-45-跳跃游戏-II" class="headerlink" title="(2)45.跳跃游戏 II"></a>(2)45.跳跃游戏 II</h2><p>给定一个非负整数数组，你最初位于数组的第一个位置。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">jump</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">0</span>        count<span class="token punctuation">,</span>end<span class="token punctuation">,</span>max_pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            max_pos<span class="token operator">=</span>max<span class="token punctuation">(</span>max_pos<span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> i<span class="token operator">==</span>end<span class="token punctuation">:</span>       <span class="token comment" spellcheck="true">#解法的核心</span>                end<span class="token operator">=</span>max_pos                 count<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> end<span class="token operator">>=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> count        <span class="token keyword">return</span> count<span class="token comment" spellcheck="true"># 经典贪心</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学</title>
      <link href="posts/c6d1.html"/>
      <url>posts/c6d1.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试题64-求1-2-…-n"><a href="#面试题64-求1-2-…-n" class="headerlink" title="面试题64. 求1+2+…+n"></a>面试题64. 求1+2+…+n</h2><p>求 <code>1+2+...+n </code>，要求<strong>不能使用</strong>乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sumNums</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">return</span> n <span class="token operator">and</span> n<span class="token operator">+</span>self<span class="token punctuation">.</span>sumNums<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 学会了and的特性</span><span class="token comment" spellcheck="true"># a and b 返回 b, a and 0 返回 a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136.只出现一次的数字"></a>136.只出现一次的数字</h2><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均<strong>出现两次</strong>。找出那个只出现了一次的元素。</p><p>说明：</p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">return</span> reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">^</span> y<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reduce(function, iterable[, initializer])内置函数</span><span class="token comment" spellcheck="true">#异或（在二进制基础上）的特性：a^a=0，a^0=a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="172-阶乘后的零"><a href="#172-阶乘后的零" class="headerlink" title="172.阶乘后的零"></a>172.阶乘后的零</h2><p>给定一个整数 n，返回 n! 结果尾数中零的数量。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        cnt <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            n <span class="token operator">//=</span> <span class="token number">5</span>            cnt <span class="token operator">+=</span> n        <span class="token keyword">return</span> cnt<span class="token comment" spellcheck="true"># 数学观察</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="231-2的幂"><a href="#231-2的幂" class="headerlink" title="231.2的幂"></a>231.2的幂</h2><p>给定一个整数，编写一个函数来判断它是否是 2 的幂次方。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">return</span> n<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> n<span class="token operator">&amp;</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：</p><table><thead><tr><th>num</th><th>n</th><th>n-1</th><th>n&amp;(n-1)</th></tr></thead><tbody><tr><td>2**0</td><td>0001</td><td>0000</td><td>0000</td></tr><tr><td>2**1</td><td>0010</td><td>0001</td><td>0000</td></tr><tr><td>2**2</td><td>0100</td><td>0011</td><td>0000</td></tr></tbody></table><h2 id="60-第k个排列"><a href="#60-第k个排列" class="headerlink" title="60.第k个排列"></a>60.第k个排列</h2><p>给出集合 [1,2,3,…,n]，其所有元素共有 n! 种排列。</p><p>按大小顺序列出所有排列情况，并一一标记，当 n = 3 时, 所有排列如下：<br>“123”，”132”，”213”，”231”，”312”，”321”</p><p>给定 <code>n</code> 和 <code>k</code>，返回第 <code>k</code> 个排列。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getPermutation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token string">""</span>        factroial<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            factroial<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token operator">*</span>factroial<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        valid<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        k<span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            order<span class="token operator">=</span>k<span class="token operator">//</span>factroial<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                order<span class="token operator">-=</span>valid<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">if</span> order<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    ans<span class="token operator">+=</span>str<span class="token punctuation">(</span>j<span class="token punctuation">)</span>                    valid<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>                    <span class="token keyword">break</span>            k <span class="token operator">%=</span> factroial<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#康托展开，不懂</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计数质数"><a href="#计数质数" class="headerlink" title="计数质数"></a>计数质数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>n        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>n<span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">:</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>len<span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">:</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sum<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token comment" spellcheck="true">#埃氏筛</span><span class="token comment" spellcheck="true">#那个i的范围还是没懂</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树</title>
      <link href="posts/5b58.html"/>
      <url>posts/5b58.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-二叉树的遍历"><a href="#1-二叉树的遍历" class="headerlink" title="(1)二叉树的遍历"></a>(1)二叉树的遍历</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1.中序遍历：</span><span class="token comment" spellcheck="true"># -->走左边-->记录-->走右边</span><span class="token comment" spellcheck="true"># 遍历BST非递减</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                <span class="token keyword">yield</span> <span class="token keyword">from</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">yield</span> node<span class="token punctuation">.</span>val                <span class="token keyword">yield</span> <span class="token keyword">from</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> inorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#关于yield，next的使用</span><span class="token comment" spellcheck="true">#找到BST中第k小的元素：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                <span class="token keyword">yield</span> <span class="token keyword">from</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">yield</span> node<span class="token punctuation">.</span>val                <span class="token keyword">yield</span> <span class="token keyword">from</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        it <span class="token operator">=</span>inorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token operator">=</span>next<span class="token punctuation">(</span>it<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 2.前序遍历：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">preorder</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                <span class="token keyword">yield</span> node<span class="token punctuation">.</span>val                <span class="token keyword">yield</span> <span class="token keyword">from</span> preorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">yield</span> <span class="token keyword">from</span> preorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> preorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 3. 后序遍历</span><span class="token comment" spellcheck="true"># 3.1 N叉树后序遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">postorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> <span class="token string">'Node'</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> node<span class="token punctuation">.</span>children<span class="token punctuation">:</span> <span class="token keyword">yield</span> <span class="token keyword">from</span> f<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token keyword">yield</span> node<span class="token punctuation">.</span>val        <span class="token keyword">return</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-112-路径总和"><a href="#2-112-路径总和" class="headerlink" title="(2)112. 路径总和"></a>(2)112. 路径总和</h2><p>给定一个二叉树和一个目标和，判断该树中<code>是否存在</code>根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。<br>说明: 叶子节点是指没有子节点的节点。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> sum<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        sum<span class="token operator">-=</span>root<span class="token punctuation">.</span>val        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">.</span>left <span class="token operator">and</span> <span class="token operator">not</span> root<span class="token punctuation">.</span>right <span class="token punctuation">:</span>            <span class="token keyword">return</span> sum<span class="token operator">==</span><span class="token number">0</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>hasPathSum<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>sum<span class="token punctuation">)</span> <span class="token operator">or</span> self<span class="token punctuation">.</span>hasPathSum<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-113-路径总和II"><a href="#3-113-路径总和II" class="headerlink" title="(3)113.路径总和II"></a>(3)113.路径总和II</h2><p>给定一个二叉树和一个目标和，<code>找到所有</code>从根节点到叶子节点路径总和等于给定目标和的路径。<br>说明: 叶子节点是指没有子节点的节点。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> sum_<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root <span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">[</span>root<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> stack<span class="token punctuation">:</span>            val<span class="token punctuation">,</span>node<span class="token operator">=</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">.</span>left <span class="token operator">and</span> <span class="token operator">not</span> node<span class="token punctuation">.</span>right <span class="token operator">and</span> sum<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token operator">==</span>sum_<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token operator">+</span><span class="token punctuation">[</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token operator">+</span><span class="token punctuation">[</span>node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 方法二：回溯法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>path<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span>            path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> k<span class="token operator">==</span>node<span class="token punctuation">.</span>val <span class="token operator">and</span> <span class="token operator">not</span> node<span class="token punctuation">.</span>left <span class="token operator">and</span> <span class="token operator">not</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                 ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            bk<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>path<span class="token punctuation">,</span>k<span class="token operator">-</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            bk<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>path<span class="token punctuation">,</span>k<span class="token operator">-</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        bk<span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-437-路径总和III"><a href="#4-437-路径总和III" class="headerlink" title="(4)437.路径总和III"></a>(4)437.路径总和III</h2><p>给定一个二叉树，它的每个结点都存放着一个整数值。<br>找出路径和等于给定数值的路径总数。<br>路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> sum<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>pathSum<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>pathSum<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>sum<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>root<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        path<span class="token operator">-=</span>root<span class="token punctuation">.</span>val        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">if</span> path<span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-翻转二叉树"><a href="#5-翻转二叉树" class="headerlink" title="(5)翻转二叉树"></a>(5)翻转二叉树</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">invert</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span>             root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root<span class="token punctuation">.</span>right<span class="token operator">=</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>root<span class="token punctuation">.</span>left            invert<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            invert<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        invert<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-二叉树的层平均值"><a href="#6-二叉树的层平均值" class="headerlink" title="(6)二叉树的层平均值"></a>(6)二叉树的层平均值</h2><p>给定一个非空二叉树, 返回一个由每层节点平均值组成的数组。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">averageOfLevels</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>float<span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span>             <span class="token keyword">if</span> len<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token operator">==</span>depth<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>node<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ans<span class="token punctuation">[</span>depth<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>sum<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">/</span>len<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> ans<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-相同的树"><a href="#7-相同的树" class="headerlink" title="(7)相同的树"></a>(7)相同的树</h2><p>给定两个二叉树，编写一个函数来检验它们是否相同。</p><p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> q<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> p<span class="token operator">==</span>None <span class="token operator">and</span> q<span class="token operator">==</span>None<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> p<span class="token operator">==</span>None <span class="token operator">or</span> q<span class="token operator">==</span>None<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> p<span class="token punctuation">.</span>val<span class="token operator">!=</span>q<span class="token punctuation">.</span>val<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>isSameTree<span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">,</span>q<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">and</span> self<span class="token punctuation">.</span>isSameTree<span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">,</span>q<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-二叉树的深度"><a href="#8-二叉树的深度" class="headerlink" title="(8)二叉树的深度"></a>(8)二叉树的深度</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 最大深度</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            left_height<span class="token operator">=</span>self<span class="token punctuation">.</span>maxDepth<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            right_height<span class="token operator">=</span>self<span class="token punctuation">.</span>maxDepth<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>left_height<span class="token punctuation">,</span>right_height<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token comment" spellcheck="true"># 最小深度</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> depth<span class="token operator">></span>self<span class="token punctuation">.</span>ans<span class="token punctuation">:</span> <span class="token keyword">return</span>             <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">.</span>left <span class="token operator">and</span> <span class="token operator">not</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>ans<span class="token operator">=</span>min<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ans<span class="token punctuation">,</span>depth<span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span> dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span> dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-左叶子之和"><a href="#9-左叶子之和" class="headerlink" title="(9)左叶子之和"></a>(9)左叶子之和</h2><p>计算给定二叉树的所有<strong>左叶子</strong>之和。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sumOfLeftLeaves</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span>             <span class="token keyword">if</span> node<span class="token punctuation">.</span>left <span class="token operator">and</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token operator">not</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token operator">not</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>ans<span class="token operator">+=</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val            dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span class="token comment" spellcheck="true">#左叶子没有子节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-二叉树的所有路径"><a href="#10-二叉树的所有路径" class="headerlink" title="(10)二叉树的所有路径"></a>(10)二叉树的所有路径</h2><p>给定一个二叉树，返回所有从根节点到叶子节点的路径。<br>用<code>[&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]</code>的类型表示</p><p>说明: 叶子节点是指没有子节点的节点。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">binaryTreePaths</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> ans        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>            path<span class="token operator">+=</span>str<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">.</span>left <span class="token operator">and</span> <span class="token operator">not</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span> ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span> dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>path<span class="token operator">+</span><span class="token string">"->"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span> dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>path<span class="token operator">+</span><span class="token string">"->"</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-恢复二叉搜索树"><a href="#11-恢复二叉搜索树" class="headerlink" title="(11)恢复二叉搜索树"></a>(11)恢复二叉搜索树</h2><p>二叉搜索树中的两个节点被错误地交换。</p><p>请在不改变其结构的情况下，恢复这棵树。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">recoverTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        nodes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>              <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#中序遍历</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span>             dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            nodes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        pre<span class="token operator">=</span>nodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        x<span class="token punctuation">,</span>y<span class="token operator">=</span>None<span class="token punctuation">,</span>None        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> pre<span class="token punctuation">.</span>val <span class="token operator">></span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">:</span>                y<span class="token operator">=</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token operator">not</span> x<span class="token punctuation">:</span> x<span class="token operator">=</span>pre  <span class="token comment" spellcheck="true"># x为第一个出错的位置</span>            pre<span class="token operator">=</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#准备下一次遍历</span>        <span class="token keyword">if</span> x <span class="token operator">and</span> y<span class="token punctuation">:</span>             x<span class="token punctuation">.</span>val<span class="token punctuation">,</span> y<span class="token punctuation">.</span>val<span class="token operator">=</span>y<span class="token punctuation">.</span>val<span class="token punctuation">,</span> x<span class="token punctuation">.</span>val<span class="token comment" spellcheck="true">#说明： </span><span class="token comment" spellcheck="true"># 空间复杂度O(n)</span><span class="token comment" spellcheck="true"># 那个常数空间的莫里斯遍历不懂</span><span class="token comment" spellcheck="true"># 在这种遍历情况下，二叉搜索树的值从小到大</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-二叉树展开为链表"><a href="#12-二叉树展开为链表" class="headerlink" title="(12)二叉树展开为链表"></a>(12)二叉树展开为链表</h2><p>给定一个二叉树，<strong>原地</strong>将它展开为一个单链表。<br>If you notice carefully in the flattened tree, each node’s right child points to the next node of a pre-order traversal.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">flatten</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify root in-place instead.        """</span>        cur<span class="token operator">=</span>root        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                p<span class="token operator">=</span>cur<span class="token punctuation">.</span>left    <span class="token comment" spellcheck="true">#向左子树移动</span>                <span class="token keyword">while</span> p<span class="token punctuation">.</span>right<span class="token punctuation">:</span> p<span class="token operator">=</span>p<span class="token punctuation">.</span>right <span class="token comment" spellcheck="true">#找到root左子树的最右节点</span>                p<span class="token punctuation">.</span>right<span class="token operator">=</span>cur<span class="token punctuation">.</span>right <span class="token comment" spellcheck="true">#将root右子树连到找到的节点</span>                cur<span class="token punctuation">.</span>right<span class="token operator">=</span>cur<span class="token punctuation">.</span>left <span class="token comment" spellcheck="true">#再移回来</span>                cur<span class="token punctuation">.</span>left<span class="token operator">=</span>None            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>right<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-二叉搜索树中的众数"><a href="#13-二叉搜索树中的众数" class="headerlink" title="(13)二叉搜索树中的众数"></a>(13)二叉搜索树中的众数</h2><p>给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findMode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                <span class="token keyword">yield</span> <span class="token keyword">from</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">yield</span> node<span class="token punctuation">.</span>val                <span class="token keyword">yield</span> <span class="token keyword">from</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        cnt<span class="token punctuation">,</span>max_cnt<span class="token punctuation">,</span>last<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>None        <span class="token keyword">for</span> i <span class="token keyword">in</span> inorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">==</span> last<span class="token punctuation">:</span> cnt<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> cnt<span class="token operator">=</span><span class="token number">1</span>            <span class="token keyword">if</span> cnt<span class="token operator">></span>max_cnt<span class="token punctuation">:</span> ans<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">elif</span> cnt<span class="token operator">==</span>max_cnt<span class="token punctuation">:</span> ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            max_cnt<span class="token operator">=</span>max<span class="token punctuation">(</span>max_cnt<span class="token punctuation">,</span>cnt<span class="token punctuation">)</span>            last<span class="token operator">=</span>i        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># python O(1)的中序遍历</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-验证BST"><a href="#13-验证BST" class="headerlink" title="(13)验证BST"></a>(13)验证BST</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                 <span class="token keyword">yield</span> <span class="token keyword">from</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">yield</span> node<span class="token punctuation">.</span>val                <span class="token keyword">yield</span> <span class="token keyword">from</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        pre<span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> inorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">&lt;=</span>pre<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>            pre<span class="token operator">=</span>i        <span class="token keyword">return</span> <span class="token boolean">True</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>            left<span class="token operator">=</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span> left<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>            right<span class="token operator">=</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            <span class="token keyword">if</span> right<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">return</span> max<span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">if</span> abs<span class="token punctuation">(</span>left<span class="token operator">-</span>right<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">1</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>              <span class="token keyword">return</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网实现树莓派控制Arduino</title>
      <link href="posts/8178.html"/>
      <url>posts/8178.html</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title="preface"></a><em>preface</em></h2><p>参考博客：<a href="https://blog.csdn.net/weixin_42534940/article/details/81416578" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42534940/article/details/81416578</a></p><h1 id="1-基础"><a href="#1-基础" class="headerlink" title="1.基础"></a>1.基础</h1><h2 id="python模块"><a href="#python模块" class="headerlink" title="python模块"></a>python模块</h2><p>httpserver: <a href="https://docs.python.org/zh-cn/3.8/library/http.server.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3.8/library/http.server.html</a></p><h2 id="树莓派"><a href="#树莓派" class="headerlink" title="树莓派"></a>树莓派</h2><p>系统配置–&gt;网络配置–&gt;环境搭建–&gt;开发</p><p><code>ifconfig</code> ——查看IP地址 <code>eth0</code> <code>lo</code> <code>wlan0</code></p><p>连接方式：</p><ul><li><code>ssh user@192.168.1.102</code> ,可远程连接树莓派，进行命令行操作</li><li>VNC server 进行连接，IP,username,password同ssh</li></ul><p><code>ls /dev/tty*</code> 查看端口</p><h2 id="内网外网"><a href="#内网外网" class="headerlink" title="内网外网"></a>内网外网</h2><p>内网是从路由器以下开始的，ip都以192开头。<br>外网不经过路由器和交换机就可以上网的网络。</p><h1 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h1><h2 id="server-py"><a href="#server-py" class="headerlink" title="server.py"></a>server.py</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># --coding:utf-8--</span><span class="token keyword">from</span> http<span class="token punctuation">.</span>server <span class="token keyword">import</span> BaseHTTPRequestHandler<span class="token punctuation">,</span> HTTPServer<span class="token keyword">import</span> time<span class="token keyword">import</span> socket<span class="token keyword">import</span> urllib<span class="token keyword">import</span> serial<span class="token comment" spellcheck="true">#from car_controler import FourWheelDriveCar</span><span class="token comment" spellcheck="true">#from camera_controler import Camera</span>port<span class="token operator">=</span><span class="token string">'/dev/ttyUSB0'</span>rate<span class="token operator">=</span><span class="token number">9600</span>ser<span class="token operator">=</span>serial<span class="token punctuation">.</span>Serial<span class="token punctuation">(</span>port<span class="token punctuation">,</span>rate<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">CarServer</span><span class="token punctuation">(</span>BaseHTTPRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#    carControler = FourWheelDriveCar()</span><span class="token comment" spellcheck="true">#    cameraControler = Camera()</span>    <span class="token keyword">def</span> <span class="token function">get_host_ip</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        This method is used for getting local ip address        The car server will deploy on this ip        '''</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            serverSocket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span>            serverSocket<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"8.8.8.8"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            localIP <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span>getsockname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">finally</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> localIP    <span class="token keyword">def</span> <span class="token function">do_GET</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        Define the car control GUI for client        For the first edition, it will only return direction contol GUI        '''</span>        localIP <span class="token operator">=</span> CarServer<span class="token punctuation">.</span>get_host_ip<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># When this GET method is called, then should init the car</span>        <span class="token comment" spellcheck="true"># self.carControler.reset()</span>        <span class="token comment" spellcheck="true"># Read control page html file from control.html</span>        controlPageFile <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span>        controlPageGUI <span class="token operator">=</span> controlPageFile<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        controlPageFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        controlPageGUI <span class="token operator">=</span> controlPageGUI<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>            <span class="token string">"requestAddress"</span><span class="token punctuation">,</span> <span class="token string">"http://"</span> <span class="token operator">+</span> localIP <span class="token operator">+</span> <span class="token string">":9090/"</span><span class="token punctuation">)</span>        controlPageGUI <span class="token operator">=</span> controlPageGUI<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>            <span class="token string">"cameraAddress"</span><span class="token punctuation">,</span> <span class="token string">"http://"</span> <span class="token operator">+</span> localIP <span class="token operator">+</span> <span class="token string">":8080/"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_header<span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span> <span class="token string">"text/html"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>end_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>controlPageGUI<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">do_POST</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        length <span class="token operator">=</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Length'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        qs <span class="token operator">=</span> self<span class="token punctuation">.</span>rfile<span class="token punctuation">.</span>read<span class="token punctuation">(</span>length<span class="token punctuation">)</span>        direction <span class="token operator">=</span> qs<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>direction<span class="token punctuation">)</span>        ser<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    raspCarServer <span class="token operator">=</span> CarServer    hostIP <span class="token operator">=</span> raspCarServer<span class="token punctuation">.</span>get_host_ip<span class="token punctuation">(</span>raspCarServer<span class="token punctuation">)</span>    hostPort <span class="token operator">=</span> <span class="token number">9090</span>    myServer <span class="token operator">=</span> HTTPServer<span class="token punctuation">(</span><span class="token punctuation">(</span>hostIP<span class="token punctuation">,</span> hostPort<span class="token punctuation">)</span><span class="token punctuation">,</span> raspCarServer<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Server Starts - %s:%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>hostIP<span class="token punctuation">,</span> hostPort<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        myServer<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a><em>index.html</em></h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">directionBtnDown</span><span class="token punctuation">(</span>direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">"requestAddress"</span>        <span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>direction<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">directionBtnUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">"requestAddress"</span>        <span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"S"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">span<span class="token class">.car</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">30%</span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">480</span>px<span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token selector">span<span class="token class">.camera</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">5%</span><span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">290</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">480</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">640</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> blue    <span class="token punctuation">}</span>    <span class="token selector">span<span class="token class">.camera_control</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">30%</span><span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">950</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">480</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> blue    <span class="token punctuation">}</span>    <span class="token selector">button<span class="token class">.top</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">90</span>px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">90</span>px    <span class="token punctuation">}</span>    <span class="token selector">button<span class="token class">.left</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">90</span>px<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">button<span class="token class">.right</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">90</span>px<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">180</span>px    <span class="token punctuation">}</span>    <span class="token selector">button<span class="token class">.bottom</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">90</span>px<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">90</span>px    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>control page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>car_control<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top drectionBtn<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>F<span class="token punctuation">"</span></span> <span class="token attr-name">onmousedown</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>directionBtnDown(<span class="token punctuation">'</span>w<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">onmouseup</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>directionBtnUp()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>F<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left drectionBtn<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>L<span class="token punctuation">"</span></span> <span class="token attr-name">onmousedown</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>directionBtnDown(<span class="token punctuation">'</span>a<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">onmouseup</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>directionBtnUp()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>L<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right drectionBtn<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>R<span class="token punctuation">"</span></span> <span class="token attr-name">onmousedown</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>directionBtnDown(<span class="token punctuation">'</span>d<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">onmouseup</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>directionBtnUp()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>R<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bottom drectionBtn<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span> <span class="token attr-name">onmousedown</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>directionBtnDown(<span class="token punctuation">'</span>x<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">onmouseup</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>directionBtnUp()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在树莓派上：<code>sudo python3 server.py</code> </p><p>去网页<code>http://192.168.1.102:9090/</code>，实现内网控制小车。</p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟</title>
      <link href="posts/4d93.html"/>
      <url>posts/4d93.html</url>
      
        <content type="html"><![CDATA[<h2 id="LCP-03-机器人大冒险"><a href="#LCP-03-机器人大冒险" class="headerlink" title="LCP 03. 机器人大冒险"></a>LCP 03. 机器人大冒险</h2><p>力扣团队买了一个可编程机器人，机器人初始位置在原点<code>(0, 0)</code>。小伙伴事先给机器人输入一串指令<code>command</code>，机器人就会无限循环这条指令的步骤进行移动。指令有两种：</p><p><code>U</code>: 向y轴正方向移动一格<br><code>R</code>: 向x轴正方向移动一格。<br>不幸的是，在 xy 平面上还有一些障碍物，他们的坐标用<code>obstacles</code>表示。机器人一旦碰到障碍物就会被损毁。</p><p>给定终点坐标<code>(x, y)</code>，返回机器人能否完好地到达终点。如果能，返回<code>true</code>；否则返回<code>false</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">robot</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> command<span class="token punctuation">:</span> str<span class="token punctuation">,</span> obstacles<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">,</span> y<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        xi<span class="token punctuation">,</span>yi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        circle<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#第一次循环走过的点</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> command<span class="token punctuation">:</span>            <span class="token keyword">if</span> c<span class="token operator">==</span><span class="token string">"R"</span><span class="token punctuation">:</span> xi<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> yi<span class="token operator">+=</span><span class="token number">1</span>            circle<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>xi<span class="token punctuation">,</span>yi<span class="token punctuation">]</span><span class="token punctuation">)</span>        cnt<span class="token operator">=</span>min<span class="token punctuation">(</span>x<span class="token operator">//</span>xi<span class="token punctuation">,</span>y<span class="token operator">//</span>yi<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#是否会经过目标点</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span>x<span class="token operator">-</span>xi<span class="token operator">*</span>cnt<span class="token punctuation">,</span>y<span class="token operator">-</span>yi<span class="token operator">*</span>cnt<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> circle<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> x1<span class="token punctuation">,</span>y1 <span class="token keyword">in</span> obstacles<span class="token punctuation">:</span>            cnt<span class="token operator">=</span>min<span class="token punctuation">(</span>x1<span class="token operator">//</span>xi<span class="token punctuation">,</span>y1<span class="token operator">//</span>yi<span class="token punctuation">)</span>            <span class="token keyword">if</span> x1<span class="token operator">&lt;=</span>x <span class="token operator">and</span> y1<span class="token operator">&lt;=</span>y <span class="token operator">and</span> <span class="token punctuation">[</span>x1<span class="token operator">-</span>xi<span class="token operator">*</span>cnt<span class="token punctuation">,</span>y1<span class="token operator">-</span>yi<span class="token operator">*</span>cnt<span class="token punctuation">]</span> <span class="token keyword">in</span> circle<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true"># 写这些为了不超时，为难了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="845-数组中的最长山脉"><a href="#845-数组中的最长山脉" class="headerlink" title="845.数组中的最长山脉"></a>845.数组中的最长山脉</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestMountain</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        ans<span class="token operator">=</span>i<span class="token operator">=</span>j<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">and</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                i<span class="token operator">+=</span><span class="token number">1</span>            j<span class="token operator">=</span>i              <span class="token comment" spellcheck="true"># begin up</span>            <span class="token keyword">while</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">and</span> A<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                j<span class="token operator">+=</span><span class="token number">1</span>            summit<span class="token operator">=</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span>      <span class="token comment" spellcheck="true"># begin down </span>            <span class="token keyword">while</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">and</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>A<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                j<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>summit <span class="token operator">and</span> summit<span class="token operator">></span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            i<span class="token operator">=</span>j        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#一种双指针的模拟</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="posts/d64e.html"/>
      <url>posts/d64e.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-链表的中间节点"><a href="#1-链表的中间节点" class="headerlink" title="(1)链表的中间节点"></a>(1)链表的中间节点</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">middleNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        slow<span class="token operator">=</span>fast<span class="token operator">=</span>head        <span class="token keyword">while</span> fast <span class="token operator">and</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">:</span>            slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next            fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        <span class="token keyword">return</span> slow<span class="token comment" spellcheck="true"># 快慢指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-合并两个有序链表"><a href="#2-合并两个有序链表" class="headerlink" title="(2)合并两个有序链表"></a>(2)合并两个有序链表</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> l2<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> l1<span class="token punctuation">:</span> <span class="token keyword">return</span> l2        <span class="token keyword">if</span> <span class="token operator">not</span> l2<span class="token punctuation">:</span> <span class="token keyword">return</span> l1        <span class="token keyword">if</span> l1<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>l2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>            l1<span class="token punctuation">.</span>next<span class="token operator">=</span>self<span class="token punctuation">.</span>mergeTwoLists<span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span>l2<span class="token punctuation">)</span>            <span class="token keyword">return</span> l1        <span class="token keyword">else</span><span class="token punctuation">:</span>            l2<span class="token punctuation">.</span>next<span class="token operator">=</span>self<span class="token punctuation">.</span>mergeTwoLists<span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span>            <span class="token keyword">return</span> l2<span class="token comment" spellcheck="true"># 递归</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-445-两数相加-II"><a href="#3-445-两数相加-II" class="headerlink" title="(3)445.两数相加 II"></a>(3)445.两数相加 II</h2><p>给你两个 非空 链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。</p><p>你可以假设除了数字 <code>0</code> 之外，这两个数字都不会以零开头。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> l2<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        s1<span class="token punctuation">,</span>s2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> l1<span class="token punctuation">:</span>            s1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            l1<span class="token operator">=</span>l1<span class="token punctuation">.</span>next        <span class="token keyword">while</span> l2<span class="token punctuation">:</span>            s2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            l2<span class="token operator">=</span>l2<span class="token punctuation">.</span>next        ans<span class="token punctuation">,</span>carry<span class="token operator">=</span>None<span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">while</span> s1 <span class="token operator">or</span> s2 <span class="token operator">or</span> carry <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> <span class="token operator">not</span> s1 <span class="token keyword">else</span> s1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            b <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> <span class="token operator">not</span> s2 <span class="token keyword">else</span> s2<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            cur <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> carry            cur<span class="token punctuation">,</span>carry<span class="token operator">=</span>cur<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">,</span>cur<span class="token operator">//</span><span class="token number">10</span>            curnode <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>cur<span class="token punctuation">)</span>            curnode<span class="token punctuation">.</span>next <span class="token operator">=</span> ans             ans <span class="token operator">=</span> curnode           <span class="token comment" spellcheck="true">#头部接入</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 栈，链表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-环形链表"><a href="#4-环形链表" class="headerlink" title="(4)环形链表"></a>(4)环形链表</h2><p>给定一个链表，判断链表中是否有环。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">not</span> head <span class="token operator">or</span> <span class="token operator">not</span> head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        slow<span class="token punctuation">,</span>fast<span class="token operator">=</span>head<span class="token punctuation">,</span>head<span class="token punctuation">.</span>next        <span class="token keyword">while</span><span class="token punctuation">(</span>slow<span class="token operator">!=</span>fast<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">not</span> fast <span class="token operator">or</span> <span class="token operator">not</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>            slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next            fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true">#快慢指针</span><span class="token comment" spellcheck="true"># 1.slow放在head, fast放在head.next</span><span class="token comment" spellcheck="true"># 2.while(slow!=fast)来移动指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-环形链表II"><a href="#5-环形链表II" class="headerlink" title="(5)环形链表II"></a>(5)环形链表II</h2><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 <code>null</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        fast<span class="token punctuation">,</span>slow<span class="token operator">=</span>head<span class="token punctuation">,</span>head        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> fast <span class="token operator">or</span> <span class="token operator">not</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">:</span> <span class="token keyword">return</span>             fast<span class="token punctuation">,</span>slow<span class="token operator">=</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">,</span>slow<span class="token punctuation">.</span>next            <span class="token keyword">if</span> fast<span class="token operator">==</span>slow<span class="token punctuation">:</span> <span class="token keyword">break</span>        fast<span class="token operator">=</span>head        <span class="token keyword">while</span> fast<span class="token operator">!=</span>slow<span class="token punctuation">:</span>            fast<span class="token punctuation">,</span>slow<span class="token operator">=</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">,</span>slow<span class="token punctuation">.</span>next        <span class="token keyword">return</span> fast<span class="token comment" spellcheck="true"># 记f,s分别为快慢指针走过的节点。</span><span class="token comment" spellcheck="true"># 记a,b分别为环外、环内节点数</span><span class="token comment" spellcheck="true"># f=2s=s+nb，s=nb.</span><span class="token comment" spellcheck="true"># 更换指向后：f'=a,s=nb+a,是重合的，在入口处。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-两两交换链表中的节点"><a href="#6-两两交换链表中的节点" class="headerlink" title="(6)两两交换链表中的节点"></a>(6)两两交换链表中的节点</h2><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> head <span class="token operator">or</span> <span class="token operator">not</span> head<span class="token punctuation">.</span>next<span class="token punctuation">:</span> <span class="token keyword">return</span> head        newhead<span class="token operator">=</span>head<span class="token punctuation">.</span>next        head<span class="token punctuation">.</span>next<span class="token operator">=</span>self<span class="token punctuation">.</span>swapPairs<span class="token punctuation">(</span>newhead<span class="token punctuation">.</span>next<span class="token punctuation">)</span>        newhead<span class="token punctuation">.</span>next<span class="token operator">=</span>head        <span class="token keyword">return</span> newhead<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表</title>
      <link href="posts/41d3.html"/>
      <url>posts/41d3.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        hashmap<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>num <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            j<span class="token operator">=</span>hashmap<span class="token punctuation">.</span>get<span class="token punctuation">(</span>target<span class="token operator">-</span>num<span class="token punctuation">)</span>            <span class="token keyword">if</span> j <span class="token operator">!=</span> None <span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># j可为0</span>            hashmap<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">=</span>i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="560-和为K的子数组"><a href="#560-和为K的子数组" class="headerlink" title="560.和为K的子数组"></a>560.和为K的子数组</h2><p>给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subarraySum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        pre <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#记载所有前缀和</span>        ans<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            sum<span class="token operator">+=</span>num            need<span class="token operator">=</span>sum<span class="token operator">-</span>k            <span class="token keyword">if</span> need <span class="token keyword">in</span> pre<span class="token punctuation">:</span>                ans <span class="token operator">+=</span> pre<span class="token punctuation">[</span>need<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">#在hash table里查找key，如果有返回对应的value，反之返回0 </span>            pre<span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">.</span>get<span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结</strong></p><blockquote><ol><li>前缀和+hash的优化</li><li><code>dict.get(key,default=None)</code></li></ol></blockquote><h2 id="other"><a href="#other" class="headerlink" title="other"></a><em>other</em></h2><pre class="line-numbers language-python"><code class="language-python">jewelsSet <span class="token operator">=</span> set<span class="token punctuation">(</span>J<span class="token punctuation">)</span><span class="token keyword">return</span> sum<span class="token punctuation">(</span>s <span class="token keyword">in</span> jewelsSet <span class="token keyword">for</span> s <span class="token keyword">in</span> S<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#集合是一个哈希表，降低遍历的时间复杂度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 每次都遇到这个问题：</span><span class="token comment" spellcheck="true"># unhashable type: 'list'</span><span class="token comment" spellcheck="true"># 不能在哈希表中快速找到这个表，不能集合为多重表去重</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="posts/d706.html"/>
      <url>posts/d706.html</url>
      
        <content type="html"><![CDATA[<h1 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a><em>线性DP</em></h1><ul><li>经典单串</li><li>经典双串</li></ul><h2 id="300-最长上升子序列"><a href="#300-最长上升子序列" class="headerlink" title="300.最长上升子序列"></a>300.最长上升子序列</h2><p>给定一个无序的整数数组，找到其中最长上升子序列的长度。</p><p><strong>输入</strong>: <code>[10,9,2,5,3,7,101,18]</code><br><strong>输出</strong>: <code>4</code><br><strong>解释</strong>: 最长的上升子序列是 <code>[2,3,7,101]</code>，它的长度是 <code>4</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法一：DP---O(n^2)</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span><span class="token punctuation">[</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法二：贪心+二分查找---O(nlogn)</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        d<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> d <span class="token operator">or</span> num<span class="token operator">></span>d<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                l<span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>                loc<span class="token operator">=</span>r                <span class="token keyword">while</span> l<span class="token operator">&lt;=</span>r<span class="token punctuation">:</span>                    mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>                    <span class="token keyword">if</span> d<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">>=</span>num<span class="token punctuation">:</span>                        loc<span class="token operator">=</span>mid                        r<span class="token operator">=</span>mid<span class="token number">-1</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>                d<span class="token punctuation">[</span>loc<span class="token punctuation">]</span><span class="token operator">=</span>num        <span class="token keyword">return</span> len<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#在nums的遍历中</span><span class="token comment" spellcheck="true">#1.如果num比末尾大，则直接加入到数组d末尾。</span><span class="token comment" spellcheck="true">#2.否则，在数组d中二分查找，找到第一个比num小的数d[k]，并更新 d[k + 1]=min(d[k+1],num)=num。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1143-最长公共子序列"><a href="#1143-最长公共子序列" class="headerlink" title="1143.最长公共子序列"></a>1143.最长公共子序列</h2><p>给定两个字符串 <code>text1</code> 和 <code>text2</code>，返回这两个字符串的最长公共子序列的长度。</p><p><strong>输入</strong>：<code>text1</code> = <code>&quot;abcde&quot;</code>, <code>text2</code> = <code>&quot;ace&quot;</code><br><strong>输出</strong>：<code>3</code><br><strong>解释</strong>：最长公共子序列是 <code>&quot;ace&quot;</code>，它的长度为 <code>3</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#方法一：DP</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text1<span class="token punctuation">:</span> str<span class="token punctuation">,</span> text2<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        m<span class="token punctuation">,</span>n<span class="token operator">=</span>len<span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>text2<span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#防止dp[i-1]下标超出范围</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> text1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">==</span>text2<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#经典双串</span><span class="token comment" spellcheck="true">#一些看起来变态的题，给些提示居然可以写出来。。。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#方法二：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text1<span class="token punctuation">:</span> str<span class="token punctuation">,</span> text2<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> text1 <span class="token operator">==</span> text2<span class="token punctuation">:</span>            <span class="token keyword">return</span> len<span class="token punctuation">(</span>text1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#if not set(text1).intersection(text2):</span>           <span class="token comment" spellcheck="true"># return 0</span>        d <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        m<span class="token punctuation">,</span> n <span class="token operator">=</span> len<span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>text2<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            d<span class="token punctuation">[</span>text2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> text1<span class="token punctuation">:</span>            <span class="token keyword">if</span> c <span class="token keyword">in</span> d<span class="token punctuation">:</span>                nums<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>d<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span>        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            idx <span class="token operator">=</span> bisect<span class="token punctuation">.</span>bisect_left<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> num<span class="token punctuation">)</span>            <span class="token keyword">if</span> idx <span class="token operator">==</span> len<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ans<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> num        <span class="token keyword">return</span> len<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="53-最大子序和"><a href="#53-最大子序和" class="headerlink" title="53.最大子序和"></a>53.最大子序和</h2><p>给定一个整数数组<code>nums </code>，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>max<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="152-乘积最大子数组"><a href="#152-乘积最大子数组" class="headerlink" title="152.乘积最大子数组"></a>152.乘积最大子数组</h2><p>给你一个整数数组 <code>nums</code> ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> nums<span class="token operator">==</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        res<span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span>        minn<span class="token punctuation">,</span>maxn<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            a<span class="token operator">=</span>n<span class="token operator">*</span>minn            b<span class="token operator">=</span>n<span class="token operator">*</span>maxn            maxn<span class="token operator">=</span>max<span class="token punctuation">(</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>            minn<span class="token operator">=</span>min<span class="token punctuation">(</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>            <span class="token keyword">if</span> maxn<span class="token operator">></span>res<span class="token punctuation">:</span>                res<span class="token operator">=</span>maxn        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198.打家劫舍"></a>198.打家劫舍</h2><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。<br>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        a<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> a<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">0</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结</strong></p><blockquote><p>DP方程：<code>dp[i]=max(dp[i-1],dp[i-2]+nums[i-1])</code></p></blockquote><h2 id="213-打家劫舍-II"><a href="#213-打家劫舍-II" class="headerlink" title="213.打家劫舍 II"></a>213.打家劫舍 II</h2><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。<br>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        cnt<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> cnt<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token keyword">return</span> max<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        dp1<span class="token punctuation">,</span>dp2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>cnt<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>cnt        dp1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        dp2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp1<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp2<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp2<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp2<span class="token punctuation">[</span>i<span class="token number">-3</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>dp1<span class="token operator">+</span>dp2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a><em>树形DP</em></h1><h2 id="337-打家劫舍-III"><a href="#337-打家劫舍-III" class="headerlink" title="337.打家劫舍 III"></a>337.打家劫舍 III</h2><p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个<strong>直接相连</strong>(即父与子关系）的房子在同一天晚上被打劫，房屋将自动报警。</p><p>计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>        lv<span class="token operator">=</span>self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        rv<span class="token operator">=</span>self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>lv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> rv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>lv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> rv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> root<span class="token punctuation">.</span>val <span class="token operator">+</span> lv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> rv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#树形DP，从树的左下构成一个表。</span><span class="token comment" spellcheck="true">#helper函数返回列表[不含此节点最大值，含此节点最大值]</span><span class="token comment" spellcheck="true">#经典</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="other"><a href="#other" class="headerlink" title="other"></a><em>other</em></h1><h2 id="LCP-19-秋叶收藏集"><a href="#LCP-19-秋叶收藏集" class="headerlink" title="LCP 19. 秋叶收藏集"></a>LCP 19. 秋叶收藏集</h2><p>小扣出去秋游，途中收集了一些红叶和黄叶，他利用这些叶子初步整理了一份秋叶收藏集 <code>leaves</code>， 字符串 <code>leaves</code> 仅包含小写字符 <code>r</code> 和 <code>y</code>， 其中字符 <code>r</code> 表示一片红叶，字符 <code>y</code> 表示一片黄叶。</p><p>出于美观整齐的考虑，小扣想要将收藏集中树叶的排列调整成<strong>「红、黄、红」</strong>三部分。每部分树叶数量可以不相等，但均需大于等于 1。每次调整操作，小扣可以将一片红叶替换成黄叶或者将一片黄叶替换成红叶。请问小扣最少需要多少次调整操作才能将秋叶收藏集调整完毕。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#方法一：dp</span><span class="token comment" spellcheck="true">#    dp[i][0]表示全部为红需要修改几次</span><span class="token comment" spellcheck="true">#    dp[i][1]表示【红黄】需要修改几次</span><span class="token comment" spellcheck="true">#    dp[i][2]表示【红黄红】需要修改几次</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minimumOperations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> leaves<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>leaves<span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span> <span class="token keyword">else</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true">#print(dp)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'y'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'y'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#for i in dp: print(i)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dp表时用[0]*3建表会出错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python做个爬虫</title>
      <link href="posts/e960.html"/>
      <url>posts/e960.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><hr><p>本文或许用到以下工具：</p><ul><li>requests</li><li>re</li><li>面向对象</li><li>pyqt5</li><li>pyinstaller</li></ul><p>暂时爬取网站： <a href="https://huaban.com/favorite/beauty" target="_blank" rel="noopener">https://huaban.com/favorite/beauty</a></p><h1 id="1-探究过程"><a href="#1-探究过程" class="headerlink" title="1.探究过程"></a>1.探究过程</h1><hr><h2 id="1-1-第一个难题："><a href="#1-1-第一个难题：" class="headerlink" title="1.1 第一个难题："></a>1.1 第一个难题：</h2><blockquote><p>关于爬到的html与f12得到的有区别，所以re写<code>pattern</code>不能凭着F12<br><strong>目标</strong>：找到一个合适的<code>pattern</code>便于找到url</p></blockquote><blockquote><p>所谓查看网页源代码，就是别人服务器发送到浏览器的原封不动的代码。这是爬虫获得的代码<br>你那些在源码中找不到的代码（元素），那是在浏览器执行js动态生成的，这些能在审查元素中看到<br>通过审查元素就,,,,看到就是浏览器处理过的最终的html代码。</p></blockquote><p>然后试了试更换头信息，</p><p><img src="https://img-blog.csdnimg.cn/20200801215657860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70"></p><blockquote><p>就离谱，requests.get过来的基本没找到<code>&lt;div&gt;</code>标签，F12检查元素全是<code>&lt;div&gt;</code>标签<br>感觉：爬到的和F12到的是两个东西</p></blockquote><h2 id="1-2-第二个难题："><a href="#1-2-第二个难题：" class="headerlink" title="1.2 第二个难题："></a>1.2 第二个难题：</h2><blockquote><p>从得到的text中找出图片的地址</p></blockquote><p>先用 <a href="http://www.bejson.com/" target="_blank" rel="noopener">http://www.bejson.com/</a> 进行text分析，发现图片的地址为<br><code>https://hbimg.huabanimg.com/</code>+<code>key</code></p><h2 id="1-3-第三个难题："><a href="#1-3-第三个难题：" class="headerlink" title="1.3 第三个难题："></a>1.3 第三个难题：</h2><blockquote><p>关于得到数据的不完整性，<br><strong>目标</strong>：找出<code>url_next</code></p></blockquote><p>爬到的东西只有前面一些图片，经查询好像是一种关于<strong>动态网页异步更新</strong>的技术<br>参考： <a href="https://zhuanlan.zhihu.com/p/27346009" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27346009</a><br>(当然网站表面没有页，表面的url也没有变）</p><p><img src="https://img-blog.csdnimg.cn/2020080121565813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70"></p><p>经查询，向下翻页时XHR会多出请求，url地址已给出<br>是时候更改1.0版本的代码，让它找到更多的图片🎈</p><p>经过第一个问题的折磨，容易理解：</p><ul><li>虽然（翻页后的）url，用浏览器无法访问，但get可以爬到</li></ul><h1 id="2-基础知识"><a href="#2-基础知识" class="headerlink" title="2.基础知识"></a>2.基础知识</h1><hr><h2 id="2-1-关于requests"><a href="#2-1-关于requests" class="headerlink" title="2.1 关于requests"></a>2.1 关于requests</h2><h3 id="开始使用第一步："><a href="#开始使用第一步：" class="headerlink" title="开始使用第一步："></a>开始使用第一步：</h3><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> requests  r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://"</span><span class="token punctuation">)</span>  r<span class="token punctuation">.</span>status_code                     <span class="token comment" spellcheck="true">#en,返回200表示成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="开始使用第二步："><a href="#开始使用第二步：" class="headerlink" title="开始使用第二步："></a>开始使用第二步：</h3><pre class="line-numbers language-python"><code class="language-python">  r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>  r<span class="token punctuation">.</span>text                            <span class="token comment" spellcheck="true">#en,返回网站的html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h3><p><code>r.apparent_encoding</code>  【从内容分析出响应内容编码方式，返回一个编码方式字符串】<br><code>r.raise_for_status</code>   【如果不是200，返回异常码】</p><blockquote><p>七个主要方法：</p><ul><li><code>requests.request(method,url,**kwargs)</code></li><li><code>requests.get(url,**kwargs)</code>, headers中伪装头信息</li><li>requests.post()</li><li>requests.put()</li><li>requests.patch()</li><li>requests.head()</li><li>requests.delete()</li></ul></blockquote><h2 id="2-2-关于re"><a href="#2-2-关于re" class="headerlink" title="2.2 关于re"></a>2.2 关于re</h2><p><a href="https://www.unielu.com/posts/10df.html">https://www.unielu.com/posts/10df.html</a></p><h2 id="2-3-关于面向对象"><a href="#2-3-关于面向对象" class="headerlink" title="2.3 关于面向对象"></a>2.3 关于面向对象</h2><p><code>if __name__ == &#39;__main__&#39;</code><br>表示：只有当该文件作为一个独立的脚本运行时才会被调用。<br>换句话说，如果在其它文件中导入此文件，那么条件中的语句不被执行。</p><h1 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h1><hr><p>1.0版本代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">import</span> ospwd<span class="token operator">=</span><span class="token string">"C:/temp/temp"</span>url <span class="token operator">=</span> <span class="token string">"https://huaban.com/favorite/beauty/"</span> <span class="token comment" spellcheck="true">#这是你要爬取的页面url</span>url_img <span class="token operator">=</span> <span class="token string">"https://hbimg.huabanimg.com/"</span> <span class="token comment" spellcheck="true">#这是它放图片的url前缀</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token comment" spellcheck="true">#伪装头信息</span>head <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36 Edg/84.0.522.49'</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始下载："</span><span class="token punctuation">,</span>file<span class="token punctuation">,</span>url<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fd<span class="token punctuation">:</span>            <span class="token keyword">for</span> chunk <span class="token keyword">in</span> r<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                fd<span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载失败了"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> num    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*******************************************"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你的请求网址是："</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>head<span class="token punctuation">)</span>    pattern<span class="token operator">=</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'{"pin_id":(\d*?),.*?"key":"(.*?)",.*?"like_count":(\d*?),.*?"repin_count":(\d*?),.*?}'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    pid<span class="token operator">=</span><span class="token number">0</span>    items<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>        pid<span class="token punctuation">,</span>key<span class="token punctuation">,</span>like_cnt<span class="token punctuation">,</span>repin_cnt<span class="token operator">=</span>item        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始下载第{}张图片"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>        pic_url<span class="token operator">=</span>url_img<span class="token operator">+</span>key    <span class="token comment" spellcheck="true">#图片的url地址</span>        filename<span class="token operator">=</span>pwd<span class="token operator">+</span>str<span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".jpg"</span>  <span class="token comment" spellcheck="true">#文件保存的名字</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"文件存在："</span><span class="token punctuation">,</span>filename<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        download<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>pic_url<span class="token punctuation">)</span>        num<span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span>main<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.1版本代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">import</span> ospwd<span class="token operator">=</span><span class="token string">"C:/temp/temp"</span>url <span class="token operator">=</span> <span class="token string">"http://huaban.com/favorite/beauty/"</span>url_img <span class="token operator">=</span> <span class="token string">"https://hbimg.huabanimg.com/"</span>url_next<span class="token operator">=</span><span class="token string">"https://huaban.com/favorite/beauty?kdbpp4xg&amp;max="</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token comment" spellcheck="true">#伪装头信息</span>head <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36 Edg/84.0.522.49'</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始下载："</span><span class="token punctuation">,</span>file<span class="token punctuation">,</span>url<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fd<span class="token punctuation">:</span>            <span class="token keyword">for</span> chunk <span class="token keyword">in</span> r<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                fd<span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载失败了"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> num    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*******************************************"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你的请求网址是："</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>head<span class="token punctuation">)</span>    pattern<span class="token operator">=</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'{"pin_id":(\d*?),.*?"key":"(.*?)",.*?"like_count":(\d*?),.*?"repin_count":(\d*?),.*?}'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    pid<span class="token operator">=</span><span class="token number">0</span>    items<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>        pid<span class="token punctuation">,</span>key<span class="token punctuation">,</span>like_cnt<span class="token punctuation">,</span>repin_cnt<span class="token operator">=</span>item        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始下载第{}张图片"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>        pic_url<span class="token operator">=</span>url_img<span class="token operator">+</span>key    <span class="token comment" spellcheck="true">#图片的url地址</span>        filename<span class="token operator">=</span>pwd<span class="token operator">+</span>str<span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".jpg"</span>  <span class="token comment" spellcheck="true">#文件保存的名字</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"文件存在："</span><span class="token punctuation">,</span>filename<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        download<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>pic_url<span class="token punctuation">)</span>        num<span class="token operator">+=</span><span class="token number">1</span>    main<span class="token punctuation">(</span>url_next<span class="token operator">+</span>pid<span class="token operator">+</span><span class="token string">"&amp;limit=100&amp;wfl=1"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#比1.0多出的地方，参考问题3</span><span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span>main<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a>4.小结</h1><hr><p><code>2020.8.1</code><br> 啦啦啦， <code>1.1</code>版本成功，激动ing<br>今天还试了试beautifulsoup，fiddler，没领悟~</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>intermediate</title>
      <link href="posts/2e8f.html"/>
      <url>posts/2e8f.html</url>
      
        <content type="html"><![CDATA[<p>本文基于<a href="https://readthedocs.org/projects/intermediatepythongithubio/downloads/pdf/latest/" target="_blank" rel="noopener"><em>Intermediate Python</em></a>学习过程中摘要与实践。<br>感谢此书作者，书的更新日期：Jul 11, 2020.</p><blockquote><p><em>blueprint</em>-(伪代码)<br><em>parentheses</em>-(括号)<br><em>clause</em>-(从句)</p></blockquote><h2 id="args-and-kwargs"><a href="#args-and-kwargs" class="headerlink" title="*args and **kwargs"></a><em>*args and **kwargs</em></h2><p>When you do not know beforehand how many arguments can be passed to your function,<br>use it:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_var_args</span><span class="token punctuation">(</span>f_arg<span class="token punctuation">,</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"first normal arg:"</span><span class="token punctuation">,</span>f_arg<span class="token punctuation">)</span>    <span class="token keyword">for</span> arg <span class="token keyword">in</span> argv<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"another arg through *argv:"</span><span class="token punctuation">,</span>arg<span class="token punctuation">)</span>test_var_args<span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'wow'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->first normal arg: python</span><span class="token comment" spellcheck="true">#-->another arg through *argv: hello</span><span class="token comment" spellcheck="true">#-->another arg through *argv: wow</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_args_kwargs</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span>arg2<span class="token punctuation">,</span>arg3<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"arg1:"</span><span class="token punctuation">,</span>arg1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"arg2:"</span><span class="token punctuation">,</span>arg2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"arg3"</span><span class="token punctuation">,</span>arg3<span class="token punctuation">)</span>kwargs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"arg3"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"arg2"</span><span class="token punctuation">:</span><span class="token string">"two"</span><span class="token punctuation">,</span><span class="token string">"arg1"</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span>test_args_kwargs<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->arg1: 5</span><span class="token comment" spellcheck="true">#-->arg2: two</span><span class="token comment" spellcheck="true">#-->arg3 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>*args</code> is used to send a non-keyworded variable length argument list to the function.<br> <code>**kwargs</code> allows you to pass <strong>keyworded</strong> variable length of arguments to a function.<br> The <strong>order</strong> is <code>some_func(fargs, *args, **kwargs)</code></p><p> The most common use case is when making function decorators.</p><h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a><em>Debugging</em></h2><p>You can run a script from the commandline using the <strong>Python debugger</strong>(pdb). Here is an example:<br><code>$ python -m pdb my_script.py</code><br>Running from inside a script:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pdb<span class="token keyword">def</span> <span class="token function">make_bread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pdb<span class="token punctuation">.</span>set_trace<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token string">" i dont have time"</span><span class="token keyword">print</span><span class="token punctuation">(</span>make_bread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You would <strong>enter the debugger pattern</strong> as soon as you run it. Now it’s time to learn some of the commands of the debugger.<br><strong>Commands</strong>:</p><ul><li><p><code>c</code>: continue execution</p></li><li><p><code>w</code>: shows the context of the current line it is executing.</p></li><li><p><code>a</code>: print the argument list of the current function</p></li><li><p><code>s</code>: execute the current line and stop at the first possible occasion</p></li><li><p><code>n</code>: continue execution until the next line in the current function is reached or it returns</p></li></ul><h2 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a><em>Generators</em></h2><p>According to Wikipedia, an iterator is an object that enables a programmer to traverse a container, particularly lists. </p><h6 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h6><p>An <strong>iterable</strong> is any object in Python which has an <code>__iter__</code> or a <code>__getitem__</code> method<br>defined which returns an iterator or can take indexes.</p><h6 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h6><p>An <strong>iterator</strong> is any object in Python which has a  <code>__next__</code> method defined. </p><h6 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h6><p>When we use a loop to loop over something it is called <strong>iteration</strong>.</p><h6 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h6><ul><li><strong>Generators</strong> are iterators, but you can only iterate over them once.</li><li>It’s because they do <strong>not store all the values in memory</strong>, they generate the values on the fly.</li><li>Most of the time generators are implemented as functions.</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generator_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> i<span class="token keyword">for</span> item <span class="token keyword">in</span> generator_function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generator_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> igen <span class="token operator">=</span> generator_function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->0</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->1</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->error</span><span class="token comment" spellcheck="true"># after yielding all the values next() caused a StopIteration error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">my_string <span class="token operator">=</span> <span class="token string">"Yasoob"</span>my_iter <span class="token operator">=</span> iter<span class="token punctuation">(</span>my_string<span class="token punctuation">)</span>next<span class="token punctuation">(</span>my_iter<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># str是个可迭代对象，但不是迭代器</span><span class="token comment" spellcheck="true"># 用iter()函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Map-Filter-and-Reduce"><a href="#Map-Filter-and-Reduce" class="headerlink" title="Map, Filter and Reduce"></a><em>Map, Filter and Reduce</em></h2><p>菜鸟教程链接：<a href="https://www.runoob.com/python/python-func-map.html" target="_blank" rel="noopener">map</a> <a href="https://www.runoob.com/python/python-func-filter.html" target="_blank" rel="noopener">filter</a> <a href="https://www.runoob.com/python/python-func-reduce.html" target="_blank" rel="noopener">reduce</a></p><pre class="line-numbers language-python"><code class="language-python">items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>squared <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> items<span class="token punctuation">:</span>    squared<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#       ||</span><span class="token comment" spellcheck="true">#       ||</span><span class="token comment" spellcheck="true">#       \/</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>squared <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span> items<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">multiply</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>x<span class="token punctuation">)</span>funcs <span class="token operator">=</span> <span class="token punctuation">[</span>multiply<span class="token punctuation">,</span> add<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    value <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> funcs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># use map even a list of functions</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">number_list <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>less_than_zero <span class="token operator">=</span> list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span> number_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>less_than_zero<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->[-5, -4, -3, -2, -1]</span><span class="token comment" spellcheck="true">#If map &amp; filter do not appear beautiful to you</span><span class="token comment" spellcheck="true"># then you can read about list/dict/tuple comprehensions.(推导式)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">product <span class="token operator">=</span> <span class="token number">1</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">for</span> num <span class="token keyword">in</span> list<span class="token punctuation">:</span>    product <span class="token operator">=</span> product <span class="token operator">*</span> num<span class="token comment" spellcheck="true">#       ||</span><span class="token comment" spellcheck="true">#       ||</span><span class="token comment" spellcheck="true">#       \/</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> reduceproduct <span class="token operator">=</span> reduce<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Decorators"><a href="#Decorators" class="headerlink" title="Decorators"></a><em>Decorators</em></h2><p>Decorators are a significant part of Python. In simple words: they are functions which modify the functionality of other functions. They help to make our code shorter and more Pythonic.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"yasoob"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"hi "</span> <span class="token operator">+</span> name<span class="token keyword">print</span><span class="token punctuation">(</span>hi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output: 'hi yasoob'</span><span class="token comment" spellcheck="true"># 我们甚⾄可以将⼀个函数赋值给⼀个变量，⽐如</span>greet <span class="token operator">=</span> hi<span class="token comment" spellcheck="true"># 我们这⾥没有在使⽤⼩括号，因为我们并不是在调⽤hi函数</span><span class="token comment" spellcheck="true"># ⽽是在将它放在greet变量⾥头。我们尝试运⾏下这个</span><span class="token keyword">print</span><span class="token punctuation">(</span>greet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output: 'hi yasoob'</span><span class="token comment" spellcheck="true"># 如果我们删掉旧的hi函数，看看会发⽣什么！</span><span class="token keyword">del</span> hi<span class="token keyword">print</span><span class="token punctuation">(</span>hi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#outputs: NameError</span><span class="token keyword">print</span><span class="token punctuation">(</span>greet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#outputs: 'hi yasoob'</span><span class="token comment" spellcheck="true"># ======Everything in python is a object=====</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"yasoob"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"now you are in the greet() function"</span>    <span class="token keyword">def</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"now you are in the welcome() function"</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"yasoob"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> greet    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> welcomea <span class="token operator">=</span> hi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->function greet at 0x7f2143c01500></span><span class="token comment" spellcheck="true">#上⾯清晰地展示了`a`现在指向到hi()函数中的greet()函数</span><span class="token comment" spellcheck="true">#现在试试这个</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->now you are in the greet() function</span><span class="token comment" spellcheck="true">#=====在函数中定义函数，返回函数=====</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"hi yasoob!"</span><span class="token keyword">def</span> <span class="token function">doSomethingBeforeHi</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am doing some boring work before executing hi()"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>doSomethingBeforeHi<span class="token punctuation">(</span>hi<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->I am doing some boring work before executing hi()</span><span class="token comment" spellcheck="true"># hi yasoob!</span><span class="token comment" spellcheck="true">#=====将函数作为参数传给另一个函数=====</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">a_new_decorator</span><span class="token punctuation">(</span>a_func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapTheFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am doing some boring work before executing a_func()"</span><span class="token punctuation">)</span>        a_func<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am doing some boring work after executing a_func()"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapTheFunction<span class="token keyword">def</span> <span class="token function">a_function_requiring_decoration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am the function which needs some decoration"</span><span class="token punctuation">)</span>a_function_requiring_decoration<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#outputs: "I am the function which needs some decoration"</span>a_function_requiring_decoration <span class="token operator">=</span> a_new_decorator<span class="token punctuation">(</span>a_function_requiring_decoration<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#now a_function_requiring_decoration is wrapped by wrapTheFunction()</span>a_function_requiring_decoration<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#outputs:I am doing some boring work before executing a_func()</span><span class="token comment" spellcheck="true"># I am the function which needs some decoration</span><span class="token comment" spellcheck="true"># I am doing some boring work after executing a_func()</span><span class="token comment" spellcheck="true">###一个简单的装饰器，相当于赋给函数一个经修饰的函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">@a_new_decorator<span class="token keyword">def</span> <span class="token function">a_function_requiring_decoration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am the function which needs some decoration"</span><span class="token punctuation">)</span>a_function_requiring_decoration<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#outputs: I am doing some boring work before executing a_func()</span><span class="token comment" spellcheck="true"># I am the function which needs some decoration to remove my foul smell</span><span class="token comment" spellcheck="true"># I am doing some boring work after executing a_func()</span><span class="token comment" spellcheck="true">#重点理解一下 @ 符号</span><span class="token comment" spellcheck="true">#但此时a_function_requiring_decoration.__name__变成了wrapTheFunction</span><span class="token comment" spellcheck="true">#这时就有了functools.wraps，下面是蓝本：</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># blueprint</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">def</span> <span class="token function">decorator_name</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>    @wraps<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">decorated</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> can_run<span class="token punctuation">:</span>             <span class="token keyword">return</span> <span class="token string">"Function will not run"</span>        <span class="token keyword">return</span> f<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">return</span> decorated@decorator_name<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token string">"Function is running"</span><span class="token punctuation">)</span>can_run <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Output: Function is running</span>can_run <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Output: Function will not run</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a><em>Mutation</em></h2><pre class="line-numbers language-python"><code class="language-python">foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hi'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->['hi']</span>bar <span class="token operator">=</span> foobar <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'bye'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->['hi', 'bye']</span><span class="token comment" spellcheck="true">#将一个变量赋值为另一个可变类型变量时，对数据的改动会反映在两个变量上</span><span class="token comment" spellcheck="true">#python可变类型（mutable）：列表，字典</span><span class="token comment" spellcheck="true">#python不可变类型：数字，字符串，元组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_to</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> target<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    target<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token keyword">return</span> targetadd_to<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Output: [1]</span>add_to<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Output: [1, 2]</span>add_to<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Output: [1, 2, 3]</span><span class="token comment" spellcheck="true">#在Python中当函数被定义时，默认参数只会运算⼀次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Enumerate"><a href="#Enumerate" class="headerlink" title="Enumerate"></a><em>Enumerate</em></h2><pre class="line-numbers language-python"><code class="language-python">my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'grapes'</span><span class="token punctuation">,</span> <span class="token string">'pear'</span><span class="token punctuation">]</span><span class="token keyword">for</span> index<span class="token punctuation">,</span>name <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>my_list<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> index<span class="token punctuation">,</span>name<span class="token comment" spellcheck="true"># Output:</span><span class="token comment" spellcheck="true"># 1 apple</span><span class="token comment" spellcheck="true"># 2 banana</span><span class="token comment" spellcheck="true"># 3 grapes</span><span class="token comment" spellcheck="true"># 4 pear</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Object-introspection"><a href="#Object-introspection" class="headerlink" title="Object introspection"></a><em>Object introspection</em></h2><pre class="line-numbers language-python"><code class="language-python">dir<span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># It returns a list of attributes and methods belonging to an object</span>type<span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># It returns the type of an object.</span>id<span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># It returns the unique ids of various objects.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a><em>异常处理</em></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 打印⼀些异常⽇志，如果你想要的话</span>    <span class="token keyword">raise</span><span class="token comment" spellcheck="true"># try/else 在try不出现异常时触发</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a><em>Classes</em></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cal</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># pi is a class variable</span>    pi <span class="token operator">=</span> <span class="token number">3.142</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># self.radius is an instance variable</span>        self<span class="token punctuation">.</span>radius <span class="token operator">=</span> radius    <span class="token keyword">def</span> <span class="token function">area</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>pi <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>a <span class="token operator">=</span> Cal<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>area<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Output: 3217.408</span>a<span class="token punctuation">.</span>pi<span class="token comment" spellcheck="true"># Output: 3.142</span>a<span class="token punctuation">.</span>pi <span class="token operator">=</span> <span class="token number">43</span>a<span class="token punctuation">.</span>pi<span class="token comment" spellcheck="true"># Output: 43</span>b <span class="token operator">=</span> Cal<span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>area<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Output: 6082.912</span>b<span class="token punctuation">.</span>pi<span class="token comment" spellcheck="true"># Output: 3.142</span>b<span class="token punctuation">.</span>pi <span class="token operator">=</span> <span class="token number">50</span>b<span class="token punctuation">.</span>pi<span class="token comment" spellcheck="true"># Output: 50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Function-caching"><a href="#Function-caching" class="headerlink" title="Function caching"></a><em>Function caching</em></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> lru_cache@lru_cache<span class="token punctuation">(</span>maxsize<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">return</span> n    <span class="token keyword">return</span> fib<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span>fib<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>fib<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>fib<span class="token punctuation">.</span>cache_clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#这是一个被相同参数频繁调用的I/O密集的函数</span><span class="token comment" spellcheck="true">#使用lru_cache可以使这段代码的运行时间从53.6s变为0s(笔者自测)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文漏掉了<code>set结构</code> <code>Ternary Operators(三元运算符）</code> <code>装饰器的高级应用</code><br><code>Global &amp; Return</code>(尽量return多值代替global)<br><code>__slots__魔法</code> <code>Virtual Environment</code> <code>Collections</code><br><code>推导式</code> <code>lambda 参数:操作</code> <code>Python C extensions</code><br><code>for/else</code>(else会在for循环正常结束时执行)<br><code>open函数</code> <code>Targeting Python 2+3</code> <code>Coroutines(协程)</code><br><code>上下文管理器</code></p><p>唔，终于弄完了😀————————<em><code>2020.8.9</code></em></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>heapq模块</title>
      <link href="posts/9568.html"/>
      <url>posts/9568.html</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title="preface"></a><em>preface</em></h2><p>这个模块提供了堆队列算法的实现，也称为 <strong>优先队列</strong> 算法。<br><em>Pyhton</em> 中默认为 <strong>最小堆</strong>，pop出来的是最小的<code>heap[0]</code><br>参考资料：<a href="https://docs.python.org/zh-cn/3/library/heapq.html?highlight=heapq#module-heapq" target="_blank" rel="noopener">官方heapq文档</a></p><h2 id="heappush-heap-item"><a href="#heappush-heap-item" class="headerlink" title="heappush(heap, item)"></a><em>heappush(heap, item)</em></h2><p>将 <code>item</code> 的值加入 <code>heap</code> 中，保持堆的不变性。</p><h2 id="heappop-heap"><a href="#heappop-heap" class="headerlink" title="heappop(heap)"></a><em>heappop(heap)</em></h2><p>弹出并返回 <code>heap</code> 的最小的元素，保持堆的不变性。</p><h2 id="heappushpop-heap-item"><a href="#heappushpop-heap-item" class="headerlink" title="heappushpop(heap, item)"></a><em>heappushpop(heap, item)</em></h2><p>将 <code>item</code> 放入堆中，然后弹出并返回 <code>heap</code> 的最小元素。</p><h2 id="heapify-x"><a href="#heapify-x" class="headerlink" title="heapify(x)"></a><em>heapify(x)</em></h2><p>将<code>list x</code> 转换成堆，原地，线性时间内。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串&amp;数组</title>
      <link href="posts/95d1.html"/>
      <url>posts/95d1.html</url>
      
        <content type="html"><![CDATA[<h2 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17.电话号码的字母组合"></a>17.电话号码的字母组合</h2><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> digits<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        map<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'2'</span><span class="token punctuation">:</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">:</span><span class="token string">"def"</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">:</span><span class="token string">"ghi"</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">:</span><span class="token string">"jkl"</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">:</span><span class="token string">"mno"</span><span class="token punctuation">,</span><span class="token string">'7'</span><span class="token punctuation">:</span><span class="token string">"pqrs"</span><span class="token punctuation">,</span><span class="token string">'8'</span><span class="token punctuation">:</span><span class="token string">"tuv"</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">:</span><span class="token string">"wxyz"</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token operator">not</span> digits<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> digits<span class="token punctuation">:</span>            ans<span class="token operator">=</span><span class="token punctuation">[</span>pre<span class="token operator">+</span>suf <span class="token keyword">for</span> pre <span class="token keyword">in</span> ans <span class="token keyword">for</span> suf <span class="token keyword">in</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="696-计数二进制子串"><a href="#696-计数二进制子串" class="headerlink" title="696.计数二进制子串"></a>696.计数二进制子串</h2><p>给定一个字符串 <code>s</code>，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。</p><p>重复出现的子串要计算它们出现的次数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countBinarySubstrings</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        temp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                temp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token operator">+=</span>min<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 计算相邻数的频数</span><span class="token comment" spellcheck="true"># 看着有些抽象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="605-种花问题"><a href="#605-种花问题" class="headerlink" title="605.种花问题"></a>605.种花问题</h2><p>假设你有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。</p><p>给定一个花坛（表示为一个数组包含<code>0</code>和<code>1</code>，其中<code>0</code>表示没种植花，<code>1</code>表示种植了花），和一个数 <code>n</code> 。能否在不打破种植规则的情况下种入 <code>n</code> 朵花？能则返回<code>True</code>，不能则返回<code>False</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canPlaceFlowers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> f<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        f<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>        ans<span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> cnt<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                 ans<span class="token operator">+=</span><span class="token punctuation">(</span>cnt<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>                cnt<span class="token operator">=</span><span class="token number">0</span>        <span class="token comment" spellcheck="true">#print(ans,n)</span>        <span class="token keyword">return</span> ans<span class="token operator">>=</span>n<span class="token comment" spellcheck="true"># 数组，两端加值便于解题。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="75-颜色分类"><a href="#75-颜色分类" class="headerlink" title="75.颜色分类"></a>75.颜色分类</h2><p>给定一个包含红色、白色和蓝色，一共 <code>n</code> 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p><p>此题中，我们使用整数 <code>0</code>、 <code>1</code> 和 <code>2</code> 分别表示红色、白色和蓝色。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#荷兰国旗问题，快速排序基础</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortColors</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        i<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;=</span>r<span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                l<span class="token operator">+=</span><span class="token number">1</span>                i<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                r<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> i<span class="token operator">+=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="74-搜索二维矩阵"><a href="#74-搜索二维矩阵" class="headerlink" title="74.搜索二维矩阵"></a><a href="https://leetcode-cn.com/problems/search-a-2d-matrix/" target="_blank" rel="noopener">74.搜索二维矩阵</a></h2><p>编写一个高效的算法来判断 <code>m x n</code> 矩阵中，是否存在一个目标值。该矩阵具有如下特性：</p><ul><li>每行中的整数从左到右按升序排列。</li><li>每行的第一个整数大于前一行的最后一个整数。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        l<span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>rows<span class="token operator">*</span>cols<span class="token number">-1</span>        <span class="token keyword">while</span> l<span class="token operator">&lt;=</span>r<span class="token punctuation">:</span>            mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            x<span class="token punctuation">,</span>y<span class="token operator">=</span>mid<span class="token operator">//</span>cols<span class="token punctuation">,</span>mid<span class="token operator">%</span>cols            <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">elif</span> matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">:</span> r<span class="token operator">=</span>mid<span class="token number">-1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true">#原地二分查找</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="kmp算法"><a href="#kmp算法" class="headerlink" title="kmp算法"></a>kmp算法</h2><p>kmp是一个效率非常高的<strong>字符串匹配</strong>算法。<br>有问题如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#求b在a中出现次数</span>a <span class="token operator">=</span> <span class="token string">"ababacababadababadadda"</span>b <span class="token operator">=</span> <span class="token string">"ababad"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>kmp可以将暴力法的<code>O(m*n)</code>降低为<code>O(m+n)</code></p><p><strong>过程:</strong><br><strong>1. 计算temp数组</strong><br>temp数组可理解为一组b中相同前后缀的标记(不能为本身长度)</p><blockquote><p><code>b = &quot;ababad&quot;</code><br>对第一位<code>&#39;a&#39;</code>，没有相同前后缀，<code>temp[0] = 0</code><br>对第二位<code>&#39;ab&#39;</code>，<code>temp[1] = 0</code><br>对第三位<code>’aba&#39;</code>，<code>temp[2] = 1</code><br>以此类推，<code>temp= [0,0,1,2,3,0]</code></p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cal_temp</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#K是一个对相同前后缀的标记</span>    temp<span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span>    <span class="token comment" spellcheck="true">#从索引1处开始遍历</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> k<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>            k<span class="token operator">=</span>temp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>            k<span class="token operator">+=</span><span class="token number">1</span>        temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token keyword">return</span> temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析一下代码：</p><blockquote><ul><li><code>i=1</code>时，’ab’，b[1]!=b[0]，temp.append(0)</li><li><code>i=2</code>时，’aba’，b[2]==b[0]，temp.append(1)</li><li><code>i=3</code>时，’abab’，b[3]==b[1]，temp.append(2)</li><li><code>i=4</code>时，’ababa’，b[4]==b[2]，temp.append(3)</li><li><code>i=5</code>时，’ababad’，temp=[0,0,1,2,3]<br>b[5]!=b[3]，k=temp[3-1]=1<br>b[5]!=b[1]，k=temp[1-1]=0<br>temp.append(0)</li></ul></blockquote><p>发现比较难理解的是那个回溯的地方：<code>k=temp[k-1]</code><br>没事，把<code>i=5</code>的情况再分析一下：</p><blockquote><p><code>i=5</code>时，’ababad’，temp=[0,0,1,2,3]，k=3</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200514161345927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70"></p><blockquote><p>aba and aba can match,k=3<br>a and a can match,k=(aba的匹配数1,即temp[k-1])<br>more explain: aba can see as a and a,the first <code>a</code> can match the fourth <code>a</code></p></blockquote><p><strong>2. kmp</strong><br>打完上面的怪，就可以直接写kmp了</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">kmp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp<span class="token operator">=</span>cal_temp<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    ans<span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> k<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>            k<span class="token operator">=</span>temp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>            k<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">if</span> k<span class="token operator">==</span>len<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token operator">+=</span><span class="token number">1</span>            k<span class="token operator">=</span>temp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> ａｎｓ<span class="token comment" spellcheck="true">#小结：利用已匹配的信息，迈出比较大的步子。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>functools模块</title>
      <link href="posts/e9cc.html"/>
      <url>posts/e9cc.html</url>
      
        <content type="html"><![CDATA[<h2 id="lru-cache"><a href="#lru-cache" class="headerlink" title="lru_cache"></a>lru_cache</h2><p><code>@functools.lru_cache(maxsize=128, typed=False)</code><br>一个为函数提供缓存功能的装饰器，缓存 maxsize 组传入参数，在下次以相同参数调用时直接返回上一次的结果。用以<strong>节约高开销或I/O函数的调用时间</strong>。</p><ul><li>如果 maxsize 设为 None，LRU 特性将被禁用且缓存可无限增长。</li><li>如果 typed 设置为true，不同类型的函数参数将被分别缓存。例如， f(3) 和 f(3.0) 将被视为不同而分别缓存。</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron之旅</title>
      <link href="posts/6db0.html"/>
      <url>posts/6db0.html</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title="preface"></a><em>preface</em></h2><p><code>Electron</code> -&gt; 使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序</p><ul><li>两个核心:<ul><li>main-process</li><li>render-process</li></ul></li><li>三个部分:<ul><li><code>Chromium</code>: for making web pages</li><li><code>Node.js</code>: for filesystems and networks</li><li><code>native apis</code>: for three systems</li></ul></li></ul><h2 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h2><p>构建一个demo：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/demopark/electron-api-demos-Zh_CN$ <span class="token function">cd</span> electron-api-demos-Zh_CN<span class="token comment" spellcheck="true">#安装依赖</span>$ <span class="token function">npm</span> <span class="token function">install</span>$ <span class="token function">npm</span> start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Hello World!<br>We are using Node.js 12.16.3, Chromium 85.0.4183.93, and Electron 10.1.1.</p><blockquote><p>Electron 在一开始会通过node去执行当前main.js文件</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//electron是内置模块，提供了所有的API</span><span class="token keyword">const</span> electron <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//module to control application life</span><span class="token keyword">const</span> app <span class="token operator">=</span> electron<span class="token punctuation">.</span>app <span class="token comment" spellcheck="true">//module to create native browser window</span><span class="token comment" spellcheck="true">//如同在浏览器中打开一个新的窗口</span><span class="token keyword">const</span> BrowserWidow <span class="token operator">=</span> electron<span class="token punctuation">.</span>BrowserWidow<span class="token comment" spellcheck="true">//注册事件</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'ready'</span><span class="token punctuation">,</span> createWindow<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>APP常用事件</strong></p><ul><li>ready</li><li>window-all-closed</li><li>before-quit</li><li>will-quit</li><li>quit</li></ul><h2 id="js库"><a href="#js库" class="headerlink" title="js库"></a>js库</h2><p><code>React</code> 是一个用于构建用户界面的 JAVASCRIPT 库。</p><p>React 主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。</p><p>React 起源于 Facebook 的内部项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。</p><p><code>Vue.js</code>是一套构建用户界面的渐进式框架。</p><p>Vue 只关注视图层， 采用自底向上增量开发的设计。</p><p>Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p><blockquote><p>Electron 可以让你使用纯 JavaScript 调用丰富的原生(操作系统) APIs 来创造桌面应用。 你可以把它看作一个 Node. js 的变体，它专注于桌面应用而不是 Web 服务器端。</p></blockquote><p>应用架构：多窗口，单窗口</p><p>Electron在主进程和渲染进程中提供了大量API去帮助开发桌面应用程序， 在主进程和渲染进程中，你可以通过require的方式将其包含在模块中以此，获取Electron的API</p><h2 id="other"><a href="#other" class="headerlink" title="other"></a><em>other</em></h2><p><strong>参考资料</strong>：</p><ul><li>官方文档：<a href="http://www.electronjs.org/docs" target="_blank" rel="noopener">http://www.electronjs.org/docs</a></li><li>教程：<a href="https://www.jspang.com/detailed?id=62#toc262" target="_blank" rel="noopener">https://www.jspang.com/detailed?id=62#toc262</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFS&amp;BFS</title>
      <link href="posts/4832.html"/>
      <url>posts/4832.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-1219-黄金矿工"><a href="#1-1219-黄金矿工" class="headerlink" title="(1)1219.黄金矿工"></a>(1)1219.黄金矿工</h2><p>你要开发一座金矿，地质勘测学家已经探明了这座金矿中的资源分布，并用大小为 <code>m * n</code> 的网格 <code>grid</code> 进行了标注。每个单元格中的整数就表示这一单元格中的黄金数量；如果该单元格是空的，那么就是 <code>0</code>。</p><p>为了使收益最大化，矿工需要按以下规则来开采黄金：</p><ul><li>每当矿工进入一个单元，就会收集该单元格中的所有黄金。</li><li>矿工每次可以从当前位置向上下左右四个方向走。</li><li>每个单元格只能被开采（进入）一次。</li><li>不得开采（进入）黄金数目为 0 的单元格。</li><li>矿工可以从网格中 <strong>任意一个</strong> 有黄金的单元格出发或者是停止。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getMaximumGold</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;=</span>i<span class="token operator">&lt;</span>rows <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>j<span class="token operator">&lt;</span>cols <span class="token operator">and</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                tmp<span class="token punctuation">,</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span>                gain<span class="token operator">=</span>max<span class="token punctuation">(</span>dfs<span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>tmp                <span class="token keyword">return</span> tmp<span class="token operator">+</span>gain            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># dfs带上回溯</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-841-钥匙和房间"><a href="#2-841-钥匙和房间" class="headerlink" title="(2)841.钥匙和房间"></a>(2)841.钥匙和房间</h2><p>有 <code>N</code> 个房间，开始时你位于 <code>0</code> 号房间。每个房间有不同的号码：<code>0，1，2，...，N-1</code>，并且房间里可能有一些钥匙能使你进入下一个房间。</p><p>在形式上，对于每个房间 <code>i</code> 都有一个钥匙列表 <code>rooms[i]</code>，每个钥匙 <code>rooms[i][j]</code> 由 <code>[0,1，...，N-1]</code> 中的一个整数表示，其中 <code>N = rooms.length</code>。 钥匙<code> rooms[i][j] = v</code> 可以打开编号为 <code>v</code> 的房间。</p><p>最初，除 <code>0</code> 号房间外的其余所有房间都被锁住。</p><p>你可以自由地在房间之间来回走动。</p><p>如果能进入每个房间返回 <code>true</code>，否则返回 <code>false</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canVisitAllRooms</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> rooms<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        visited<span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">for</span> room <span class="token keyword">in</span> rooms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> room <span class="token operator">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span>                    dfs<span class="token punctuation">(</span>room<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>list<span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>len<span class="token punctuation">(</span>rooms<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-扫雷游戏"><a href="#3-扫雷游戏" class="headerlink" title="(3)扫雷游戏"></a>(3)扫雷游戏</h2><p><a href="https://leetcode-cn.com/problems/minesweeper/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minesweeper/</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">updateBoard</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> board<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> click<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> board<span class="token punctuation">[</span>click<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>click<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"M"</span><span class="token punctuation">:</span>            board<span class="token punctuation">[</span>click<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>click<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"X"</span>            <span class="token keyword">return</span> board        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            cnt<span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span><span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;=</span>i<span class="token operator">&lt;</span>rows <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>j<span class="token operator">&lt;</span>cols<span class="token punctuation">:</span>                    <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"M"</span><span class="token punctuation">:</span> cnt<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">return</span> cnt        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> x<span class="token operator">>=</span>rows <span class="token operator">or</span> y<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> y<span class="token operator">>=</span>cols<span class="token punctuation">:</span>                <span class="token keyword">return</span>             <span class="token keyword">if</span> board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"E"</span><span class="token punctuation">:</span>                tmp<span class="token operator">=</span>check<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>                <span class="token keyword">if</span> tmp<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"B"</span>                    <span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span><span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                        dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>str<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>click<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>click<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> board<span class="token comment" spellcheck="true"># 看起来抽象的东西不一定难</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-200-岛屿数量"><a href="#3-200-岛屿数量" class="headerlink" title="(3)200. 岛屿数量"></a>(3)200. 岛屿数量</h2><p>给你一个由 <code>&#39;1&#39;</code>（陆地）和 <code>&#39;0&#39;</code>（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numIslands</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> grid<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">#有个index(0) out of的bug</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> x<span class="token operator">>=</span>rows <span class="token operator">or</span> y<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> y<span class="token operator">>=</span>cols<span class="token punctuation">:</span> <span class="token keyword">return</span>             <span class="token keyword">if</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token keyword">return</span>            grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span>            dfs<span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"1"</span><span class="token punctuation">:</span>                    dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>                    ans<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># wa~,可以瞎写这个原来觉得神奇的题了。</span><span class="token comment" spellcheck="true"># 2020-09-23</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-695-岛屿的最大面积"><a href="#4-695-岛屿的最大面积" class="headerlink" title="(4)695. 岛屿的最大面积"></a>(4)695. 岛屿的最大面积</h2><p>给定一个包含了一些 <code>0</code> 和 <code>1</code> 的非空二维数组 <code>grid</code> 。</p><p>一个 岛屿 是由一些相邻的 <code>1</code> (代表土地) 构成的组合，这里的「相邻」要求两个 <code>1</code> 必须在水平或者竖直方向上相邻。你可以假设 <code>grid</code> 的四个边缘都被 <code>0</code>（代表水）包围着。</p><p>找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为 <code>0</code> 。)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxAreaOfIsland</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> grid<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> x<span class="token operator">>=</span>rows <span class="token operator">or</span> y<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> y<span class="token operator">>=</span>cols<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token keyword">if</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>            grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span>dfs<span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">+</span>dfs<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">+</span>dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span>dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                    ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 这1不是“1”了...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-N叉树的层序遍历"><a href="#5-N叉树的层序遍历" class="headerlink" title="(5)N叉树的层序遍历"></a>(5)N叉树的层序遍历</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> <span class="token string">'Node'</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token operator">&lt;=</span>depth<span class="token punctuation">:</span> ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            ans<span class="token punctuation">[</span>depth<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> node<span class="token punctuation">.</span>children<span class="token punctuation">:</span>                dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-二叉树的堂兄弟节点"><a href="#6-二叉树的堂兄弟节点" class="headerlink" title="(6)二叉树的堂兄弟节点"></a>(6)二叉树的堂兄弟节点</h2><p>在二叉树中，根节点位于深度 <code>0</code> 处，每个深度为 <code>k</code> 的节点的子节点位于深度 <code>k+1</code> 处。</p><p>如果二叉树的两个节点深度相同，但父节点不同，则它们是一对堂兄弟节点。</p><p>我们给出了具有唯一值的二叉树的根节点 <code>root</code>，以及树中两个不同节点的值 <code>x</code> 和 <code>y</code>。</p><p>只有与值 <code>x</code> 和 <code>y</code> 对应的节点是堂兄弟节点时，才返回 <code>true</code>。否则，返回 <code>false</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isCousins</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">,</span> y<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x<span class="token punctuation">,</span>self<span class="token punctuation">.</span>y<span class="token operator">=</span>None<span class="token punctuation">,</span>None        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>pre<span class="token punctuation">,</span>depth<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span>             <span class="token keyword">if</span> node<span class="token punctuation">.</span>val<span class="token operator">==</span>x<span class="token punctuation">:</span> self<span class="token punctuation">.</span>x<span class="token operator">=</span><span class="token punctuation">[</span>pre<span class="token punctuation">,</span>depth<span class="token punctuation">]</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>val<span class="token operator">==</span>y<span class="token punctuation">:</span> self<span class="token punctuation">.</span>y<span class="token operator">=</span><span class="token punctuation">[</span>pre<span class="token punctuation">,</span>depth<span class="token punctuation">]</span>            dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>node<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>node<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span>None<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span>self<span class="token punctuation">.</span>y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> self<span class="token punctuation">.</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>self<span class="token punctuation">.</span>y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">###</span><span class="token comment" spellcheck="true">###</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-1162-地图分析"><a href="#7-1162-地图分析" class="headerlink" title="(7)1162.地图分析"></a>(7)1162.地图分析</h2><p><a href="https://leetcode-cn.com/problems/as-far-from-land-as-possible/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/as-far-from-land-as-possible/</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span>        steps<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>        queue<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">*</span>n<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                x<span class="token punctuation">,</span>y<span class="token operator">=</span>queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> xi<span class="token punctuation">,</span>yi <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;=</span>xi<span class="token operator">&lt;</span>n <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>yi<span class="token operator">&lt;</span>n <span class="token operator">and</span> grid<span class="token punctuation">[</span>xi<span class="token punctuation">]</span><span class="token punctuation">[</span>yi<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>xi<span class="token punctuation">,</span>yi<span class="token punctuation">)</span><span class="token punctuation">)</span>                        grid<span class="token punctuation">[</span>xi<span class="token punctuation">]</span><span class="token punctuation">[</span>yi<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>            steps<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> steps<span class="token comment" spellcheck="true"># BFS</span><span class="token comment" spellcheck="true"># 从陆地（1）扩展到海洋（0）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-水域大小"><a href="#8-水域大小" class="headerlink" title="(8)水域大小"></a>(8)水域大小</h2><p><a href="https://leetcode-cn.com/problems/pond-sizes-lcci/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/pond-sizes-lcci/</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pondSizes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> land<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>land<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>land<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>            queue<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span>            size<span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">while</span> len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>                x<span class="token punctuation">,</span>y<span class="token operator">=</span>queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                size<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">for</span> xi<span class="token punctuation">,</span>yi <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;=</span>xi<span class="token operator">&lt;</span>rows <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>yi<span class="token operator">&lt;</span>cols <span class="token operator">and</span> land<span class="token punctuation">[</span>xi<span class="token punctuation">]</span><span class="token punctuation">[</span>yi<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>xi<span class="token punctuation">,</span>yi<span class="token punctuation">)</span><span class="token punctuation">)</span>                        land<span class="token punctuation">[</span>xi<span class="token punctuation">]</span><span class="token punctuation">[</span>yi<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">return</span> size        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> land<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    land<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>                    ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>bfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        ans<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># return ans.sort() 返回的 null</span><span class="token comment" spellcheck="true"># 发现bfs是queue的更新，dfs是树的遍历</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-边框着色"><a href="#9-边框着色" class="headerlink" title="(9)边框着色"></a>(9)边框着色</h2><p>对联通分量的边界进行着色</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">colorBorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r0<span class="token punctuation">:</span> int<span class="token punctuation">,</span> c0<span class="token punctuation">:</span> int<span class="token punctuation">,</span> color<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        border<span class="token punctuation">,</span>visit<span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># visit记录同色，不用d了</span>        mark<span class="token operator">=</span>grid<span class="token punctuation">[</span>r0<span class="token punctuation">]</span><span class="token punctuation">[</span>c0<span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">&lt;=</span>x<span class="token operator">&lt;</span>rows <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>y<span class="token operator">&lt;</span>cols <span class="token operator">and</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>mark<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token keyword">in</span> visit<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>            visit<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> dfs<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">+</span>dfs<span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">+</span>dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">:</span> border<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        dfs<span class="token punctuation">(</span>r0<span class="token punctuation">,</span>c0<span class="token punctuation">)</span>        <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> border<span class="token punctuation">:</span>            grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>color        <span class="token keyword">return</span> grid<span class="token comment" spellcheck="true"># 额外数组的加入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言</title>
      <link href="posts/c6f.html"/>
      <url>posts/c6f.html</url>
      
        <content type="html"><![CDATA[<hr><p>存储类定义了程序中变量、函数的可见性和生命周期。</p><table><thead><tr><th>存储类</th><th>说明</th></tr></thead><tbody><tr><td><code>auto</code></td><td>是<strong>局部变量的默认存储类</strong>, 限定变量只能在函数内部使用；</td></tr><tr><td><code>register</code></td><td>代表了寄存器变量，不在内存中使用；</td></tr><tr><td><code>static</code></td><td>是全局变量的默认存储类,表示变量在程序生命周期内可见；</td></tr><tr><td><code>extern</code></td><td>表示全局变量，即对程序内所有文件可见，类似于Java中的public关键字；</td></tr></tbody></table><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a><em>指针</em></h2><hr><h5 id="指针变量"><a href="#指针变量" class="headerlink" title="指针变量"></a>指针变量</h5><p><strong>指针是个变量，存放内存单元的地址。</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span> </span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//在内存中开辟一块空间    </span>    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对变量a取址,赋值给指针变量p               </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>野指针</strong>——就是指针指向的位置是不可知的。指针变量如果在定义时未初始化，其值是随机的，这意味着此时的解引用，是去访问一个不确定的地址，其结果是不可知的。</p><p><strong>空指针</strong>——指针的值为NULL。</p></blockquote><hr><h5 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h5><p><strong>指针类型，决定了指针每移动一次所跨越的字节。</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p %p"</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//000000000061FE14 000000000061FE18</span><span class="token comment" spellcheck="true">//移动了4个字节</span><span class="token comment" spellcheck="true">// type * 会定义一个变量为指针类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">short</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p %p"</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//000000000061FE14 000000000061FE16</span><span class="token comment" spellcheck="true">//移动了2个字节</span><span class="token comment" spellcheck="true">//(type *)是指针的类型转变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="指针解引用，是在访问内存"><a href="#指针解引用，是在访问内存" class="headerlink" title="指针解引用，是在访问内存"></a>指针解引用，是在访问内存</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span>      p<span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token operator">*</span>p<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//可以看见定义时*符号可以在type与p间随意放</span><span class="token comment" spellcheck="true">//解引用会访问指针类型相关的字节</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">char</span><span class="token operator">*</span> pstr<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>pstr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>string<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="为什么要用指针？"><a href="#为什么要用指针？" class="headerlink" title="为什么要用指针？"></a>为什么要用指针？</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">nicejob</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    a<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//函数对传递参数的操作仅仅是对拷贝的操作</span><span class="token comment" spellcheck="true">//这时使用指针来改变函数外的值</span><span class="token keyword">void</span> <span class="token function">nicejob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span>a<span class="token operator">=</span><span class="token operator">*</span>a<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//*a通过解引用访问内存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>随便找个变量放地址是可行的，如 <code>int p=&amp;a;</code><br>但为什么，还麻烦的用<code> int * p</code>呢？</p></blockquote><blockquote><p>为什么使用指针类型：<br>1.不容易混淆<br>2.指针类型给出了指针改变的实际字节偏移量</p></blockquote><hr><h5 id="二级指针，函数指针"><a href="#二级指针，函数指针" class="headerlink" title="二级指针，函数指针"></a>二级指针，函数指针</h5><p><strong>一级指针</strong>用途：</p><ul><li>可以利用一级指针改变函数外部的变量，还可以跨进程改变变量（外挂就是这么搞的）。</li><li>一级指针可以存储数组的首地址，并通过指针或者下标访问元素。</li><li>一级指针作为函数的返回值，返回地址；注意：不能返回指向栈的地址，因为函数执行完，变量就被回收了。</li><li>函数的参数有副本机制，传递实参时，新建一个变量，容纳传递过来的实参。特例：数组在函数参数中拒绝副本机制，数组作为参数时数组的首地址。</li><li>return也有副本机制，返回值保存在CPU寄存器中，因此函数的返回值不能取地址。</li><li>为什么指针要有类型，因为类型可以让编译器知道如何解析，还有步长。</li></ul><p><strong>二级指针</strong>，在二维数组中常见：<br><code>array[2][1]</code>等价的指针表示法：<code>*(*(array+2)+1)</code></p><p>函数指针：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">></span> y <span class="token operator">?</span> x <span class="token punctuation">:</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* p 是函数指针 */</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span> max<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &amp;可以省略</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入三个数字:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token operator">&amp;</span> b<span class="token punctuation">,</span> <span class="token operator">&amp;</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    d <span class="token operator">=</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token function">p</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//等价d = max(max(a, b), c)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最大的数字是: %d\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="结构指针"><a href="#结构指针" class="headerlink" title="结构指针"></a>结构指针</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> LEN 20</span><span class="token keyword">struct</span> names <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//结构声明</span>    <span class="token keyword">char</span> first<span class="token punctuation">[</span>LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> last<span class="token punctuation">[</span>LEN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> guy <span class="token punctuation">{</span>    <span class="token keyword">struct</span> names handle<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//嵌套结构</span>    <span class="token keyword">float</span> income<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> guy fellow<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//结构数组变量</span>        <span class="token punctuation">{</span>            <span class="token punctuation">{</span><span class="token string">"li"</span><span class="token punctuation">,</span><span class="token string">"hua"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token number">12000.00</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token punctuation">{</span><span class="token string">"liu"</span><span class="token punctuation">,</span><span class="token string">"bei"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token number">23000.00</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> guy<span class="token operator">*</span> him<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指向结构的指针</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"address #1: %p #2: %p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>fellow<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>fellow<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    him<span class="token operator">=</span><span class="token operator">&amp;</span>fellow<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pointer #1: %p #2: %p\n"</span><span class="token punctuation">,</span>him<span class="token punctuation">,</span>him<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"him->income is $%.2f\n(*him).income is $%.2f"</span><span class="token punctuation">,</span>him<span class="token operator">-></span>income<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>him<span class="token punctuation">)</span><span class="token punctuation">.</span>income<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// address #1: 000000000061FDC0 #2: 000000000061FDEC</span><span class="token comment" spellcheck="true">// pointer #1: 000000000061FDC0 #2: 000000000061FDEC</span><span class="token comment" spellcheck="true">// him->income is $12000.00</span><span class="token comment" spellcheck="true">// (*him).income is $12000.00</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><em>字符串</em></h2><p><strong>定义</strong>：以 <code>null</code> 字符 <code>&#39;\0&#39;</code> 终止的一维字符数组。</p><p><code>&lt;string.h&gt;</code>中常用函数</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td><code>strcpy(s1,s2)</code></td><td>复制s2到s1</td></tr><tr><td><code>strcat(s1, s2)</code></td><td>连接s2到s1末尾</td></tr><tr><td><code>strlen()</code></td><td></td></tr><tr><td><code>strcmp(s1, s2)</code></td><td>比较s1、s2大小</td></tr><tr><td><code>strchr(s1, ch)</code></td><td>返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。</td></tr><tr><td><code>strstr(s1, s2)</code></td><td>返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</td></tr><tr><td><code>void *memset(void * str,int c,size_t n)</code></td><td>复制字符c 到str所指向的的前n个字符</td></tr></tbody></table><h2 id="stdio-h"><a href="#stdio-h" class="headerlink" title="stdio.h"></a><em>stdio.h</em></h2><table><thead><tr><th>函数原型</th><th>说明</th></tr></thead><tbody><tr><td><code>int fclose(FILE *stream)</code></td><td>关闭流 stream。刷新所有的缓冲区。</td></tr><tr><td><code>int fflush(FILE *stream)</code></td><td>刷新流 stream 的输出缓冲区。</td></tr><tr><td><code>void rewind(FILE *stream)</code></td><td>设置文件位置为给定流 stream 的文件的开头。</td></tr><tr><td><code>int printf(const char *format, ...)</code></td><td>发送格式化输出到标准输出 stdout。</td></tr><tr><td><code>int sprintf(char *str, const char *format, ...)</code></td><td>发送格式化输出到字符串。</td></tr><tr><td><code>int fgetc(FILE *stream)</code></td><td>从指定的流 stream 获取下一个字符（一个无符号字符），并把位置标识符往前移动。</td></tr><tr><td><code>char *fgets(char *str, int n, FILE *stream)</code></td><td>从指定的流 stream 读取一行，并把它存储在 str 所指向的字符串内。当读取 (n-1) 个字符时，或者读取到换行符时，或者到达文件末尾时，它会停止，具体视情况而定。</td></tr><tr><td><code>int snprintf(char *str, size_t size, const char *format, ...)</code></td><td>格式字符串到 str 中。</td></tr></tbody></table><hr><table><thead><tr><th>输入</th><th>输出</th><th>说明</th></tr></thead><tbody><tr><td><code>scanf()</code></td><td><code>printf()</code></td><td></td></tr><tr><td><code>fscanf(stdin,...)</code></td><td><code>fprintf(stdout,...)</code></td><td></td></tr><tr><td><code>getchar()</code></td><td><code>putchar()</code></td><td></td></tr><tr><td><code>gets()</code></td><td><code>puts()</code></td><td>遇到换行符结束</td></tr><tr><td><code>int getc(FILE *stream)</code></td><td></td><td>从文件读取字符，fgetc与getc差不多</td></tr><tr><td><code>fgets(str,n,fp)</code></td><td><code>fputs(str,fp)</code></td><td>最多只能读入n-1个字符到str，可存储<code>\n</code></td></tr><tr><td><code>gets_s(words,STLEN)</code></td><td></td><td></td></tr><tr><td></td><td><code>fprintf()</code></td><td><code>int fprintf(FILE *stream, const char *format, ...)</code></td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//snprintf</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> s <span class="token operator">=</span> <span class="token string">"runoobcom"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 读取字符串并存储在 buffer 中</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">snprintf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"%s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 输出 buffer及字符数</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"string:%s \n character count = %d\n"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//不能完全存入时snprintf返回-1</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="stdlib-h"><a href="#stdlib-h" class="headerlink" title="stdlib.h"></a><em>stdlib.h</em></h2><table><thead><tr><th>函数原型</th><th>说明</th></tr></thead><tbody><tr><td><code>double atof(const char *str)</code></td><td>把参数 str 所指向的字符串转换为一个浮点数（类型为 double 型）</td></tr><tr><td><code>int atoi(const char *str)</code></td><td></td></tr><tr><td><code>void *calloc(size_t nitems, size_t size)</code></td><td>分配所需的内存空间，并返回一个指向它的指针</td></tr><tr><td><code>void *malloc(size_t size)</code></td><td>malloc 和 calloc 之间的不同点是，malloc 不会设置内存为零，而 calloc 会设置分配的内存为零。</td></tr><tr><td><code>void free(void *ptr)</code></td><td>释放内存</td></tr><tr><td><code>void exit(int status)</code></td><td>立即终止调用进程<code>？？？</code></td></tr><tr><td><code>void qsort(void *base,nitems,size,func</code></td><td></td></tr></tbody></table><p>size_t 在这是一个库定义的变量类型，无符号整型。</p><p>关于动态内存:</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 最初的内存分配 */</span>   str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//强制指针类型转变，读度1</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"runoob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"String = %s,  Address = %u\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//String = runoob,  Address = 3662685808</span>   <span class="token comment" spellcheck="true">/* 重新分配内存 */</span>   str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">realloc</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">strcat</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">".com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"String = %s,  Address = %u\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//String = runoob.com,  Address = 3662685808</span>   <span class="token function">free</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a><em>文件读写</em></h2><p>挑一段代码看看，，，，</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    FILE  <span class="token operator">*</span>fp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建 （文件指针类型） 变量 </span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input your strings:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">gets</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        k<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>                k<span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">!=</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>str<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>                 <span class="token comment" spellcheck="true">//字符排序</span>    <span class="token comment" spellcheck="true">//函数原型 FILE *fopen( const char * filename, const char * mode );</span>    <span class="token comment" spellcheck="true">//单目运算符的优先级比双目的高</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"C:\\intel\\c.txt"</span><span class="token punctuation">,</span><span class="token string">"ab+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nCannot open file\nstrike any key exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nthe new:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">fputs</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//写入内容</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//关闭文件</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a><em>预处理器</em></h2><p>C预处理器不是编译器的组成部分，而是一个文本替换的工具</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><code>#define</code></td><td>定义宏</td></tr><tr><td><code>#include</code></td><td>包含一个源代码文件</td></tr><tr><td><code>#undef</code></td><td>取消已定义的宏</td></tr><tr><td><code>#ifdef</code></td><td>如果宏已经定义，则返回真</td></tr><tr><td><code>#ifndef</code></td><td>如果宏没有定义，则返回真</td></tr><tr><td><code>#if</code></td><td>如果给定条件为真，则编译下面代码</td></tr><tr><td><code>#else</code></td><td>#if 的替代方案</td></tr><tr><td><code>#elif</code></td><td>如果前面的 #if 给定条件不为真，当前条件为真，则编译下面代码</td></tr><tr><td><code>#endif</code></td><td>结束一个 #if……#else 条件编译块</td></tr><tr><td><code>#error</code></td><td>当遇到标准错误时，输出错误消息</td></tr><tr><td><code>#pragma</code></td><td>使用标准化方法，向编译器发布特殊的命令到编译器中</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//一个课堂上的例子，避免函数库的嵌套调用</span><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> __slnname__g_A__</span><span class="token macro property">#<span class="token directive keyword">define</span>  __slnname_g_A__</span><span class="token keyword">int</span> g_A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a><em>命令行参数</em></h2><p>命令行参数是使用 <code>main()</code> 函数参数来处理的，其中，<code>argc</code> 是指传入参数的个数，<code>argv[]</code> 是一个指针数组，指向传递给程序的每个参数。</p><ol><li><code>argv[0]</code> = _____.exe，<code>argv[1]</code> = 参数一，<code>argv[2]</code> = 参数二 ………</li><li>项目属性，调试中，可以更改命令行参数。cmd 中可直接输入命令行参数，如<code>a.exe argv1</code></li><li>程序中<code>argc</code>，<code>argv</code>已经是确定的值。</li></ol><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><em>题目</em></h2><ol><li>分别统计纯英文文本文件中<strong>每一个字符个数</strong>、<strong>单词总的个数</strong>；要求统计结果输出到另外一个文件中，源文件和结果文件名均<strong>由命令行参数指定</strong>.</li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>in <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>out <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fpout<span class="token punctuation">,</span> <span class="token operator">*</span>fpin<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fpin <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入文件打开失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> count<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fpin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//flag表示读到字母或数字时是否可以cnt++</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">&lt;=</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">&lt;=</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c<span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">&lt;=</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %c\n"</span><span class="token punctuation">,</span> flag<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fpin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fpin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fpout <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输出文件打开失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span>fpout<span class="token punctuation">,</span> <span class="token string">"单词个数为: %d\n"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span>fpout<span class="token punctuation">,</span> <span class="token string">"\n===================================\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span>fpout<span class="token punctuation">,</span> <span class="token string">"字符 \t 个数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span>fpout<span class="token punctuation">,</span> <span class="token string">"%3c: \t %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fpout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大一 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bisect模块</title>
      <link href="posts/7dd2.html"/>
      <url>posts/7dd2.html</url>
      
        <content type="html"><![CDATA[<h3 id="bisect"><a href="#bisect" class="headerlink" title="bisect"></a>bisect</h3><ul><li><code>bisect.bisect_left(a,x,lo=0,hi=len(a))</code></li></ul><ol><li>在 a 中找到 x 合适的插入点以<strong>维持有序</strong>。</li><li>如果 x 已经在 a 里存在，那么插入点会在已存在元素左边。</li><li>如果 a 是<code>list</code>，则返回值可以是 <code>list.insert()</code> 的第一个参数。</li><li>返回的<code>i</code>可以将数组 a 分成两部分。左侧是 <code>all(val &lt; x for val in a[lo:i])</code> ，右侧是 <code>all(val &gt;= x for val in a[i:hi])</code></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> bisectarr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span>x<span class="token operator">=</span><span class="token number">8</span>bisect<span class="token punctuation">.</span>bisect_left<span class="token punctuation">(</span>arr<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># --> 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>bisect.bisect_right(a, x, lo=0, hi=len(a))</code></li><li><code>bisect.bisect(a, x, lo=0, hi=len(a))</code><br>类似于 <code>bisect_left()</code>，但是返回的插入点是 a 中已存在元素 x 的右侧。</li></ul><h3 id="insort"><a href="#insort" class="headerlink" title="insort"></a>insort</h3><ul><li><code>bisect.insort_left(a, x, lo=0, hi=len(a))</code></li></ul><ol><li>相当于 a.<strong>insert</strong>(bisect.bisect_left(a, x, lo, hi), x)</li><li>注意搜索是 O(log n) 的，插入却是 O(n) 的。</li></ol><ul><li><code>bisect.insort_right(a, x, lo=0, hi=len(a))</code></li><li><code>bisect.insort(a, x, lo=0, hi=len(a))</code><br>类似于 <code>insort_left()</code>，但是把 x 插入到 a 中已存在元素 x 的右侧。</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">grade</span><span class="token punctuation">(</span>score<span class="token punctuation">,</span> breakpoints<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grades<span class="token operator">=</span><span class="token string">'FA'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> bisect<span class="token punctuation">(</span>breakpoints<span class="token punctuation">,</span> score<span class="token punctuation">)</span>    <span class="token keyword">return</span> grades<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>grade<span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">for</span> score <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># output: ['F',  'A', 'A']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>官方文档：<a href="https://docs.python.org/zh-cn/3.8/library/bisect.html?highlight=bisect#module-bisect" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3.8/library/bisect.html?highlight=bisect#module-bisect</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020十月上</title>
      <link href="posts/fa02.html"/>
      <url>posts/fa02.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p><font face="myfont" size=5>不因虚度年华而悔恨, 不因碌碌无为而羞愧。</font></p><h1 id="1-日记"><a href="#1-日记" class="headerlink" title="1.日记"></a>1.日记</h1><h2 id="10-3"><a href="#10-3" class="headerlink" title="10.3"></a><code>10.3</code></h2><p>人总会沉迷短暂的快乐。</p><h2 id="10-4"><a href="#10-4" class="headerlink" title="10.4"></a><code>10.4</code></h2><p>观看《灵笼》，⭐⭐⭐⭐⭐</p><p>心灵该是怎样的一种容器啊！！！</p><h2 id="10-5"><a href="#10-5" class="headerlink" title="10.5"></a><code>10.5</code></h2><p>戒游戏一个星期，说到做到。</p><p>多去看看外面的世界，了解自己</p><h2 id="10-7"><a href="#10-7" class="headerlink" title="10.7"></a><code>10.7</code></h2><blockquote><p>生活不是我们活过的日子，而是我们记住的日子。</p></blockquote><h2 id="10-8"><a href="#10-8" class="headerlink" title="10.8"></a><code>10.8</code></h2><p>今天试了一下<code>hexo-douban</code>的插件，有些鸡肋。</p><p>改不动这个hexo-matery，ejs代码看😵了</p><h2 id="10-9"><a href="#10-9" class="headerlink" title="10.9"></a><code>10.9</code></h2><p>坚持不住的时候，再坚持一下。加油！</p><p>下午逛了一大圈博客，相比之下这个博客挺棒的。<br>知足了，<font face="consolas" size=3 color='green'>i love you 3000.</font></p><p>更换域名，备案不了<br>参考：<a href="https://yafine66.gitee.io/posts/a170.html" target="_blank" rel="noopener">https://yafine66.gitee.io/posts/a170.html</a></p><h2 id="10-13"><a href="#10-13" class="headerlink" title="10.13"></a><code>10.13</code></h2><p>不知不觉一年快过去了，可我究竟活了多久？</p><p>这真是个傻乎乎的问题。</p><h2 id="10"><a href="#10" class="headerlink" title="10.~~"></a><code>10.~~</code></h2><p>如履薄冰，云淡风轻</p><h2 id="10-26"><a href="#10-26" class="headerlink" title="10.26"></a><code>10.26</code></h2><p>记一下，leancloud【为产品开发提供后端支持】<br>同微信小程序的云一样，调用API使用</p><p>hhh~，最近的生活还好吧，<br>看了《楚门的世界》《小森林》</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议</title>
      <link href="posts/2174.html"/>
      <url>posts/2174.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>HTTP是一个请求-响应协议，是两点间传输超文本数据的约定和规范。</p></blockquote><p><strong>1. HTTP状态码</strong></p><table><thead><tr><th>状态码</th><th>描述</th></tr></thead><tbody><tr><td>1XX</td><td>表示目前是协议处理中间状态</td></tr><tr><td>2XX</td><td>成功，报文已接受且正确处理</td></tr><tr><td>3XX</td><td>重定向，资源位置发生变动</td></tr><tr><td>4XX</td><td>客户端错误，请求报文有误，服务器无法处理</td></tr><tr><td>5XX</td><td>服务器处理请求时发生错误</td></tr></tbody></table><hr><p><strong>2. HTTP报文</strong></p><ul><li>请求报文</li><li>响应报文</li></ul><pre class="line-numbers language-bash"><code class="language-bash">GET /admin_ui/rdx/core/images/close.png HTTP/1.1Accept: */*Referer: http://xxx.xxx.xxx.xxx/menu/neoAccept-Language: en-USUser-Agent: Mozilla/4.0 <span class="token punctuation">(</span>compatible<span class="token punctuation">;</span> MSIE 7.0<span class="token punctuation">;</span> Windows NT 6.1<span class="token punctuation">;</span> WOW64<span class="token punctuation">;</span> Trident/7.0<span class="token punctuation">;</span> SLCC2<span class="token punctuation">;</span> .NET CLR 2.0.50727<span class="token punctuation">;</span> .NET CLR 3.5.30729<span class="token punctuation">;</span> .NET CLR 3.0.30729<span class="token punctuation">;</span> .NET4.0C<span class="token punctuation">;</span> .NET4.0E<span class="token punctuation">)</span>Accept-Encoding: gzip, deflateHost: xxx.xxx.xxx.xxxConnection: Keep-AliveCookie: startupapp<span class="token operator">=</span>neo<span class="token punctuation">;</span> is_cisco_platform<span class="token operator">=</span>0<span class="token punctuation">;</span> rdx_pagination_size<span class="token operator">=</span>250%20Per%20Page<span class="token punctuation">;</span> SESSID<span class="token operator">=</span>deb31b8eb9ca68a514cf55777744e339<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.</p><p><strong>3. HTTP方法</strong></p><table><thead><tr><th>HTTP方法</th><th>作用</th></tr></thead><tbody><tr><td><code>GET</code></td><td>获取资源</td></tr><tr><td><code>HEAD</code></td><td>获取报文头部</td></tr><tr><td><code>POST</code></td><td>传输实体主体</td></tr><tr><td><code>PUT</code></td><td>上传文件，不带验证，一般弃用</td></tr><tr><td><code>PATCH</code></td><td>对资源部分修改</td></tr><tr><td><code>DELETE</code></td><td>删除文件</td></tr><tr><td><code>OPTIONS</code></td><td>查询支持的方法</td></tr><tr><td><code>CONNECT</code></td><td>要求在与代理服务器通讯时简历隧道</td></tr><tr><td><code>TRACE</code></td><td>追踪路径</td></tr></tbody></table><hr><p><strong>4. HTTP版本</strong></p><table><thead><tr><th>版本</th><th>信息</th></tr></thead><tbody><tr><td>1.0</td><td>每发起一次请求，都要建立一次TCP链接（三次握手）</td></tr><tr><td>1.1</td><td>①提出了长连接通信方式，减少TCP连接开销 。②管道网络传输，减少整体效应时间</td></tr><tr><td>2.0</td><td>①多路复用 ②首部压缩 ③服务端推送 ④采用二进制格式</td></tr></tbody></table><blockquote><p>http无状态、明文传输、不安全</p></blockquote><p>HTTP安全问题</p><ul><li>使用明文进行通信，可能发生窃听</li><li>不验证通信方的身份，通信方身份可能伪装</li><li>无法证明报文的完整性，报文可能被篡改</li></ul><p><strong>5. HTTPS</strong></p><p>在TCP和HTTP网络层之间加入了SSL/TLS安全协议</p><ul><li>功能<ul><li><strong>加密</strong>（Encryption)<ul><li>对称密匙加密</li><li>非对称密匙加密</li><li>混合加密</li></ul></li><li><strong>身份认证</strong>（Authentication)<ul><li>通过证书来对通信方进行认证</li><li>数字证书认证机构（CA）是可信赖的第三方机构</li></ul></li><li><strong>数据一致性</strong> （Data integrity)<ul><li>通过 MD5 报文摘要</li></ul></li></ul></li><li>缺点<ul><li>因为加密解密等过程，速度会更慢</li><li>需要证书授权费用</li></ul></li></ul><p>HTTP 先和 SSL 通信，再由 SSL 和 TCP 通信，隧道通信</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记217</title>
      <link href="posts/contest217.html"/>
      <url>posts/contest217.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/problems/richest-customer-wealth/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/richest-customer-wealth/</a><br>第二题：<a href="https://leetcode-cn.com/problems/find-the-most-competitive-subsequence/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-the-most-competitive-subsequence/</a><br>第三题：<a href="https://leetcode-cn.com/problems/minimum-moves-to-make-array-complementary/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-moves-to-make-array-complementary/</a><br>第四题：<a href="https://leetcode-cn.com/problems/minimize-deviation-in-array/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimize-deviation-in-array/</a></p></blockquote><h2 id="二、找出最具竞争力的子序列"><a href="#二、找出最具竞争力的子序列" class="headerlink" title="二、找出最具竞争力的子序列"></a>二、找出最具竞争力的子序列</h2><p><strong>输入</strong>：<code>nums = [3,5,2,6]</code>, <code>k = 2</code><br><strong>输出</strong>：<code>[2,6]</code><br><strong>解释</strong>：在所有可能的子序列集合 <code>{[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}</code> 中，<code>[2,6]</code> 最具竞争力。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mostCompetitive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        count<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span>k <span class="token comment" spellcheck="true">#最多可删除</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> stack <span class="token operator">and</span> i<span class="token operator">&lt;</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">and</span> count<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                count<span class="token operator">-=</span><span class="token number">1</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> stack<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 单调栈</span><span class="token comment" spellcheck="true"># 用那个count和栈来简化问题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、使数组互补的最少操作次数"><a href="#三、使数组互补的最少操作次数" class="headerlink" title="三、使数组互补的最少操作次数"></a>三、使数组互补的最少操作次数</h2><p>给你一个长度为 偶数 <code>n</code> 的整数数组 <code>nums</code> 和一个整数 <code>limit</code> 。每一次操作，你可以将 <code>nums</code> 中的任何整数替换为 <code>1</code> 到 <code>limit</code> 之间的另一个整数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minMoves</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>A<span class="token punctuation">)</span>        count <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>limit <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>        mi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>limit <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>        ma <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>limit <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            a<span class="token punctuation">,</span> b <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span><span class="token operator">~</span>i<span class="token punctuation">]</span>            count<span class="token punctuation">[</span>a <span class="token operator">+</span> b<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            mi<span class="token punctuation">[</span>min<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            ma<span class="token punctuation">[</span>max<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> limit <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> limit <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ma<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> ma<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>limit <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            mi<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> mi<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> min<span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> mi<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> ma<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> limit <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、数组的最小偏移量"><a href="#四、数组的最小偏移量" class="headerlink" title="四、数组的最小偏移量"></a>四、数组的最小偏移量</h2><p>给你一个由 <code>n</code> 个正整数组成的数组 <code>nums</code> 。</p><p>你可以对数组的任意元素执行任意次数的两类操作：</p><ul><li>如果元素是 <strong>偶数</strong> ，<strong>除以</strong> <code>2</code></li><li>例如，如果数组是 <code>[1,2,3,4]</code> ，那么你可以对最后一个元素执行此操作，使其变成 <code>[1,2,3,2]</code></li><li>如果元素是 <strong>奇数</strong> ，<strong>乘上</strong> <code>2</code></li><li>例如，如果数组是 <code>[1,2,3,4]</code> ，那么你可以对第一个元素执行此操作，使其变成 <code>[2,2,3,4]</code></li></ul><p>数组的 <strong>偏移量</strong> 是数组中任意两个元素之间的 <strong>最大差值</strong> 。</p><p>返回数组在执行某些操作之后可以拥有的 <strong>最小偏移量</strong> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minimumDeviation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>A<span class="token punctuation">)</span>        heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> a <span class="token keyword">in</span> A<span class="token punctuation">:</span>            a2 <span class="token operator">=</span> a            <span class="token keyword">while</span> a2 <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                a2 <span class="token operator">>></span><span class="token operator">=</span> <span class="token number">1</span>            heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> <span class="token punctuation">[</span>a2<span class="token punctuation">,</span> a<span class="token punctuation">]</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>        ma <span class="token operator">=</span> max<span class="token punctuation">(</span>a <span class="token keyword">for</span> a<span class="token punctuation">,</span> a0 <span class="token keyword">in</span> heap<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            a<span class="token punctuation">,</span> a0 <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span>            res <span class="token operator">=</span> min<span class="token punctuation">(</span>res<span class="token punctuation">,</span> ma <span class="token operator">-</span> a<span class="token punctuation">)</span>            <span class="token keyword">if</span> a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">or</span> a <span class="token operator">&lt;</span> a0<span class="token punctuation">:</span>                a <span class="token operator">*=</span> <span class="token number">2</span>                ma <span class="token operator">=</span> max<span class="token punctuation">(</span>ma<span class="token punctuation">,</span> a<span class="token punctuation">)</span>                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> a0<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">return</span> res<span class="token comment" spellcheck="true">#copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><code>11.29</code> 好久了，又一次被吊打。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记213</title>
      <link href="posts/contest213.html"/>
      <url>posts/contest213.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/problems/check-array-formation-through-concatenation/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/check-array-formation-through-concatenation/</a><br>第二题：<a href="https://leetcode-cn.com/problems/count-sorted-vowel-strings/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-sorted-vowel-strings/</a><br>第三题：<a href="https://leetcode-cn.com/problems/furthest-building-you-can-reach/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/furthest-building-you-can-reach/</a><br>第四题：<a href="https://leetcode-cn.com/problems/kth-smallest-instructions/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/kth-smallest-instructions/</a></p></blockquote><h2 id="一、能否连接形成数组"><a href="#一、能否连接形成数组" class="headerlink" title="一、能否连接形成数组"></a>一、能否连接形成数组</h2><p>输入：<code>arr</code> = [91,4,64,78], <code>pieces</code> = [[78],[4,64],[91]]<br>输出：<code>true</code><br>解释：依次连接 [91]、[4,64] 和 [78]</p><p>输入：<code>arr</code> = [49,18,16], <code>pieces</code> = [[16,18,49]]<br>输出：false<br>解释：即便数字相符，也不能重新排列 <code>pieces[0]</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canFormArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> pieces<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">for</span> piece <span class="token keyword">in</span> pieces<span class="token punctuation">:</span>            <span class="token keyword">for</span> x <span class="token keyword">in</span> piece<span class="token punctuation">:</span>                <span class="token keyword">if</span> x <span class="token operator">not</span> <span class="token keyword">in</span> arr<span class="token punctuation">:</span>                     <span class="token keyword">return</span> <span class="token boolean">False</span>            pre<span class="token operator">=</span>arr<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> x <span class="token keyword">in</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                cur<span class="token operator">=</span>arr<span class="token punctuation">.</span>index<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                <span class="token keyword">if</span> cur<span class="token operator">-</span>pre<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                pre<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true"># 有些繁杂，可以优化map</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、统计字典序元音字符串的数目"><a href="#二、统计字典序元音字符串的数目" class="headerlink" title="二、统计字典序元音字符串的数目"></a>二、统计字典序元音字符串的数目</h2><p><code>n=1 return 5</code>  [“a”,”e”,”i”,”o”,”u”]<br><code>n=2 return 15</code> [“aa”,”ae”,”ai”,”ao”,”au”,”ee”,”ei”,”eo”,”eu”,”ii”,”io”,”iu”,”oo”,”ou”,”uu”]</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法一：暴力模拟</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countVowelStrings</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        d<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>        tmp<span class="token operator">=</span>ans<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> ans<span class="token punctuation">:</span>                tmp<span class="token operator">+=</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            ans<span class="token operator">=</span>tmp<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sum<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#一开始有点炸，运行中ans变了，for也变了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法二：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countVowelStrings</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span>        <span class="token keyword">return</span> sum<span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#好好学一下,hzx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、可以到达的最远建筑"><a href="#三、可以到达的最远建筑" class="headerlink" title="三、可以到达的最远建筑"></a>三、可以到达的最远建筑</h2><p>给你一个整数数组 <code>heights</code> ，表示建筑物的高度。另有一些砖块 <code>bricks</code> 和梯子 <code>ladders</code> 。</p><p>你从建筑物 <code>0</code> 开始旅程，不断向后面的建筑物移动，期间可能会用到砖块或梯子。</p><p>当从建筑物 <code>i</code> 移动到建筑物 <code>i+1</code>（下标 从 <code>0</code> 开始 ）时：</p><ul><li>如果当前建筑物的高度 <strong>大于或等于</strong> 下一建筑物的高度，则不需要梯子或砖块</li><li>如果当前建筑的高度 <strong>小于</strong> 下一个建筑的高度，您可以使用 <code>一架梯子</code> 或 <code>(h[i+1] - h[i])</code> 个砖块</li></ul><p>如果以最佳方式使用给定的梯子和砖块，返回你可以到达的最远建筑物的下标（下标 从 <code>0</code> 开始 ）。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># TLE dfs</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">furthestBuilding</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> heights<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> bricks<span class="token punctuation">:</span> int<span class="token punctuation">,</span> ladders<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span>bricks<span class="token punctuation">,</span>ladders<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> bricks<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> cur<span class="token number">-1</span>            <span class="token keyword">if</span> ladders<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> cur<span class="token number">-1</span>            <span class="token keyword">if</span> cur<span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>len<span class="token punctuation">(</span>heights<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> cur            height<span class="token operator">=</span>heights<span class="token punctuation">[</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>heights<span class="token punctuation">[</span>cur<span class="token punctuation">]</span>            <span class="token keyword">if</span> height<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> dfs<span class="token punctuation">(</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>bricks<span class="token punctuation">,</span>ladders<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 一：直接走</span>            <span class="token keyword">return</span> max<span class="token punctuation">(</span>dfs<span class="token punctuation">(</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>bricks<span class="token operator">-</span>height<span class="token punctuation">,</span>ladders<span class="token punctuation">)</span><span class="token punctuation">,</span>dfs<span class="token punctuation">(</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>bricks<span class="token punctuation">,</span>ladders<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>bricks<span class="token punctuation">,</span>ladders<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#优先队列+贪心</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">furthestBuilding</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> heights<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> bricks<span class="token punctuation">:</span> int<span class="token punctuation">,</span> ladders<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>heights<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 由于我们需要维护最大的 l 个值，因此使用小根堆</span>        q <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 需要使用砖块的 delta h 的和</span>        sumH <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            deltaH <span class="token operator">=</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> heights<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> deltaH <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> deltaH<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 如果优先队列已满，需要拿出一个其中的最小值，改为使用砖块</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token operator">></span> ladders<span class="token punctuation">:</span>                    sumH <span class="token operator">+=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>                <span class="token keyword">if</span> sumH <span class="token operator">></span> bricks<span class="token punctuation">:</span>                    <span class="token keyword">return</span> i <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">return</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token comment" spellcheck="true">#设置一个优先队列来当梯子</span><span class="token comment" spellcheck="true">#。。。。。。。。。。。。。。。。。。。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、第-K-条最小指令"><a href="#四、第-K-条最小指令" class="headerlink" title="四、第 K 条最小指令"></a>四、第 K 条最小指令</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 优先确定高位 + 组合计数</span><span class="token comment" spellcheck="true"># 分解成小问题</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">kthSmallestPath</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> destination<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        v<span class="token punctuation">,</span>h<span class="token operator">=</span>destination        self<span class="token punctuation">.</span>ans<span class="token operator">=</span><span class="token string">""</span>        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>h<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> h<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>ans<span class="token operator">+=</span><span class="token string">"V"</span><span class="token operator">*</span>v            <span class="token keyword">else</span><span class="token punctuation">:</span>                tmp<span class="token operator">=</span>comb<span class="token punctuation">(</span>h<span class="token operator">+</span>v<span class="token number">-1</span><span class="token punctuation">,</span>h<span class="token number">-1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#高位为h的个数</span>                <span class="token keyword">if</span> k<span class="token operator">></span>tmp<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>ans<span class="token operator">+=</span><span class="token string">"V"</span>                        f<span class="token punctuation">(</span>v<span class="token number">-1</span><span class="token punctuation">,</span>h<span class="token punctuation">,</span>k<span class="token operator">-</span>tmp<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>ans<span class="token operator">+=</span><span class="token string">"H"</span>                    f<span class="token punctuation">(</span>v<span class="token punctuation">,</span>h<span class="token number">-1</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span>        f<span class="token punctuation">(</span>v<span class="token punctuation">,</span>h<span class="token punctuation">,</span>k<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><code>11.1</code></p><p>困难可以学会很多啊，很多时候并不能事事如愿。</p><p>最近看了《大话西游之大圣娶亲》，<br>有感动，更多的无奈与自嘲，<br>他好像一条狗啊，那个落寞的背影取经去了…</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记212</title>
      <link href="posts/contest212.html"/>
      <url>posts/contest212.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/problems/slowest-key/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/slowest-key/</a><br>第二题：<a href="https://leetcode-cn.com/problems/arithmetic-subarrays/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/arithmetic-subarrays/</a><br>第三题：<a href="https://leetcode-cn.com/problems/path-with-minimum-effort/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/path-with-minimum-effort/</a><br>第四题：<a href="https://leetcode-cn.com/problems/rank-transform-of-a-matrix/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/rank-transform-of-a-matrix/</a></p></blockquote><h2 id="一、按键持续时间最长的键"><a href="#一、按键持续时间最长的键" class="headerlink" title="一、按键持续时间最长的键"></a>一、按键持续时间最长的键</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">slowestKey</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> releaseTimes<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> keysPressed<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        ans<span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        tmp<span class="token operator">=</span><span class="token punctuation">[</span>releaseTimes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>releaseTimes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>releaseTimes<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>releaseTimes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(tmp)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>time <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> time<span class="token operator">></span>t<span class="token punctuation">:</span>                 ans<span class="token punctuation">,</span>t<span class="token operator">=</span>keysPressed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>time            <span class="token keyword">elif</span> time<span class="token operator">==</span>t<span class="token punctuation">:</span>                 ans<span class="token operator">=</span>max<span class="token punctuation">(</span>keysPressed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(ans,t)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、等差子数组"><a href="#二、等差子数组" class="headerlink" title="二、等差子数组"></a>二、等差子数组</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">checkArithmeticSubarrays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>bool<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>tmp<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            t<span class="token operator">=</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>            t<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(i,t)</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>check<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、-最小体力消耗路径"><a href="#三、-最小体力消耗路径" class="headerlink" title="三、 最小体力消耗路径"></a>三、 最小体力消耗路径</h2><p>你准备参加一场远足活动。给你一个二维 <code>rows x columns</code> 的地图 <code>heights</code> ，其中 <code>heights[row][col]</code> 表示格子 <code>(row, col)</code> 的高度。一开始你在最左上角的格子 <code>(0, 0)</code> ，且你希望去最右下角的格子 <code>(rows-1, columns-1)</code> （注意下标从 0 开始编号）。你每次可以往 <strong>上</strong>，<strong>下</strong>，<strong>左</strong>，<strong>右</strong> 四个方向之一移动，你想要找到耗费 <strong>体力</strong> 最小的一条路径。</p><p>一条路径耗费的 <strong>体力值</strong> 是路径上相邻格子之间 <strong>高度差绝对值</strong> 的 <strong>最大值</strong> 决定的。</p><p>请你返回从左上角走到右下角的最小 <strong>体力消耗值</strong> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># dfs回溯超时</span><span class="token comment" spellcheck="true"># 目的性不强，hhh</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minimumEffortPath</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> heights<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>heights<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>heights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>travel<span class="token punctuation">,</span>hp<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x<span class="token operator">==</span>rows<span class="token number">-1</span> <span class="token operator">and</span> y<span class="token operator">==</span>cols<span class="token number">-1</span><span class="token punctuation">:</span>                 self<span class="token punctuation">.</span>ans<span class="token operator">=</span>min<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ans<span class="token punctuation">,</span>hp<span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">for</span> nx<span class="token punctuation">,</span>ny <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;=</span>nx<span class="token operator">&lt;</span>rows <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>ny<span class="token operator">&lt;</span>cols<span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nx<span class="token punctuation">,</span>ny<span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token keyword">in</span> travel<span class="token punctuation">:</span>                        travel<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span>ny<span class="token punctuation">)</span><span class="token punctuation">)</span>                        dfs<span class="token punctuation">(</span>nx<span class="token punctuation">,</span>ny<span class="token punctuation">,</span>travel<span class="token punctuation">,</span>max<span class="token punctuation">(</span>hp<span class="token punctuation">,</span>abs<span class="token punctuation">(</span>heights<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token operator">-</span>heights<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        travel<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># copy的bfs+二分:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minimumEffortPath</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> heights<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        m<span class="token punctuation">,</span> n <span class="token operator">=</span> len<span class="token punctuation">(</span>heights<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>heights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        mat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>        l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">999999</span>        <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            mat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>            mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            queue <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">while</span> queue<span class="token punctuation">:</span>                i<span class="token punctuation">,</span> j <span class="token operator">=</span> queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;=</span>x<span class="token operator">&lt;</span>m <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>y<span class="token operator">&lt;</span>n <span class="token operator">and</span> mat<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">and</span> abs<span class="token punctuation">(</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> heights<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> mid<span class="token punctuation">:</span>                        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>                        mat<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">if</span> mat<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                r <span class="token operator">=</span> mid            <span class="token keyword">else</span><span class="token punctuation">:</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、矩阵转换后的秩"><a href="#四、矩阵转换后的秩" class="headerlink" title="四、矩阵转换后的秩"></a>四、矩阵转换后的秩</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># copy: 全排序+并查集</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">matrixRankTransform</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>         R<span class="token punctuation">,</span> C <span class="token operator">=</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>C <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>R<span class="token punctuation">)</span><span class="token punctuation">]</span>        countR<span class="token punctuation">,</span> countC <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>R<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>C        <span class="token comment" spellcheck="true"># 按元素大小分别存储元素坐标</span>        ls <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        <span class="token keyword">for</span> r<span class="token punctuation">,</span> row <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">for</span> c<span class="token punctuation">,</span> val <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>                 ls<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 并查集用于合并行或列相同的元素</span>        union <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span>LIM<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">if</span> union<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">:</span> <span class="token keyword">return</span> i            union<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> find<span class="token punctuation">(</span>union<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> union<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 按val从小到大遍历</span>        pool <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        <span class="token keyword">for</span> val <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>ls<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 用并查集合并行和列相同的元素并分组</span>            <span class="token keyword">for</span> r<span class="token punctuation">,</span> c <span class="token keyword">in</span> ls<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">:</span>                 union<span class="token punctuation">[</span>find<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> find<span class="token punctuation">(</span>c<span class="token operator">+</span>LIM<span class="token punctuation">)</span>            pool<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> r<span class="token punctuation">,</span> c <span class="token keyword">in</span> ls<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">:</span>                 pool<span class="token punctuation">[</span>find<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 行和列相同的元素，共享相同的rank</span>            <span class="token keyword">for</span> group <span class="token keyword">in</span> pool<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 rank <span class="token operator">=</span> max<span class="token punctuation">(</span>max<span class="token punctuation">(</span><span class="token punctuation">(</span>countR<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> countC<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> r<span class="token punctuation">,</span> c <span class="token keyword">in</span> group<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">for</span> r<span class="token punctuation">,</span> c <span class="token keyword">in</span> group<span class="token punctuation">:</span>                     countR<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> countC<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> rank                    <span class="token comment" spellcheck="true"># 重置并查集</span>                    union<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> r                    union<span class="token punctuation">[</span>c<span class="token operator">+</span>LIM<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token operator">+</span>LIM        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记211</title>
      <link href="posts/contest211.html"/>
      <url>posts/contest211.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/problems/largest-substring-between-two-equal-characters/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/largest-substring-between-two-equal-characters/</a><br>第二题：<a href="https://leetcode-cn.com/problems/lexicographically-smallest-string-after-applying-operations/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/lexicographically-smallest-string-after-applying-operations/</a><br>第三题：<a href="https://leetcode-cn.com/problems/best-team-with-no-conflicts/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/best-team-with-no-conflicts/</a><br>第四题：<a href="https://leetcode-cn.com/problems/graph-connectivity-with-threshold/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/graph-connectivity-with-threshold/</a></p></blockquote><h2 id="一、两个相同字符之间的最长子字符串"><a href="#一、两个相同字符之间的最长子字符串" class="headerlink" title="一、两个相同字符之间的最长子字符串"></a>一、两个相同字符之间的最长子字符串</h2><p>给你一个字符串 <code>s</code>，请你返回 两个相同字符之间的最长子字符串的长度 ，计算长度时不含这两个字符。如果不存在这样的子字符串，返回 <code>-1</code> 。</p><p>子字符串 是字符串中的一个连续字符序列。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxLengthBetweenEqualCharacters</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        d<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>x <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            nums<span class="token operator">=</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>                ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、执行操作后字典序最小的字符串"><a href="#二、执行操作后字典序最小的字符串" class="headerlink" title="二、执行操作后字典序最小的字符串"></a>二、执行操作后字典序最小的字符串</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#暴力</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findLexSmallestString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">,</span> a<span class="token punctuation">:</span> int<span class="token punctuation">,</span> b<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        b <span class="token operator">=</span> b<span class="token operator">%</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp<span class="token operator">=</span><span class="token string">""</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> tmp<span class="token operator">+=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span> tmp<span class="token operator">+=</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> tmp        <span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> s<span class="token punctuation">[</span><span class="token operator">-</span>b<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span>b<span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token punctuation">{</span>s<span class="token punctuation">}</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>add<span class="token punctuation">(</span>s<span class="token punctuation">)</span>            s1<span class="token punctuation">,</span>s2<span class="token operator">=</span>f1<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>f2<span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> ans<span class="token punctuation">:</span> dfs<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">return</span> min<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、无矛盾的最佳球队"><a href="#三、无矛盾的最佳球队" class="headerlink" title="三、无矛盾的最佳球队"></a>三、无矛盾的最佳球队</h2><p>假设你是球队的经理。对于即将到来的锦标赛，你想组合一支总体得分最高的球队。球队的得分是球队中所有球员的分数 总和 。</p><p>然而，球队中的矛盾会限制球员的发挥，所以必须选出一支 没有矛盾 的球队。如果一名年龄较小球员的分数 严格大于 一名年龄较大的球员，则存在矛盾。同龄球员之间不会发生矛盾。</p><p>给你两个列表 <code>scores</code> 和 <code>ages</code>，其中每组 <code>scores[i]</code> 和 <code>ages[i]</code> 表示第 <code>i</code> 名球员的分数和年龄。请你返回 <strong>所有可能的无矛盾球队中得分最高那支的分数</strong> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bestTeamScore</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> scores<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> ages<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>scores<span class="token punctuation">)</span>        arr <span class="token operator">=</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>ages<span class="token punctuation">,</span> scores<span class="token punctuation">)</span><span class="token punctuation">)</span>        arr<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 按年龄递增排序，年龄相同的按分数递增排序</span>        <span class="token comment" spellcheck="true">#print(arr)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token comment" spellcheck="true">#类似最长上升子序列问题</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># DPxiu</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 优化版：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bestTeamScore</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> scores<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> ages<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">import</span> bisect        d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>score<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token keyword">for</span> age<span class="token punctuation">,</span> score <span class="token keyword">in</span> zip<span class="token punctuation">(</span>ages<span class="token punctuation">,</span> scores<span class="token punctuation">)</span><span class="token punctuation">]</span>        d<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>d<span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token number">0</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># print(d)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            score<span class="token punctuation">,</span> age <span class="token operator">=</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            idx <span class="token operator">=</span> bisect<span class="token punctuation">.</span>bisect_right<span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token punctuation">(</span>age<span class="token punctuation">,</span>float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            s <span class="token operator">=</span> stack<span class="token punctuation">[</span>idx<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            res <span class="token operator">=</span> max<span class="token punctuation">(</span>res<span class="token punctuation">,</span> s<span class="token operator">+</span>score<span class="token punctuation">)</span>            <span class="token keyword">while</span> idx <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">and</span> stack<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> s<span class="token operator">+</span>score<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>idx<span class="token punctuation">)</span>            stack<span class="token punctuation">[</span>idx<span class="token punctuation">:</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> s<span class="token operator">+</span>score<span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">while</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">and</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(stack)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、带阈值的图连通性"><a href="#四、带阈值的图连通性" class="headerlink" title="四、带阈值的图连通性"></a>四、带阈值的图连通性</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 并查集</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记210</title>
      <link href="posts/contest210.html"/>
      <url>posts/contest210.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/problems/maximum-nesting-depth-of-the-parentheses/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-nesting-depth-of-the-parentheses/</a><br>第二题：<a href="https://leetcode-cn.com/problems/maximal-network-rank/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximal-network-rank/</a><br>第三题：<a href="https://leetcode-cn.com/problems/split-two-strings-to-make-palindrome/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/split-two-strings-to-make-palindrome/</a><br>第四题：<a href="https://leetcode-cn.com/problems/count-subtrees-with-max-distance-between-cities/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-subtrees-with-max-distance-between-cities/</a></p></blockquote><h2 id="一、括号的最大嵌套深度"><a href="#一、括号的最大嵌套深度" class="headerlink" title="一、括号的最大嵌套深度"></a>一、括号的最大嵌套深度</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token number">0</span>        cnt<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token string">"("</span><span class="token punctuation">:</span> ans<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token string">")"</span><span class="token punctuation">:</span> ans<span class="token operator">-=</span><span class="token number">1</span>            cnt<span class="token operator">=</span>max<span class="token punctuation">(</span>cnt<span class="token punctuation">,</span>ans<span class="token punctuation">)</span>        <span class="token keyword">return</span> cnt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、最大网络秩"><a href="#二、最大网络秩" class="headerlink" title="二、最大网络秩"></a>二、最大网络秩</h2><p><code>n</code> 座城市和一些连接这些城市的道路 <code>roads</code> 共同组成一个基础设施网络。每个 <code>roads[i] = [ai, bi]</code> 都表示在城市 <code>ai</code> 和 <code>bi</code> 之间有一条双向道路。</p><p>两座不同城市构成的 城市对 的 <strong>网络秩</strong> 定义为：与这两座城市 直接 相连的道路总数。如果存在一条道路直接连接这两座城市，则这条道路只计算 一次 。</p><p>整个基础设施网络的 最大网络秩 是所有不同城市对中的 最大网络秩 。</p><p>给你整数 <code>n</code> 和数组 <code>roads</code>，返回整个基础设施网络的 最大网络秩 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maximalNetworkRank</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> roads<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token number">0</span>        d<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span> roads<span class="token punctuation">:</span>            d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>            d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                tmp<span class="token operator">=</span>len<span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>len<span class="token punctuation">(</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> i <span class="token keyword">in</span> d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span> tmp<span class="token operator">-=</span><span class="token number">1</span>                ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 穷举</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、分割两个字符串得到回文串"><a href="#三、分割两个字符串得到回文串" class="headerlink" title="三、分割两个字符串得到回文串"></a>三、分割两个字符串得到回文串</h2><p>给你两个字符串 <code>a</code> 和 <code>b</code> ，它们长度相同。请你选择一个下标，将两个字符串都在 相同的下标 分割开。由 <code>a</code> 可以得到两个字符串： <code>aprefix</code> 和 <code>asuffix</code> ，满足 <code>a = aprefix + asuffix</code> ，同理，由 <code>b</code> 可以得到两个字符串 <code>bprefix</code> 和 <code>bsuffix</code> ，满足 <code>b = bprefix + bsuffix</code> 。请你判断 <code>aprefix + bsuffix</code> 或者 <code>bprefix + asuffix</code> 能否构成回文串。</p><p>当你将一个字符串 <code>s</code> 分割成 <code>sprefix</code> 和 <code>ssuffix</code> 时， <code>ssuffix</code> 或者 <code>sprefix</code> 可以为空。比方说， <code>s = &quot;abc&quot;</code> 那么 <code>&quot;&quot; + &quot;abc&quot;</code> ， <code>&quot;a&quot; + &quot;bc&quot;</code> ， <code>&quot;ab&quot; + &quot;c&quot;</code> 和 <code>&quot;abc&quot; + &quot;&quot;</code> 都是合法分割。</p><p>如果 能构成回文字符串 ，那么请返回 <code>true</code>，否则返回 <code>false</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">checkPalindromeFormation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">:</span> str<span class="token punctuation">,</span> b<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">,</span>left<span class="token punctuation">)</span><span class="token punctuation">:</span>            right<span class="token operator">=</span>len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>left            <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">and</span> right<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> str1<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">!=</span>str2<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">break</span>                left<span class="token operator">-=</span><span class="token number">1</span>                right<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">return</span> left        left<span class="token operator">=</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span>               <span class="token comment" spellcheck="true">#第一次检测的下标</span>        left<span class="token operator">=</span>min<span class="token punctuation">(</span>check<span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">,</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span>check<span class="token punctuation">(</span>b<span class="token punctuation">,</span>b<span class="token punctuation">,</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>        left<span class="token operator">=</span>min<span class="token punctuation">(</span>check<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span>check<span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> left<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span>                <span class="token comment" spellcheck="true">#检测是否扩展到底</span><span class="token comment" spellcheck="true"># 核心思路：中心扩展</span><span class="token comment" spellcheck="true"># 第一步：前a后a,前b后b,找到中间的回文串</span><span class="token comment" spellcheck="true"># 第二步：开始拼接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、统计子树间最大距离"><a href="#四、统计子树间最大距离" class="headerlink" title="四、统计子树间最大距离"></a>四、统计子树间最大距离</h2><p>任意城市之间只有唯一的一条路径。换句话说，所有城市形成了一棵 树 。</p><p><strong>输入</strong>：n = 4, edges = [[1,2],[2,3],[2,4]]<br><strong>输出</strong>：[3,4,0]<br><strong>解释</strong>：<br>子树 {1,2}, {2,3} 和 {2,4} 最大距离都是 1 。<br>子树 {1,2,3}, {1,2,4}, {2,3,4} 和 {1,2,3,4} 最大距离都为 2 。<br>不存在城市间最大距离为 3 的子树。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countSubgraphsForEachDiameter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">,</span> edges<span class="token punctuation">)</span><span class="token punctuation">:</span>        d<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> edges<span class="token punctuation">:</span>            d<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            d<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">maxd</span><span class="token punctuation">(</span>mask0<span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask0<span class="token punctuation">:</span>                    mask <span class="token operator">=</span> mask0                    bfs<span class="token punctuation">,</span> bfs2 <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                    cur <span class="token operator">=</span> <span class="token number">0</span>                    <span class="token keyword">while</span> bfs<span class="token punctuation">:</span>                        <span class="token keyword">for</span> i <span class="token keyword">in</span> bfs<span class="token punctuation">:</span>                            mask <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i                            <span class="token keyword">for</span> j <span class="token keyword">in</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                                <span class="token keyword">if</span> mask <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>                                    bfs2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>                        cur <span class="token operator">+=</span> <span class="token number">1</span>                        bfs<span class="token punctuation">,</span> bfs2 <span class="token operator">=</span> bfs2<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                    <span class="token keyword">if</span> mask<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>                    res <span class="token operator">=</span> max<span class="token punctuation">(</span>res<span class="token punctuation">,</span> cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> res        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> mask <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> mask <span class="token operator">&amp;</span> <span class="token punctuation">(</span>mask <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>            k <span class="token operator">=</span> maxd<span class="token punctuation">(</span>mask<span class="token punctuation">)</span>            <span class="token keyword">if</span> k<span class="token punctuation">:</span>                res<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res<span class="token comment" spellcheck="true"># copy</span><span class="token comment" spellcheck="true"># 不懂</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记209</title>
      <link href="posts/contest209.html"/>
      <url>posts/contest209.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/problems/special-array-with-x-elements-greater-than-or-equal-x/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/special-array-with-x-elements-greater-than-or-equal-x/</a><br>第二题：<a href="https://leetcode-cn.com/problems/even-odd-tree/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/even-odd-tree/</a><br>第三题：<a href="https://leetcode-cn.com/problems/maximum-number-of-visible-points/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-number-of-visible-points/</a><br>第四题：<a href="https://leetcode-cn.com/problems/minimum-one-bit-operations-to-make-integers-zero/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-one-bit-operations-to-make-integers-zero/</a></p></blockquote><h2 id="一、特殊数组的特征值"><a href="#一、特殊数组的特征值" class="headerlink" title="一、特殊数组的特征值"></a>一、特殊数组的特征值</h2><p>给你一个非负整数数组 <code>nums</code> 。如果存在一个数 <code>x</code> ，使得 <code>nums</code> 中恰好有 <code>x</code> 个元素 大于或者等于 <code>x</code> ，那么就称 <code>nums</code> 是一个 特殊数组 ，而 <code>x</code> 是该数组的 特征值 。</p><p>注意： <code>x</code> 不必 是 <code>nums</code> 的中的元素。</p><p>如果数组 <code>nums</code> 是一个 特殊数组 ，请返回它的特征值 <code>x</code> 。否则，返回 <code>-1</code> 。可以证明的是，如果 <code>nums</code> 是特殊数组，那么其特征值 <code>x</code> 是 唯一的 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">specialArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 特征值的遍历</span>            <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token punctuation">(</span>n<span class="token operator">-</span>bisect_left<span class="token punctuation">(</span>nums<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 <span class="token keyword">return</span> x        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token comment" spellcheck="true"># nums.sort(reverse=True)</span><span class="token comment" spellcheck="true"># sorted(nums,reverse=True)</span><span class="token comment" spellcheck="true"># 今天bisect对递减的数组出错了，未知原因</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、奇偶树"><a href="#二、奇偶树" class="headerlink" title="二、奇偶树"></a>二、奇偶树</h2><p>如果一棵二叉树满足下述几个条件，则可以称为 奇偶树 ：</p><p>二叉树根节点所在层下标为 <code>0</code> ，根的子节点所在层下标为 <code>1</code> ，根的孙节点所在层下标为 <code>2</code> ，依此类推。</p><p>偶数下标 层上的所有节点的值都是 奇 整数，从左到右按顺序 严格递增<br>奇数下标 层上的所有节点的值都是 偶 整数，从左到右按顺序 严格递减</p><p>给你二叉树的根节点，如果二叉树为 奇偶树 ，则返回 <code>true</code> ，否则返回 <code>false</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isEvenOddTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token operator">==</span>depth<span class="token punctuation">:</span> ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                ans<span class="token punctuation">[</span>depth<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> depth<span class="token punctuation">,</span>nums <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>            flag<span class="token operator">=</span>depth<span class="token operator">%</span><span class="token number">2</span>            <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>depth<span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> flag<span class="token punctuation">:</span>                           <span class="token comment" spellcheck="true">#奇数</span>                <span class="token keyword">if</span> sorted<span class="token punctuation">(</span>nums<span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">!=</span>nums<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                            <span class="token comment" spellcheck="true">#偶数</span>                <span class="token keyword">if</span> sorted<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">!=</span>nums<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、可见点的最大数目"><a href="#三、可见点的最大数目" class="headerlink" title="三、可见点的最大数目"></a>三、可见点的最大数目</h2><p>给你一个点数组 <code>points</code> 和一个表示角度的整数 <code>angle</code> ，你的位置是 <code>location</code> ，其中 <code>location = [posx, posy]</code> 且 <code>points[i] = [xi, yi]</code> 都表示 X-Y 平面上的整数坐标。</p><p>最开始，你面向东方进行观测。你 不能 进行移动改变位置，但可以通过 自转 调整观测角度。换句话说，<code>posx</code> 和 <code>posy</code> 不能改变。你的视野范围的角度用 <code>angle</code> 表示， 这决定了你观测任意方向时可以多宽。设 <code>d</code> 为逆时针旋转的度数，那么你的视野就是角度范围 <code>[d - angle/2, d + angle/2]</code> 所指示的那片区域。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">visiblePoints</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> points<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> angle<span class="token punctuation">:</span> int<span class="token punctuation">,</span> location<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        ret<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>points<span class="token punctuation">)</span>        a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> points<span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token operator">==</span> location<span class="token punctuation">:</span>                ret <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>atan2<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>location<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>location<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>atan2<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>location<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>location<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>pi<span class="token punctuation">)</span>        a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        j<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> i<span class="token operator">+</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span> <span class="token operator">and</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> angle<span class="token operator">/</span><span class="token number">180</span><span class="token operator">*</span>pi<span class="token punctuation">:</span>                j <span class="token operator">+=</span> <span class="token number">1</span>            ans <span class="token operator">=</span> max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> j<span class="token operator">-</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> ret<span class="token operator">+</span>ans<span class="token comment" spellcheck="true">#copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、使整数变为-0-的最少操作次数"><a href="#四、使整数变为-0-的最少操作次数" class="headerlink" title="四、使整数变为 0 的最少操作次数"></a>四、使整数变为 0 的最少操作次数</h2><p>给你一个整数 <code>n</code>，你需要重复执行多次下述操作将其转换为 <code>0</code> ：</p><ul><li>翻转 <code>n</code> 的二进制表示中最右侧位（第 <code>0</code> 位）。</li><li>如果第 <code>(i-1)</code> 位为 <code>1</code> 且从第 <code>(i-2)</code> 位到第 <code>0</code> 位都为 <code>0</code>，则翻转 <code>n</code> 的二进制表示中的第 <code>i</code> 位。</li></ul><p>返回将 <code>n</code> 转换为 <code>0</code> 的最小操作次数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 格雷码：一种二进制编码方式，相邻码只有一位二进制数不同</span><span class="token comment" spellcheck="true"># 0001->0001,0010->0011,0011->0010,0100->0110</span><span class="token comment" spellcheck="true"># 弄清编码方式，总结规律即可。</span><span class="token comment" spellcheck="true">#方法一：格雷码的解码</span><span class="token comment" spellcheck="true"># eg:n=1110</span><span class="token comment" spellcheck="true">#  1. n的左边第二位：1，与前一位已经解码：1，进行异或，1^1=0，所以数字变成10xx</span><span class="token comment" spellcheck="true">#  2. n的左边第三位：1，与前一位已经解码：0，进行异或，1^0=1，所以数字变成101x</span><span class="token comment" spellcheck="true">#  3. n的左边第四位：0，与前一位已经解码：1，进行异或，0^1=1，所以数字变成1011</span><span class="token comment" spellcheck="true">#  所以答案就是1011B=11D</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minimumOneBitOperations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        nums<span class="token operator">=</span><span class="token punctuation">[</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> bin<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        pre<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span><span class="token operator">=</span>pre            pre<span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> eval<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token operator">+</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#方法二：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minimumOneBitOperations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        dp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> k <span class="token keyword">in</span> dp<span class="token punctuation">:</span>                <span class="token keyword">return</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span>            <span class="token keyword">if</span> k <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>                res <span class="token operator">=</span> k            <span class="token keyword">else</span><span class="token punctuation">:</span>                m <span class="token operator">=</span> <span class="token number">1</span>                <span class="token keyword">while</span> m <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> k<span class="token punctuation">:</span>                    m <span class="token operator">*=</span> <span class="token number">2</span>                n <span class="token operator">=</span> m <span class="token operator">//</span> <span class="token number">2</span>                <span class="token comment" spellcheck="true">#print(k, m, n)</span>                <span class="token keyword">if</span> k <span class="token operator">>=</span> m <span class="token operator">+</span> n<span class="token punctuation">:</span>                    res <span class="token operator">=</span> m <span class="token operator">+</span> helper<span class="token punctuation">(</span>k <span class="token operator">-</span> m <span class="token operator">-</span> n<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    res <span class="token operator">=</span> m <span class="token operator">+</span> helper<span class="token punctuation">(</span>k <span class="token operator">-</span> n<span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> res            <span class="token keyword">return</span> res        <span class="token keyword">return</span> helper<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>考察数学。。。<br>复习了<code>math</code>, <code>bisect</code>，角度问题<br>那个树，hhh，做题还是有好处</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表达式求值</title>
      <link href="posts/8d87.html"/>
      <url>posts/8d87.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p>对栈的应用，中缀表达式的直接求值。</p><h1 id="1-代码实现"><a href="#1-代码实现" class="headerlink" title="1.代码实现"></a>1.代码实现</h1><p>项目包含：</p><ul><li>main.cpp</li><li>s.cpp</li><li>s.h</li></ul><h2 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a><em>main.cpp</em></h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"s.h"</span></span><span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">,</span> <span class="token keyword">char</span> op<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> c <span class="token operator">-</span> d<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> c <span class="token operator">+</span> d<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> c <span class="token operator">*</span> d<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> c <span class="token operator">/</span> d<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'%'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> c <span class="token operator">%</span> d<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'^'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token function">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">calcu</span><span class="token punctuation">(</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>    stackp num<span class="token punctuation">,</span> op<span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">push</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token punctuation">;</span>            <span class="token function">gettop</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//栈外的优先级高，进栈</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">osp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">isp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">push</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//栈内的优先级高，出栈</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">osp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">isp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">osp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">isp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">pop</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">pop</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token function">fun</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在pop op的时候计算</span>                    <span class="token function">pop</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">gettop</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">osp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">isp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">push</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">osp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">isp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">pop</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">gettop</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//处理栈中剩下的op符</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token function">gettop</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">pop</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pop</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token function">fun</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pop</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">gettop</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">gettop</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    stackp s<span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the infix expression:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"!!!! dont take # \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gets_s</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s = %d"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token function">calcu</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="s-cpp"><a href="#s-cpp" class="headerlink" title="s.cpp"></a><em>s.cpp</em></h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"s.h"</span></span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>stackp<span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token keyword">const</span> stackp<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//change s</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>stackp <span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    stackp p <span class="token operator">=</span> new stack<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p<span class="token operator">-></span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>    s <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//change s</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span>stackp<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    stackp p <span class="token operator">=</span> s<span class="token punctuation">;</span>    s <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    x <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>    delete p<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">gettop</span><span class="token punctuation">(</span><span class="token keyword">const</span> stackp<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> s<span class="token operator">-></span>data<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">isp</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'#'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'('</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'^'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token string">'%'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">')'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">osp</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'#'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'('</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'^'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token string">'%'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">')'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="s-h"><a href="#s-h" class="headerlink" title="s.h"></a><em>s.h</em></h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __S_H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __S_H__</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4477)</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> node <span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> node<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span>stack<span class="token punctuation">,</span> <span class="token operator">*</span>stackp<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>stackp <span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token keyword">const</span> stackp <span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>stackp <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span>stackp <span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">gettop</span><span class="token punctuation">(</span><span class="token keyword">const</span> stackp <span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">isp</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">osp</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-小结"><a href="#2-小结" class="headerlink" title="2.小结"></a>2.小结</h1><p>主要就是那个calcu函数，伪代码理解：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> infix_expression<span class="token punctuation">:</span>    <span class="token keyword">if</span> i是数字：        放入数字栈    <span class="token keyword">else</span>（i是操作符）：        <span class="token keyword">if</span> 优先级高：            放入运算符栈        <span class="token keyword">elif</span> 优先级低：            运算符栈pop，同时在数字栈中运算            调整运算符栈        <span class="token keyword">if</span> 优先级相等：            调整运算符栈<span class="token keyword">for</span> op <span class="token keyword">in</span> 运算符栈中的残留：    数字栈中运算<span class="token keyword">return</span> 数字栈中的唯一数字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言线性表</title>
      <link href="posts/fd16.html"/>
      <url>posts/fd16.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>文件结构：</p><ul><li><p><code>l.cpp</code>    定义链表功能函数</p><pre class="line-numbers language-cC"><code class="language-cC">#include "l.h"功能一。。。功能二。。。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>l.h</code>      存放链表函数原型，结构体定义</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __L_H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __L_H__</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span>结构体定义函数原型<span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>main.cpp</code> 执行链表的操作</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"l.h"</span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>分为不带头，带头，无说明则代码通用。 <code>***</code>说明通用</p><h3 id="l-h"><a href="#l-h" class="headerlink" title="l.h"></a><em>l.h</em></h3><ul><li><code>node</code> 链表的节点</li><li><code>nodep</code> 指向该节点的指针</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> elemtype<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> lnode <span class="token punctuation">{</span>    elemtype data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> lnode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>node<span class="token punctuation">;</span><span class="token keyword">typedef</span> node<span class="token operator">*</span> nodep<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">create_h</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">create_t</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">travel</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">locate</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="init"><a href="#init" class="headerlink" title="init ***"></a><em>init</em> ***</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="create"><a href="#create" class="headerlink" title="create"></a><em>create</em></h3><p>带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">create_h</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    head <span class="token operator">=</span> new node<span class="token punctuation">;</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the node num:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nodep tmp <span class="token operator">=</span> new node<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        tmp<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">create_h</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    head <span class="token operator">=</span> new node<span class="token punctuation">;</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the node num:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>head<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nodep tmp <span class="token operator">=</span> new node<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        tmp<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//步骤一：将新建的节点连上去</span>        head <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//步骤二：改变头指针的位置</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//多了在首处填值的步骤</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="free"><a href="#free" class="headerlink" title="free ***"></a><em>free</em> ***</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nodep tmp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        delete head<span class="token punctuation">;</span>        head <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="travel"><a href="#travel" class="headerlink" title="travel"></a><em>travel</em></h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">travel</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodep tmp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//带头，不带头的将tmp指向头</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: %d\n"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> tmp<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">;</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="len"><a href="#len" class="headerlink" title="len"></a><em>len</em></h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    nodep tmp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//带头，不带头的将tmp指向头</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cnt <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a><em>locate</em></h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">locate</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodep tmp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//带头，不带头的将tmp指向头</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tmp<span class="token operator">-></span>data<span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">;</span>            i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a><em>insert</em></h3><p>不带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> num<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the address:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the num:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nodep m <span class="token operator">=</span> new node<span class="token punctuation">;</span>        m<span class="token operator">-></span>data <span class="token operator">=</span> num<span class="token punctuation">;</span>        m<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> m<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    nodep p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            nodep m <span class="token operator">=</span> new node<span class="token punctuation">;</span>            m<span class="token operator">-></span>data <span class="token operator">=</span> num<span class="token punctuation">;</span>            m<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            p<span class="token operator">-></span>next <span class="token operator">=</span> m<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"complete\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error input\n "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> num<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the address:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the num:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    nodep p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            nodep m <span class="token operator">=</span> new node<span class="token punctuation">;</span>            m<span class="token operator">-></span>data <span class="token operator">=</span> num<span class="token punctuation">;</span>            m<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            p<span class="token operator">-></span>next <span class="token operator">=</span> m<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"complete\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error input\n "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="del"><a href="#del" class="headerlink" title="del"></a><em>del</em></h3><p>不带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the num should del:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    nodep p<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        q <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> p<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        delete q<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the num should del:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    nodep p<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> p<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    delete q<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a><em>clear</em></h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodep p <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//带头，不带头的将p指向头</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h2><p>分为不带头，带头，无说明则代码通用。 <code>***</code>说明通用</p><h3 id="l-h-1"><a href="#l-h-1" class="headerlink" title="l.h"></a><em>l.h</em></h3><ul><li><code>node</code> 链表的节点</li><li><code>nodep</code> 指向该节点的指针</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> elemtype<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> lnode <span class="token punctuation">{</span>    elemtype data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> lnode <span class="token operator">*</span>next<span class="token punctuation">,</span> <span class="token operator">*</span>pre<span class="token punctuation">;</span><span class="token punctuation">}</span>node<span class="token punctuation">;</span><span class="token keyword">typedef</span> node<span class="token operator">*</span> nodep<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">create_h</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//头插</span><span class="token keyword">void</span> <span class="token function">create_t</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//尾插</span><span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">travel</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">locate</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="init-1"><a href="#init-1" class="headerlink" title="init ***"></a><em>init</em> ***</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">=</span> new node<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>pre <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="create-1"><a href="#create-1" class="headerlink" title="create"></a><em>create</em></h3><p>不带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">create_t</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodep p <span class="token operator">=</span> head<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the node num:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    n <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>head<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        q <span class="token operator">=</span> new node<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        q<span class="token operator">-></span>pre <span class="token operator">=</span> p<span class="token punctuation">;</span>        q<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token operator">-></span>pre <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> q<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">create_t</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodep p <span class="token operator">=</span> head<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the node num:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        q <span class="token operator">=</span> new node<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        q<span class="token operator">-></span>pre <span class="token operator">=</span> p<span class="token punctuation">;</span>        q<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token operator">-></span>pre <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> q<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="free-1"><a href="#free-1" class="headerlink" title="free ***"></a><em>free</em> ***</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodep p<span class="token punctuation">;</span>    head<span class="token operator">-></span>pre<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置断点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        delete p<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="travel-1"><a href="#travel-1" class="headerlink" title="travel"></a><em>travel</em></h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">travel</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodep tmp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//带头，不带头的将tmp指向头</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: %d\n"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> tmp<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">;</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="len-1"><a href="#len-1" class="headerlink" title="len"></a><em>len</em></h3><p>不带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    nodep tmp <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        cnt <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    nodep tmp <span class="token operator">=</span> head<span class="token operator">-></span>pre<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="locate-1"><a href="#locate-1" class="headerlink" title="locate"></a><em>locate</em></h3><p>不带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">locate</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodep tmp <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tmp<span class="token operator">-></span>data<span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">locate</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodep tmp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tmp<span class="token operator">-></span>data<span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="insert-1"><a href="#insert-1" class="headerlink" title="insert"></a><em>insert</em></h3><p>不带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> num<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the address where insert:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the num:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    nodep p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nodep m <span class="token operator">=</span> new node<span class="token punctuation">;</span>        m<span class="token operator">-></span>data <span class="token operator">=</span> num<span class="token punctuation">;</span>        m<span class="token operator">-></span>pre <span class="token operator">=</span> head<span class="token operator">-></span>pre<span class="token punctuation">;</span>        m<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token operator">-></span>pre<span class="token operator">-></span>next <span class="token operator">=</span> m<span class="token punctuation">;</span>        head<span class="token operator">-></span>pre <span class="token operator">=</span> m<span class="token punctuation">;</span>        head <span class="token operator">=</span> m<span class="token punctuation">;</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            nodep m <span class="token operator">=</span> new node<span class="token punctuation">;</span>            m<span class="token operator">-></span>data <span class="token operator">=</span> num<span class="token punctuation">;</span>            m<span class="token operator">-></span>pre <span class="token operator">=</span> p<span class="token punctuation">;</span>            m<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            p<span class="token operator">-></span>next<span class="token operator">-></span>pre <span class="token operator">=</span> m<span class="token punctuation">;</span>            p<span class="token operator">-></span>next <span class="token operator">=</span> m<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"complete\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error input\n "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> num<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the address where to insert:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the num:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    nodep p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            nodep m <span class="token operator">=</span> new node<span class="token punctuation">;</span>            m<span class="token operator">-></span>data <span class="token operator">=</span> num<span class="token punctuation">;</span>            m<span class="token operator">-></span>pre <span class="token operator">=</span> p<span class="token punctuation">;</span>            m<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            p<span class="token operator">-></span>next<span class="token operator">-></span>pre <span class="token operator">=</span> m<span class="token punctuation">;</span>            p<span class="token operator">-></span>next <span class="token operator">=</span> m<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"complete\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error input\n "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="del-1"><a href="#del-1" class="headerlink" title="del"></a><em>del</em></h3><p>不带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the address of num should del:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    nodep p <span class="token operator">=</span> head<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p<span class="token operator">-></span>pre<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            p<span class="token operator">-></span>next<span class="token operator">-></span>pre <span class="token operator">=</span> p<span class="token operator">-></span>pre<span class="token punctuation">;</span>            delete p<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>         p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the address of num should del:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    nodep p <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p<span class="token operator">-></span>pre<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            p<span class="token operator">-></span>next<span class="token operator">-></span>pre <span class="token operator">=</span> p<span class="token operator">-></span>pre<span class="token punctuation">;</span>            delete p<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="clear-1"><a href="#clear-1" class="headerlink" title="clear"></a><em>clear</em></h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodep p <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//带头，不带头的将p指向头</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        p<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>c语言真累。。。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>math模块</title>
      <link href="posts/2cb4.html"/>
      <url>posts/2cb4.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）数论与表示函数"><a href="#（一）数论与表示函数" class="headerlink" title="（一）数论与表示函数"></a>（一）数论与表示函数</h3><ol><li><p><code>math.ceil(x)</code><br>返回 x 的上限，即大于或者等于 x 的最小整数。</p></li><li><p><code>math.floor(x)</code><br>返回 x 的向下取整，小于或等于 x 的最大整数。</p></li><li><p><code>math.comb(n,k)</code>，<strong>3.8新功能</strong><br>返回不重复且无顺序地从 n 项中选择 k 项的方式总数。<br>当 k &lt;= n 时取值为 n! / (k! * (n - k)!)；当 k &gt; n 时取值为零。<br>也称为二项式系数，因为它等价于表达式 (1 + x) ** n 的多项式展开中第 k 项的系数。</p></li><li><p><code>math.fabs(x)</code><br>返回 x 的绝对值。</p></li><li><p><code>math.factorial(x)</code><br>以一个整数返回 x 的阶乘。如果 x 不是整数或为负数时则将引发ValueError。</p></li><li><p><code>math.gcd(a, b)</code><br>返回整数 a 和 b 的最大公约数。</p></li><li><p><code>math.isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0)</code><br>若 a 和 b 的值比较接近则返回 True，否则返回 False。<br>根据给定的绝对和相对容差确定两个值是否被认为是接近的。</p></li><li><p><code>math.isinf(x)</code><br>如果 x 是正或负无穷大，则返回 True ，否则返回 False 。</p></li><li><p><code>math.modf(x)</code><br>返回 x 的小数和整数部分。两个结果都带有 x 的符号并且是浮点数。</p></li><li><p><code>math.perm(n, k=None)</code>，<strong>3.8新功能</strong><br>排列不重复且无顺序地从 n 项中选择 k 项的方式总数。<br>当 k &lt;= n 时取值为 n! / (n - k)!；当 k &gt; n 时取值为零。<br>如果 k 未指定或为 None，则 k 默认值为 n 并且函数将返回 n!。</p></li></ol><h3 id="（二）幂函数与对数函数"><a href="#（二）幂函数与对数函数" class="headerlink" title="（二）幂函数与对数函数"></a>（二）幂函数与对数函数</h3><ol start="11"><li><p><code>math.exp(x)</code><br>返回 e 次 x 幂。</p></li><li><p><code>math.log(x[, base ])</code><br>使用一个参数时，返回 x 的自然对数（底为 e ）。</p></li><li><p><code>math.sqrt(x)</code><br>返回 x 的平方根。</p></li></ol><h3 id="（三）三角函数与几何"><a href="#（三）三角函数与几何" class="headerlink" title="（三）三角函数与几何"></a>（三）三角函数与几何</h3><ol start="14"><li><p><code>math.asin(x)</code><br>以弧度为单位返回 x 的反正弦值。<br><code>math.acos(x)</code><br>以弧度为单位返回 x 的反余弦值。<br><code>math.atan(x)</code><br>以弧度为单位返回 x 的反正切值。<br><code>math.sin(x)</code><br>返回 x 弧度的正弦值。<br><code>math.cos(x)</code><br>返回 x 弧度的余弦值。<br><code>math.tan(x)</code><br>返回 x 弧度的正切值。</p></li><li><p><code>math.atan2(y, x)</code><br>以弧度为单位返回 atan(y / x) ，结果在 <code>(-pi,pi]</code> 之间。</p></li><li><p><code>math.dist(p, q)</code>，<strong>3.8新功能</strong><br>返回 p 与 q 两点之间的欧几里得距离（两点间直线距离），<code>sqrt(sum((px - qx) ** 2.0 for px, qx in zip(p, q)))</code>。以一个坐标序列（或可迭代对象）的形式给出。两个点必须具有相同的维度。</p></li><li><p> <code>math.hypot(*coordinates)</code><br>返回欧几里得范数，<code>sqrt(sum(x**2 for x in coordinates))</code>。这是从原点到坐标给定点的向量长度。</p></li><li><p><code>math.degrees(x)</code><br>将角度 x 从弧度转换为度数。<br><code>math.radians(x)</code><br>将角度 x 从度数转换为弧度。</p></li></ol><h3 id="（四）常数"><a href="#（四）常数" class="headerlink" title="（四）常数"></a>（四）常数</h3><ol start="20"><li><p><code>math.pi</code><br>数学常数 π = 3.141592…，精确到可用精度。</p></li><li><p><code>math.e</code><br>数学常数 e = 2.718281…，精确到可用精度。</p></li></ol><p><strong>小结</strong><br>本文基本包含math够用的函数。<br>未摘要的部分：</p><ul><li> 一些提高精度的函数</li><li> 双曲函数</li><li> 特殊函数，如伽马函数，统计等</li></ul><p>发现3.8新功能好好啊。</p><p><strong>实践</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> <span class="token operator">*</span>ceil<span class="token punctuation">(</span><span class="token number">3.9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>floor<span class="token punctuation">(</span><span class="token number">3.9</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->4,3</span>gcd<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#-->3</span>perm<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>，perm<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->120,20</span>log<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#-->2.0</span>dist<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#-->2.8284271247461903</span>radians<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#-->3.141592653589793</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记207</title>
      <link href="posts/contest207.html"/>
      <url>posts/contest207.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/contest/weekly-contest-207/problems/rearrange-spaces-between-words/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-207/problems/rearrange-spaces-between-words/</a><br>第二题：<a href="https://leetcode-cn.com/contest/weekly-contest-207/problems/split-a-string-into-the-max-number-of-unique-substrings/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-207/problems/split-a-string-into-the-max-number-of-unique-substrings/</a><br>第三题：<a href="https://leetcode-cn.com/contest/weekly-contest-207/problems/maximum-non-negative-product-in-a-matrix/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-207/problems/maximum-non-negative-product-in-a-matrix/</a><br>第四题：<a href="https://leetcode-cn.com/contest/weekly-contest-207/problems/minimum-cost-to-connect-two-groups-of-points/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-207/problems/minimum-cost-to-connect-two-groups-of-points/</a></p></blockquote><h2 id="一、重新排列单词间的空格"><a href="#一、重新排列单词间的空格" class="headerlink" title="一、重新排列单词间的空格"></a>一、重新排列单词间的空格</h2><p>给你一个字符串 <code>text</code> ，该字符串由若干被空格包围的单词组成。每个单词由一个或者多个小写英文字母组成，并且两个单词之间至少存在一个空格。题目测试用例保证 <code>text</code> 至少包含一个单词 。</p><p>请你重新排列空格，使每对相邻单词之间的空格数目都 相等 ，并尽可能 最大化 该数目。如果不能重新平均分配所有空格，请 将多余的空格放置在字符串末尾 ，这也意味着返回的字符串应当与原 <code>text</code> 字符串的长度相等。</p><p>返回 <strong>重新排列空格后的字符串</strong> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reorderSpaces</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        n<span class="token operator">=</span>text<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>        t<span class="token operator">=</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        len_t<span class="token operator">=</span>len<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">if</span> len_t<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">+</span>n<span class="token operator">*</span><span class="token string">" "</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">" "</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">//</span>len_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">%</span>len_t<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、拆分字符串使唯一子字符串的数目最大"><a href="#二、拆分字符串使唯一子字符串的数目最大" class="headerlink" title="二、拆分字符串使唯一子字符串的数目最大"></a>二、拆分字符串使唯一子字符串的数目最大</h2><p>给你一个字符串 <code>s</code> ，请你拆分该字符串，并返回拆分后唯一子字符串的最大数目。</p><p>字符串 <code>s</code> 拆分后可以得到若干 <strong>非空子字符串</strong> ，这些子字符串连接后应当能够还原为原字符串。但是拆分出来的每个子字符串都必须是 <strong>唯一的</strong> 。</p><p>注意：<strong>子字符串</strong> 是字符串中的一个连续字符序列。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxUniqueSplit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> l<span class="token operator">==</span>r<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#print(path[:])</span>                self<span class="token punctuation">.</span>ans<span class="token operator">=</span>max<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ans<span class="token punctuation">,</span>len<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>                tmp<span class="token operator">=</span>s<span class="token punctuation">[</span>l<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> tmp <span class="token operator">not</span> <span class="token keyword">in</span> path<span class="token punctuation">:</span>                    path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>                    bk<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>path<span class="token punctuation">)</span>                    path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        bk<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span class="token comment" spellcheck="true"># hhh,最近写多了回溯，</span><span class="token comment" spellcheck="true"># 这题写着写着拐进了dfs,又回溯了，回溯神奇啊</span><span class="token comment" spellcheck="true">#看着的时候挺抽象的，</span><span class="token comment" spellcheck="true">#回溯出来也就这样了</span><span class="token comment" spellcheck="true">#回溯应对拆分，专长了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、矩阵的最大非负积"><a href="#三、矩阵的最大非负积" class="headerlink" title="三、矩阵的最大非负积"></a>三、矩阵的最大非负积</h2><p>给你一个大小为 <code>rows</code> x <code>cols</code> 的矩阵 <code>grid</code> 。最初，你位于左上角 <code>(0, 0)</code> ，每一步，你可以在矩阵中 向右 或 向下 移动。</p><p>在从左上角 <code>(0, 0)</code> 开始到右下角 <code>(rows - 1, cols - 1)</code> 结束的所有路径中，找出具有 <strong>最大非负积</strong> 的路径。路径的积是沿路径访问的单元格中所有整数的乘积。</p><p>返回 最大非负积 对 <code>10**9 + 7</code> 取余 的结果。如果最大积为负数，则返回 <code>-1</code> 。</p><p>注意，取余是在得到最大积之后执行的。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProductPath</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        mod<span class="token operator">=</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">7</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>        @lru_cache<span class="token punctuation">(</span>None<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;=</span>x<span class="token operator">&lt;</span>rows <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>y<span class="token operator">&lt;</span>cols<span class="token punctuation">:</span>                tmp<span class="token operator">=</span>tmp<span class="token operator">*</span>grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span>                <span class="token keyword">if</span> x<span class="token operator">==</span>rows<span class="token number">-1</span> <span class="token operator">and</span> y<span class="token operator">==</span>cols<span class="token number">-1</span><span class="token punctuation">:</span>                     self<span class="token punctuation">.</span>ans<span class="token operator">=</span>max<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ans<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span>                    <span class="token keyword">return</span>                 dfs<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>tmp<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>ans<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">else</span> self<span class="token punctuation">.</span>ans<span class="token operator">%</span>mod<span class="token comment" spellcheck="true">#lru_cache 个神仙</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>记录一下报错:</p><ol><li>ans 不加self在这里会<code>error：referenced before assignment</code><br>&emsp;还有一种改法：把ans弄成列表，子函数中用ans[0]更改</li></ol></blockquote><h2 id="四、连通两组点的最小成本"><a href="#四、连通两组点的最小成本" class="headerlink" title="四、连通两组点的最小成本"></a>四、连通两组点的最小成本</h2><p>给你两组点，其中第一组中有 <code>size1</code> 个点，第二组中有 <code>size2</code> 个点，且 <code>size1 &gt;= size2</code> 。</p><p>任意两点间的连接成本 <code>cost</code> 由大小为 <code>size1 x size2</code> 矩阵给出，其中 <code>cost[i][j]</code> 是第一组中的点 <code>i</code> 和第二组中的点 <code>j</code> 的连接成本。<strong>如果两个组中的每个点都与另一组中的一个或多个点连接，则称这两组点是连通的。</strong>换言之，第一组中的每个点必须至少与第二组中的一个点连接，且第二组中的每个点必须至少与第一组中的一个点连接。</p><p>返回连通两组点所需的最小成本。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">connectTwoGroups</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cost<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>cost<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>cost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">argmin</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>            mini<span class="token punctuation">,</span>minv<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> v<span class="token operator">&lt;</span>minv<span class="token punctuation">:</span>                    mini<span class="token punctuation">,</span>minv<span class="token punctuation">,</span><span class="token operator">=</span>i<span class="token punctuation">,</span>v            <span class="token keyword">return</span> mini        mina<span class="token operator">=</span><span class="token punctuation">[</span>argmin<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> cost<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#横排最小值索引表</span>        minb<span class="token operator">=</span><span class="token punctuation">[</span>argmin<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>cost<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#竖列最小值的索引表</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>vis<span class="token punctuation">,</span>pre<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> index <span class="token operator">>=</span>rows<span class="token punctuation">:</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token operator">==</span>cols<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>ans<span class="token operator">=</span>min<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ans<span class="token punctuation">,</span>pre<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> vis<span class="token punctuation">:</span>                            j<span class="token operator">=</span>minb<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                            pre<span class="token operator">+=</span>cost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>                    self<span class="token punctuation">.</span>ans<span class="token operator">=</span>min<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ans<span class="token punctuation">,</span>pre<span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">if</span> pre<span class="token operator">></span>self<span class="token punctuation">.</span>ans<span class="token punctuation">:</span> <span class="token keyword">return</span>             x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>cost<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">]</span>            x<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># sort()不能直接写在上面，机制不懂</span>            <span class="token keyword">for</span> c<span class="token punctuation">,</span>i <span class="token keyword">in</span> x<span class="token punctuation">:</span>                dfs<span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>vis<span class="token operator">|</span><span class="token punctuation">{</span>i<span class="token punctuation">}</span><span class="token punctuation">,</span>pre<span class="token operator">+</span>c<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 集合中 | 表示或运算</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span class="token comment" spellcheck="true"># from copy</span><span class="token comment" spellcheck="true"># km</span><span class="token comment" spellcheck="true"># 不懂</span><span class="token comment" spellcheck="true"># 二分图： 不含奇数条边的环的一种图</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200920123941686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" alt="离内推最近的一次"></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020开学初</title>
      <link href="posts/f3a1.html"/>
      <url>posts/f3a1.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p>世界上很多东西，他们之间根本不存在因果关系。</p><p>如同鸡与蛋的关系，可只要给出个鸡或蛋就行了。</p><p>再比如，我学不了习因为我静不下心来，</p><p>可不学习怎么静下心来呢？</p><p>无聊的，大概只是无聊本身吧。</p><h2 id="1-开始"><a href="#1-开始" class="headerlink" title="1.开始"></a>1.开始</h2><ul><li><code>git clone</code> 弄项目到本地<blockquote><p>Fn+Ins可以粘贴</p></blockquote></li><li>找回torch环境</li><li>看不懂torch视频教程，</li></ul><p><strong>实验：</strong></p><p><strong>步进电机+ULN2003：</strong><br>&emsp;&emsp;比较精确慢速的马达。</p><p><strong>9g舵机：</strong><br>&emsp;&emsp;一般用于控制角度，180的范围。</p><p><strong>红外模块：</strong><br>&emsp;一、红外接收头<br>&emsp;&emsp;  红外遥控器发出的信号是一连串的二进制脉冲码。为了使其在无线传输过程中免受其他红外信号的干扰,通常都是先将其调制在特定的载波频率上,然后再经红外发射二极管发射出去,而红外线接收装置则要滤除其他杂波,叧接收该特定频率的信号并将其还原成二进制脉冲码,也就是解调.<br>&emsp;二、工作原理<br>&emsp;&emsp;  内置接收管将红外发射管发射出来癿光信号转换为微弱的电信号，此信号经由IC内部放大器进行放大，然后通过自动增益控制、带通滤波、解调变、波形整形后还原为遥控器发射出的原始编码，经由接收头的信号输出脚输入到电器上的编码识别电路。</p><h3 id="8-30"><a href="#8-30" class="headerlink" title="8.30"></a><code>8.30</code></h3><ul><li><code>print(&quot;\033[46;1m&quot;+&quot;attack&quot;+&quot;\033[0m&quot;)</code>这个可以更改字符颜色、粗细，末尾将格式复原</li><li>leetcode周赛204 ，吐了</li></ul><h3 id="8-31"><a href="#8-31" class="headerlink" title="8.31"></a><code>8.31</code></h3><ul><li>大学其实挺无趣的，</li><li>那就跟着自己，去做大事吧~~</li><li>真的喜欢和自己和睦共处</li></ul><h3 id="9-1"><a href="#9-1" class="headerlink" title="9.1"></a><code>9.1</code></h3><ul><li>再见了，<font color="#1E90FF">《逆水寒》</font> ，一个<font color="#FF00FF">令人惊艳</font> 的武侠游戏。</li><li>最美若初见，hhh~~</li></ul><h3 id="9-3"><a href="#9-3" class="headerlink" title="9.3"></a><code>9.3</code></h3><hr><ul><li><strong>数据结构</strong>，听课+自学+MOOC</li><li><strong>数据库</strong>，听课+自学</li><li><strong>电路分析</strong>，自学+MOOC</li><li><strong>概率统计</strong></li></ul><hr><ul><li><strong>语言学基础</strong></li><li>综合英语</li><li>视听说</li></ul><hr><ul><li>马克思原理</li><li>西方哲学</li><li>国别经济</li></ul><hr><p>时间零零散散的，问题不大~~</p><blockquote><p>今天的彩虹：</p></blockquote><img src="https://img-blog.csdnimg.cn/20200903232447960.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" style="zoom:40%"><h3 id="9-4"><a href="#9-4" class="headerlink" title="9.4"></a><code>9.4</code></h3><p>观看《钢铁侠》</p><p><font color="#7B68EE" size=5>我曾踏足山巅，也曾跌入谷底，<br>而如今，二者都让我受益良多。</font></p><h3 id="9-7"><a href="#9-7" class="headerlink" title="9.7"></a><code>9.7</code></h3><p>钢铁侠3中烟火爆炸的时候，godfather!!!</p><h3 id="9-10"><a href="#9-10" class="headerlink" title="9.10"></a><code>9.10</code></h3><p>。。。蹉跎岁月？？？</p><p>哲学老师，经济老师，搞我啊<br>可能我状态不太好，<br>可这种课，硬把一个人塞进去，钉在位子上硬听3个小时。</p><p>还不如我多看看书，看看别人书评。<br>真蹉跎，</p><p>想去就去，我心中不会没有尺子，<br>我是我自己，我知道我在干嘛，可能在以后看来傻乎乎的</p><p>嗯，就这样了，自律、自由缺一不可，hh~~<br>其它时间嘛，多做些有意义的事，多思考，你是一个世界，不是一个傻傻的个体。</p><p>最后只有自己的经历，自己的思考，与他人的羁绊，才是最有意思的，不是吗？</p><p>花开堪折直须折，莫待无花空折枝。</p><p>我管你个憨憨</p><h3 id="9-11"><a href="#9-11" class="headerlink" title="9.11"></a><code>9.11</code></h3><p>守望先锋，先分开一段时间。</p><p>给我时间，我会变得更强，hh~~</p><h3 id="9-12"><a href="#9-12" class="headerlink" title="9.12"></a><code>9.12</code></h3><p>愿无岁月可回首，且以深情共余生。</p><p>对美的追求，对自己的通透。</p><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>itertools模块</title>
      <link href="posts/9ba5.html"/>
      <url>posts/9ba5.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为高效循环而创建<strong>迭代器</strong>的函数。</p><p>官方文档：<a href="https://docs.python.org/zh-cn/3/library/itertools.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/itertools.html</a></p><h2 id="product"><a href="#product" class="headerlink" title="product"></a><em>product</em></h2><p>参数：<code>(*iterables, repeat=1)</code></p><pre class="line-numbers language-python"><code class="language-python">product<span class="token punctuation">(</span><span class="token string">'AB'</span><span class="token punctuation">,</span> <span class="token string">'xy'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#--> ('A', 'x')，('A', 'y')，('B', 'x')，('B', 'y')</span>product<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> repeat<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#--> 2*2*2，8个元组</span><span class="token comment" spellcheck="true"># 笛卡儿积</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="permutations"><a href="#permutations" class="headerlink" title="permutations"></a><em>permutations</em></h2><p>参数：<code>(iterable, r=None)</code></p><pre class="line-numbers language-python"><code class="language-python">permutations<span class="token punctuation">(</span><span class="token string">'ABCD'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># --> AB AC AD BA BC BD CA CB CD DA DB DC</span>permutations<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># --> 012 021 102 120 201 210</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="combinations"><a href="#combinations" class="headerlink" title="combinations"></a><em>combinations</em></h2><p>参数：<code>(iterable, r)</code></p><pre class="line-numbers language-python"><code class="language-python">combinations<span class="token punctuation">(</span><span class="token string">'ABCD'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># --> AB AC AD BC BD CD</span>combinations<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># --> 012 013 023 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="combinations-with-replacement"><a href="#combinations-with-replacement" class="headerlink" title="combinations_with_replacement"></a><em>combinations_with_replacement</em></h2><p>参数：<code>(iterable, r)</code></p><pre class="line-numbers language-python"><code class="language-python">combinations_with_replacement<span class="token punctuation">(</span><span class="token string">'ABC'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#--> AA AB AC BB BC CC</span><span class="token comment" spellcheck="true">#允许元素重复出现</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate"></a><em>accumulate</em></h2><p>参数：<code>(iterable[, func, *, initial=None])</code></p><pre class="line-numbers language-python"><code class="language-python">accumulate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">#--> 1 3 6 10 15</span>accumulate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> initial<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#--> 100 101 103 106 110 115</span>accumulate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> operator<span class="token punctuation">.</span>mul<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#--> 1 2 6 24 120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="other"><a href="#other" class="headerlink" title="other"></a><em>other</em></h2><p>无限迭代器：<code>repeat()</code>, <code>count()</code>, <code>cycle()</code></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>copy模块</title>
      <link href="posts/4b99.html"/>
      <url>posts/4b99.html</url>
      
        <content type="html"><![CDATA[<p>Python 中赋值语句<strong>不复制对象</strong>，而是在目标和对象之间创建**绑定 (bindings)**关系。对于自身可变或者包含可变项的集合对象，开发者有时会需要生成其副本用于改变操作，进而避免改变原对象。</p><p>本模块提供了通用的浅层复制和深层复制操作:</p><ul><li><code>copy.copy()</code><ul><li>浅复制，创建的对象中，每个子对象都是对源子对象的引用</li></ul></li><li><code>copy.deepcopy()</code><ul><li>深拷贝，将被复制的对象完全拷贝</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 关于拷贝的机制</span><span class="token keyword">import</span> copya<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#原始对象</span>b<span class="token operator">=</span>a                 <span class="token comment" spellcheck="true">#赋值，传对象的引用</span>c<span class="token operator">=</span>copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>a<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#浅拷贝</span>d<span class="token operator">=</span>copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#深拷贝</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -->[1, 2, 3, ['a', 'b', 'c'], 5]</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -->[1, 2, 3, ['a', 'b', 'c'], 5]</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -->[1, 2, 3, ['a', 'b', 'c']]</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -->[1, 2, 3, ['a', 'b']]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#关于同数据，字符串+=</span>a<span class="token operator">=</span><span class="token string">"abc"</span>b<span class="token operator">=</span>a<span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->1652389179952 1652389179952</span>c<span class="token operator">=</span><span class="token string">"abc"</span>d<span class="token operator">=</span><span class="token string">""</span>d<span class="token operator">+=</span>c<span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>id<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->1652389179952 1652389179952</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#-->abc</span>d<span class="token operator">+=</span>c<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>id<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span>id<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->abcabc 1652431257904 1652389179952</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记204</title>
      <link href="posts/contest204.html"/>
      <url>posts/contest204.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/problems/detect-pattern-of-length-m-repeated-k-or-more-times/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/detect-pattern-of-length-m-repeated-k-or-more-times/</a><br>第二题：<a href="https://leetcode-cn.com/problems/maximum-length-of-subarray-with-positive-product/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-length-of-subarray-with-positive-product/</a><br>第三题：<a href="https://leetcode-cn.com/problems/minimum-number-of-days-to-disconnect-island/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-number-of-days-to-disconnect-island/</a><br>第四题：<a href="https://leetcode-cn.com/problems/number-of-ways-to-reorder-array-to-get-same-bst/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-ways-to-reorder-array-to-get-same-bst/</a></p></blockquote><h2 id="一、重复至少-K-次且长度为-M-的模式"><a href="#一、重复至少-K-次且长度为-M-的模式" class="headerlink" title="一、重复至少 K 次且长度为 M 的模式"></a>一、重复至少 K 次且长度为 M 的模式</h2><p>给你一个正整数数组 <code>arr</code>，请你找出一个长度为 <code>m</code> 且在数组中至少重复 <code>k</code> 次的模式。</p><p>模式 是由一个或多个值组成的子数组（连续的子序列），连续 重复多次但 不重叠 。 模式由其长度和重复次数定义。</p><p>如果数组中存在一个至少重复 <code>k</code> 次且长度为 <code>m</code> 的模式，则返回 <code>true</code> ，否则返回  <code>false</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">containsPattern</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        len_arr<span class="token operator">=</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len_arr<span class="token punctuation">)</span><span class="token punctuation">:</span>            temp<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>m<span class="token punctuation">]</span>            <span class="token keyword">if</span> temp<span class="token operator">*</span>k<span class="token operator">==</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>m<span class="token operator">*</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true">#暴力法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、乘积为正数的最长子数组长度"><a href="#二、乘积为正数的最长子数组长度" class="headerlink" title="二、乘积为正数的最长子数组长度"></a>二、乘积为正数的最长子数组长度</h2><p>给你一个整数数组 <code>nums</code> ，请你求出乘积为正数的最长子数组的长度。</p><p>一个数组的子数组是由原数组中零个或者更多个连续数字组成的数组。</p><p>请你返回乘积为正数的最长子数组长度。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getMaxLen</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        start <span class="token operator">=</span> <span class="token number">0</span>        temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> t <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">:</span>            <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#偶数个负数</span>                    ans <span class="token operator">=</span> max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> i<span class="token operator">-</span>start<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#用i-start更新ans</span>                <span class="token keyword">else</span> <span class="token punctuation">:</span>                    ans <span class="token operator">=</span> max<span class="token punctuation">(</span><span class="token punctuation">[</span>ans<span class="token punctuation">,</span> i<span class="token operator">-</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> temp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">#还是用偶数个负数的情况来更新ans</span>                start <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>                temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">elif</span> t <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">:</span>                temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#暂存小于0的数</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#主要思路：硬模拟，负数为主线索</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、使陆地分离的最少天数"><a href="#三、使陆地分离的最少天数" class="headerlink" title="三、使陆地分离的最少天数"></a>三、使陆地分离的最少天数</h2><p>给你一个由若干 <code>0</code> 和 <code>1</code> 组成的二维网格 <code>grid</code> ，其中 <code>0</code> 表示水，而 <code>1</code> 表示陆地。岛屿由水平方向或竖直方向上相邻的 <code>1 </code>（陆地）连接形成。</p><p>如果 恰好只有一座岛屿 ，则认为陆地是 <code>连通</code> 的 ；否则，陆地就是 <code>分离</code> 的 。</p><p>一天内，可以将任何单个陆地单元（<code>1</code>）更改为水单元（<code>0</code>）。</p><p>返回使陆地分离的最少天数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#不会啊，吐了</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、将子数组重新排序得到同一个二叉查找树的方案数"><a href="#四、将子数组重新排序得到同一个二叉查找树的方案数" class="headerlink" title="四、将子数组重新排序得到同一个二叉查找树的方案数"></a>四、将子数组重新排序得到同一个二叉查找树的方案数</h2><p>给你一个数组 <code>nums</code> 表示 <code>1</code> 到 <code>n</code> 的一个排列。我们按照元素在 <code>nums</code> 中的顺序依次插入一个初始为空的二叉查找树（BST）。请你统计将 <code>nums</code> 重新排序后，统计满足如下条件的方案数：重排后得到的二叉查找树与 <code>nums</code> 原本数字顺序得到的二叉查找树相同。</p><p>比方说，给你 <code>nums = [2,1,3]</code>，我们得到一棵 <code>2</code> 为根，<code>1</code> 为左孩子，<code>3</code> 为右孩子的树。数组 <code>[2,3,1]</code> 也能得到相同的 BST，但 <code>[3,2,1]</code> 会得到一棵不同的 BST 。</p><p>请你返回重排 <code>nums</code> 后，与原数组 <code>nums</code> 得到相同二叉查找树的方案数。</p><p>由于答案可能会很大，请将结果对 <code>10^9 + 7</code> 取余数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> comb<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numOfWays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span>            left <span class="token operator">=</span> <span class="token punctuation">[</span>num <span class="token keyword">for</span> num <span class="token keyword">in</span> nums <span class="token keyword">if</span> num <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            right <span class="token operator">=</span> <span class="token punctuation">[</span>num <span class="token keyword">for</span> num <span class="token keyword">in</span> nums <span class="token keyword">if</span> num <span class="token operator">></span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            l<span class="token punctuation">,</span> r <span class="token operator">=</span> f<span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">(</span>right<span class="token punctuation">)</span>            res <span class="token operator">=</span> comb<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> l <span class="token operator">*</span> r            <span class="token keyword">return</span> res        <span class="token keyword">return</span> <span class="token punctuation">(</span>f<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 分治</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记202</title>
      <link href="posts/contest202.html"/>
      <url>posts/contest202.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、存在连续三个奇数的数组"><a href="#一、存在连续三个奇数的数组" class="headerlink" title="一、存在连续三个奇数的数组"></a>一、存在连续三个奇数的数组</h2><p>给你一个整数数组 <code>arr</code>，请你判断数组中是否存在连续三个元素都是奇数的情况：如果存在，请返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">threeConsecutiveOdds</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        l<span class="token operator">=</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">and</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">and</span> arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                 <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、使数组中所有元素相等的最小操作数"><a href="#二、使数组中所有元素相等的最小操作数" class="headerlink" title="二、使数组中所有元素相等的最小操作数"></a>二、使数组中所有元素相等的最小操作数</h2><p>存在一个长度为 <code>n</code> 的数组 <code>arr</code> ，其中 <code>arr[i] = (2 * i) + 1 （ 0 &lt;= i &lt; n </code>。</p><p>一次操作中，你可以选出两个下标，记作 <code>x</code> 和 <code>y</code> （ 0 &lt;= x, y &lt; n ）并使 arr[x] 减去 1 、arr[y] 加上 1 （即 arr[x] -=1 且 arr[y] += 1 ）。最终的目标是使数组中的所有元素都 相等 。题目测试用例将会 保证 ：在执行若干步操作后，数组中的所有元素最终可以全部相等。</p><p>给你一个整数 <code>n</code>，即数组的长度。请你返回使数组 <code>arr</code> 中所有元素相等所需的 <code>最小操作数</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minOperations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        table<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            table<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token operator">+</span>table<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> table<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、两球之间的磁力"><a href="#三、两球之间的磁力" class="headerlink" title="三、两球之间的磁力"></a>三、两球之间的磁力</h2><p>在代号为 C-137 的地球上，Rick 发现如果他将两个球放在他新发明的篮子里，它们之间会形成特殊形式的磁力。Rick 有 <code>n</code> 个空的篮子，第 <code>i</code> 个篮子的位置在 <code>position[i]</code> ，Morty 想把 <code>m</code> 个球放到这些篮子里，使得任意两球间 最小磁力 最大。</p><p>已知两个球如果分别位于 <code>x</code> 和 <code>y</code> ，那么它们之间的磁力为 <code>|x - y|</code> 。</p><p>给你一个整数数组 <code>position</code> 和一个整数 <code>m</code> ，请你返回最大化的最小磁力。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        p<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        lenp<span class="token operator">=</span>len<span class="token punctuation">(</span>p<span class="token punctuation">)</span>        l<span class="token operator">=</span>min<span class="token punctuation">(</span><span class="token punctuation">[</span>p<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>lenp<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#最小答案</span>        r<span class="token operator">=</span>p<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                                <span class="token comment" spellcheck="true">#最大答案</span>        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>            count<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>            <span class="token keyword">while</span> j<span class="token operator">&lt;</span>lenp<span class="token punctuation">:</span>                <span class="token keyword">while</span> j<span class="token operator">&lt;</span>lenp <span class="token operator">and</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>ans<span class="token punctuation">:</span> j<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">if</span> j<span class="token operator">&lt;</span>lenp<span class="token punctuation">:</span> count<span class="token operator">+=</span><span class="token number">1</span>                i<span class="token operator">=</span>j            <span class="token keyword">return</span> count<span class="token operator">>=</span> m<span class="token number">-1</span>        <span class="token keyword">while</span> l<span class="token operator">&lt;=</span>r<span class="token punctuation">:</span>            mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token keyword">if</span> check<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">:</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> r<span class="token operator">=</span>mid<span class="token number">-1</span>        <span class="token keyword">return</span> l<span class="token number">-1</span><span class="token comment" spellcheck="true"># 有些不懂，以后再看看</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、吃掉-N-个橘子的最少天数"><a href="#四、吃掉-N-个橘子的最少天数" class="headerlink" title="四、吃掉 N 个橘子的最少天数"></a>四、吃掉 N 个橘子的最少天数</h2><p>厨房里总共有 n 个橘子，你决定每一天选择如下方式之一吃这些橘子：</p><p>吃掉一个橘子。<br>如果剩余橘子数 <code>n</code> 能被 <code>2</code> 整除，那么你可以吃掉 <code>n/2</code> 个橘子。<br>如果剩余橘子数 <code>n</code> 能被 <code>3</code> 整除，那么你可以吃掉 <code>2*(n/3)</code> 个橘子。<br>每天你只能从以上 <code>3</code> 种方案中选择一种方案。</p><p>请你返回吃掉所有 <code>n</code> 个橘子的最少天数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minDays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">from</span> functools <span class="token keyword">import</span> lru_cache        @lru_cache<span class="token punctuation">(</span>maxsize<span class="token operator">=</span><span class="token number">2048</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> k<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> k            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> k<span class="token operator">%</span><span class="token number">6</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> min<span class="token punctuation">(</span>bfs<span class="token punctuation">(</span>k<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>bfs<span class="token punctuation">(</span>k<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> k<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> min<span class="token punctuation">(</span>bfs<span class="token punctuation">(</span>k<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>bfs<span class="token punctuation">(</span>k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> k<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> min<span class="token punctuation">(</span>bfs<span class="token punctuation">(</span>k<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>bfs<span class="token punctuation">(</span>k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> bfs<span class="token punctuation">(</span>k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">return</span> bfs<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第一次把第四题做出来，开心ing</span><span class="token comment" spellcheck="true"># 看了一下其它题解，n-1的情况后期不用考虑</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记201</title>
      <link href="posts/contest201.html"/>
      <url>posts/contest201.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、整理字符串"><a href="#一、整理字符串" class="headerlink" title="一、整理字符串"></a>一、整理字符串</h2><p>给你一个由大小写英文字母组成的字符串 <code>s</code> 。</p><p>一个整理好的字符串中，两个相邻字符 <code>s[i]</code> 和 <code>s[i + 1]</code> 不会同时满足下述条件：</p><ul><li><code>0</code> &lt;= <code>i</code> &lt;= <code>s.length - 2</code></li><li><code>s[i]</code> 是小写字符，但 <code>s[i + 1]</code> 是相同的大写字符；反之亦然 。</li></ul><p>请你将字符串整理好，每次你都可以从字符串中选出满足上述条件的两个相邻字符并删除，直到字符串整理好为止。</p><p>请返回整理好的 字符串 。题目保证在给出的约束条件下，测试样例对应的答案是唯一的。</p><p>注意：空字符串也属于整理好的字符串，尽管其中没有任何字符</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">makeGood</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            last<span class="token operator">=</span>None            <span class="token keyword">if</span> stack<span class="token punctuation">:</span> last<span class="token operator">=</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> last <span class="token operator">and</span> <span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">32</span><span class="token operator">==</span>ord<span class="token punctuation">(</span>last<span class="token punctuation">)</span> <span class="token operator">or</span> ord<span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">32</span><span class="token operator">==</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span>last<span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> stack <span class="token keyword">if</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#熟悉了stack，ord()与32，list.extend()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、找出第-N-个二进制字符串中的第-K-位"><a href="#二、找出第-N-个二进制字符串中的第-K-位" class="headerlink" title="二、找出第 N 个二进制字符串中的第 K 位"></a>二、找出第 N 个二进制字符串中的第 K 位</h2><p>给你两个正整数 n 和 k，二进制字符串  Sn 的形成规则如下：</p><p><code>S1 = &quot;0&quot;</code><br>当 <code>i &gt; 1</code> 时，<code>Si = Si-1 + &quot;1&quot; + reverse(invert(Si-1))</code><br>其中 <code>+</code>表示串联操作，<code>reverse(x)</code> 返回反转 x 后得到的字符串，而 <code>invert(x)</code> 则会翻转 x 中的每一位（0 变为 1，而 1 变为 0）</p><p>例如，符合上述描述的序列的前 4 个字符串依次是：</p><p>S1 = “0”<br>S2 = “011”<br>S3 = “0111001”<br>S4 = “011100110110001”<br>请你返回  Sn 的 第 k 位字符 ，题目数据保证 k 一定在 Sn 长度范围以内。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findKthBit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        s<span class="token operator">=</span><span class="token string">'0'</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            s<span class="token operator">=</span>s<span class="token operator">+</span><span class="token string">'1'</span><span class="token operator">+</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>str<span class="token punctuation">(</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> s<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 熟悉了 ^1 操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、和为目标值的非空不重叠子数组最大数目"><a href="#三、和为目标值的非空不重叠子数组最大数目" class="headerlink" title="三、和为目标值的非空不重叠子数组最大数目"></a>三、和为目标值的非空不重叠子数组最大数目</h2><p>给你一个数组 <code>nums</code> 和一个整数 <code>target</code> 。</p><p>请你返回 非空不重叠 子数组的最大数目，且每个子数组中数字和都为 <code>target</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxNonOverlapping</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token number">0</span>        pre <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#这是一个前缀和的集合</span>        sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            sum <span class="token operator">+=</span> num            <span class="token keyword">if</span> sum <span class="token operator">-</span> target <span class="token keyword">in</span> pre<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#有一段和满足要求</span>                res <span class="token operator">+=</span> <span class="token number">1</span>                sum <span class="token operator">=</span> <span class="token number">0</span>                pre <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                pre<span class="token punctuation">.</span>add<span class="token punctuation">(</span>sum<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token comment" spellcheck="true"># 像560.和为k的子数组,忘了</span><span class="token comment" spellcheck="true"># 一遍就出来了,思路都固定死了，就是前缀和</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、切棍子的最小成本"><a href="#四、切棍子的最小成本" class="headerlink" title="四、切棍子的最小成本"></a>四、切棍子的最小成本</h2><p>有一根长度为 <code>n</code> 个单位的木棍，棍上从 <code>0</code> 到 <code>n</code> 标记了若干位置。<br>给你一个整数数组 <code>cuts</code> ，其中 <code>cuts[i]</code> 表示你需要将棍子切开的位置。</p><p>你可以按顺序完成切割，也可以根据需要更改切割的顺序。</p><p>每次切割的成本都是当前要切割的棍子的长度，切棍子的总成本是历次切割成本的总和。对棍子进行切割将会把一根木棍分成两根较小的木棍（这两根木棍的长度和就是切割前木棍的长度）。请参阅第一个示例以获得更直观的解释。</p><p>返回切棍子的 <code>最小总成本</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minCost</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> cuts<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">import</span> sys           sys<span class="token punctuation">.</span>setrecursionlimit<span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#改一下递归深度</span>        <span class="token keyword">import</span> functools        @functools<span class="token punctuation">.</span>lru_cache<span class="token punctuation">(</span>None<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#用一下缓存</span>        <span class="token keyword">def</span> <span class="token function">dp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> c <span class="token keyword">in</span> cuts<span class="token punctuation">:</span>                <span class="token keyword">if</span> c <span class="token operator">></span> i <span class="token operator">and</span> c <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                    res <span class="token operator">=</span> min<span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">(</span>i<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">+</span> dp<span class="token punctuation">(</span>c<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> j <span class="token operator">-</span> i<span class="token punctuation">)</span>            <span class="token keyword">if</span> res <span class="token operator">==</span> float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token keyword">return</span> res        <span class="token keyword">return</span> dp<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 懂了一些，dp的不是表，是函数了，厉害</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>collections模块</title>
      <link href="posts/4890.html"/>
      <url>posts/4890.html</url>
      
        <content type="html"><![CDATA[<h1 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h1><ol><li>一个 <code>Counter</code> 是一个 <code>dict</code> 的子类，用于计数可哈希对象。</li><li>元素从一个 <code>iterable</code> 被计数或从其他的 <code>mapping (or counter)</code>初始化.</li><li>设置一个计数为0不会从计数器中移去一个元素。使用 <code>del</code> 来删除它</li></ol><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化:"></a><em>初始化:</em></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> <span class="token operator">*</span>c <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment" spellcheck="true"># a new, empty counter</span>c <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token string">'gallahad'</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># a new counter from an iterable</span>c <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'red'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># a new counter from a mapping</span>c <span class="token operator">=</span> Counter<span class="token punctuation">(</span>cats<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> dogs<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># a new counter from keyword args</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="elements"><a href="#elements" class="headerlink" title="elements()"></a><em>elements()</em></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#elements()返回一个迭代器</span>c <span class="token operator">=</span> Counter<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>sorted<span class="token punctuation">(</span>c<span class="token punctuation">.</span>elements<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#-->['a', 'a', 'a', 'a', 'b', 'b']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="most-common"><a href="#most-common" class="headerlink" title="most_common()"></a><em>most_common()</em></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#相等个数的元素顺序随机</span>Counter<span class="token punctuation">(</span><span class="token string">'abracadabra'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#-->[('a', 5), ('r', 2), ('b', 2)]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="subtract"><a href="#subtract" class="headerlink" title="subtract()"></a><em>subtract()</em></h2><pre class="line-numbers language-python"><code class="language-python">c <span class="token operator">=</span> Counter<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>d <span class="token operator">=</span> Counter<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>subtract<span class="token punctuation">(</span>d<span class="token punctuation">)</span>c            <span class="token comment" spellcheck="true">#-->Counter({'a': 3, 'b': 0, 'c': -3, 'd': -6})</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一些用法："><a href="#一些用法：" class="headerlink" title="一些用法："></a><em>一些用法：</em></h2><pre class="line-numbers language-python"><code class="language-python">sum<span class="token punctuation">(</span>c<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># total of all counts</span>c<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># reset all counts</span>list<span class="token punctuation">(</span>c<span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true"># list unique elements</span>set<span class="token punctuation">(</span>c<span class="token punctuation">)</span>                          <span class="token comment" spellcheck="true"># convert to a set</span>dict<span class="token punctuation">(</span>c<span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true"># convert to a regular dictionary</span>c<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># convert to a list of (elem, cnt) pairs</span>Counter<span class="token punctuation">(</span>dict<span class="token punctuation">(</span>list_of_pairs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># convert from a list of (elem, cnt) pairs</span>c<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span>n<span class="token number">-1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true"># n least common elements</span><span class="token operator">+</span>c                              <span class="token comment" spellcheck="true"># remove zero and negative counts</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> rewords <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\w+'</span><span class="token punctuation">,</span> open<span class="token punctuation">(</span><span class="token string">'hamlet.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Counter<span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''-->[('the', 1143), ('and', 966), ('to', 762), ('of', 669), ('i', 631),  ('you', 554),  ('a', 546), ('my', 514), ('hamlet', 471), ('in', 451)]'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h1><p>类似<code>list</code>的容器，实现了在两端快速<code>append</code>和<code>pop</code></p><ul><li><code>append(x)</code></li><li><code>appendleft(x)</code></li><li><code>clear()</code></li><li><code>copy()</code>  浅拷贝</li><li><code>count(x)</code></li><li><code>extend()</code></li><li><code>insert(i,x)</code></li><li><code>pop()</code></li><li><code>reverse()</code></li></ul><h1 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple()"></a>namedtuple()</h1><p>创建命名元组子类的工厂函数</p><h1 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h1><p>字典的子类，提供了一个工厂函数，为字典查询提供一个默认值。<br>常见用法：</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>d <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> s<span class="token punctuation">:</span>    d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>sorted<span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->[('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>re模块</title>
      <link href="posts/10df.html"/>
      <url>posts/10df.html</url>
      
        <content type="html"><![CDATA[<p>官方文档：<a href="https://docs.python.org/zh-cn/3/library/re.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/re.html</a></p><h2 id="python函数"><a href="#python函数" class="headerlink" title="python函数"></a><em>python函数</em></h2><p><code>re.match(pattern,str)</code><br>从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p><p><code>re.search()</code><br>扫描整个字符串并返回第一个成功的匹配。</p><p><code>re.compile()</code><br>用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。</p><p><code>re.findall()</code><br>在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">"el"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#--> &lt;re.Match object; span=(0, 1), match='h'></span><span class="token comment" spellcheck="true">#--> None</span><span class="token comment" spellcheck="true">#--> (0,1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正则符号"><a href="#正则符号" class="headerlink" title="正则符号"></a><em>正则符号</em></h2><hr><p><code>[ ]</code><br>匹配需要的字符<strong>集合</strong>，如<code>[1-3]</code>或<code>[123]</code>都是匹配1、2或者3。</p><hr><p><code>( )</code><br>捕获需要的字符。</p><hr><p><code>(?: )</code><br>非捕获分组。</p><hr><p><code>^</code>：脱字符号。<br><strong>方括号中加入</strong>脱字符号，就是匹配未列出的所有其他字符，如<code>[^a]</code>匹配除a以外的所有其他字符。</p><hr><p><code>\</code><br>和python字符串使用规则一样，可以匹配特殊字符本身。<br>如<code>\d</code>表示匹配0到9的任意一个数字字符，而<code>\\d</code>则表示匹配<code>\d</code>本身。</p><hr><p><code>|</code><br>相当于或</p><hr><p>多次匹配</p><ul><li><code>*</code> : 匹配前一个字符0到n次，如pytho*n可以匹配pythn、pytoon、pythooooon等。</li><li><code>?</code> : 匹配前一个字符0或1次。</li><li><code>+</code> : 匹配前一个字符1到n次。等价于<code>{1,}</code></li><li><code>{n,m}</code> : 匹配前一个字符n次到m次。</li><li><code>{n}</code>: 匹配前一个字符n次。</li></ul><hr><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td><code>^</code></td><td>匹配字符串的开头</td></tr><tr><td><code>$</code></td><td>匹配字符串的末尾。</td></tr><tr><td><code>.</code></td><td>匹配任意字符，除了换行符</td></tr><tr><td><code>\s</code></td><td>匹配任意空白字符，等价于 [\t\n\r\f]。</td></tr><tr><td><code>\S</code></td><td>匹配任意非空字符</td></tr><tr><td><code>\d</code></td><td>匹配任意数字，等价于 [0-9]。</td></tr><tr><td><code>\D</code></td><td>匹配任意非数字</td></tr><tr><td><code>\w</code></td><td>匹配数字字母下划线</td></tr><tr><td><code>\W</code></td><td>匹配非数字字母下划线</td></tr><tr><td><code>\A</code></td><td>匹配字符串开始</td></tr><tr><td><code>\z</code></td><td>匹配字符串结束</td></tr><tr><td><code>\b</code></td><td>匹配一个单词边界。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr></tbody></table><p>正则匹配修饰符<code>re.S</code>使 <code>.</code> 匹配包括换行在内的所有字符</p><h2 id="python实践"><a href="#python实践" class="headerlink" title="python实践"></a><em>python实践</em></h2><pre class="line-numbers language-python"><code class="language-python">re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"d(ds)*"</span><span class="token punctuation">,</span><span class="token string">"askldjasaddsa"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#-->['', 'ds']</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"d[ds]*"</span><span class="token punctuation">,</span><span class="token string">"askldjasaddsa"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#-->['d', 'dds']</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"d{ds}*"</span><span class="token punctuation">,</span><span class="token string">"askldjasaddsa"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#-->[]</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"d{ds}"</span><span class="token punctuation">,</span><span class="token string">"askldjasad{ds}a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#-->['d{ds}']</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"ds?"</span><span class="token punctuation">,</span><span class="token string">"askldjasad{dsssssss}a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#-->['d', 'd', 'ds']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非贪婪模式与贪婪模式：</p><pre class="line-numbers language-python"><code class="language-python">re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"/(\S*?)/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"//asd/sdsa/asda"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#-->['', 'sdsa']</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"/(\S*)/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"//asd/sdsa/asda"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->['/asd/sdsa']</span><span class="token comment" spellcheck="true">#'*', '+'，和 '?' 修饰符都是贪婪的；它们在字符串进行尽可能多的匹配。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正则实践"><a href="#正则实践" class="headerlink" title="正则实践"></a><em>正则实践</em></h2><hr><p><code>(\w)(\w)\2\1</code> 可以匹配ABBA型数据（回溯引用）</p><hr><p><code>http.*/$</code> 匹配以http开头,以/结尾的数据</p><hr><p><code>^\d{n}$</code>  匹配n位的数字</p><hr><p><code>^(?!(xx+)\1+$)x*</code> 匹配质数个x,不懂</p><hr><p>从<code>2002-1-2</code> <code>2020-01-02</code> <code>2020.01.02</code> <code>2020 01 02</code> <code>20200102</code> <code>2020/01/02</code>提取年月日的数据<br><code>(\d{4})[\-/\s]?(\d{1,2})[\-/\s]?{\d{1,2}}</code></p><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><em>小结</em></h2><p>ennn，入门应该够了，漏掉了<code>先行断言</code>,<code>(?.....)</code>等等<br>正则表达式太强了，还能密码强度认证</p><blockquote><ul><li>正则表达式在线测试：<br><a href="http://c.runoob.com/front-end/854" target="_blank" rel="noopener">http://c.runoob.com/front-end/854</a></li><li><strong>推荐的正则课程</strong>：<br><a href="https://codejiaonang.com/#/courses" target="_blank" rel="noopener">https://codejiaonang.com/#/courses</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sys模块</title>
      <link href="posts/5098.html"/>
      <url>posts/5098.html</url>
      
        <content type="html"><![CDATA[<p>该模块提供了一些变量和函数。这些变量可能被解释器使用，也可能由解释器提供。这些函数会影响解释器。本模块总是可用的。</p><h2 id="sys-path"><a href="#sys-path" class="headerlink" title="sys.path"></a><em>sys.path</em></h2><p>一个由字符串组成的列表，用于指定模块的搜索路径。<br>程序启动时将初始化该列表，列表的第一项 path[0] 目录含有调用 Python 解释器的脚本。如果脚本目录不可用（比如以交互方式调用了解释器，或脚本是从标准输入中读取的），则 path[0] 为空字符串，这将导致 Python 优先搜索当前目录中的模块</p><h2 id="sys-argv"><a href="#sys-argv" class="headerlink" title="sys.argv"></a><em>sys.argv</em></h2><p>一个列表，其中包含了被传递给 Python 脚本的命令行参数。 argv[0] 为脚本的名称（是否是完整的路径名取决于操作系统）。如果是通过 Python 解释器的命令行参数 -c 来执行的， argv[0] 会被设置成字符串 ‘-c’ 。如果没有脚本名被传递给 Python 解释器， argv[0] 为空字符串。</p><h2 id="sys-setrecursionlimit-limit"><a href="#sys-setrecursionlimit-limit" class="headerlink" title="sys.setrecursionlimit(limit)"></a><em>sys.setrecursionlimit(limit)</em></h2><p>Set the maximum depth of the Python interpreter stack to limit. This limit prevents infinite recursion from causing an overflow of the C stack and crashing Python.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020七月下</title>
      <link href="posts/412e.html"/>
      <url>posts/412e.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><hr><p>终于有些解脱了，等着科目二考试。。。<br>在这段时间里，我得去做些有意义的事，<br>所以写下这篇文章，每天更新一次，用来记录七月下这段时间以及自己的一些感受。</p><h1 id="1-开始吧"><a href="#1-开始吧" class="headerlink" title="1.开始吧"></a>1.开始吧</h1><hr><p><strong>DO</strong></p><ol><li>试试别踩白块物理外挂</li><li>试试OPENCV做OW脚本</li></ol><p><strong>DONE</strong></p><ol><li>···</li><li>···</li></ol><h2 id="7-14晚"><a href="#7-14晚" class="headerlink" title="7.14晚"></a><code>7.14晚</code></h2><p>观看<a href="https://space.bilibili.com/20259914?from=search&seid=5994959373714429448" target="_blank" rel="noopener">B站稚晖君的视频</a><br>看<a href="http://www.woshicver.com/FirstSection/0_OpenCV-Python%20Tutorials/" target="_blank" rel="noopener">opencv教程</a><br>更改本站样式</p><blockquote><p>电位器：是具有三个引出端、阻值可按某种变化规律调节的电阻元件</p><ol><li>用作分压器</li><li>用作变阻器</li><li>用作电流控制器</li></ol></blockquote><h2 id="7-15早"><a href="#7-15早" class="headerlink" title="7.15早"></a><code>7.15早</code></h2><p>上课<a href="https://www.icourse163.org/course/XJTU-1001647001" target="_blank" rel="noopener">微机原理与接口技术</a><br>学用<a href="https://www.xmind.cn/" target="_blank" rel="noopener">Xmind</a></p><blockquote><p>硬件系统</p><ul><li>外部设备：通过输入输出接口与计算机进行信息交互的电子设备</li><li>主机系统：CPU、存储器、输入输出接口、总线</li></ul></blockquote><blockquote><p>读取一条指令的流程：</p><ol><li>将指令所在地址<strong>赋给程序计数器PC</strong></li><li>PC内容送给地址寄存器AR，PC自动+1</li><li>AR内容通过地址总线送给内存储器，经<strong>地址译码器译码</strong>，选中相应单元</li><li>CPU的控制器发出读命令</li><li>把所选中单元的内容(即指令操作码)经数据总线送到数据寄存器DR</li><li>(<strong>指令译码</strong>)DR内容送到指令寄存器IR，再送到指令译码器ID</li></ol></blockquote><blockquote><p>（第三代微处理器）<br>&emsp;&emsp;&emsp;<strong>8088与8086</strong>：对外通道分别为8位、16位，内部都为16位</p></blockquote><blockquote><p><strong>8088/8086CPU特点</strong></p><ul><li>采用并行流水线【通过设置指令预取队列实现】</li><li>对内存空间实行分段管理【实模式存储器寻址】</li><li>支持协处理器</li></ul></blockquote><h2 id="7-17早"><a href="#7-17早" class="headerlink" title="7.17早"></a><code>7.17早</code></h2><p>上课<a href="https://www.icourse163.org/course/XJTU-1001647001" target="_blank" rel="noopener">微机原理与接口技术</a></p><blockquote><p>实模型下的存储器寻址</p><ul><li>内存物理地址=<strong>段基地址</strong>x16+<strong>偏移地址</strong></li><li>段首的偏移地址：0000H</li></ul></blockquote><blockquote><p><strong>段寄存器</strong> （Segment Register）（8088为4个）</p><ul><li>作用：用于存放相应逻辑段(便于分时复用吧)的段基地址</li><li>分类：代码段CS，数据段DS，附加段ES，堆栈段SS</li><li>每类逻辑段的数量最多为64k</li></ul></blockquote><blockquote><p>小结</p><ul><li>对1MB内存空间的访问需要20位物理地址，而8088内部的16位编码通过内存地址变换变成20位</li><li>内存的分段是逻辑分段，不是物理段。每个内存单元的物理地址唯一，逻辑地址不唯一</li><li>EU 是 8086/8088 微处理器的执行部件(Execution Unit)</li><li>BIU 是 8086/8088 微处理器的总线接口部件(Bus Interface Unit)</li></ul></blockquote><p><img src="http://www.elecfans.com/uploads/allimg/110712/182555-110G2160I5496.jpg"></p><blockquote><p><strong>【指令系统】</strong></p><ul><li>指令格式： <strong>操作码</strong> &emsp;<strong>[操作数]</strong> ，**[操作数]**</li><li>三种操作数：立即数，寄存器操作数，存储器操作数(带[ ])</li></ul></blockquote><blockquote><p>操作数的寻址方式</p><ul><li>立即寻址</li><li>寄存器直接寻址</li><li>寄存器间接寻址，通过间址寄存器【BX，BP，SI，DI】(带[ ])</li><li>寄存器相对寻址</li></ul></blockquote><blockquote><p>一般指令对操作数的要求：</p><ul><li>两操作数字长必须相同</li><li>两操作数不允许同时为存储器操作数（在内存中）</li><li>两操作数不允许同时为段寄存器</li><li>源操作数是立即数时，目标操作数不能是段寄存器</li><li>IP和CS不作为目标操作数，FLAGS一般不作为操作数</li></ul></blockquote><p>一个汇编题目：将（*）的ASCII码2AH送入内存数据段1000H开始的100个单元中<br>代码如下：</p><pre><code>       MOV DI, 1000H    ；间址寄存器DI,赋给首地址       MOV CX, 64H      ；通用寄存器CX,计算count       MOV AL, 2AH      ; 通用寄存器AL,存入符号AGAIN: MOV [DI], AL       INC DI           ；DI+1       DEC CX           ；CX-1       JNZ AGAIN        ; CX！=0继续       HLT</code></pre><p><img src="http://www.elecfans.com/uploads/allimg/110712/182555-110G2160P12B.jpg"></p><h2 id="7-19早"><a href="#7-19早" class="headerlink" title="7.19早"></a><code>7.19早</code></h2><p>上课<a href="https://www.icourse163.org/course/XJTU-1001647001" target="_blank" rel="noopener">微机原理与接口技术</a><br>做题<a href="https://leetcode-cn.com/contest/weekly-contest-198" target="_blank" rel="noopener">leetcode周赛198</a></p><blockquote><p>通用指令系统</p><ul><li><code>MOV dest, src</code></li><li><code>XCHG REG, MEM/REG</code></li><li><code>LEA REG, MEM</code></li><li><code>IN acc, PORT</code></li><li><code>OUT PORT, acc</code></li></ul></blockquote><blockquote><p>漏了指令系统这部分没学，漏了运算操作、串操作，程序控制类【CS,IP会改变执行方向】，感觉这门课远离了我想要的实践。<br>课程最后还是有些东西，芯片组合，汇编实现程序，一些芯片的引脚······<br>三态门，模电，数电，8253，D/A，A/D都是问题。。。</p></blockquote><h2 id="7-19晚"><a href="#7-19晚" class="headerlink" title="7.19晚"></a><code>7.19晚</code></h2><p>读书《人类群星闪耀时》</p><blockquote><p>豆瓣评论区都是大佬</p></blockquote><h2 id="7-20早"><a href="#7-20早" class="headerlink" title="7.20早"></a><code>7.20早</code></h2><p>再刷<a href="https://www.bilibili.com/video/BV19W411q7Fq?from=search&seid=12394289545937645210" target="_blank" rel="noopener">Elon Musk演讲</a><br>People are mistaken when they think that technology just automatically improves. It does not automatically improve. It only improves if a lot of people work very hard to make it better, and actually I think it will degrade by itself. You look at great civilizations like Ancient Egypt, and they were able to make the pyramids, and they forgot how to do that.And the Romans, they built these incredible aqueducts. They forgot how to do it.</p><h2 id="7-21早"><a href="#7-21早" class="headerlink" title="7.21早"></a><code>7.21早</code></h2><p>学学c，pta<br>发现一个<a href="https://github.com/ix64/unlock-music" target="_blank" rel="noopener">音乐格式转换项目</a>，它的<a href="https://moresound.tk/music/tool/" target="_blank" rel="noopener">在线网页</a></p><blockquote><p>c中，大小写没看清，编辑器还不给提示，是真的……<br>emmm,漏掉&amp;也是坑。。</p></blockquote><h2 id="7-30晚"><a href="#7-30晚" class="headerlink" title="7.30晚"></a><code>7.30晚</code></h2><p>&emsp;一生是漫长又瑰奇的瞬息；<br>&emsp;&emsp;&emsp;&emsp;何谓枯荣又何谓云泥；<br>&emsp;像孤舟巡游，不为逝水追惜；<br>&emsp;&emsp;&emsp;&emsp;在初逢灯火，在别时钟磬；<br>&emsp;自在随心~<br>&emsp;&emsp;&emsp;&emsp; &emsp;&emsp;&emsp;     &emsp;&emsp;             ——–摘自歌曲《琉璃》</p><blockquote><p>ennnn,完结啦💖</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200730223606549.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/2020073021573846.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center"></p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双周赛34</title>
      <link href="posts/98e0.html"/>
      <url>posts/98e0.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/problems/matrix-diagonal-sum/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/matrix-diagonal-sum/</a><br>第二题：<a href="https://leetcode-cn.com/problems/number-of-ways-to-split-a-string/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-ways-to-split-a-string/</a><br>第三题：<a href="https://leetcode-cn.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/</a><br>第四题：<a href="https://leetcode-cn.com/problems/count-all-possible-routes/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-all-possible-routes/</a></p></blockquote><h3 id="1-矩阵对角线元素的和"><a href="#1-矩阵对角线元素的和" class="headerlink" title="(1)矩阵对角线元素的和"></a>(1)矩阵对角线元素的和</h3><p>给你一个正方形矩阵 <code>mat</code>，请你返回矩阵对角线元素的和。</p><p>输入：<code>mat = [[1,2,3],[4,5,6],[7,8,9]]</code><br>输出：<code>25</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">diagonalSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mat<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        l<span class="token operator">=</span>len<span class="token punctuation">(</span>mat<span class="token punctuation">)</span>        prim<span class="token operator">=</span>sum<span class="token punctuation">(</span><span class="token punctuation">[</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        seco<span class="token operator">=</span>sum<span class="token punctuation">(</span><span class="token punctuation">[</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> l<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> prim<span class="token operator">+</span>seco        <span class="token keyword">else</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> prim<span class="token operator">+</span>seco<span class="token operator">-</span>mat<span class="token punctuation">[</span>l<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-分割字符串的方案数"><a href="#2-分割字符串的方案数" class="headerlink" title="(2)分割字符串的方案数"></a>(2)分割字符串的方案数</h3><p>给你一个二进制串 <code>s</code>  （一个只包含 0 和 1 的字符串），我们可以将 <code>s</code> 分割成 3 个 非空 字符串 s1, s2, s3 （s1 + s2 + s3 = s）。</p><p>请你返回分割 <code>s</code> 的方案数，满足 s1，s2 和 s3 中字符 ‘1’ 的数目相同。</p><p>由于答案可能很大，请将它对 <code>10^9 + 7</code> 取余后返回。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numWays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>             mod<span class="token operator">=</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span>        len_s<span class="token operator">=</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        helper<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len_s<span class="token punctuation">)</span><span class="token punctuation">:</span>            helper<span class="token punctuation">.</span>append<span class="token punctuation">(</span>helper<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cnt<span class="token operator">=</span>helper<span class="token punctuation">[</span>len_s<span class="token punctuation">]</span>        <span class="token keyword">if</span> cnt<span class="token operator">%</span><span class="token number">3</span> <span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> <span class="token operator">not</span> cnt<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>len_s<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>len_s<span class="token number">-2</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token operator">%</span>mod        <span class="token keyword">return</span> helper<span class="token punctuation">.</span>count<span class="token punctuation">(</span>cnt<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span>helper<span class="token punctuation">.</span>count<span class="token punctuation">(</span>cnt<span class="token operator">//</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token comment" spellcheck="true"># helper就很灵性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-删除最短的子数组使剩余数组有序"><a href="#3-删除最短的子数组使剩余数组有序" class="headerlink" title="(3)删除最短的子数组使剩余数组有序"></a>(3)删除最短的子数组使剩余数组有序</h3><p>给你一个整数数组 <code>arr</code> ，请你删除一个子数组（可以为空），使得 <code>arr</code> 中剩下的元素是 非递减 的。</p><p>一个子数组指的是原数组中连续的一个子序列。</p><p>请你返回满足题目要求的最短子数组的长度。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findLengthOfShortestSubarray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        len_arr<span class="token operator">=</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># k 用于计算非递减的个数</span>        k<span class="token operator">=</span>len_arr<span class="token number">-1</span>        <span class="token keyword">while</span> k<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> arr<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span> k<span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">if</span> k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        r<span class="token operator">=</span>k        j<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">while</span> j<span class="token operator">&lt;</span>len_arr<span class="token number">-1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># j 从0到倒数第二个元素</span>            ci<span class="token operator">=</span>bisect_left<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            t<span class="token operator">=</span>len_arr<span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len_arr<span class="token operator">-</span>k<span class="token operator">-</span>ci<span class="token punctuation">)</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> r<span class="token operator">></span>t<span class="token punctuation">:</span> r<span class="token operator">=</span>t            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">break</span>            j<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> r<span class="token comment" spellcheck="true"># 不懂</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-统计所有可行路径"><a href="#4-统计所有可行路径" class="headerlink" title="(4)统计所有可行路径"></a>(4)统计所有可行路径</h3><p>给你一个 <strong>互不相同</strong> 的整数数组，其中 <code>locations[i]</code> 表示第 <code>i</code> 个城市的位置。同时给你 <code>start</code>，<code>finish</code> 和 <code>fuel</code> 分别表示出发城市、目的地城市和你初始拥有的汽油总量</p><p>每一步中，如果你在城市 <code>i</code> ，你可以选择任意一个城市 <code>j</code> ，满足  <code>j != i</code> 且 <code>0 &lt;= j &lt; locations.length</code> ，并移动到城市 <code>j</code> 。从城市 <code>i</code> 移动到 <code>j</code> 消耗的汽油量为 <code>|locations[i] - locations[j]|</code>，<code>|x|</code> 表示 <code>x</code> 的绝对值。</p><p>请注意， <code>fuel</code> 任何时刻都 <strong>不能</strong> 为负，且你 <strong>可以</strong> 经过任意城市超过一次（包括 start 和 finish ）。</p><p>请你返回从 <code>start</code> 到 <code>finish</code> 所有可能路径的数目。</p><p>由于答案可能很大， 请将它对 <code>10^9 + 7</code> 取余后返回。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countRoutes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token punctuation">:</span> int<span class="token punctuation">,</span> finish<span class="token punctuation">:</span> int<span class="token punctuation">,</span> fuel<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        dp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>locations<span class="token punctuation">)</span>        mod <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">7</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> c<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">and</span> s<span class="token operator">==</span>finish<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span>            k <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">,</span> s<span class="token punctuation">)</span>            <span class="token keyword">if</span> k <span class="token keyword">in</span> dp<span class="token punctuation">:</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span>            <span class="token keyword">if</span> s<span class="token operator">==</span>finish<span class="token punctuation">:</span>                r<span class="token operator">=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                r<span class="token operator">=</span><span class="token number">0</span>            i <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">!=</span>s<span class="token punctuation">:</span>                    d <span class="token operator">=</span> locations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>locations<span class="token punctuation">[</span>s<span class="token punctuation">]</span>                    <span class="token keyword">if</span> d<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span> d<span class="token operator">=</span><span class="token operator">-</span>d                    <span class="token keyword">if</span> c<span class="token operator">>=</span>d<span class="token punctuation">:</span>                        r <span class="token operator">+=</span> dfs<span class="token punctuation">(</span>c<span class="token operator">-</span>d<span class="token punctuation">,</span> i<span class="token punctuation">)</span>                        r <span class="token operator">%=</span> mod                i<span class="token operator">+=</span><span class="token number">1</span>            dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> r            <span class="token keyword">return</span> r        <span class="token keyword">return</span> dfs<span class="token punctuation">(</span>fuel<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#不懂</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微观经济学</title>
      <link href="posts/bd56.html"/>
      <url>posts/bd56.html</url>
      
        <content type="html"><![CDATA[<ol><li>经济学：关于资源稀缺性的配置。</li><li>如何定义一个概念：通常用外延更宽的事物来定义。</li><li><strong>机会成本</strong>：为得到某种东西，而放弃的可能收益。</li><li><strong>沉没成本</strong>：指以往发生的，但与当前决策无关的费用。</li><li>禀赋效应：大多数人对于损失和获得的敏感程度不对称。<blockquote><p>假设你现在捡到了100元，你很开心；<br>走着走着，你刚捡到的100元，不知道什么时候掉了。<br>请问，这个时候你的心情？<br>大多数人的心情是痛苦的。<br>可实际上什么都没变。</p></blockquote></li></ol><p>这也适用于销售策略中：减少客户的损失厌恶。<br>6. 博弈论因素：参与者，规则，支付。<br>限制规则来改变博弈。<br>7. 纳什均衡：非合作博弈均衡。<br>如竞争者的商品定价均衡，囚徒困境。<br>8. 边际收益：增加一单位产品的销售所增加的收益，即最后一单位产品的售出所取得的收益。</p><blockquote><p>课程最后：<strong>考虑非货币机会成本，忽略沉没成本，对未来行为更加实际。</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mooc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记190</title>
      <link href="posts/contest190.html"/>
      <url>posts/contest190.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、检查单词是否为句中其他单词的前缀"><a href="#一、检查单词是否为句中其他单词的前缀" class="headerlink" title="一、检查单词是否为句中其他单词的前缀"></a>一、检查单词是否为句中其他单词的前缀</h2><p>给你一个字符串 <code>sentence</code> 作为句子并指定检索词为 <code>searchWord</code> ，其中句子由若干用 单个空格 分隔的单词组成。<br>请你检查检索词 <code>searchWord</code> 是否为句子 <code>sentence</code> 中任意单词的前缀。</p><ul><li>如果 <code>searchWord</code> 是某一个单词的前缀，则返回句子 <code>sentence</code> 中该单词所对应的下标（下标从 <code>1</code> 开始）。</li><li>如果 <code>searchWord</code> 是多个单词的前缀，则返回匹配的第一个单词的下标（最小下标）。</li><li>如果 <code>searchWord</code> 不是任何单词的前缀，则返回 <code>-1</code> 。<br>字符串 <code>S</code> 的 「前缀」是 <code>S</code> 的任何前导连续子字符串。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPrefixOfWord</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sentence<span class="token punctuation">:</span> str<span class="token punctuation">,</span> searchWord<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> s <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>searchWord<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、定长子串中元音的最大数目"><a href="#二、定长子串中元音的最大数目" class="headerlink" title="二、定长子串中元音的最大数目"></a>二、定长子串中元音的最大数目</h2><p>给你字符串 <code>s</code> 和整数 <code>k</code> 。<br>请返回字符串 <code>s</code> 中长度为 <code>k</code> 的单个子字符串中可能包含的最大元音字母数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxVowels</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        ans<span class="token punctuation">,</span>tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token string">'aeiou'</span><span class="token punctuation">:</span> tmp<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> i<span class="token operator">>=</span>k<span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token string">'aeiou'</span><span class="token punctuation">:</span> tmp<span class="token operator">-=</span><span class="token number">1</span>            ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结</strong></p><blockquote><p>不能多想。。好菜</p></blockquote><h2 id="三、二叉树中的伪回文路径"><a href="#三、二叉树中的伪回文路径" class="headerlink" title="三、二叉树中的伪回文路径"></a>三、二叉树中的伪回文路径</h2><p>给你一棵二叉树，每个节点的值为 1 到 9 。我们称二叉树中的一条路径是 「伪回文」的，当它满足：路径经过的所有节点值的排列中，存在一个回文序列。<br>请你返回从根到叶子节点的所有路径中 <strong>伪回文</strong> 路径的数目。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> pseudoPalindromicPaths <span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root <span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root <span class="token punctuation">:</span> <span class="token keyword">return</span>             helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>tmp<span class="token operator">+</span><span class="token punctuation">[</span>root<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span>            helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>tmp<span class="token operator">+</span><span class="token punctuation">[</span>root<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span>            tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">.</span>left <span class="token operator">and</span> <span class="token operator">not</span> root<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                cnt<span class="token operator">=</span><span class="token number">0</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> Counter<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">:</span> cnt<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">if</span> cnt<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>ans<span class="token operator">+=</span><span class="token number">1</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、两个子序列的最大点积"><a href="#四、两个子序列的最大点积" class="headerlink" title="四、两个子序列的最大点积"></a>四、两个子序列的最大点积</h2><p>给你两个数组 <code>nums1</code> 和 <code>nums2</code> 。<br>请你返回 <code>nums1</code> 和 <code>nums2</code> 中两个长度相同的 非空 子序列的最大点积。<br>数组的非空子序列是通过删除原数组中某些元素（可能一个也不删除）后剩余数字组成的序列，但不能改变数字间相对顺序。比方说，<code>[2,3,5]</code> 是 <code>[1,2,3,4,5]</code> 的一个子序列而 <code>[1,5,3]</code> 不是。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDotProduct</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        m<span class="token punctuation">,</span>n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums2<span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span>float<span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>nums1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums2<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结</strong></p><blockquote><p>DP题看的时候一点思路没有。。。被菜昏了</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调用API</title>
      <link href="posts/ec3f.html"/>
      <url>posts/ec3f.html</url>
      
        <content type="html"><![CDATA[<p>代码包含</p><ul><li>use-api.py </li><li>post.py</li><li>get-token.py</li></ul><h3 id="use-api-py"><a href="#use-api-py" class="headerlink" title="use-api.py"></a>use-api.py</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> postname <span class="token operator">=</span> <span class="token string">" "</span> password <span class="token operator">=</span> <span class="token string">" "</span>api_url <span class="token operator">=</span> <span class="token string">" "</span> <span class="token comment" spellcheck="true"># api地址</span>image_path <span class="token operator">=</span> r<span class="token string">"timg.jpg"</span>  <span class="token comment" spellcheck="true"># 图像文件完整路径</span><span class="token comment" spellcheck="true"># 发送请求</span>r <span class="token operator">=</span> post<span class="token punctuation">.</span>main<span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> api_url<span class="token punctuation">,</span> image_path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="post-py"><a href="#post-py" class="headerlink" title="post.py"></a>post.py</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> os<span class="token keyword">import</span> get_token<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> api_url<span class="token punctuation">,</span> image_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    image_name <span class="token operator">=</span> image_path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 查看本地是否存在token</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"token.txt"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"token.txt"</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            token <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 调用get_token.py中的函数获取token</span>        token <span class="token operator">=</span> get_token<span class="token punctuation">.</span>main<span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 缓存token以便下次使用</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"token.txt"</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>token<span class="token punctuation">)</span>    <span class="token keyword">if</span> token <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"token获取错误"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        header <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"X-Auth-Token"</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span>                <span class="token punctuation">}</span>        files <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"images"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>image_name<span class="token punctuation">,</span> open<span class="token punctuation">(</span>image_path<span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'image/png'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>        z <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>                    api_url<span class="token punctuation">,</span>                    headers <span class="token operator">=</span> header<span class="token punctuation">,</span>                    files<span class="token operator">=</span>files<span class="token punctuation">,</span>                    verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                    <span class="token punctuation">)</span>        <span class="token keyword">if</span> z<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> z<span class="token punctuation">.</span>text        <span class="token keyword">elif</span> len<span class="token punctuation">(</span>z<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> z<span class="token punctuation">.</span>text        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"程序错误"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">" "</span>         <span class="token comment" spellcheck="true"># 用户名</span>    password <span class="token operator">=</span> <span class="token string">" "</span> <span class="token comment" spellcheck="true"># 密码</span>    api_url <span class="token operator">=</span> <span class="token string">" "</span> <span class="token comment" spellcheck="true"># api地址</span>    image_path <span class="token operator">=</span> r<span class="token string">"test.jpg"</span>  <span class="token comment" spellcheck="true"># 图像文件完整路径</span>    r <span class="token operator">=</span> main<span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> api_url<span class="token punctuation">,</span> image_path<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="get-token-py"><a href="#get-token-py" class="headerlink" title="get-token.py"></a>get-token.py</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> domain_name<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> region<span class="token operator">=</span><span class="token string">"cn-north-4"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> domain_name <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>        domain_name <span class="token operator">=</span> name    urls <span class="token operator">=</span> <span class="token string">"https://iam."</span> <span class="token operator">+</span> region <span class="token operator">+</span> <span class="token string">".myhuaweicloud.com/v3/auth/tokens"</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"PostmanRuntime/7.24.1"</span><span class="token punctuation">,</span>        <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json;charset=utf8"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    json_data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"auth"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"identity"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"methods"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"user"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                        <span class="token string">"name"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>                        <span class="token string">"password"</span><span class="token punctuation">:</span> password<span class="token punctuation">,</span>                        <span class="token string">"domain"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                            <span class="token string">"name"</span><span class="token punctuation">:</span> domain_name<span class="token punctuation">,</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"scope"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"project"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"name"</span><span class="token punctuation">:</span> region                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    z <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>                    url <span class="token operator">=</span> urls<span class="token punctuation">,</span>                    headers <span class="token operator">=</span> header<span class="token punctuation">,</span>                    json <span class="token operator">=</span> json_data<span class="token punctuation">,</span>                    verify <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>                    <span class="token punctuation">)</span>    <span class="token keyword">if</span> z<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">201</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> z<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"X-Subject-Token"</span><span class="token punctuation">]</span>    <span class="token keyword">elif</span> z<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">401</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">''</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">' '</span>         <span class="token comment" spellcheck="true"># 用户名</span>    password <span class="token operator">=</span> <span class="token string">' '</span>     <span class="token comment" spellcheck="true"># 密码</span><span class="token comment" spellcheck="true">#    domain_name = ' '  # 可选，所属账号，默认为用户名</span><span class="token comment" spellcheck="true">#    region="cn-north-4"     # 可选，使用区域</span>    token <span class="token operator">=</span> main<span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">)</span>    <span class="token keyword">if</span> token <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><ol><li>将name,password,api_url更改，即可进行API的调用。</li><li>一段代码：<pre class="line-numbers language-python"><code class="language-python">z<span class="token operator">=</span>request<span class="token punctuation">.</span>post<span class="token punctuation">(</span>api_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span>files<span class="token operator">=</span>files<span class="token punctuation">,</span>verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">if</span> z<span class="token punctuation">.</span>status_code <span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">:</span>   <span class="token keyword">return</span> z<span class="token punctuation">.</span>text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>比较难理解的是那个get-token，查阅Modelarts文档的json格式。<br>再利用requests进行post</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> modelarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次深度学习</title>
      <link href="posts/ec3h.html"/>
      <url>posts/ec3h.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><h2 id="人工智能、机器学习、深度学习"><a href="#人工智能、机器学习、深度学习" class="headerlink" title="人工智能、机器学习、深度学习"></a>人工智能、机器学习、深度学习</h2><p><code>人工智能</code>是计算机科学的一个分支，它希望了解智能的实质，并生产出一种新的能以人类智能相似的方式做出反应的智能机器，该领域的研究包括机器人、语言识别、图像识别、自然语言处理和专家系统等。<br><code>机器学习</code>是一门多领域交叉学科，是人工智能的核心。<br><code>深度学习</code>是机器学习领域中一个新的研究方向，它被引入机器学习使其更接近于最初的目标——人工智能。<br><img src="https://img-blog.csdnimg.cn/202005061919299.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="机器学习模型"><a href="#机器学习模型" class="headerlink" title="机器学习模型"></a>机器学习模型</h2><p><code>机器学习模型</code>是机器学习算法产出的结果，可以将其看作是在给定输入情况下、输出一定结果的函数。<br>机器学习模型不是预先定义好的固定函数，而是从历史数据中推导出来的。<br>机器学习的任务，就是从广阔的映射空间中学习函数。</p><h1 id="1-torch环境准备"><a href="#1-torch环境准备" class="headerlink" title="1.torch环境准备"></a>1.torch环境准备</h1><ul><li>torch  (1.6.0)</li><li>torchvision  (0.7.0)</li><li>cuda  (10.2)<br><img src="https://img-blog.csdnimg.cn/20200429183137908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center"><br>输入指令执行代码,速度不行的话复制下载链接迅雷打开，可能有惊喜<img src="https://img-blog.csdnimg.cn/20200429183453171.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center"></li></ul><p><strong>对whl文件的安装</strong>，进入文件位置，pip install <strong>____</strong>.whl</p><p>环境配好后，执行:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torchtorch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时应该返回True.</p><h1 id="2-一次baseline代码"><a href="#2-一次baseline代码" class="headerlink" title="2.一次baseline代码"></a>2.一次baseline代码</h1><h2 id="加载pytorch框架下的依赖项"><a href="#加载pytorch框架下的依赖项" class="headerlink" title="加载pytorch框架下的依赖项"></a>加载pytorch框架下的依赖项</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token punctuation">,</span> division<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">import</span> lr_scheduler<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable<span class="token keyword">import</span> torchvision<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> datasets<span class="token punctuation">,</span> models<span class="token punctuation">,</span> transforms<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加载数据集，并分为训练集和测试集"><a href="#加载数据集，并分为训练集和测试集" class="headerlink" title="加载数据集，并分为训练集和测试集"></a>加载数据集，并分为训练集和测试集</h2><pre class="line-numbers language-python"><code class="language-python">dataTrans <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>            transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            transforms<span class="token punctuation">.</span>CenterCrop<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>data_dir <span class="token operator">=</span> <span class="token string">'./images'</span>all_image_datasets <span class="token operator">=</span> datasets<span class="token punctuation">.</span>ImageFolder<span class="token punctuation">(</span>data_dir<span class="token punctuation">,</span> dataTrans<span class="token punctuation">)</span>trainsize <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token number">0.8</span><span class="token operator">*</span>len<span class="token punctuation">(</span>all_image_datasets<span class="token punctuation">)</span><span class="token punctuation">)</span>testsize <span class="token operator">=</span> len<span class="token punctuation">(</span>all_image_datasets<span class="token punctuation">)</span> <span class="token operator">-</span> trainsizetrain_dataset<span class="token punctuation">,</span> test_dataset <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>random_split<span class="token punctuation">(</span>all_image_datasets<span class="token punctuation">,</span><span class="token punctuation">[</span>trainsize<span class="token punctuation">,</span>testsize<span class="token punctuation">]</span><span class="token punctuation">)</span>image_datasets <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'train'</span><span class="token punctuation">:</span>train_dataset<span class="token punctuation">,</span><span class="token string">'val'</span><span class="token punctuation">:</span>test_dataset<span class="token punctuation">}</span>dataloders <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>image_datasets<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>                                                 batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>                                                 shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                                 num_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'val'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>dataset_sizes <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> len<span class="token punctuation">(</span>image_datasets<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'val'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># use gpu or not</span>use_gpu <span class="token operator">=</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train_model</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> lossfunc<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> scheduler<span class="token punctuation">,</span> num_epochs<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    best_model_wts <span class="token operator">=</span> model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    best_acc <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch {}/{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> num_epochs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Each epoch has a training and validation phase</span>        <span class="token keyword">for</span> phase <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'val'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> phase <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">:</span>                scheduler<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Set model to training mode</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Set model to evaluate mode</span>            running_loss <span class="token operator">=</span> <span class="token number">0.0</span>            running_corrects <span class="token operator">=</span> <span class="token number">0.0</span>            <span class="token comment" spellcheck="true"># Iterate over data.</span>            <span class="token keyword">for</span> data <span class="token keyword">in</span> dataloders<span class="token punctuation">[</span>phase<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># get the inputs</span>                inputs<span class="token punctuation">,</span> labels <span class="token operator">=</span> data                <span class="token comment" spellcheck="true"># wrap them in Variable</span>                <span class="token keyword">if</span> use_gpu<span class="token punctuation">:</span>                    inputs <span class="token operator">=</span> Variable<span class="token punctuation">(</span>inputs<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    labels <span class="token operator">=</span> Variable<span class="token punctuation">(</span>labels<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    inputs<span class="token punctuation">,</span> labels <span class="token operator">=</span> Variable<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">,</span> Variable<span class="token punctuation">(</span>labels<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># zero the parameter gradients</span>                optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># forward</span>                outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>                _<span class="token punctuation">,</span> preds <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                loss <span class="token operator">=</span> lossfunc<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># backward + optimize only if in training phase</span>                <span class="token keyword">if</span> phase <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">:</span>                    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>                    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># statistics</span>                running_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>data                running_corrects <span class="token operator">+=</span> torch<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>preds <span class="token operator">==</span> labels<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>            epoch_loss <span class="token operator">=</span> running_loss <span class="token operator">/</span> dataset_sizes<span class="token punctuation">[</span>phase<span class="token punctuation">]</span>            epoch_acc <span class="token operator">=</span> running_corrects <span class="token operator">/</span> dataset_sizes<span class="token punctuation">[</span>phase<span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{} Loss: {:.4f} Acc: {:.4f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>                phase<span class="token punctuation">,</span> epoch_loss<span class="token punctuation">,</span> epoch_acc<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># deep copy the model</span>            <span class="token keyword">if</span> phase <span class="token operator">==</span> <span class="token string">'val'</span> <span class="token operator">and</span> epoch_acc <span class="token operator">></span> best_acc<span class="token punctuation">:</span>                best_acc <span class="token operator">=</span> epoch_acc                best_model_wts <span class="token operator">=</span> model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    elapsed_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Training complete in {:.0f}m {:.0f}s'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>        elapsed_time <span class="token operator">//</span> <span class="token number">60</span><span class="token punctuation">,</span> elapsed_time <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Best val Acc: {:4f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>best_acc<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># load best model weights</span>    model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>best_model_wts<span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span class="token comment" spellcheck="true"># get model and replace the original fc layer with your fc layer</span>model_ft <span class="token operator">=</span> models<span class="token punctuation">.</span>resnet50<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>num_ftrs <span class="token operator">=</span> model_ft<span class="token punctuation">.</span>fc<span class="token punctuation">.</span>in_featuresmodel_ft<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_ftrs<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">if</span> use_gpu<span class="token punctuation">:</span>    model_ft <span class="token operator">=</span> model_ft<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># define loss function</span>lossfunc <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setting optimizer and trainable parameters</span> <span class="token comment" spellcheck="true">#   params = model_ft.parameters()</span> <span class="token comment" spellcheck="true"># list(model_ft.fc.parameters())+list(model_ft.layer4.parameters())</span><span class="token comment" spellcheck="true">#params = list(model_ft.fc.parameters())+list( model_ft.parameters())</span>params <span class="token operator">=</span> list<span class="token punctuation">(</span>model_ft<span class="token punctuation">.</span>fc<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>optimizer_ft <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>params<span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Decay LR by a factor of 0.1 every 7 epochs</span>exp_lr_scheduler <span class="token operator">=</span> lr_scheduler<span class="token punctuation">.</span>StepLR<span class="token punctuation">(</span>optimizer_ft<span class="token punctuation">,</span> step_size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>model_ft <span class="token operator">=</span> train_model<span class="token punctuation">(</span>model<span class="token operator">=</span>model_ft<span class="token punctuation">,</span>                           lossfunc<span class="token operator">=</span>lossfunc<span class="token punctuation">,</span>                           optimizer<span class="token operator">=</span>optimizer_ft<span class="token punctuation">,</span>                           scheduler<span class="token operator">=</span>exp_lr_scheduler<span class="token punctuation">,</span>                           num_epochs<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是训练过程产生的输出：</p><pre class="line-numbers language-python"><code class="language-python">Epoch <span class="token number">0</span><span class="token operator">/</span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>C<span class="token punctuation">:</span>\Users\<span class="token number">16413</span>\anaconda3\lib\site<span class="token operator">-</span>packages\torch\optim\lr_scheduler<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">123</span><span class="token punctuation">:</span> UserWarning<span class="token punctuation">:</span> Detected call of `lr_scheduler<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>` before `optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>`<span class="token punctuation">.</span> In PyTorch <span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">0</span> <span class="token operator">and</span> later<span class="token punctuation">,</span> you should call them <span class="token keyword">in</span> the opposite order<span class="token punctuation">:</span> `optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>` before `lr_scheduler<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>`<span class="token punctuation">.</span>  Failure to do this will result <span class="token keyword">in</span> PyTorch skipping the first value of the learning rate schedule<span class="token punctuation">.</span> See more details at https<span class="token punctuation">:</span><span class="token operator">//</span>pytorch<span class="token punctuation">.</span>org<span class="token operator">/</span>docs<span class="token operator">/</span>stable<span class="token operator">/</span>optim<span class="token punctuation">.</span>html<span class="token comment" spellcheck="true">#how-to-adjust-learning-rate</span>    <span class="token string">"https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate"</span><span class="token punctuation">,</span> UserWarning<span class="token punctuation">)</span>train Loss<span class="token punctuation">:</span> <span class="token number">0.0750</span> Acc<span class="token punctuation">:</span> <span class="token number">0.6700</span>val Loss<span class="token punctuation">:</span> <span class="token number">0.0436</span> Acc<span class="token punctuation">:</span> <span class="token number">0.8200</span>Epoch <span class="token number">1</span><span class="token operator">/</span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>train Loss<span class="token punctuation">:</span> <span class="token number">0.0399</span> Acc<span class="token punctuation">:</span> <span class="token number">0.8250</span>val Loss<span class="token punctuation">:</span> <span class="token number">0.0345</span> Acc<span class="token punctuation">:</span> <span class="token number">0.8470</span>Epoch <span class="token number">2</span><span class="token operator">/</span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>train Loss<span class="token punctuation">:</span> <span class="token number">0.0330</span> Acc<span class="token punctuation">:</span> <span class="token number">0.8473</span>val Loss<span class="token punctuation">:</span> <span class="token number">0.0303</span> Acc<span class="token punctuation">:</span> <span class="token number">0.8610</span>Epoch <span class="token number">3</span><span class="token operator">/</span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>train Loss<span class="token punctuation">:</span> <span class="token number">0.0300</span> Acc<span class="token punctuation">:</span> <span class="token number">0.8575</span>val Loss<span class="token punctuation">:</span> <span class="token number">0.0293</span> Acc<span class="token punctuation">:</span> <span class="token number">0.8650</span>Epoch <span class="token number">4</span><span class="token operator">/</span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>train Loss<span class="token punctuation">:</span> <span class="token number">0.0288</span> Acc<span class="token punctuation">:</span> <span class="token number">0.8643</span>val Loss<span class="token punctuation">:</span> <span class="token number">0.0281</span> Acc<span class="token punctuation">:</span> <span class="token number">0.8750</span>Training complete <span class="token keyword">in</span> 6m 31sBest val Acc<span class="token punctuation">:</span> <span class="token number">0.875000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存模型，任务完成：</p><pre class="line-numbers language-python"><code class="language-python">torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model_ft<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'./model.pth'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> modelarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记189</title>
      <link href="posts/contest189.html"/>
      <url>posts/contest189.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、在既定时间做作业的学生人数"><a href="#一、在既定时间做作业的学生人数" class="headerlink" title="一、在既定时间做作业的学生人数"></a>一、在既定时间做作业的学生人数</h2><p>给你两个整数数组 <code>startTime</code>（开始时间）和 <code>endTime</code>（结束时间），并指定一个整数 <code>queryTime</code> 作为查询时间。<br>已知，第 <code>i</code> 名学生在 <code>startTime[i]</code> 时开始写作业并于 <code>endTime[i]</code> 时完成作业。<br>请返回在查询时间 <code>queryTime</code> 时正在做作业的学生人数。形式上，返回能够使 <code>queryTime</code> 处于区间 <code>[startTime[i], endTime[i]]</code>（含）的学生人数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">busyStudent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> startTime<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> endTime<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> queryTime<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">return</span> sum<span class="token punctuation">(</span>startTime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> queryTime <span class="token operator">&lt;=</span> endTime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="二、重新排列句子中的单词"><a href="#二、重新排列句子中的单词" class="headerlink" title="二、重新排列句子中的单词"></a>二、重新排列句子中的单词</h2><p>「句子」是一个用空格分隔单词的字符串。给你一个满足下述格式的句子 <code>text</code> :</p><ul><li>句子的首字母大写</li><li><code>text</code> 中的每个单词都用单个空格分隔。</li></ul><p>请你重新排列 <code>text</code> 中的单词，使所有单词按其长度的升序排列。如果两个单词的长度相同，则保留其在原句子中的相对顺序。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">arrangeWords</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        li<span class="token operator">=</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>        li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>        li<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>len<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结</strong></p><blockquote><ol><li><code>str.capitalize()</code></li><li><code>.sort(key=len)</code></li></ol></blockquote><h2 id="三、收藏清单"><a href="#三、收藏清单" class="headerlink" title="三、收藏清单"></a>三、收藏清单</h2><p>给你一个数组 <code>favoriteCompanies</code> ，其中 <code>favoriteCompanies[i]</code> 是第 <code>i</code> 名用户收藏的公司清单（下标从 0 开始）。<br>请找出不是其他任何人收藏的公司清单的子集的收藏清单，并返回该清单下标。下标需要按升序排列。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">peopleIndexes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> favoriteCompanies<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span>_ <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>favoriteCompanies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>favoriteCompanies<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>favoriteCompanies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                a<span class="token punctuation">,</span>b<span class="token operator">=</span>set<span class="token punctuation">(</span>favoriteCompanies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>set<span class="token punctuation">(</span>favoriteCompanies<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> a<span class="token operator">==</span>b <span class="token operator">and</span> i <span class="token keyword">in</span> ans<span class="token punctuation">:</span>                    ans<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token keyword">elif</span> a<span class="token punctuation">.</span>issubset<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">and</span> i <span class="token keyword">in</span> ans<span class="token punctuation">:</span>                     ans<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token keyword">elif</span> b<span class="token punctuation">.</span>issubset<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">and</span> j <span class="token keyword">in</span> ans<span class="token punctuation">:</span>                     ans<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>j<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结</strong></p><blockquote><ol><li><code>a.issubset(b)</code>，判断a是否是b子集</li><li><code>.remove(i)</code>，若<code>i</code>不存在会报错</li></ol></blockquote><h2 id="四、圆形靶内的最大飞镖数量"><a href="#四、圆形靶内的最大飞镖数量" class="headerlink" title="四、圆形靶内的最大飞镖数量"></a>四、圆形靶内的最大飞镖数量</h2><p>墙壁上挂着一个圆形的飞镖靶。现在请你蒙着眼睛向靶上投掷飞镖。<br>投掷到墙上的飞镖用二维平面上的点坐标数组表示。飞镖靶的半径为 <code>r</code> 。<br>请返回能够落在 <strong>任意</strong> 半径为 <code>r</code> 的圆形靶内或靶上的最大飞镖数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numPoints</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> points<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        func<span class="token operator">=</span><span class="token keyword">lambda</span> o<span class="token punctuation">:</span>sum<span class="token punctuation">(</span>dist<span class="token punctuation">(</span>p<span class="token punctuation">,</span>o<span class="token punctuation">)</span><span class="token operator">&lt;=</span>r <span class="token keyword">for</span> p <span class="token keyword">in</span> points<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#检查包含</span>        ans<span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">for</span> p1 <span class="token keyword">in</span> points<span class="token punctuation">:</span>            <span class="token keyword">for</span> p2 <span class="token keyword">in</span> points<span class="token punctuation">:</span>                           <span class="token comment" spellcheck="true">#枚举</span>                <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;</span>dist<span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>r<span class="token punctuation">:</span>                  <span class="token comment" spellcheck="true">#走数学流程</span>                    mid <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>p2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>p2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span>                    d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>p2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>p2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span>                    k <span class="token operator">=</span> sqrt<span class="token punctuation">(</span>r<span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span>hypot<span class="token punctuation">(</span><span class="token operator">*</span>d<span class="token punctuation">)</span>                    o <span class="token operator">=</span> <span class="token punctuation">[</span>mid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>k<span class="token punctuation">,</span>mid<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>k<span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#圆心</span>                    ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> func<span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要思路：<strong>枚举</strong></p><ol><li>枚举points中每两个点，确定圆心。</li><li>更新最大值，输出</li></ol><p><strong>小结：</strong><br> 第四题的<code>枚举</code>+<code>math模块</code>+<code>数学</code>，666。<br> 每天都要好好学习</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib模块</title>
      <link href="posts/c78f.html"/>
      <url>posts/c78f.html</url>
      
        <content type="html"><![CDATA[<p><code>import matplotlib.pyplot as plt</code></p><p>这是<strong>框架</strong>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true">#解决中文乱码问题</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.family'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Microsoft YaHei'</span><span class="token punctuation">]</span>x<span class="token operator">=</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span>y<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">5</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'测试'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'哈哈'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最重要的plot"><a href="#最重要的plot" class="headerlink" title="最重要的plot()"></a>最重要的plot()</h2><p><code>plt.plot(x,y,format_string,**kwargs)</code></p><ul><li><code>format_string</code>,控制曲线的格式字符串，可选</li><li><code>**kwargs</code>,第二组或更多<code>(x,y,format_string)</code>，可选</li></ul><p><strong>format_string</strong></p><ol><li>颜色字符</li><li>风格字符<br><code>&#39;-&#39;</code>，实线<br><code>&#39;--&#39;</code>，破折线<br><code>&#39;-.&#39;</code>，点划线<br><code>&#39;:&#39;</code>，虚线<br><code>&#39;.&#39;</code>，点标记<br><code>&#39;,&#39;</code>，像素标记<br><code>&#39;o&#39;</code>，实心圆标记<br><code>&#39;v&#39;</code> <code>&#39;^&#39;</code>，三角标记<br><code>&#39;x&#39;</code>,<code>&#39;*&#39;</code></li></ol><h2 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>plt.plot()</code></td><td>绘制一个坐标图</td></tr><tr><td><code>plt.boxplot()</code></td><td>绘制一个箱型图</td></tr><tr><td><code>plt.bar()</code></td><td>绘制一个条形图</td></tr><tr><td><code>plt.barh()</code></td><td>绘制一个横向条形图</td></tr><tr><td><code>plt.hist()</code></td><td>绘制直方图</td></tr><tr><td><code>plt.polar()</code></td><td>绘制极坐标图</td></tr><tr><td><code>plt.pie()</code></td><td>绘制饼图</td></tr><tr><td><code>plt.psd()</code></td><td>绘制功率谱密度图</td></tr><tr><td><code>plt.specgram()</code></td><td>绘制谱图</td></tr><tr><td><code>plt.cohere()</code></td><td>绘制相关性函数</td></tr><tr><td><code>plt.scatter()</code></td><td>绘制散点图</td></tr><tr><td><code>plt.step()</code></td><td>绘制步阶图</td></tr></tbody></table><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol><li><code>sorted([f.name for f in matplotlib.font_manager.fontManager.ttflist])</code>，查看电脑字体</li><li>中文显示<br>方法一： <code>plt.rcParams[&#39;font.family&#39;]</code>，<code>font.size</code>，<br>方法二： 在中文输出的地方，添加属性<code>fornproperties=&#39;  &#39;</code>，<code>fontsize</code></li><li><code>plt.savefig(&#39;foo&#39;,dpi=600)</code>，默认输出png文件</li><li><code>plt.subplot(nrows,ncols,plot_number)</code>，在全局绘图区域中创建分区体系,并进入</li><li><code>plt.grid(True)</code>，显示网格</li><li><code>plt.axis([x0,x1,y0,y1])</code>，坐标轴跨度</li><li><code>plt.annotate()</code>，在图形中增加带箭头的注解</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文基于官方文档，和mooc一门课的笔记。<br>还很杂乱，需要重学时再整理。<br>感觉这个模块和EXCEL的可视化功能重叠了。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy模块</title>
      <link href="posts/48ab.html"/>
      <url>posts/48ab.html</url>
      
        <content type="html"><![CDATA[<p><code>NumPy</code> is the fundamental package for <strong>scientific computing</strong> in Python.</p><h2 id="ndarray"><a href="#ndarray" class="headerlink" title="ndarray"></a>ndarray</h2><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>.ndim</code></td><td>秩，即轴的数量或维度的数量</td></tr><tr><td><code>.shape</code></td><td>n行m列</td></tr><tr><td><code>.size</code></td><td>n*m个数</td></tr><tr><td><code>.dtype</code></td><td>元素类型</td></tr><tr><td><code>.itemsize</code></td><td>元素大小，单位：字节</td></tr></tbody></table><p>ndarray数组可以由非同质对象构成。<br>非同质ndarray元素为对象类型，<code>dtype(&#39;O&#39;)</code></p><h3 id="（1）创建方法"><a href="#（1）创建方法" class="headerlink" title="（1）创建方法"></a>（1）创建方法</h3><ol><li><code>np.array(list/tuple,dtype=np.float32)</code></li><li><code>np.arange(n)</code></li><li><code>np.ones(shape)</code></li><li><code>np.zeros(shape)</code></li><li><code>np.full(shape,val)</code></li><li><code>np.eye(n)</code></li><li><code>np.ones_like(a)</code></li><li><code>np.zeros_like(a)</code></li><li><code>np.full_like(a,val)</code></li><li><code>np.linspace(n,m,k,endpoint=True)</code></li><li><code>np.concatenate()</code> </li></ol><h3 id="（2）变换方法"><a href="#（2）变换方法" class="headerlink" title="（2）变换方法"></a>（2）变换方法</h3><ol><li><code>a.reshape(shape)</code>，对a<code>reshape</code>,返回shape形状数组</li><li><code>a.resize(shape)</code>，同<code>reshape</code>，但修改原数组</li><li><code>a.swapaxes(ax1,ax2)</code>，调换维度</li><li><code>a.flatten()</code>，降维，不改变a</li><li><code>new_a=a.astype(new_type)</code></li><li><code>a.tolist()</code></li></ol><h3 id="（3）操作方法"><a href="#（3）操作方法" class="headerlink" title="（3）操作方法"></a>（3）操作方法</h3><ol><li>索引切片同1维，多维间用 <code>,</code> </li><li><code>:</code> 可选取整个维度</li></ol><h3 id="（4）运算方法"><a href="#（4）运算方法" class="headerlink" title="（4）运算方法"></a>（4）运算方法</h3><ol><li><code>a.mean()</code></li><li>元素群运算：<code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>**</code><br><code>np.maxmum(x,y)</code><br><code>np.minimum(x,y)</code><br>算术比较，返回bool值</li><li><code>np.abs()</code>，<code>np.fabs()</code></li><li><code>np.sqrt()</code>，<code>np.square()</code></li><li><code>np.log()</code>，<code>np.log2()</code></li><li><code>np.ceil()</code>，<code>np.floor()</code> </li><li><code>np.rint()</code>，四舍五入</li><li><code>np.sin()</code>···</li><li><code>np.exp()</code>，计算指数</li><li><code>np.sign()</code>，返回1，0，-1 </li></ol><p><strong>实践</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npnp<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#-->array([0, 1, 2, 3, 4])</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">#-->array([[1., 1.],1., 1.]])</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#-->array([ 1.,  4.,  7., 10.])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="（1）random函数"><a href="#（1）random函数" class="headerlink" title="（1）random函数"></a>（1）random函数</h3><ol><li><code>np.random.uniform(low,high,size)</code><br>产生均匀分布数组</li><li><code>np.random.normal(loc,scale,size)</code><br>产生正态分布数组，<code>loc</code>均值，<code>scale</code>标准差</li><li><code>np.random.poisson(lam,size)</code><br>产生泊松分布数组，<code>lam</code>随机事件发生概率</li></ol><h3 id="（2）统计函数"><a href="#（2）统计函数" class="headerlink" title="（2）统计函数"></a>（2）统计函数</h3><ol><li><code>.sum(a,axis=None)</code></li><li><code>.mean(a,axis=None)</code>，计算期望</li><li><code>.average(a,axis=None,weights=None)</code>，计算加权平均</li><li><code>.std(a,axis=None)</code>，计算标准差</li><li><code>.var(a,axis=None)</code>，计算方差</li></ol><h3 id="（3）梯度函数"><a href="#（3）梯度函数" class="headerlink" title="（3）梯度函数"></a>（3）梯度函数</h3><ol><li><code>np.gradient(f)</code>,计算斜率</li></ol><h3 id="（4）文件读写"><a href="#（4）文件读写" class="headerlink" title="（4）文件读写"></a>（4）文件读写</h3><p><strong>一维或二维</strong></p><ol><li><code>np.savetxt(frame,array,fmt,delimiter=None)</code><br>其中delimiter应该为 <code>,</code><br>eg. <code>np.savetxt(&#39;foo.csv&#39;,a,fmt=&#39;%d&#39;,delimiter=&#39;,&#39;)</code></li><li><code>np.loadtxt(frame,dtype=np.float,delimiter=None,unpack=False)</code></li></ol><p><strong>多维</strong></p><ol><li><code> a.tofile()</code></li><li><code>np.fromfile</code> </li><li><code>np.save()</code>,npy文件</li><li><code>np.load()</code></li></ol><h2 id="额外"><a href="#额外" class="headerlink" title="额外"></a>额外</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#转置矩阵</span><span class="token comment" spellcheck="true">#做法一：</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">transpose</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#做法二：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">transpose</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token operator">*</span>matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文基于官方文档，和mooc一门课的笔记。<br>还很杂乱，需要重学时再整理。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 这是课程代码的copy:</span><span class="token comment" spellcheck="true"># （对图片进行手绘风格转变）</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'./beijing.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float'</span><span class="token punctuation">)</span>depth <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">.</span>                      <span class="token comment" spellcheck="true"># (0-100)</span>grad <span class="token operator">=</span> np<span class="token punctuation">.</span>gradient<span class="token punctuation">(</span>a<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">#取图像灰度的梯度值</span>grad_x<span class="token punctuation">,</span> grad_y <span class="token operator">=</span> grad               <span class="token comment" spellcheck="true">#分别取横纵图像梯度值</span>grad_x <span class="token operator">=</span> grad_x<span class="token operator">*</span>depth<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">.</span>grad_y <span class="token operator">=</span> grad_y<span class="token operator">*</span>depth<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">.</span>A <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>grad_x<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> grad_y<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">)</span>uni_x <span class="token operator">=</span> grad_x<span class="token operator">/</span>Auni_y <span class="token operator">=</span> grad_y<span class="token operator">/</span>Auni_z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token operator">/</span>Avec_el <span class="token operator">=</span> np<span class="token punctuation">.</span>pi<span class="token operator">/</span><span class="token number">2.2</span>                   <span class="token comment" spellcheck="true"># 光源的俯视角度，弧度值</span>vec_az <span class="token operator">=</span> np<span class="token punctuation">.</span>pi<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">.</span>                    <span class="token comment" spellcheck="true"># 光源的方位角度，弧度值</span>dx <span class="token operator">=</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>vec_el<span class="token punctuation">)</span><span class="token operator">*</span>np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>vec_az<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#光源对x 轴的影响</span>dy <span class="token operator">=</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>vec_el<span class="token punctuation">)</span><span class="token operator">*</span>np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>vec_az<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#光源对y 轴的影响</span>dz <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>vec_el<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">#光源对z 轴的影响</span>b <span class="token operator">=</span> <span class="token number">255</span><span class="token operator">*</span><span class="token punctuation">(</span>dx<span class="token operator">*</span>uni_x <span class="token operator">+</span> dy<span class="token operator">*</span>uni_y <span class="token operator">+</span> dz<span class="token operator">*</span>uni_z<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#光源归一化</span>b <span class="token operator">=</span> b<span class="token punctuation">.</span>clip<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span>im <span class="token operator">=</span> Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>b<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'uint8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#重构图像</span>im<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'./beijingHD.jpg'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记187</title>
      <link href="posts/contest187.html"/>
      <url>posts/contest187.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、旅行终点站"><a href="#一、旅行终点站" class="headerlink" title="一、旅行终点站"></a>一、旅行终点站</h2><p>给你一份旅游线路图，该线路图中的旅行线路用数组 <code>paths</code> 表示，其中 <code>paths[i] = [cityAi, cityBi]</code> 表示该线路将会从 <code>cityAi</code> 直接前往 <code>cityBi</code> 。请你找出这次旅行的终点站，即没有任何可以通往其他城市的线路的城市。<br>题目数据保证线路图会形成一条不存在循环的线路，因此只会有一个旅行终点站。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">destCity</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> paths<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        lista<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> paths<span class="token punctuation">]</span>        listb<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> paths<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>set<span class="token punctuation">(</span>listb<span class="token punctuation">)</span><span class="token operator">-</span>set<span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、是否所有-1-都至少相隔-k-个元素"><a href="#二、是否所有-1-都至少相隔-k-个元素" class="headerlink" title="二、是否所有 1 都至少相隔 k 个元素"></a>二、是否所有 1 都至少相隔 k 个元素</h2><p>给你一个由若干 <code>0</code> 和 <code>1</code> 组成的数组 <code>nums</code> 以及整数 <code>k</code>。如果所有 <code>1</code> 都至少相隔 <code>k</code> 个元素，则返回 <code>True</code> ；否则，返回 <code>False</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">kLengthApart</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        temp<span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">-</span>temp<span class="token operator">&lt;=</span>k<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>temp<span class="token operator">=</span>i        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、绝对差不超过限制的最长连续子数组"><a href="#三、绝对差不超过限制的最长连续子数组" class="headerlink" title="三、绝对差不超过限制的最长连续子数组"></a>三、绝对差不超过限制的最长连续子数组</h2><p>给你一个整数数组 <code>nums</code> ，和一个表示限制的整数 <code>limit</code>，请你返回最长连续子数组的长度，该子数组中的任意两个元素之间的绝对差必须小于或者等于 <code>limit</code> 。<br>如果不存在满足条件的子数组，则返回 <code>0</code> 。</p><blockquote><p>话说dp和双指针好像，双指针的话最后一个十几万数的测试用例超时了。。。</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestSubarray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> limit<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        ans<span class="token operator">=</span><span class="token number">1</span>        a<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> l <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            minnum<span class="token punctuation">,</span>maxnum<span class="token operator">=</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span>            <span class="token keyword">for</span> r <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>                minnum<span class="token operator">=</span>min<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span>minnum<span class="token punctuation">]</span><span class="token punctuation">)</span>                maxnum<span class="token operator">=</span>max<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span>maxnum<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> maxnum<span class="token operator">-</span>minnum<span class="token operator">&lt;=</span>limit<span class="token punctuation">:</span>                    ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>from copy :</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestSubarray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> limit<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span>        st <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            bisect<span class="token punctuation">.</span>insort<span class="token punctuation">(</span>st<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">while</span> st<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> st<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> limit<span class="token punctuation">:</span>                st<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            j <span class="token operator">+=</span> <span class="token number">1</span>            ans <span class="token operator">=</span> max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> len<span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、有序矩阵中的第-k-个最小数组和"><a href="#四、有序矩阵中的第-k-个最小数组和" class="headerlink" title="四、有序矩阵中的第 k 个最小数组和"></a>四、有序矩阵中的第 k 个最小数组和</h2><p>给你一个 <code>m * n</code> 的矩阵 <code>mat</code>，以及一个整数 <code>k</code> ，矩阵中的每一行都以非递减的顺序排列。<br>你可以从每一行中选出 1 个元素形成一个数组。返回所有可能数组中的第 k 个最小数组和。</p><blockquote><p>利用sorted逐行更新。。</p></blockquote><p>from copy:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mat<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> mat<span class="token punctuation">:</span>            ans <span class="token operator">=</span> sorted<span class="token punctuation">(</span><span class="token punctuation">[</span>a <span class="token operator">+</span> r <span class="token keyword">for</span> a <span class="token keyword">in</span> ans <span class="token keyword">for</span> r <span class="token keyword">in</span> row<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span> k<span class="token punctuation">]</span>        <span class="token keyword">return</span> ans<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Hexo理解</title>
      <link href="posts/hexo.html"/>
      <url>posts/hexo.html</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title="preface"></a><em>preface</em></h2><p><strong>HEXO</strong> 是一个由 node.js 提供动力的静态站点生成器。它为 web 开发提供了强大的 API 来集成现有的 npm 包，并通过编程将某些内容插入到文章中。</p><p><a href="https://www.jianshu.com/p/0a8d738a5620" target="_blank" rel="noopener">Hexo + Github搭建Blog教程（2020）</a></p><p><a href="https://yafine66.gitee.io/" target="_blank" rel="noopener">装修教程</a>，<a href="https://hexo.io/docs/" target="_blank" rel="noopener">hexo官方文档</a></p><p>嗯，看上面3个文档，就应该可以搭建出一个免费的静态网页了。</p><h2 id="Matery主题个性化修改"><a href="#Matery主题个性化修改" class="headerlink" title="Matery主题个性化修改"></a>Matery主题个性化修改</h2><h3 id="①TOC目录的展开"><a href="#①TOC目录的展开" class="headerlink" title="①TOC目录的展开"></a>①TOC目录的展开</h3><p><code>2021.3.7更新</code></p><p>在 matery 目录下的<code>_config.yml</code>文件中,将 <code>showToggleBtn</code> 设为 <code>true</code><br>参考：<a href="https://github.com/zkmei/hexo-theme-matery/commit/4b99984a46d95c5694c7f06152e0ba24c00e4c59" target="_blank" rel="noopener">GITHUB中的修改</a></p><pre class="line-numbers language-yml"><code class="language-yml">toc:  enable: true  heading: h1,h2, h3, h4  collapseDepth: 2   showToggleBtn: true #是否展开目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>颜色不太好看，去matery/layout/_partial/post-detail-toc.ejs中，</p><p>找到：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>floating-toc-btn<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hide-on-med-and-down<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn-floating btn-large bg-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fas fa-list-ul<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为<code>bg-color</code>是一个已经定义了的颜色样式，所以<br>将 <code>bg-color</code> 改为 <code>toc-color</code>，然后在 <code>matery.css</code> 中加入颜色样式</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.toc-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#C471ED</span> <span class="token number">0%</span>, <span class="token hexcode">#F64F59</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="②将导航栏变为透明"><a href="#②将导航栏变为透明" class="headerlink" title="②将导航栏变为透明"></a>②将导航栏变为透明</h3><p>因为导航栏看着占位子，所以在<code>matery.js</code>中</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">/*回到顶部*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#backTop'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body,html'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>scrollTop<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*监听滚动条位置*/</span>    <span class="token keyword">let</span> $nav <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#headNav'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> $backTop <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.top-scroll'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当页面处于文章中部的时候刷新页面，因为此时无滚动，所以需要判断位置,给导航加上绿色。</span>    <span class="token function">showOrHideNavBg</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 回到顶部按钮根据滚动条的位置的显示和隐藏.*/</span>        <span class="token keyword">let</span> scroll <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showOrHideNavBg</span><span class="token punctuation">(</span>scroll<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">showOrHideNavBg</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> showPosition <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> showPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>            $nav<span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'nav-transparent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $backTop<span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            $nav<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'nav-transparent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $backTop<span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将这三条语句删去：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> $nav <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#headNav'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$nav<span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'nav-transparent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$nav<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'nav-transparent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="③设置独立的界面"><a href="#③设置独立的界面" class="headerlink" title="③设置独立的界面"></a>③设置独立的界面</h3><ul><li>在根目录<code>sourse</code>中新建<code>zone</code>文件夹</li><li>找到hexo的配置文件<code>_config.yml</code></li><li>跳过<code>zone</code>文件夹的渲染，即 <code>skip_render: zone/**</code></li></ul><p>效果：独立的html界面可以直接使用了</p><pre class="line-numbers language-md"><code class="language-md">[超级按钮](/zone/mouseover)这是一个跳转，至本站根文件下的zone/mouseover注释：mouseover中含有index.html，即完整独立的界面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="④md文档中加入html语句"><a href="#④md文档中加入html语句" class="headerlink" title="④md文档中加入html语句"></a>④md文档中加入html语句</h3><p>markdown中支持html语句。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 使用font来更改字体样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>verdana<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 或则使用p来更改字体样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-family</span><span class="token punctuation">:</span>verdana<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">80%</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>green</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is a paragraph with some text in it.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- p 中 align="right" 可以更改位置 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 使用img来更改图片大小 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片路径<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">zoom</span><span class="token punctuation">:</span><span class="token number">50%</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 添加上下标 --></span>H<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">></span></span>O  CO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">></span></span>爆米<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span>TM<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="⑤图标"><a href="#⑤图标" class="headerlink" title="⑤图标"></a>⑤图标</h3><p><a href="http://www.fontawesome.com.cn/faicons/" target="_blank" rel="noopener">http://www.fontawesome.com.cn/faicons/</a></p><p>直接 <code>fas fa-name</code> 可以使用配置好的图标</p><hr><h3 id="⑥更多的区块样式"><a href="#⑥更多的区块样式" class="headerlink" title="⑥更多的区块样式"></a>⑥更多的区块样式</h3><p><a href="https://github.com/lxl80/hexo-admonition" target="_blank" rel="noopener">使用Hexo-admonition 插件</a></p><blockquote><p>这是自带的，使用<code>&gt;</code></p></blockquote><div class="admonition note"><p class="admonition-title">第一种类型</p><p>使用 <code>note</code></p></div><div class="admonition todo"><p class="admonition-title">第二种类型</p><p>使用 <code>info</code> <code>todo</code></p></div><div class="admonition warning"><p class="admonition-title">第三种类型</p><p>使用 <code>warning</code> <code>attention</code> <code>caution</code></p></div><div class="admonition error"><p class="admonition-title">第四种类型</p><p>使用 <code>error</code> <code>failure</code> <code>missing</code> <code>fail</code></p></div><h3 id="⑨EJS"><a href="#⑨EJS" class="headerlink" title="⑨EJS"></a>⑨EJS</h3><p>“E” 代表什么？可以表示 “可嵌入（Embedded）”，也可以是“高效（Effective）”、“优雅（Elegant）”或者是“简单（Easy）”。EJS 是一套简单的模板语言，帮你利用普通的 JavaScript 代码生成 HTML 页面。EJS 没有如何组织内容的教条；也没有再造一套迭代和控制流语法；有的只是普通的 JavaScript 代码而已。</p><p>代码实例：</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>site<span class="token punctuation">.</span>categories <span class="token operator">&amp;&amp;</span> site<span class="token punctuation">.</span>categories<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/category-radar'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>site<span class="token punctuation">.</span>tags <span class="token operator">&amp;&amp;</span> site<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/tag-wordcloud'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>CNAME说明</strong><br>由于更换了域名，<code>hexo d</code>之后总是要去github仓库的设置里改部署地址。<br>解决方法：hexo根目录的source文件夹下，新建<code>CNAME</code>（无后缀）写入url.</p><p><strong>自定义字体</strong>：<br><a href="https://yafine-blog.cn/posts/49fb.html" target="_blank" rel="noopener">https://yafine-blog.cn/posts/49fb.html</a></p><h2 id="rebuild"><a href="#rebuild" class="headerlink" title="rebuild"></a><em>rebuild</em></h2><p>//<code>2020.11.30</code> </p><p>hexo更新，改动改崩了，所以重新弄一个，wuwuwu~</p><p>以后好好写博客，不再整了，够用就行。</p><blockquote><p>做事之前先备份</p></blockquote><p>步骤：</p><ol><li>nodejs，git准备</li><li><code>npm install hexo-cli -g</code></li><li><code>hexo init blog</code> hexo初始化你的blog文件夹（需新建）</li><li><code>cd blog</code></li><li><code>npm install</code> </li><li><code>hexo s</code> 开启本地服务</li><li>添加matery主题</li><li>修改自己的matery主题</li></ol><hr><h2 id="other"><a href="#other" class="headerlink" title="other"></a><em>other</em></h2><div class="admonition info"><p class="admonition-title">关于butterfly主题</p><p><code>2021.03.10</code>体验了一下butterfly主题，还好，（想去搬运些与matery不同的样式）但要求hexo&gt;5.0.0，更改hexo的package.json中的<code>dependencies</code>中的hexo版本号，再管理员模式<code>npm update</code>即可。</p><p>但5.4.0版本与matery主题还是出错，<code>{</code> <code>}</code>无法正常显示。最后还是降低hexo版本至4.2.1，毕竟matery主题陪伴了这么久，要一直走下去。</p></div><div class="admonition info"><p class="admonition-title">如何查看网站字体</p><p><code>F12</code> -&gt; <code>ELEMENTS</code> -&gt; <code>Computed</code></p></div><div class="admonition info"><p class="admonition-title">关于域名</p><p>查了一下，域名不可以买断，com域名买的时候45，2021年续费68，最多买10年。</p></div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记185</title>
      <link href="posts/contest185.html"/>
      <url>posts/contest185.html</url>
      
        <content type="html"><![CDATA[<h2 id="（1）重新格式化字符串"><a href="#（1）重新格式化字符串" class="headerlink" title="（1）重新格式化字符串"></a>（1）重新格式化字符串</h2><p>给你一个混合了数字和字母的字符串 <code>s</code>，其中的字母均为小写英文字母。<br>请你将该字符串重新格式化，使得任意两个相邻字符的类型都不同。也就是说，字母后面应该跟着数字，而数字后面应该跟着字母。<br>请你返回 重新格式化后 的字符串；如果无法按要求重新格式化，则返回一个 空字符串 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reformat</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> s<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">""</span>        ln<span class="token punctuation">,</span>ls<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>ln<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>ans<span class="token operator">=</span>len<span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">""</span>        <span class="token keyword">if</span> a<span class="token operator">==</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> ls<span class="token punctuation">:</span>                ans<span class="token operator">+=</span><span class="token punctuation">(</span>ln<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>ls<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> ans<span class="token operator">+</span>ln<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> b<span class="token operator">==</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> ln<span class="token punctuation">:</span>                ans<span class="token operator">+=</span><span class="token punctuation">(</span>ls<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>ln<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> ans<span class="token operator">+</span>ls<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> b<span class="token operator">==</span>a<span class="token punctuation">:</span>            <span class="token keyword">while</span> ln<span class="token punctuation">:</span>                ans<span class="token operator">+=</span><span class="token punctuation">(</span>ls<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>ln<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> ans        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="（2）点菜展示表"><a href="#（2）点菜展示表" class="headerlink" title="（2）点菜展示表"></a>（2）点菜展示表</h2><p>给你一个数组 <code>orders</code>，表示客户在餐厅中完成的订单，确切地说， <code>orders[i]=[customerNamei,tableNumberi,foodItemi]</code> ，其中 <code>customerNamei</code> 是客户的姓名，<code>tableNumberi</code> 是客户所在餐桌的桌号，而 <code>foodItemi</code> 是客户点的餐品名称。<br>请你返回该餐厅的 <strong>点菜展示表</strong> 。在这张表中，表中第一行为标题，其第一列为餐桌桌号 “Table” ，后面每一列都是按字母顺序排列的餐品名称。接下来每一行中的项则表示每张餐桌订购的相应餐品数量，第一列应当填对应的桌号，后面依次填写下单的餐品数量。<br>注意：客户姓名不是点菜展示表的一部分。此外，表中的数据行应该按餐桌桌号升序排列。<br><img src="https://img-blog.csdnimg.cn/20200525095748249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">displayTable</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> orders<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        fs<span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span>        ts<span class="token operator">=</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> _ <span class="token punctuation">,</span>t<span class="token punctuation">,</span>f <span class="token keyword">in</span> orders<span class="token punctuation">:</span>            fs<span class="token punctuation">.</span>add<span class="token punctuation">(</span>f<span class="token punctuation">)</span>            ts<span class="token punctuation">[</span>int<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"Table"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> f <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>list<span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#菜名</span>            ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">)</span>        <span class="token keyword">for</span> t <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>list<span class="token punctuation">(</span>ts<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#桌号</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>str<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>               <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#份数</span>                ans<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>ts<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结</strong></p><blockquote><p>好难。。。</p></blockquote><h2 id="（3）数青蛙"><a href="#（3）数青蛙" class="headerlink" title="（3）数青蛙"></a>（3）数青蛙</h2><p>给你一个字符串 <code>croakOfFrogs</code>，它表示不同青蛙发出的蛙鸣声（字符串 “croak” ）的组合。由于同一时间可以有多只青蛙呱呱作响，所以 <code>croakOfFrogs</code> 中会混合多个 <code>“croak”</code> 。请你返回模拟字符串中所有蛙鸣所需不同青蛙的<strong>最少数目</strong>。<br>注意：要想发出蛙鸣 “croak”，青蛙必须 依序 输出 ‘c’, ’r’, ’o’, ’a’, ’k’ 这 5 个字母。如果没有输出全部五个字母，那么它就不会发出声音。<br>如果字符串 <code>croakOfFrogs</code> 不是由若干有效的 <code>&quot;croak&quot;</code> 字符混合而成，请返回 <code>-1</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minNumberOfFrogs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cr<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        pre <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> cr<span class="token punctuation">:</span>            <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">'c'</span><span class="token punctuation">:</span>                pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">'r'</span><span class="token punctuation">:</span>                pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">'o'</span><span class="token punctuation">:</span>                pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                pre<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">'a'</span><span class="token punctuation">:</span>                pre<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                pre<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">'k'</span><span class="token punctuation">:</span>                pre<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">if</span> any<span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> pre<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>            res <span class="token operator">=</span> max<span class="token punctuation">(</span>res<span class="token punctuation">,</span> sum<span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> any<span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> pre<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="（4）生成数组"><a href="#（4）生成数组" class="headerlink" title="（4）生成数组"></a>（4）生成数组</h2><p>给你三个整数 <code>n</code>、<code>m</code> 和 <code>k</code> 。下图描述的算法用于找出正整数数组中最大的元素。</p><pre class="line-numbers language-python"><code class="language-python">maximum_value <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>maximum_index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>search_cost <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>maximum_value <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        maximum_value <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        maximum_index <span class="token operator">=</span> i        search_cost<span class="token operator">+=</span><span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> maximum_index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请你生成一个具有下述属性的数组 arr ：</p><ul><li><code>arr</code> 中有 <code>n</code> 个整数。</li><li><code>1 &lt;= arr[i] &lt;= m</code> 其中 <code>(0 &lt;= i &lt; n)</code> 。</li><li>将上面提到的算法应用于 <code>arr</code> ，<code>search_cost</code> 的值等于 <code>k</code> 。<br>返回上述条件下生成数组 <code>arr</code> 的 方法数 ，由于答案可能会很大，所以 必须 对 <code>10^9 + 7</code> 取余。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numOfArrays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        mod <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> pre <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> pre <span class="token operator">>=</span> j<span class="token punctuation">:</span>                        <span class="token keyword">for</span> kk <span class="token keyword">in</span> range<span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span>kk<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span>kk<span class="token punctuation">]</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">for</span> kk <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>kk<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span>kk <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>        <span class="token keyword">return</span> res <span class="token operator">%</span> mod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂货区</title>
      <link href="posts/5bf8.html"/>
      <url>posts/5bf8.html</url>
      
        <content type="html"><![CDATA[<h2 id="html"><a href="#html" class="headerlink" title="html"></a><em>html</em></h2><p><code>html</code>：超文本 <strong>标记</strong> 语言，html文档也叫做Web页面。</p><p><strong>html基本格式</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mystyle.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 定义网页编码格式为utf-8 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>hello,html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是一个标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 标题通过h1~h6标签定义 --></span>        <span class="token comment" spellcheck="true">&lt;!-- 使用img来更改图片大小 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片路径<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">zoom</span><span class="token punctuation">:</span><span class="token number">50%</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">loading</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazy<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>258<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>39<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- br表示换行 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- hr创建水平线 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="css"><a href="#css" class="headerlink" title="css"></a><em>css</em></h2><h2 id="js"><a href="#js" class="headerlink" title="js"></a><em>js</em></h2><h2 id="jquery"><a href="#jquery" class="headerlink" title="jquery"></a><em>jquery</em></h2><h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a><em>vue</em></h2><h2 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a><em>bootstrap</em></h2><h2 id="java"><a href="#java" class="headerlink" title="java"></a><em>java</em></h2><p>查看 jdk 版本：</p><pre class="line-numbers language-cmd"><code class="language-cmd">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行命令解析：</p><pre class="line-numbers language-cmd"><code class="language-cmd">javac HelloWorld.javajava HelloWorld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第一步，将 java 源文件编译为 class 字节码文件<br>第二步，使用 java 解释器，解释执行文件</p><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a><em>redis</em></h2><p>一个高性能的 key-value 存储系统，是跨平台的非关系型数据库。</p><p>基本数据类型：</p><ul><li>字符串</li><li>哈希</li><li>列表</li><li>集合</li><li>有序集合</li></ul><h2 id="Python面试"><a href="#Python面试" class="headerlink" title="Python面试"></a>Python面试</h2><ul><li><strong>区别</strong><ul><li>is, ==</li><li>copy(), deepcopy()</li><li>__new__, __init__</li></ul></li><li><strong>机制</strong><ul><li>垃圾回收机制</li></ul></li><li><strong>设计模式</strong><ul><li>单列模式</li></ul></li></ul><h2 id="微软面试"><a href="#微软面试" class="headerlink" title="微软面试"></a>微软面试</h2><img src="https://img-blog.csdnimg.cn/20210426173436724.jpg" style="zoom:40%"/><p>为了 <strong>一年后</strong>、或 <strong>两年后</strong> 能去这个岗位，好好准备，先把学校基础课学好。</p><p>暑期实习：投递 -&gt; 笔试 -&gt; 1~2轮IC面 -&gt; 终面 -&gt; Offer<br>秋招： 投递 -&gt; 笔试 -&gt; 1~2轮IC面 -&gt; 3面 -&gt; AA面 -&gt; Offer</p><p><code>2021.暑期</code> 有份 <em>python web后端</em> 的实习，好好准备，多完善简历、项目经验，准备面经。</p><h2 id="other"><a href="#other" class="headerlink" title="other"></a><em>other</em></h2><ul><li><code>Lua</code> 一种轻量小巧的脚本语言</li><li><code>融资</code> 一个企业的资金筹集的行为与过程，一般情况：天使投资 -&gt; A轮 -&gt; B轮 -&gt; C轮</li></ul><hr><p><code>公选课简记</code></p><p><strong>金融投资与热点分析</strong></p><ul><li>现代经济与现代金融<ul><li>现代经济的 <strong>核心</strong>：金融经济</li><li>现代经济的 <strong>特征</strong>：经济全球化、市场一体化、资产证券化</li><li>美国金融经济运行特点：经济虚拟化（金融化）</li></ul></li><li>投资是货币转化为资本的过程<ul><li>真实资产：黄金、房地产等</li><li>金融资产：股票、债券、期货、期权等<ul><li><strong>债券</strong> 是一种金融契约，是债权债务的凭证</li><li><strong>股票</strong> 是股份有限公司在筹集资本时向出资人或投资者发行的股份凭证，代表持有者对股份公司的所有权<ul><li>出资证明</li><li>股东身份证明</li><li>利润分配及剩余财产分配权证明</li></ul></li><li><strong>证券投资资金</strong> 是一种实行组合投资、专业管理】利益共享、风险共担的集合投资方式，也是一种间接投资工具<ul><li>其主要投资对象是股票和债券</li><li>投资者收益 = 基金投资收益-基金管理人费用-基金托管人费用</li></ul></li></ul></li><li>另类投资工具-金融衍生品<ul><li>资产支持证券（ABS）</li><li>担保债务凭证（CDO）</li><li>信用违约互换（CDS）</li></ul></li></ul></li></ul><hr><p><strong>bat使用</strong></p><pre class="line-numbers language-cmd"><code class="language-cmd">cd /bloghexo cl & hexo g & hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将代码输入到一个新的txt文档中，然后保存为bat文件，运行它即可完成自动部署。</p><h5 id="①代码块快捷操作："><a href="#①代码块快捷操作：" class="headerlink" title="①代码块快捷操作："></a>①代码块快捷操作：</h5><ul><li>拉选块之后，按下 <code>tab</code> 键，整个块就会缩进</li><li>按下 <code>shift + tab</code> 就会反向缩进</li><li>选中块后，<code>ctrl+/</code> 集体注释</li><li>vscode，jupyter中都可用</li></ul><h5 id="②大一python："><a href="#②大一python：" class="headerlink" title="②大一python："></a>②大一python：</h5><ul><li>定义函数时，带默认参数的必须出现在参数列表最右边</li><li>多行注释<code>&#39;&#39;&#39;  &#39;&#39;&#39;</code></li><li><code>eval()</code>执行字符串表达式</li><li><code>print(&quot;:2f&quot;.format())</code></li><li><code>del list(index)</code>，删除</li><li><code>list</code>使用<code>+=</code>可进行扩充</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯&amp;递归</title>
      <link href="posts/ea8e.html"/>
      <url>posts/ea8e.html</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title="preface"></a><em>preface</em></h2><p>回溯算法实际上一个类似枚举的<strong>搜索尝试</strong>过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就 “回溯” 返回，尝试别的路径。</p><p>回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。</p><p><strong>代码框架：</strong> </p><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> 满足结束条件<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>add<span class="token punctuation">(</span>路径<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">for</span> 选择 <span class="token keyword">in</span> 选择列表<span class="token punctuation">:</span>        做选择        backtrack<span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span>        撤销选择<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考博客：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/51882471" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/51882471</a></li><li><a href="https://zhuanlan.zhihu.com/p/93530380" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/93530380</a></li></ul><p>leetcode题目：<a href="https://leetcode-cn.com/tag/backtracking/" target="_blank" rel="noopener">https://leetcode-cn.com/tag/backtracking/</a></p><h2 id="1-22-括号生成"><a href="#1-22-括号生成" class="headerlink" title="(1)22. 括号生成"></a>(1)22. 括号生成</h2><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 <strong>有效的</strong> 括号组合。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#s表cur_str_list,l 表示左括号数</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">if</span> l<span class="token operator">&lt;</span>n<span class="token punctuation">:</span>                s<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span>                backtrack<span class="token punctuation">(</span>s<span class="token punctuation">,</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span>                s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> r<span class="token operator">&lt;</span>l<span class="token punctuation">:</span>                s<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span>                backtrack<span class="token punctuation">(</span>s<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        backtrack<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200913174130683.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="2-无重复字符串的排列组合"><a href="#2-无重复字符串的排列组合" class="headerlink" title="(2)无重复字符串的排列组合"></a>(2)无重复字符串的排列组合</h2><p>无重复字符串的排列组合。编写一种方法，计算某字符串的所有排列组合，字符串每个字符均不相同。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法一：用itertools库中的permutations</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> list<span class="token punctuation">(</span>permutations<span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#方法二：回溯</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">permutation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> S<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> S<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>path<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> s<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                backtrack<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>path<span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span>        backtrack<span class="token punctuation">(</span>S<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-幂集"><a href="#3-幂集" class="headerlink" title="(3)幂集"></a>(3)幂集</h2><p>编写一种方法，返回某集合的所有子集。集合中<strong>不包含重复</strong>的元素。<br> 输入： nums = [1,2,3]<br> 输出：[[3],[1],[2],[1,2,3],[1,3],[2,3],[1,2],[]]</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#l表示可取的左点，r表示可取的右点</span>        <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>subset<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>subset<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>                subset<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                backtrack<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>subset<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span>                subset<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        backtrack<span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#回溯法厉害啊，2020-9-13的第三道回溯</span><span class="token comment" spellcheck="true">#这代码应该可以叫模板了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-八皇后问题"><a href="#4-八皇后问题" class="headerlink" title="(4)八皇后问题"></a>(4)八皇后问题</h2><p><a href="https://leetcode-cn.com/problems/eight-queens-lcci/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/eight-queens-lcci/</a></p><p>设计一种算法，打印 N 皇后在 N × N 棋盘上的各种摆法，其中每个皇后都不同行、不同列，也不在对角线上。这里的“对角线”指的是所有的对角线，不只是平分整个棋盘的那两条对角线。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">solveNQueens</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">queen</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> cur <span class="token operator">==</span> len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                A<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> i                flag <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token comment" spellcheck="true">#检验与前面的皇后是否冲突</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>i <span class="token operator">or</span> abs<span class="token punctuation">(</span>i <span class="token operator">-</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> cur <span class="token operator">-</span> j<span class="token punctuation">:</span>                        flag <span class="token operator">=</span> <span class="token boolean">False</span>                        <span class="token keyword">break</span>                <span class="token keyword">if</span> flag<span class="token punctuation">:</span> queen<span class="token punctuation">(</span>A<span class="token punctuation">,</span> cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        queen<span class="token punctuation">(</span><span class="token punctuation">[</span>None<span class="token punctuation">]</span><span class="token operator">*</span>n<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#接口对接部分</span>        temp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'.'</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>res <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#第i个答案</span>            <span class="token keyword">for</span> j<span class="token punctuation">,</span>row <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#第j个行</span>                row<span class="token punctuation">[</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Q"</span>                temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 这是个代码片段</span><span class="token comment" spellcheck="true"># A为答案，cur为第几行下标</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">queen</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cur <span class="token operator">==</span> len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#没写[:]不行，什么机制还不知道</span>            <span class="token keyword">return</span>         <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            A<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> i            flag <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token comment" spellcheck="true">#检验与前面的皇后是否冲突</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>i <span class="token operator">or</span> abs<span class="token punctuation">(</span>i <span class="token operator">-</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> cur <span class="token operator">-</span> j<span class="token punctuation">:</span>                    flag <span class="token operator">=</span> <span class="token boolean">False</span>                    <span class="token keyword">break</span>            <span class="token keyword">if</span> flag<span class="token punctuation">:</span> queen<span class="token punctuation">(</span>A<span class="token punctuation">,</span> cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    queen<span class="token punctuation">(</span><span class="token punctuation">[</span>None<span class="token punctuation">]</span><span class="token operator">*</span>n<span class="token punctuation">)</span>    <span class="token keyword">return</span> ansmain<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-解数独"><a href="#5-解数独" class="headerlink" title="(5)解数独"></a>(5)解数独</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">solveSudoku</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> board<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>                    <span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token string">"123456789"</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> check<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>                            board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>num                            <span class="token keyword">if</span> backtrack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>                            board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'.'</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>num<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>num<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> board<span class="token punctuation">[</span>x<span class="token operator">//</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">//</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token operator">==</span>num<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        backtrack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#回溯，，6</span><span class="token comment" spellcheck="true">#这种暴力回溯，时间复杂度太高了</span><span class="token comment" spellcheck="true">#尝试了一下引入参数，回溯不回来了，好菜</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-77-组合"><a href="#6-77-组合" class="headerlink" title="(6)77. 组合"></a>(6)77. 组合</h2><p>给定两个整数 n 和 k，返回 1 … n 中所有可能的 k 个数的组合。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法一：用库：</span><span class="token keyword">return</span> list<span class="token punctuation">(</span>itertools<span class="token punctuation">.</span>combinations<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方法二：回溯</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combine</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">==</span>k<span class="token punctuation">:</span>                 ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>start<span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                bk<span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                tmp<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        bk<span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-131-分割回文串"><a href="#7-131-分割回文串" class="headerlink" title="(7)131. 分割回文串"></a>(7)131. 分割回文串</h2><p>给定一个字符串 <code>s</code>，将 <code>s</code> 分割成一些子串，使每个子串都是回文串。</p><p>返回 <code>s</code> 所有可能的分割方案。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> l<span class="token operator">==</span>r<span class="token punctuation">:</span>                 ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                cur<span class="token operator">=</span>s<span class="token punctuation">[</span>l<span class="token punctuation">:</span>i<span class="token punctuation">]</span>                <span class="token keyword">if</span> cur<span class="token operator">==</span>cur<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">)</span>                    bk<span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>i<span class="token punctuation">,</span>r<span class="token punctuation">)</span>                    tmp<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        bk<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 后期试错出来的，</span><span class="token comment" spellcheck="true"># 回溯神奇啊</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-组合总和-II"><a href="#8-组合总和-II" class="headerlink" title="(8)组合总和 II"></a>(8)组合总和 II</h2><p>给定一个数组 <code>candidates</code> 和一个目标数 <code>target</code> ，找出 <code>candidates</code> 中所有可以使数字和为 <code>target</code> 的组合。</p><p><code>candidates</code> 中的每个数字在每个组合中只能使用一次。</p><p>说明：</p><ul><li>所有数字（包括目标数）都是正整数。</li><li>解集不能包含重复的组合。 </li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combinationSum2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> candidates<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        candidates<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> sum<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">==</span>target<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">if</span> sum<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">></span>target<span class="token punctuation">:</span> <span class="token keyword">return</span>             <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">></span>l <span class="token operator">and</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>candidates<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>   <span class="token comment" spellcheck="true">#这种回溯中去重。。。</span>                tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                bk<span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span>                tmp<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        bk<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 记录报错：unhashble type: 'list',列表中列表不能集合去重</span><span class="token comment" spellcheck="true"># 回溯之前，sort优化，并方便去重</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-组合总和-III"><a href="#9-组合总和-III" class="headerlink" title="(9)组合总和 III"></a>(9)组合总和 III</h2><p>找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中<strong>不存在重复的数字</strong>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combinationSum3</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>l<span class="token punctuation">,</span>k<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> n<span class="token operator">==</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                  ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span>             <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                bk<span class="token punctuation">(</span>path<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token number">-1</span><span class="token punctuation">,</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        bk<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token punctuation">,</span>n<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># if剪枝 if结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-复原IP地址"><a href="#10-复原IP地址" class="headerlink" title="(10)复原IP地址"></a>(10)复原IP地址</h2><p>给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。</p><p>有效的 IP 地址正好由四个整数（每个整数位于 0 到 255 之间组成），整数之间用 <code>.</code> 分隔。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">restoreIpAddresses</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">and</span> len<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">if</span> len<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>min<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    head<span class="token punctuation">,</span>tail<span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                    <span class="token keyword">if</span> head <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>int<span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">255</span> <span class="token operator">and</span> str<span class="token punctuation">(</span>int<span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>head<span class="token punctuation">:</span>                        f<span class="token punctuation">(</span>tail<span class="token punctuation">,</span>tmp<span class="token operator">+</span><span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span>                f<span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 一棵递归树</span><span class="token comment" spellcheck="true"># str(int(i))==i排除前缀0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-不同路径-III"><a href="#11-不同路径-III" class="headerlink" title="(11)不同路径 III"></a>(11)不同路径 III</h2><p><a href="https://leetcode-cn.com/problems/unique-paths-iii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/unique-paths-iii/</a></p><p>在二维网格 grid 上，有 4 种类型的方格：</p><ul><li><code>1</code> 表示起始方格。且只有一个起始方格。</li><li><code>2</code> 表示结束方格，且只有一个结束方格。</li><li><code>0</code> 表示我们可以走过的空方格。</li><li><code>-1</code> 表示我们无法跨越的障碍。</li><li>返回在四个方向（上、下、左、右）上行走时，从起始方格到结束方格的不同路径的数目。</li></ul><p>每一个无障碍方格都要通过一次，但是一条路径中不能重复通过同一个方格。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">uniquePathsIII</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        cnt<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> cnt<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">elif</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span> start<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span>steps<span class="token punctuation">)</span><span class="token punctuation">:</span>            x<span class="token punctuation">,</span>y<span class="token operator">=</span>cur            <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> x<span class="token operator">>=</span>rows <span class="token operator">or</span> y<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> y<span class="token operator">>=</span>cols<span class="token punctuation">:</span>                 <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token keyword">if</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token keyword">if</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">1</span> <span class="token keyword">if</span> steps<span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>            ans<span class="token operator">=</span><span class="token number">0</span>            grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>            ans<span class="token operator">+=</span>bk<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>steps<span class="token number">-1</span><span class="token punctuation">)</span>            ans<span class="token operator">+=</span>bk<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>steps<span class="token number">-1</span><span class="token punctuation">)</span>            ans<span class="token operator">+=</span>bk<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>steps<span class="token number">-1</span><span class="token punctuation">)</span>            ans<span class="token operator">+=</span>bk<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>steps<span class="token number">-1</span><span class="token punctuation">)</span>            grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">return</span> ans        <span class="token keyword">return</span> bk<span class="token punctuation">(</span>start<span class="token punctuation">,</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#回溯神仙</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="X-其它："><a href="#X-其它：" class="headerlink" title="(X)其它："></a>(X)其它：</h2><p>这种树形回溯或递归的思想666</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
