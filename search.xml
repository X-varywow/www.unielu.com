<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>小站的更新</title>
      <link href="posts/9280.html"/>
      <url>posts/9280.html</url>
      
        <content type="html"><![CDATA[<h3 id="一些网站："><a href="#一些网站：" class="headerlink" title="一些网站："></a>一些网站：</h3><p><strong>程序员接单</strong>：<br>程序员客栈：<a href="https://www.proginn.com/" target="_blank" rel="noopener">https://www.proginn.com/</a><br>码市：<a href="https://codemart.com/" target="_blank" rel="noopener">https://codemart.com/</a><br>开源众包：<a href="https://zb.oschina.net/" target="_blank" rel="noopener">https://zb.oschina.net/</a><br>智城外包：<a href="http://www.taskcity.com/" target="_blank" rel="noopener">http://www.taskcity.com/</a><br>实现网：<a href="http://www.taskcity.com/" target="_blank" rel="noopener">http://www.taskcity.com/</a><br>猿急送：<a href="https://www.yuanjisong.com/" target="_blank" rel="noopener">https://www.yuanjisong.com/</a></p><p><strong>大佬博客</strong>：<br>阮一峰：<a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/</a><br>稚晖：<a href="http://www.pengzhihui.xyz/" target="_blank" rel="noopener">http://www.pengzhihui.xyz/</a></p><p><strong>一些问答</strong>：<br><a href="https://www.zhihu.com/question/21759143" target="_blank" rel="noopener">选择 CS（计算机科学），还是 EE（电子工程）？</a><br><a href="https://www.zhihu.com/question/265112599?rf=29441922" target="_blank" rel="noopener">你有什么有单片机或开源硬件做的有意思的作品吗？</a></p><p><strong>比赛平台</strong>：<br><a href="https://developers.weixin.qq.com/community/competition" target="_blank" rel="noopener">微信小程序应用开发赛</a><br><a href="https://dasai.lanqiao.cn/" target="_blank" rel="noopener">蓝桥杯</a>，2020-12~2021-3<br><a href="http://gjcxcy.bjtu.edu.cn/Index.aspx" target="_blank" rel="noopener">国家级大学生创新创业训练计划平台</a><br><a href="https://developer.huaweicloud.com/" target="_blank" rel="noopener">华为云开发者</a><br><a href="https://www.kaggle.com/" target="_blank" rel="noopener">Kaggle</a></p><p><strong>其它网站</strong>：<br><a href="https://www.bookstack.cn/" target="_blank" rel="noopener">书栈网（开源书籍和文档分享）</a><br><a href="https://www.nowcoder.com/" target="_blank" rel="noopener">牛客网</a><br><a href="https://blog.csdn.net/rank/list" target="_blank" rel="noopener">CSDN热度排行榜⭐</a></p><p><strong>知乎高赞</strong>：<br><a href="https://www.zhihu.com/question/23561870/answer/757788237" target="_blank" rel="noopener">你在生活中有哪些观人术和识人技巧？</a>-155K<br><a href="https://www.zhihu.com/question/28626263/answer/41992632" target="_blank" rel="noopener">有哪些读书学不来，却很重要的素质？</a>-227K<br><a href="https://www.zhihu.com/question/22921426" target="_blank" rel="noopener">要怎样努力，才能成为很厉害的人？</a></p><h3 id="v3-0-——–-2020-12-06"><a href="#v3-0-——–-2020-12-06" class="headerlink" title="v3.0 ——– 2020.12.06"></a>v3.0 ——– <em>2020.12.06</em></h3><ol><li>更新<code>hexo</code>至 <strong>v5.2.0</strong></li><li>更新<code>matery</code>至 <strong>v2.0.0</strong></li></ol><h3 id="v2-7-——–-2020-10-9"><a href="#v2-7-——–-2020-10-9" class="headerlink" title="v2.7 ——– 2020.10.9"></a>v2.7 ——– <em>2020.10.9</em></h3><ol><li>更换域名为(<a href="http://www.unielu.com/">www.unielu.com</a>)</li></ol><h3 id="v2-5-——–-2020-8-05"><a href="#v2-5-——–-2020-8-05" class="headerlink" title="v2.5 ——– 2020.8.05"></a>v2.5 ——– <em>2020.8.05</em></h3><ol><li><code>npm install --save hexo-helper-live2d</code><br>PC端添加了右下角的小朋友</li></ol><h3 id="V2-3"><a href="#V2-3" class="headerlink" title="V2.3"></a>V2.3</h3><ol><li>文章配图更新</li><li>更改比较多的样式，以后好好写blog了</li></ol><h3 id="V1-8"><a href="#V1-8" class="headerlink" title="V1.8"></a>V1.8</h3><ol><li>更改移动端的一些问题</li><li>移动端有大白啦</li></ol><h3 id="V1-2"><a href="#V1-2" class="headerlink" title="V1.2"></a>V1.2</h3><ol><li>加入音乐功能</li><li>删除banner上的Github链接</li><li>更改一些图片</li></ol><h3 id="V1-0"><a href="#V1-0" class="headerlink" title="V1.0"></a>V1.0</h3><ol><li>小站成功上线啦，由于是静态网页托管在Github上，不足之处还请谅解。</li></ol>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 置顶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记224</title>
      <link href="posts/contest224.html"/>
      <url>posts/contest224.html</url>
      
        <content type="html"><![CDATA[<h2 id="二、同积元组"><a href="#二、同积元组" class="headerlink" title="二、同积元组"></a>二、同积元组</h2><p>给你一个由 <strong>不同</strong> 正整数组成的数组 <code>nums</code> ，请你返回满足 <code>a * b = c * d</code> 的元组 <code>(a, b, c, d)</code> 的数量。其中 <code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> 都是 <code>nums</code> 中的元素，且 <code>a != b != c != d</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">tupleSameProduct</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        dic<span class="token operator">=</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                dic<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(dic)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> dic<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            n<span class="token operator">=</span>len<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> n<span class="token punctuation">:</span>                ans<span class="token operator">+=</span>comb<span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、重新排列后的最大子矩阵"><a href="#三、重新排列后的最大子矩阵" class="headerlink" title="三、重新排列后的最大子矩阵"></a>三、重新排列后的最大子矩阵</h2><p>给你一个二进制矩阵 <code>matrix</code> ，它的大小为 <code>m x n</code> ，你可以将 <code>matrix</code> 中的 列 按任意顺序重新排列。</p><p>请你返回最优方案下将 <code>matrix</code> 重新排列后，全是 <code>1</code> 的子矩阵面积。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">largestSubmatrix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        m<span class="token punctuation">,</span>n<span class="token operator">=</span>len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        pre<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#记住每个位置往下可以连多少个</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token number">-1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span>pre<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span> pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>        <span class="token comment" spellcheck="true">#print(pre)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#枚举更新</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#二维暂存数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再提一下另一道题：<br><a href="https://leetcode-cn.com/problems/largest-rectangle-in-histogram/" target="_blank" rel="noopener">84.柱状图中最大的矩形</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#仿本题做法：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">largestRectangleArea</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> heights<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        tmp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        max_height<span class="token operator">=</span>max<span class="token punctuation">(</span>heights<span class="token punctuation">)</span>        <span class="token keyword">for</span> height <span class="token keyword">in</span> heights<span class="token punctuation">:</span>            cur<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>max_height<span class="token operator">-</span>height<span class="token punctuation">)</span>            tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> ceil <span class="token keyword">in</span> zip<span class="token punctuation">(</span><span class="token operator">*</span>tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>            num<span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>ceil<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> ceil<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                     num<span class="token operator">=</span>ceil<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                    cnt<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span> cnt<span class="token operator">=</span><span class="token number">0</span>                ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>num<span class="token operator">*</span>cnt<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#超时，太惨了，</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">largestRectangleArea</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> heights<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        heights<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        ans <span class="token operator">=</span> <span class="token number">0</span>         <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>heights<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> heights<span class="token punctuation">[</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                h <span class="token operator">=</span> heights<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>                w <span class="token operator">=</span> i <span class="token operator">-</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span>                ans <span class="token operator">=</span> max<span class="token punctuation">(</span>h<span class="token operator">*</span>w<span class="token punctuation">,</span> ans<span class="token punctuation">)</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、猫和老鼠-II"><a href="#四、猫和老鼠-II" class="headerlink" title="四、猫和老鼠 II"></a>四、猫和老鼠 II</h2><p><a href="https://leetcode-cn.com/problems/cat-and-mouse-ii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/cat-and-mouse-ii/</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canMouseWin</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">,</span> catJump<span class="token punctuation">:</span> int<span class="token punctuation">,</span> mouseJump<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        m<span class="token punctuation">,</span> n  <span class="token operator">=</span> len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        grid  <span class="token operator">=</span> <span class="token punctuation">[</span>list<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token keyword">for</span> t <span class="token keyword">in</span> grid<span class="token punctuation">]</span>        isin  <span class="token operator">=</span> <span class="token keyword">lambda</span> i<span class="token punctuation">,</span> j <span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">&lt;=</span>i<span class="token operator">&lt;</span>m <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>j<span class="token operator">&lt;</span>n        get_h <span class="token operator">=</span> <span class="token keyword">lambda</span> i<span class="token punctuation">,</span> j <span class="token punctuation">:</span> i <span class="token operator">*</span> n <span class="token operator">+</span> j        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'C'</span> <span class="token punctuation">:</span>                    cat_pos <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>                    grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span>                <span class="token keyword">elif</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'M'</span> <span class="token punctuation">:</span>                    mouse_pos <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>                    grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span>                <span class="token keyword">elif</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'F'</span> <span class="token punctuation">:</span>                    food_pos <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>                    grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span>        <span class="token keyword">def</span> <span class="token function">visit</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> dist<span class="token punctuation">)</span> <span class="token punctuation">:</span>            to_visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">]</span><span class="token punctuation">]</span>            visited <span class="token operator">=</span> <span class="token punctuation">{</span>get_h<span class="token punctuation">(</span><span class="token operator">*</span>start<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span>            <span class="token keyword">while</span> len<span class="token punctuation">(</span>to_visit<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">:</span>                ct<span class="token punctuation">,</span> <span class="token punctuation">(</span>ni<span class="token punctuation">,</span> nj<span class="token punctuation">)</span> <span class="token operator">=</span> to_visit<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                dirctions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>                <span class="token keyword">for</span> dt <span class="token keyword">in</span> dirctions <span class="token punctuation">:</span>                    <span class="token keyword">for</span> step <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> dist<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>                        xi<span class="token punctuation">,</span> xj <span class="token operator">=</span> ni<span class="token operator">+</span>dt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>step<span class="token punctuation">,</span> nj<span class="token operator">+</span>dt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>step                        <span class="token keyword">if</span> <span class="token operator">not</span> isin<span class="token punctuation">(</span>xi<span class="token punctuation">,</span> xj<span class="token punctuation">)</span> <span class="token punctuation">:</span>                            <span class="token keyword">break</span>                        <span class="token keyword">if</span> grid<span class="token punctuation">[</span>xi<span class="token punctuation">]</span><span class="token punctuation">[</span>xj<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'#'</span> <span class="token punctuation">:</span>                            <span class="token keyword">break</span>                        <span class="token keyword">if</span> get_h<span class="token punctuation">(</span>xi<span class="token punctuation">,</span> xj<span class="token punctuation">)</span> <span class="token keyword">in</span> visited <span class="token punctuation">:</span>                            <span class="token keyword">continue</span>                        visited<span class="token punctuation">[</span>get_h<span class="token punctuation">(</span>xi<span class="token punctuation">,</span> xj<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> ct<span class="token operator">+</span><span class="token number">1</span>                        to_visit<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>ct<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>xi<span class="token punctuation">,</span> xj<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            end_hash <span class="token operator">=</span> get_h<span class="token punctuation">(</span><span class="token operator">*</span>end<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">if</span> <span class="token operator">not</span> end_hash <span class="token keyword">in</span> visited <span class="token keyword">else</span> visited<span class="token punctuation">[</span>end_hash<span class="token punctuation">]</span>        dis_cat   <span class="token operator">=</span> visit<span class="token punctuation">(</span>cat_pos<span class="token punctuation">,</span> food_pos<span class="token punctuation">,</span> catJump<span class="token punctuation">)</span>        dis_mouse <span class="token operator">=</span> visit<span class="token punctuation">(</span>mouse_pos<span class="token punctuation">,</span> food_pos<span class="token punctuation">,</span> mouseJump<span class="token punctuation">)</span>        <span class="token keyword">if</span> dis_mouse <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> dis_mouse <span class="token operator">></span> <span class="token number">1000</span> <span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>dis_cat<span class="token punctuation">)</span>        @functools<span class="token punctuation">.</span>lru_cache<span class="token punctuation">(</span>None<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span>cpos<span class="token operator">=</span>cat_pos<span class="token punctuation">,</span> mpos<span class="token operator">=</span>mouse_pos<span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'m'</span><span class="token punctuation">,</span> nt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>            <span class="token keyword">assert</span> action <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> mpos <span class="token operator">==</span> food_pos <span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> cpos <span class="token operator">==</span> food_pos <span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> mpos <span class="token operator">==</span> cpos <span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> nt <span class="token operator">></span> max<span class="token punctuation">(</span>dis_cat<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> action <span class="token operator">==</span> <span class="token string">'m'</span> <span class="token punctuation">:</span>                ni<span class="token punctuation">,</span> nj <span class="token operator">=</span> mpos                dirctions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>                to_use <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token keyword">for</span> dt <span class="token keyword">in</span> dirctions <span class="token punctuation">:</span>                    <span class="token keyword">for</span> step <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mouseJump<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>                        xi<span class="token punctuation">,</span> xj <span class="token operator">=</span> ni<span class="token operator">+</span>dt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>step<span class="token punctuation">,</span> nj<span class="token operator">+</span>dt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>step                        <span class="token keyword">if</span> <span class="token operator">not</span> isin<span class="token punctuation">(</span>xi<span class="token punctuation">,</span> xj<span class="token punctuation">)</span> <span class="token punctuation">:</span>                            <span class="token keyword">break</span>                        <span class="token keyword">if</span> grid<span class="token punctuation">[</span>xi<span class="token punctuation">]</span><span class="token punctuation">[</span>xj<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'#'</span> <span class="token punctuation">:</span>                            <span class="token keyword">break</span>                        to_use<span class="token punctuation">.</span>append<span class="token punctuation">(</span>solve<span class="token punctuation">(</span>cpos<span class="token operator">=</span>cpos<span class="token punctuation">,</span> mpos<span class="token operator">=</span><span class="token punctuation">(</span>xi<span class="token punctuation">,</span> xj<span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'c'</span><span class="token punctuation">,</span> nt<span class="token operator">=</span>nt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> any<span class="token punctuation">(</span>to_use<span class="token punctuation">)</span> <span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">True</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> action <span class="token operator">==</span> <span class="token string">'c'</span> <span class="token punctuation">:</span>                ni<span class="token punctuation">,</span> nj <span class="token operator">=</span> cpos                dirctions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>                to_use <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token keyword">for</span> dt <span class="token keyword">in</span> dirctions <span class="token punctuation">:</span>                    <span class="token keyword">for</span> step <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> catJump<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>                        xi<span class="token punctuation">,</span> xj <span class="token operator">=</span> ni<span class="token operator">+</span>dt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>step<span class="token punctuation">,</span> nj<span class="token operator">+</span>dt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>step                        <span class="token keyword">if</span> <span class="token operator">not</span> isin<span class="token punctuation">(</span>xi<span class="token punctuation">,</span> xj<span class="token punctuation">)</span> <span class="token punctuation">:</span>                            <span class="token keyword">break</span>                        <span class="token keyword">if</span> grid<span class="token punctuation">[</span>xi<span class="token punctuation">]</span><span class="token punctuation">[</span>xj<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'#'</span> <span class="token punctuation">:</span>                            <span class="token keyword">break</span>                        to_use<span class="token punctuation">.</span>append<span class="token punctuation">(</span>solve<span class="token punctuation">(</span>cpos<span class="token operator">=</span><span class="token punctuation">(</span>xi<span class="token punctuation">,</span> xj<span class="token punctuation">)</span><span class="token punctuation">,</span> mpos<span class="token operator">=</span>mpos<span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'m'</span><span class="token punctuation">,</span> nt<span class="token operator">=</span>nt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token operator">not</span> all<span class="token punctuation">(</span>to_use<span class="token punctuation">)</span> <span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        solve<span class="token punctuation">.</span>cache_clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> solve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米iot开发</title>
      <link href="posts/milot.html"/>
      <url>posts/milot.html</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title="preface"></a><em>preface</em></h2><p>这个主要是为了：1.大创调用手机的语音控制功能 2.软硬件协同开发<br>目标：通过arduino物联网+安卓APP做事</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><code>Xiaomi Vela</code> 是小米基于NuttX打造的物联网嵌入式软件平台，Vela在各种物联网硬件平台上提供统一的软件服务。</p><ul><li>Xiaomi Vela对系统资源的要求远小于Linux，但是可以提供和Linux系统相近的功能和性能，可以被看作很多低端Linux系统的替代方案，切换到Xiaomi Vela以后，可以降低硬件成本，提升产品整体的性价比。</li></ul><p>关于NuttX操作系统，一个成熟的RTOS（实时操作系统）</p><hr><p>产品支持米家APP控制，支持的设备联网类型，包括：Wi-Fi、蓝牙、蓝牙Mesh、ZigBee、3-5G</p><p>参考网址：</p><ul><li><a href="https://iot.mi.com/vela" target="_blank" rel="noopener">https://iot.mi.com/vela</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 物联网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大创</title>
      <link href="posts/666.html"/>
      <url>posts/666.html</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title="preface"></a><em>preface</em></h2><p>关于<strong>报销</strong>，目前大概率申报成功+报销，听说报销好麻烦，最坏打算吧，当作自己的创业训练项目，把别人的破事加在自己身上是真的憨憨。</p><p>关于学校资源，NLP也是要靠自己学啊，反正互联网能给的已经超过老师了，没有业界大佬带的情况下，自己动手吧。</p><p>关于<strong>这个项目</strong></p><ul><li>硬件先做个基本模型够了，以后的（精度）以后再说</li><li>软件：手机用小爱同学（小米物联网）或蓝牙APP(自己做)控制</li></ul><h2 id="1-项目概述"><a href="#1-项目概述" class="headerlink" title="1.项目概述"></a>1.项目概述</h2><p><strong>开发目的</strong>（创新点）：</p><ol><li>自平衡系统的初步应用</li><li>让手机能够动起来，语音的控制实现运动，更加智能</li><li>先实现小爱同学的语音控制，默认自平衡的话，小爱实现运动</li><li>不想扯啊，如果面向应用的话，人脸跟随（直播）。。。如果非要广告口号的话：让手机更加智能</li></ol><p><strong>需要的技术</strong>：</p><ol><li>自平衡</li><li>小米物联网嵌入式开发（当前用小米语音、xiaomi-vela的解决方案）</li></ol><p><strong>实际可以实现功能</strong>：</p><ol><li>手机可以立起来，cool</li><li>手机可以旋转，平面运动</li><li>手机或许可以更像个机器人</li></ol><p><strong>未来研究</strong>：</p><ol><li>与智能手机更多地协同开发，例如，让手机公司设计API，令手机壳能够共享手机的硬件资源和软件资源，让智能手机成为更智能的机器人</li><li>与人机交互更多地协同开发，例如，加上传感器防摔，加上智能手机不能带上的(影响轻薄的)</li><li>手机架本身技术的迭代，更加精密，更加小巧灵活</li></ol><h2 id="2-需要的硬件"><a href="#2-需要的硬件" class="headerlink" title="2.需要的硬件"></a>2.需要的硬件</h2><ul><li>带减速<strong>电机</strong>（带编码器可测速）的<strong>底盘</strong>，<a href="https://item.taobao.com/item.htm?spm=a1z0d.6639537.1997196601.28.1fd17484vCftIy&id=587401653487" target="_blank" rel="noopener">淘宝地址1</a></li><li><strong>MPU6050</strong>（陀螺仪加速度传感器），<a href="https://detail.tmall.com/item.htm?spm=a1z0d.6639537.1997196601.4.ead47484Y2yrYs&id=21261751847" target="_blank" rel="noopener">淘宝地址1</a></li><li>arduino<strong>主芯片</strong>，<a href="https://detail.tmall.com/item.htm?spm=a1z0d.6639537.1997196601.70.1fd17484vCftIy&id=595282328171" target="_blank" rel="noopener">淘宝地址1</a></li><li>其它：电线、</li></ul><h2 id="3-目前的问题"><a href="#3-目前的问题" class="headerlink" title="3.目前的问题"></a>3.目前的问题</h2><p>目前先收集资料，，，，</p><h2 id="项目历程"><a href="#项目历程" class="headerlink" title="项目历程"></a>项目历程</h2><p><code>Alicia 1.0</code></p><p>先实现基本模型，及平衡</p><h2 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4.参考资料"></a>4.参考资料</h2><p>平衡小机器人：<a href="http://www.pengzhihui.xyz/2015/12/09/nano/" target="_blank" rel="noopener">http://www.pengzhihui.xyz/2015/12/09/nano/</a></p><p>一个论文：<a href="https://wenku.baidu.com/view/c9ff0ffd770bf78a652954e4.html?rec_flag=default" target="_blank" rel="noopener">https://wenku.baidu.com/view/c9ff0ffd770bf78a652954e4.html?rec_flag=default</a></p><p>小米物联网开发者平台：<a href="https://iot.mi.com/vela" target="_blank" rel="noopener">https://iot.mi.com/vela</a></p><h2 id="参考项目"><a href="#参考项目" class="headerlink" title="参考项目"></a>参考项目</h2><p>① <a href="http://www.pengzhihui.xyz/2015/12/09/nano/" target="_blank" rel="noopener">蛋黄与nano —— 一个小巧的自平衡机器</a></p><p>② <a href="http://nicekwell.net/blog/20180118/zi-xing-che-ping-heng-yuan-li.html" target="_blank" rel="noopener">平衡自行车</a></p><p>③<a href="http://www.elecfans.com/d/1047572.html" target="_blank" rel="noopener">自平衡</a></p><p>④<a href="http://www.pengzhihui.xyz/2019/07/15/pico/" target="_blank" rel="noopener">语音助手Pico</a></p><p>自平衡教程1：<a href="https://blog.csdn.net/jsgaobiao/article/details/50643037" target="_blank" rel="noopener">https://blog.csdn.net/jsgaobiao/article/details/50643037</a><br><a href="https://blog.csdn.net/jsgaobiao/article/details/50640523?utm_medium=distribute.pc_relevant.none-task-blog-searchFromBaidu-11.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-searchFromBaidu-11.control" target="_blank" rel="noopener">自平衡教程2</a><br><a href="https://blog.csdn.net/jsgaobiao/article/details/50759878?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-2&spm=1001.2101.3001.4242" target="_blank" rel="noopener">自平衡教程3</a></p><p><a href="https://blog.csdn.net/zhaoyuaiweide/article/details/54573676" target="_blank" rel="noopener">位置PID分析即调参</a></p><p>仿：<a href="https://zhuanlan.zhihu.com/p/105208598" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/105208598</a></p><p>磁悬浮。。。</p><p>一些论文：<br><a href="https://wenku.baidu.com/view/c9ff0ffd770bf78a652954e4.html?rec_flag=default" target="_blank" rel="noopener">https://wenku.baidu.com/view/c9ff0ffd770bf78a652954e4.html?rec_flag=default</a></p>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题(1月)</title>
      <link href="posts/hc6t.html"/>
      <url>posts/hc6t.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-10"><a href="#1-10" class="headerlink" title="1-10"></a><code>1-10</code></h2><h3 id="605-种花问题"><a href="#605-种花问题" class="headerlink" title="605.种花问题"></a>605.种花问题</h3><p><a href="https://leetcode-cn.com/problems/can-place-flowers/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/can-place-flowers/</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canPlaceFlowers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> f<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        f<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>        ans<span class="token punctuation">,</span>tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token punctuation">:</span>                ans<span class="token operator">+=</span><span class="token punctuation">(</span>tmp<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>  <span class="token comment" spellcheck="true">#整数除</span>                tmp<span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> tmp<span class="token operator">+=</span><span class="token number">1</span>            <span class="token comment" spellcheck="true">#print(ans)</span>        <span class="token keyword">return</span> ans<span class="token operator">>=</span>n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239.滑动窗口最大值"></a>239.滑动窗口最大值</h3><p><a href="https://leetcode-cn.com/problems/sliding-window-maximum/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sliding-window-maximum/</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        q<span class="token operator">=</span>collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> q <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>nums<span class="token punctuation">[</span>q<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> q <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>nums<span class="token punctuation">[</span>q<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token operator">-</span>k<span class="token punctuation">:</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># q 用于存放大值的索引</span><span class="token comment" spellcheck="true"># nums[q[0]]总是当前窗口最大值，并且后面对应的num递减</span><span class="token comment" spellcheck="true">#单调双端队列</span><span class="token comment" spellcheck="true">#deque: 类似list的容器，实现了在两端快速append和pop</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="86-分隔链表"><a href="#86-分隔链表" class="headerlink" title="86.分隔链表"></a>86.分隔链表</h3><p><a href="https://leetcode-cn.com/problems/partition-list/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/partition-list/</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        small<span class="token punctuation">,</span>large<span class="token operator">=</span>ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span>        sp<span class="token punctuation">,</span>lp<span class="token punctuation">,</span>p<span class="token operator">=</span>small<span class="token punctuation">,</span>large<span class="token punctuation">,</span>head        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            <span class="token keyword">if</span> p<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>x<span class="token punctuation">:</span>                sp<span class="token punctuation">.</span>next<span class="token operator">=</span>p                sp<span class="token operator">=</span>sp<span class="token punctuation">.</span>next            <span class="token keyword">else</span><span class="token punctuation">:</span>                lp<span class="token punctuation">.</span>next<span class="token operator">=</span>p                lp<span class="token operator">=</span>lp<span class="token punctuation">.</span>next            p<span class="token operator">=</span>p<span class="token punctuation">.</span>next        sp<span class="token punctuation">.</span>next<span class="token operator">=</span>large<span class="token punctuation">.</span>next        lp<span class="token punctuation">.</span>next<span class="token operator">=</span>None        <span class="token keyword">return</span> small<span class="token punctuation">.</span>next<span class="token comment" spellcheck="true"># 熟悉一下python中的链表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="509-斐波那契数"><a href="#509-斐波那契数" class="headerlink" title="509.斐波那契数"></a>509.斐波那契数</h3><p><a href="https://leetcode-cn.com/problems/fibonacci-number/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/fibonacci-number/</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#functools模块中的缓存</span>    @lru_cache<span class="token punctuation">(</span>None<span class="token punctuation">)</span>      <span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> n        <span class="token keyword">return</span> self<span class="token punctuation">.</span>fib<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>fib<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="830-较大分组的位置"><a href="#830-较大分组的位置" class="headerlink" title="830.较大分组的位置"></a>830.较大分组的位置</h3><p><a href="https://leetcode-cn.com/problems/positions-of-large-groups/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/positions-of-large-groups/</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">largeGroupPositions</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        left<span class="token punctuation">,</span>right<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> right<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> right<span class="token operator">&lt;</span>n <span class="token operator">and</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#right&lt;n的位置</span>            <span class="token comment" spellcheck="true">#解决了后面是末尾的问题</span>                right<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> right<span class="token operator">-</span>left<span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">:</span> ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>left<span class="token punctuation">,</span>right<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(left,right)</span>            left<span class="token operator">=</span>right        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 双指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="309-除法求值⭐"><a href="#309-除法求值⭐" class="headerlink" title="309.除法求值⭐"></a>309.除法求值⭐</h3><p><a href="https://leetcode-cn.com/problems/evaluate-division/solution/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/evaluate-division/solution/</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 一、dfs做法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">calcEquation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> equations<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> values<span class="token punctuation">:</span> List<span class="token punctuation">[</span>float<span class="token punctuation">]</span><span class="token punctuation">,</span> queries<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>float<span class="token punctuation">]</span><span class="token punctuation">:</span>        dic<span class="token operator">=</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>dict<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#值也为字典</span>        <span class="token keyword">for</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span>val <span class="token keyword">in</span> zip<span class="token punctuation">(</span>equations<span class="token punctuation">,</span>values<span class="token punctuation">)</span><span class="token punctuation">:</span>            dic<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span>val            dic<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span>val        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>visited<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> b <span class="token keyword">in</span> dic<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">return</span> dic<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span>            <span class="token keyword">for</span> c <span class="token keyword">in</span> dic<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">:</span>                 <span class="token comment" spellcheck="true">#开始遍历寻找</span>                <span class="token keyword">if</span> c <span class="token operator">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span>                    visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>c<span class="token punctuation">)</span>                    val<span class="token operator">=</span>bt<span class="token punctuation">(</span>c<span class="token punctuation">,</span>b<span class="token punctuation">,</span>visited<span class="token punctuation">)</span>                    <span class="token keyword">if</span> val<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> dic<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">*</span>val            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token keyword">in</span> queries<span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dfs<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 二、带权并查集作法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">calcEquation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> equations<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> values<span class="token punctuation">:</span> List<span class="token punctuation">[</span>float<span class="token punctuation">]</span><span class="token punctuation">,</span> queries<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>float<span class="token punctuation">]</span><span class="token punctuation">:</span>        f <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">#记录每个结点的root</span>        d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">#记录每个结点到root的权</span>        <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#找到x的根节点并整理</span>            f<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token punctuation">)</span>            d<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> x <span class="token operator">!=</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>                t <span class="token operator">=</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span>                f<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> find<span class="token punctuation">(</span>t<span class="token punctuation">)</span>                d<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">*=</span> d<span class="token punctuation">[</span>t<span class="token punctuation">]</span>                <span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            <span class="token keyword">return</span> x         <span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>            a<span class="token punctuation">,</span> b <span class="token operator">=</span> find<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">,</span> find<span class="token punctuation">(</span>B<span class="token punctuation">)</span>            <span class="token keyword">if</span> a <span class="token operator">!=</span> b<span class="token punctuation">:</span>                f<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> b   <span class="token comment" spellcheck="true"># a 的根结点是b</span>                d<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>B<span class="token punctuation">]</span> <span class="token operator">/</span> d<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">*</span> value  <span class="token comment" spellcheck="true"># a在b树上的权</span>        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token operator">not</span> <span class="token keyword">in</span> f <span class="token operator">or</span> y <span class="token operator">not</span> <span class="token keyword">in</span> f<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1.0</span>            a<span class="token punctuation">,</span> b <span class="token operator">=</span> find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> find<span class="token punctuation">(</span>y<span class="token punctuation">)</span>            <span class="token keyword">if</span> a <span class="token operator">!=</span> b<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1.0</span> <span class="token comment" spellcheck="true">#ab不在一棵树</span>            <span class="token keyword">return</span> d<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">/</span> d<span class="token punctuation">[</span>y<span class="token punctuation">]</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>nums <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>equations<span class="token punctuation">)</span><span class="token punctuation">:</span>            union<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> queries<span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>check<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#第一反应赋值，不行</span><span class="token comment" spellcheck="true">#并查集是一种树型的数据结构，用于处理一些不相交集合（disjoint sets）的合并及查询问题。常常在使用中以森林来表示。</span><span class="token comment" spellcheck="true"># dic.setdefault(key,default=None) 可类似于 dic.get()</span><span class="token comment" spellcheck="true"># 如果键不存在于字典中，将会添加键并将值设为默认值。</span><span class="token comment" spellcheck="true"># 并查集不懂</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="547-省份数量"><a href="#547-省份数量" class="headerlink" title="547.省份数量"></a>547.省份数量</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findCircleNum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> isConnected<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        dic<span class="token operator">=</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>set<span class="token punctuation">)</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>isConnected<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                 <span class="token comment" spellcheck="true">#建立图</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">!=</span>j <span class="token operator">and</span> isConnected<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                    dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>j<span class="token punctuation">)</span>                    dic<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        visited<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span>                visited<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    dfs<span class="token punctuation">(</span>j<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#查找省份</span>            <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span>                dfs<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                ans<span class="token operator">+=</span><span class="token number">1</span>        <span class="token comment" spellcheck="true">#print(visited)</span>        <span class="token comment" spellcheck="true">#print([i for i in dic.items()])</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># hh~</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="189-旋转数组"><a href="#189-旋转数组" class="headerlink" title="189.旋转数组"></a>189.旋转数组</h3><p><a href="https://leetcode-cn.com/problems/rotate-array/submissions/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/rotate-array/submissions/</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rotate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify nums in-place instead.        """</span>        k<span class="token operator">%=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        k<span class="token operator">*=</span><span class="token operator">-</span><span class="token number">1</span>        nums<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nums[:]会指向新的内存空间，不能直接nums</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="123-买卖股票的最佳时机-III"><a href="#123-买卖股票的最佳时机-III" class="headerlink" title="123.买卖股票的最佳时机 III"></a>123.买卖股票的最佳时机 III</h3><p>一份股票，两次交易，求最大利润</p><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> prices<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>prices<span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#DP表为最大利润</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            pre_max<span class="token operator">=</span><span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                pre_max<span class="token operator">=</span>max<span class="token punctuation">(</span>pre_max<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>pre_max<span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#这个DP的模板可以解决很多问题了</span><span class="token comment" spellcheck="true">#pre_max=max(pre_max,dp[k-1][i-1]-prices[i])状态转移有些抽象啊</span><span class="token comment" spellcheck="true">#[3,3,5,0,0,3,1,4]的DP表：</span><span class="token comment" spellcheck="true">#[[0, 0, 0, 0, 0, 0, 0, 0],</span><span class="token comment" spellcheck="true"># [0, 0, 2, 2, 2, 3, 3, 4],</span><span class="token comment" spellcheck="true"># [0, 0, 2, 2, 2, 5, 5, 6]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n1<span class="token punctuation">,</span> y1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>float<span class="token punctuation">(</span><span class="token string">"INF"</span><span class="token punctuation">)</span>        n2<span class="token punctuation">,</span> y2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>float<span class="token punctuation">(</span><span class="token string">"INF"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> prices<span class="token punctuation">:</span>            <span class="token keyword">if</span> y2 <span class="token operator">+</span> p <span class="token operator">></span> n2<span class="token punctuation">:</span>                n2 <span class="token operator">=</span> y2 <span class="token operator">+</span> p             <span class="token keyword">if</span> n1 <span class="token operator">-</span> p <span class="token operator">></span> y2<span class="token punctuation">:</span>                y2 <span class="token operator">=</span> n1 <span class="token operator">-</span> p             <span class="token keyword">if</span> y1 <span class="token operator">+</span> p <span class="token operator">></span> n1<span class="token punctuation">:</span>                n1 <span class="token operator">=</span> y1 <span class="token operator">+</span> p             <span class="token keyword">if</span> <span class="token operator">-</span>p <span class="token operator">></span> y1<span class="token punctuation">:</span>                y1 <span class="token operator">=</span> <span class="token operator">-</span>p            <span class="token comment" spellcheck="true"># y1, n1, y2, n2 = max(y1, -p), max(n1, y1 + p), max(y2, n1 - p), max(n2, y2 + p)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="228-汇总区间"><a href="#228-汇总区间" class="headerlink" title="228.汇总区间"></a>228.汇总区间</h3><p><a href="https://leetcode-cn.com/problems/summary-ranges/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/summary-ranges/</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">summaryRanges</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        left<span class="token punctuation">,</span>right<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> right<span class="token operator">&lt;</span>n<span class="token punctuation">:</span>            <span class="token keyword">while</span> right<span class="token operator">&lt;</span>n<span class="token number">-1</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                  right<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> right<span class="token operator">==</span>left<span class="token punctuation">:</span>                 ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                 ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'->'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            right<span class="token operator">+=</span><span class="token number">1</span>            left<span class="token operator">=</span>right           <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># （两个while）+（right指针放区间内的右侧），解决了：后面读不出来，或者list访问越界</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-20"><a href="#11-20" class="headerlink" title="11-20"></a><code>11-20</code></h2><h3 id="1202-交换字符串中的元素⭐"><a href="#1202-交换字符串中的元素⭐" class="headerlink" title="1202.交换字符串中的元素⭐"></a>1202.交换字符串中的元素⭐</h3><p>给你一个字符串 <code>s</code>，以及该字符串中的一些「索引对」数组 <code>pairs</code>，其中 <code>pairs[i] = [a, b]</code> 表示字符串中的两个索引（编号从 0 开始）。</p><p>你可以 <strong>任意多次交换</strong> 在 <code>pairs</code> 中任意一对索引处的字符。</p><p>返回在经过若干次交换后，<code>s</code> 可以变成的按字典序最小的字符串。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">smallestStringWithSwaps</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">,</span> pairs<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        length<span class="token operator">=</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        p<span class="token operator">=</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#初始化，只记录根节点</span>        <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> x<span class="token operator">!=</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>                p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">[</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span>                x<span class="token operator">=</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            <span class="token keyword">return</span> x        <span class="token keyword">for</span> a_id<span class="token punctuation">,</span>b_id <span class="token keyword">in</span> pairs<span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#开始合并</span>            roota <span class="token operator">=</span> find<span class="token punctuation">(</span>a_id<span class="token punctuation">)</span>            rootb <span class="token operator">=</span> find<span class="token punctuation">(</span>b_id<span class="token punctuation">)</span>            <span class="token keyword">if</span> roota <span class="token operator">==</span> rootb<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            p<span class="token punctuation">[</span>rootb<span class="token punctuation">]</span> <span class="token operator">=</span> roota        <span class="token comment" spellcheck="true"># tmp是相同根的容器</span>        tmp<span class="token operator">=</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>            root<span class="token operator">=</span>find<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            tmp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        ans<span class="token operator">=</span>list<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">for</span> same_idxs <span class="token keyword">in</span> tmp<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            same_idxs<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>            select_str<span class="token operator">=</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> same_idxs<span class="token punctuation">]</span>            select_str<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i<span class="token punctuation">,</span>idx <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>same_idxs<span class="token punctuation">)</span><span class="token punctuation">:</span>                ans<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>select_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#关于本题：</span><span class="token comment" spellcheck="true">#1.当成一个图问题</span><span class="token comment" spellcheck="true">#2.索引对的交换具有传递性</span><span class="token comment" spellcheck="true">#3.对于连通的索引直接排序，不连通的不能变动</span><span class="token comment" spellcheck="true">#关于并查集：</span><span class="token comment" spellcheck="true">#并查集解决一些元素分组问题，利用合并查询处理不相交的集合</span><span class="token comment" spellcheck="true">#路径压缩：把节点的父节点设为根节点</span><span class="token comment" spellcheck="true">#参考：https://zhuanlan.zhihu.com/p/93647900/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#暴力超时：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">smallestStringWithSwaps</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">,</span> pairs<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        q<span class="token operator">=</span>deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> q<span class="token punctuation">:</span>            tmp<span class="token operator">=</span>q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>            <span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span> pairs<span class="token punctuation">:</span>                t<span class="token operator">=</span>tmp<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>                t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">if</span> t <span class="token operator">not</span> <span class="token keyword">in</span> ans<span class="token punctuation">:</span>                     q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>        <span class="token keyword">return</span> min<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> ans<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="684-冗余连接"><a href="#684-冗余连接" class="headerlink" title="684.冗余连接"></a>684.冗余连接</h3><p><a href="https://leetcode-cn.com/problems/redundant-connection/submissions/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/redundant-connection/submissions/</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findRedundantConnection</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> edges<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        dic<span class="token operator">=</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>set<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>edges<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>i<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#并查集初始化</span>        <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> edges<span class="token punctuation">:</span>            <span class="token keyword">if</span> dic<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span>dic<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">:</span>                dic<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">|</span><span class="token operator">=</span>dic<span class="token punctuation">[</span>y<span class="token punctuation">]</span>      <span class="token comment" spellcheck="true">#合并集合</span>                <span class="token keyword">for</span> z <span class="token keyword">in</span> dic<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">:</span>                    dic<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token operator">=</span>dic<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                   <span class="token comment" spellcheck="true">#x,y会形成闭环</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#无向图</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="803-打砖块"><a href="#803-打砖块" class="headerlink" title="803.打砖块"></a>803.打砖块</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#并查集，或DFS</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1232-缀点成线"><a href="#1232-缀点成线" class="headerlink" title="1232.缀点成线"></a>1232.缀点成线</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">checkStraightLine</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> coordinates<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        x1<span class="token punctuation">,</span>y1<span class="token operator">=</span>coordinates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>coordinates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        x2<span class="token punctuation">,</span>y2<span class="token operator">=</span>coordinates<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> coordinates<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> xi<span class="token punctuation">,</span>yi <span class="token keyword">in</span> coordinates<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>yi<span class="token operator">-</span>y1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x2<span class="token operator">-</span>x1<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token punctuation">(</span>y2<span class="token operator">-</span>y1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>xi<span class="token operator">-</span>x1<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-31"><a href="#21-31" class="headerlink" title="21-31"></a><code>21-31</code></h2><h2 id="wuliao"><a href="#wuliao" class="headerlink" title="wuliao"></a>wuliao</h2><h3 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3.无重复字符的最长子串"></a>3.无重复字符的最长子串</h3><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        q<span class="token operator">=</span>collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> q<span class="token punctuation">:</span>                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">while</span> q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>                q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>len<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#参照239滑动窗口问题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="29-整数相除"><a href="#29-整数相除" class="headerlink" title="29.整数相除"></a>29.整数相除</h3><p>不用乘除，mod</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">divide</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dividend<span class="token punctuation">:</span> int<span class="token punctuation">,</span> divisor<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        flag<span class="token operator">=</span>dividend<span class="token operator">*</span>divisor<span class="token operator">&lt;</span><span class="token number">0</span>        dividend<span class="token operator">=</span>abs<span class="token punctuation">(</span>dividend<span class="token punctuation">)</span>        divisor<span class="token operator">=</span>abs<span class="token punctuation">(</span>divisor<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">div</span><span class="token punctuation">(</span>dividend<span class="token punctuation">,</span> divisor<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> dividend<span class="token operator">&lt;</span>divisor<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>            tmp<span class="token operator">=</span>divisor            cnt<span class="token operator">=</span><span class="token number">1</span>            <span class="token keyword">while</span> tmp<span class="token operator">+</span>tmp<span class="token operator">&lt;</span>dividend<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#2倍法找邻值</span>                tmp<span class="token operator">+=</span>tmp                cnt<span class="token operator">+=</span>cnt            <span class="token keyword">return</span> cnt<span class="token operator">+</span>div<span class="token punctuation">(</span>dividend<span class="token operator">-</span>tmp<span class="token punctuation">,</span>divisor<span class="token punctuation">)</span>        ans<span class="token operator">=</span>div<span class="token punctuation">(</span>dividend<span class="token punctuation">,</span>divisor<span class="token punctuation">)</span>        <span class="token keyword">if</span> flag<span class="token punctuation">:</span> ans<span class="token operator">*=</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">return</span> ans <span class="token keyword">if</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>ans<span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token comment" spellcheck="true">#题意溢出更改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除链表中的结点"><a href="#删除链表中的结点" class="headerlink" title="删除链表中的结点"></a>删除链表中的结点</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        node<span class="token punctuation">.</span>val<span class="token operator">=</span>node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val        node<span class="token punctuation">.</span>next<span class="token operator">=</span>node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token comment" spellcheck="true"># 等效地删除了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表倒数第k个结点"><a href="#链表倒数第k个结点" class="headerlink" title="链表倒数第k个结点"></a>链表倒数第k个结点</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">kthToLast</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        slow<span class="token punctuation">,</span>fast<span class="token operator">=</span>head<span class="token punctuation">,</span>head        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next        <span class="token keyword">while</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">:</span>            slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next            fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next        <span class="token keyword">return</span> slow<span class="token punctuation">.</span>val<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二叉树的直径"><a href="#二叉树的直径" class="headerlink" title="二叉树的直径"></a>二叉树的直径</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">def</span> <span class="token function">depth</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true">#从下往上的计算</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>            l<span class="token operator">=</span>depth<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            r<span class="token operator">=</span>depth<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>ans<span class="token operator">=</span>max<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ans<span class="token punctuation">,</span>l<span class="token operator">+</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> max<span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>   <span class="token comment" spellcheck="true">#当前结点最大深度</span>        depth<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span class="token number">-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二叉树镜像"><a href="#二叉树镜像" class="headerlink" title="二叉树镜像"></a>二叉树镜像</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mirrorTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span>         tmp<span class="token operator">=</span>root<span class="token punctuation">.</span>left        root<span class="token punctuation">.</span>left<span class="token operator">=</span>self<span class="token punctuation">.</span>mirrorTree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        root<span class="token punctuation">.</span>right<span class="token operator">=</span>self<span class="token punctuation">.</span>mirrorTree<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="混一下"><a href="#混一下" class="headerlink" title="混一下"></a>混一下</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ParkingSystem</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> big<span class="token punctuation">:</span> int<span class="token punctuation">,</span> medium<span class="token punctuation">:</span> int<span class="token punctuation">,</span> small<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>big<span class="token operator">=</span>big        self<span class="token punctuation">.</span>medium<span class="token operator">=</span>medium        self<span class="token punctuation">.</span>small<span class="token operator">=</span>small    <span class="token keyword">def</span> <span class="token function">addCar</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> carType<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> carType<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>big<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>big<span class="token operator">>=</span><span class="token number">0</span>        <span class="token keyword">elif</span> carType<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>medium<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>medium<span class="token operator">>=</span><span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>small<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>small<span class="token operator">>=</span><span class="token number">0</span><span class="token comment" spellcheck="true">#1.复习一下类...</span><span class="token comment" spellcheck="true">#2.python str 还有replace()</span><span class="token comment" spellcheck="true">#3.zip打包，一个for里多做点事</span><span class="token comment" spellcheck="true">#4.col = [max(i) for i in zip(*matrix)]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习</title>
      <link href="posts/ml.html"/>
      <url>posts/ml.html</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title="preface"></a><em>preface</em></h2><p>参考课程：</p><ul><li>北理工-pthon机器学习应用</li><li>吴恩达-机器学习</li></ul><table><thead><tr><th>sklearn</th><th>applications</th><th>algorithms</th></tr></thead><tbody><tr><td><code>classification</code></td><td>spam detection, image recognition</td><td>SVM, nearest neighbors, random forest…</td></tr><tr><td><code>regression</code></td><td>drug response, stock prices</td><td>SVR, nearest neighbors, random forest…</td></tr><tr><td><code>clustering</code></td><td>customer segmentation, grouping experiment outcomes</td><td>K-means, spectral clustering…</td></tr><tr><td><code>dimensionality reduction</code></td><td>visualization</td><td>K-means, feature selecion…</td></tr><tr><td><code>model selection</code></td><td>Improved accuracy via parameter tuning</td><td>grid search…</td></tr><tr><td><code>preprocessing</code></td><td>Transforming input data such as text for use with machine learning algorithms.</td><td>preprocessing</td></tr></tbody></table><h2 id="unsupervised-learning"><a href="#unsupervised-learning" class="headerlink" title="unsupervised learning"></a><em>unsupervised learning</em></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#使用 sklearn 标准数据集</span><span class="token keyword">import</span> sklearn<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_bostonboston<span class="token operator">=</span>load_boston<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>boston<span class="token punctuation">.</span>data<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->(506, 13)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="K-means聚类算法"><a href="#K-means聚类算法" class="headerlink" title="K-means聚类算法"></a>K-means聚类算法</h3><h2 id="supervised-learning"><a href="#supervised-learning" class="headerlink" title="supervised learning"></a><em>supervised learning</em></h2><h2 id="reinforcement-learning"><a href="#reinforcement-learning" class="headerlink" title="reinforcement learning"></a><em>reinforcement learning</em></h2><p><strong>其它</strong>：<br>pytorch文档：<a href="https://pytorch.apachecn.org/" target="_blank" rel="noopener">https://pytorch.apachecn.org/</a></p>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="posts/os.html"/>
      <url>posts/os.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、操作系统"><a href="#一、操作系统" class="headerlink" title="一、操作系统"></a>一、操作系统</h1><p><strong>操作系统</strong> 是指控制和管理整个计算机系统的硬件和软件资源，并合理地组织调度计算机的工作和资源的分配，以提供给用户和其他软件方便的接口和环境，它是计算机系统中最基本的系统软件。</p><ul><li>负责管理和协调硬件、软件等计算机资源的工作<ul><li>处理机管理</li><li>存储器管理</li><li>文件管理</li><li>设备管理</li></ul></li><li>为上层的应用程序、用户提供简单易用的服务<ul><li>命令接口（允许用户直接使用）<ul><li>联机命令接口=交互式命令接口</li><li>脱机命令接口=批处理命令接口</li></ul></li><li>程序接口（由一组 <strong>系统调用</strong> 组成，允许用户通过程序间接使用）</li><li>GUI</li></ul></li><li>操作系统是系统软件，而不是硬件</li></ul><hr><p>操作系统的<strong>特征</strong>：</p><ul><li><code>并发</code><ul><li>【指两个或多个事件在同一事件间隔内发生。这些事件宏观上是同时发生的，但微观上是交替发生的。】</li><li><code>并行</code>：同一时刻同时发生。</li><li><code>操作系统的并发性</code>：计算机系统中同时存在多个运行着的程序。</li><li>并发与共享互为存在条件</li><li>并发和共享是操作系统的两个最基本的特征</li></ul></li><li><code>共享</code><ul><li>【指系统中的资源可供内存中多个并发执行的进程共同使用】</li><li>共享方式：<ul><li>互斥共享方式</li><li>同时共享方式</li></ul></li></ul></li><li><code>虚拟</code><ul><li>【指把一个物理上的实体变为若干个逻辑上的对应物】</li><li>虚拟技术：<ul><li>空分复用技术（如虚拟存储技术）</li><li>时分复用技术（如虚拟处理器）</li></ul></li></ul></li><li><code>异步</code><ul><li>【指多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行走走停停，速度不可预知】</li><li>只有系统拥有并发性，才可能导致异步性。</li></ul></li></ul><hr><p>操作系统的<strong>发展</strong>：</p><ul><li>手工操作阶段<ul><li>【人机速度矛盾导致资源利用率极低，用户独占全机】</li></ul></li><li>批处理阶段–单道批处理系统<ul><li>【引入<code>脱机</code>输入/输出技术，并监督程序负责控制作业的输入/输出】</li></ul></li><li>批处理阶段–多道批处理系统<ul><li>【引入中断技术】</li><li>优点：【多道程序并发执行，共享计算机资源。资源利用率大幅提升】</li><li>缺点：【用户响应时间长，没有人机相互功能】</li></ul></li><li>分时操作系统<ul><li>【计算机以时间片为单位轮流为各个用户/作业服务】</li><li>优点：【用户请求可以被及时响应，解决了人机交互问题】</li></ul></li><li>实时操作系统<ul><li>优点：【能够优先响应一些紧急任务】</li><li>主要特点：及时性，可靠性</li></ul></li></ul><p><code>脱机</code>：外围控制机+更高速的设备（磁带）<br><code>作用</code>：缓解设备与CPU速度矛盾，实现预输入、预输出</p><hr><p>操作系统的<strong>运行机制</strong>：</p><ul><li>两种指令：<ul><li>特权指令<ul><li>【<code>指令</code> 就是CPU能识别、执行的最基本的命令】</li></ul></li><li>非特权指令</li></ul></li><li>两种处理器状态<ul><li>核心态</li><li>用户态</li></ul></li><li>两种程序：<ul><li>内核程序</li><li>应用程序</li></ul></li></ul><p><code>内核</code> 是计算机上配置的底层软件，是操作系统最基本、最核心的部分。<br>实现操作系统内核功能的那些程序就是内核程序。</p><ul><li>时钟管理</li><li>中断管理</li><li>原语<ul><li>【是一种特殊的程序，其执行具有原子性】</li></ul></li><li>对系统资源进行管理的功能</li></ul><hr><p>操作系统的<strong>体系结构</strong>：</p><ul><li>大内核<ul><li>【将操作系统的主要功能没款作为系统内核，运行在核心态】</li><li>优点：高性能</li><li>缺点：代码庞大，难以维护</li></ul></li><li>微内核<ul><li>【只把最基本的功能保留在内核】</li><li>优点：方便维护</li><li>缺点：需要频繁在核心态和用户态切换，性能低</li></ul></li></ul><hr><p><strong>中断和异常</strong></p><p>CPU收到计时部件发出的中断信号，切换为核心态对中断进行处理。</p><p><code>用户态</code> -&gt; <code>核心态</code> ，中断是唯一途径<br><code>核心态</code> -&gt; <code>用户态</code> ，通过执行一个特权指令</p><ul><li>中断的分类<ul><li>内中断<ul><li>自愿中断（指令中断）</li><li>强迫中断（硬件中断，软件中断）</li></ul></li><li>外中断（外设请求、人工干预）</li></ul></li></ul><hr><p><strong>系统调用</strong>【是操作系统向上层提供的接口】</p><ul><li>设备管理</li><li>文件管理</li><li>进程控制</li><li>进程通信</li><li>内存管理</li></ul><p>系统调用的过程：<br>传递系统调用参数执行 <code>-&gt;</code> 陷入指令执行系统 <code>-&gt;</code> 调用相应服务程序 <code>-&gt;</code> 返回用户程序</p><ul><li>应用程序通过系统调用来请求操作系统的服务</li><li>系统调用发生在用户态，对系统调用的处理发生在核心态</li><li>执行陷入指令会产生内中断，使处理器从用户态 <code>-&gt;</code> 核心态</li></ul><h1 id="二、进程管理"><a href="#二、进程管理" class="headerlink" title="二、进程管理"></a>二、进程管理</h1><p>进程实体（进程映像）的<strong>组成</strong>:</p><ul><li><code>PCB</code><ul><li>进程描述信息（进程标识符<code>PID</code>，用户标识符<code>UID</code>）</li><li>进程控制和管理信息（进程当前状态，进程优先级）</li><li>资源分配清单（程序段指针，数据段指针，键鼠）</li><li>处理机相关信息（各种寄存器值）</li></ul></li><li>数据段</li><li>程序段</li></ul><p>系统为每个运行的程序配置一个数据结构，称为 <strong>进程控制块</strong>（PCB），用来描述进程的各种信息（如程序代码存放位置）.</p><p>一般情况下，把进程实体简称为进程。<br>所谓创建进程，实质上是创建进程实体中的PCB；而撤销进程，实质上是撤销进程实体中的PCB。</p><p>PCB是进程存在的 <strong>唯一标志</strong></p><ul><li>进程是程序的<code>一次执行过程</code></li><li>进程是【进程实体的运行过程，是系统进行资源分配和调度的一个独立单位】（进程是 <strong>动态</strong> 的）</li></ul><hr><p>进程的<strong>组织方式</strong>：</p><ul><li>链接方式<ul><li>按照进程状态将PCB分为多个队列</li><li>组成：执行指针、就绪队列指针、阻塞队列指针</li></ul></li><li>索引方式<ul><li>按照进程状态的不同，建立几张索引表</li><li>组成：执行指针、就绪表指针、阻塞表指针</li></ul></li></ul><hr><p>进程的<strong>特征</strong>：</p><ul><li>动态性（进程是动态地产生变化消亡的）</li><li>并发性（各进程可并发执行）</li><li>独立性（进程是资源分配、接受调度的基本单位）</li><li>异步性（各进程按各自独立的、不可预知的速度向前推进）</li><li>结构性（每个进程都会配备一个PCB）</li></ul><hr><p>进程的<strong>状态</strong>：</p><ul><li>运行态（在CPU上运行）</li><li>就绪态（已具备运行条件）</li><li>阻塞态（等待某一事件的发生）</li><li>创建态（操作系统为其分配资源，初始化PCB）</li><li>终止态（操作系统回收资源，撤销PCB）</li></ul><p>进程状态的切换，就是<strong>进程控制</strong>，用原语实现。</p><p><code>挂起态</code>：进程暂时换出外存进行等待。</p><hr><p><strong>进程通信</strong>【进程之间的信息交换】：</p><ul><li>共享存储<ul><li>【要互斥地访问共享空间】</li><li>基于数据结构的共享【低级】</li><li>基于存储区的共享【高级】</li></ul></li><li>消息传递<ul><li>直接通信方式</li><li>间接通信方式</li></ul></li><li>管道通信<ul><li>【一个管道只能实现半双工通信】</li></ul></li></ul><hr><p><code>线程</code> 是一个基本的CPU执行单元，也是程序执行流的最小单元。</p><p>线程，可以理解为轻量级进程。</p><ul><li>引入线程后：<ul><li>进程只作为除CPU外系统资源的分配单元。</li><li>线程是资源调度的基本单位。</li><li>进程内的各线程也可以并发，提高了并发度。</li><li>进程内线程切换，减小系统开销。</li></ul></li><li>线程的实现方式：<ul><li>用户级线程</li><li>内核级线程</li><li>【操作系统只”看得见”内核级线程，因此只有内核级线程才是处理机分配的单位】</li></ul></li></ul><hr><p>一些说明：</p><ul><li><code>进程</code> 与 <code>作业</code>：一个作业通常包括几个进程，几个进程共同完成一个任务，即作业。</li><li><code>进程</code> 与 <code>线程</code>：做个简单的比喻，进程=火车，线程=车厢<ul><li>线程在进程下行进</li><li>同一进程下不同线程间，数据容易共享</li></ul></li></ul><hr><p><strong>处理机调度</strong>：</p><ul><li>【从就绪队列中按照一定的算法选择一个进程并将处理机分配给它运行，并实现进程的并发执行】</li><li>三个层次：<ul><li>高级调度（作业调度）<ul><li>对进程状态的影响：无 <code>-&gt;</code> 创建态 <code>-&gt;</code> 就绪态</li><li>是外存与内存之间的调度</li></ul></li><li>中级调度（内存调度）<ul><li>对进程状态的影响：挂起态 <code>-&gt;</code> 就绪态</li><li>【决定哪个处于挂起状态的进程重新调入内存】</li></ul></li><li>低级调度（ <strong>进程调度</strong> ）<ul><li>最基本的一种调度，发生频率最高</li><li>对进程状态的影响：就绪态 <code>-&gt;</code> 运行态</li><li><code>内容</code>【按照某种算法从就绪队列中选择一个进程为其分配处理机】</li><li><code>方式</code><ul><li>非剥夺调度方式【只允许进程主动放弃处理机】</li><li>剥夺调度方式【又称抢占方式，可优先处理紧急进程】</li></ul></li></ul></li></ul></li></ul><p><code>挂起</code> 和 <code>阻塞</code> 都是暂时不能获得CPU的服务，但 <code>挂起</code> 是将进程映像调到外存去了。</p><hr><p>调度算法的评价指标：</p><ul><li><strong>CPU利用率</strong> = 忙碌的时间 / 总时间</li><li><strong>系统吞吐量</strong>：单位时间内完成作业的数量</li><li><strong>周转时间</strong> = 作业完成时间 - 作业提交时间</li><li><strong>等待时间</strong>：指进程/作业处于等待处理机状态时间之和</li><li><strong>响应时间</strong>：从用户提交请求到首次产生响应所用时间</li></ul><hr><p><strong>调度算法</strong>：</p><ul><li>先来先服务（FCFS）</li><li>短作业优先（SJF）</li><li>高响应比优先（HRRN）</li><li>时间片轮转调度算法（RR）</li><li>优先级调度算法</li><li>多级反馈队列调度算法</li></ul><hr><p>临界资源：一个时间段内只允许一个进程使用。</p><ul><li><strong>进程同步</strong><ul><li>【并发性带来了异步性，有时需要进程同步来解决异步问题】</li></ul></li><li><strong>进程互斥</strong><ul><li>【对临界资源的访问，需要互斥地进行】</li><li>四个部分<ul><li>进入区【检查并进入临界区，需要“上锁”】</li><li>临界区【访问临界资源地代码】</li><li>退出区【负责“解锁”】</li><li>剩余区【其余代码部分】</li></ul></li><li>遵循原则：<ul><li>【空闲让进】【忙则等待】【有限等待】【让权等待】</li></ul></li><li>软件实现方法：<code>？？？</code><ul><li>单标志法</li><li>双标志先检查</li><li>双标志后检查</li><li>Peterson算法</li></ul></li><li>硬件实现方法：<code>？？？</code><ul><li>中断屏蔽方法</li><li>TestAndSet（TS指令/TSL指令）</li><li>Swap指令（XCHG指令）</li></ul></li></ul></li></ul><p>用户进程可以通过使用操作系统提供的一对原语对<code>信号量</code>进行操作，从而方便实现进程互斥、同步。<br><code>信号量</code> 是种表示系统资源的变量。<br><code>wait</code>、<code>signal</code> 原语的操作简称 <code>PV操作</code></p><h1 id="三、内存管理"><a href="#三、内存管理" class="headerlink" title="三、内存管理"></a>三、内存管理</h1><p>逻辑地址：相对地址；物理地址：绝对地址</p><p><code>从写程序到程序运行</code>：</p><ul><li>编辑源代码文件</li><li>编译<ul><li>【由源代码生成目标模块，高级语言-&gt;机器语言】</li></ul></li><li>链接<ul><li>【由目标模块生成装入模块，链接后形成完整的逻辑地址】</li></ul></li><li>装入<ul><li>【将装入模块装入内存，装入后形成物理地址】</li></ul></li></ul><hr><p><code>内存管理</code>：</p><ul><li>内存空间的<strong>分配与回收</strong></li><li>内存空间的<strong>扩充</strong>（实现虚拟性）<ul><li>覆盖技术<ul><li>【将程序分为多个段，常用的段常驻内存，不常用的段在需要时调入内存】</li><li>缺点：对用户不透明，增加了用户编程负担。</li></ul></li><li>交换技术<ul><li>【进程在内存与磁盘之间动态调度，但PCB会常驻内存】</li></ul></li><li><strong>虚拟内存</strong><ul><li>【程序不需装入即可运行，运行时根据需要动态调入数据，若内存不够，还需换出一些数据】</li><li><code>多次性</code>：允许作业多次调入内存</li><li><code>对换性</code>：允许作业运行过程中，将作业换入、换出</li><li><code>虚拟性</code>：从逻辑上扩充了内存的容量</li><li>实现方式：<ul><li>请求分页存储管理</li><li>请求分段存储管理</li><li>请求段页式存储管理</li></ul></li></ul></li></ul></li><li><strong>地址转换</strong><ul><li>【操作系统负责实现逻辑地址到物理地址的转换】</li><li>三种方式：<ul><li>绝对装入【编译器负责地址转换】（单道程序阶段）</li><li>可重定位装入【装入程序负责地址转换】（早期多道批处理系统）</li><li>动态运行时装入【运行时进行地址转换】（现代操作系统）</li></ul></li></ul></li><li><strong>存储保护</strong><ul><li>【保证各进程在自己的内存空间内运行】</li><li>两种方式：<ul><li>设置上下限寄存器</li><li>利用重定位寄存器、界地址寄存器进行判断</li></ul></li></ul></li></ul><hr><p><strong>内存空间的分配与回收</strong>：</p><ul><li>连续分配管理方式<ul><li>单一连续分配</li><li>固定分区分配</li><li>动态分区分配</li></ul></li><li>非连续分配管理方式<ul><li>基本分页存储管理</li><li>基本分段存储管理</li><li>段页式存储管理</li></ul></li></ul><p>页表机制的地址变换过程 <code>？？？</code></p><p>页面置换算法、页面分配策略 <code>？？？</code></p><h1 id="四、文件管理"><a href="#四、文件管理" class="headerlink" title="四、文件管理"></a>四、文件管理</h1><p><strong>文件系统</strong>（由上至下）：</p><ul><li>用户接口</li><li>文件目录系统</li><li>存取控制模块</li><li>逻辑文件系统和文件信息缓冲区</li><li>物理文件系统</li></ul><hr><p><strong>文件的逻辑结构</strong>：</p><ul><li>无结构文件<ul><li>【文件内部的数据就是一系列二进制流或字符流，如<code>txt</code>文件】</li></ul></li><li>有结构文件<ul><li>顺序文件</li><li>索引文件</li><li>索引顺序文件</li></ul></li></ul><p><code>目录</code> 本身就是一个有结构文件，由一条条记录组成；每条记录对应一个在该目录下的文件。</p><hr><p><strong>文件的物理结构</strong>（文件分配方式）：</p><ul><li>连续分配<ul><li>【每个文件在磁盘上占有一组连续的块】</li></ul></li><li>链接分配<ul><li>隐式链接<ul><li>【磁盘块含有指针，对用户透明，只能顺序访问】</li></ul></li><li>显式链接<ul><li>【把用于链接文件各物理块的指针显式地存放在一张表中，即<code>FAT</code>(file allocation table)】</li><li>【一个磁盘仅设置一张 <code>FAT</code>，开机时将 <code>FAT</code> 读入内存，并常驻内存。】</li></ul></li></ul></li><li>索引分配<ul><li>【系统为每个文件建立一张索引表，索引表记录了文件地各个逻辑块对应的物理块】</li></ul></li></ul><hr><p><strong>文件存储空间管理</strong>：</p><ul><li>存储空间的划分和初始化<ul><li><code>划分</code>【将物理磁盘划分为一个个文件卷（逻辑卷，逻辑盘）】</li><li><code>初始化</code>【将各个文件卷划分为目录区、文件区】</li></ul></li><li>管理方法：<ul><li>空闲表法</li><li>空闲链表法</li><li>位示图法</li><li>成组链接法</li></ul></li></ul><hr><p><strong>文件的基本操作</strong>：<code>create</code> <code>delete</code> <code>read</code> <code>write</code> <code>open</code> <code>close</code>系统调用</p><ul><li><code>create</code>：分配外存空间，创建目录项</li><li>进程打开文件表时特有属性：读写指针、访问权限</li></ul><hr><ul><li><strong>文件共享</strong>：<ul><li>基于索引结点的共享方式（硬链接）<ul><li>【各个用户的目录项指向同一个索引结点】</li></ul></li><li>基于符号链的共享方式（软链接）<ul><li>【相当于创建索引结点的快捷方式】</li></ul></li></ul></li><li><strong>文件保护</strong>：口令保护，加密保护，访问控制</li></ul><hr><p><code>磁盘</code> 由表面涂有磁性物质的圆形盘片组成，每个盘片被划分为一个个磁道，每个磁道又划分为一个个扇区。</p><p>磁盘的物理地址：（柱面号，盘面号，扇区号），磁盘的调度算法<code>？？？</code></p><h1 id="五、设备管理"><a href="#五、设备管理" class="headerlink" title="五、设备管理"></a>五、设备管理</h1><p><strong>I/O设备</strong>：</p><ul><li>【将数据输入输出计算机的外部设备】</li><li>按使用特性分类：<ul><li>人机交互类设备（数据传输速度慢）</li><li>存储设备（数据传输速度快）</li><li>网络通信设备</li></ul></li><li>按信息交换的单位分类：<ul><li>块设备（传输快，可寻址）</li><li>字符设备（传输慢，不可寻址，常采用中断驱动方式）</li></ul></li><li>组成：<ul><li>机械部件</li><li>电子部件（I/O控制器）</li></ul></li></ul><hr><p><strong>I/O控制器</strong>：</p><ul><li>主要功能：<ul><li>接受和识别CPU发出的命令（控制寄存器）</li><li>向CPU报告设备的状态（状态寄存器）</li><li>数据交换（数据寄存器）</li><li>地址识别（由I/O逻辑实现）</li></ul></li><li>组成：<ul><li>CPU与控制器间的接口</li><li>I/O逻辑</li><li>控制器与设备间的接口</li></ul></li><li>寄存器编址方式：<ul><li>内存映射I/O<ul><li>控制器中的寄存器与内存同一编制</li></ul></li><li>寄存器独立编址<ul><li>需要设置专门的指令来操作控制器</li></ul></li></ul></li></ul><hr><p><strong>I/O控制方式</strong>：</p><ul><li>程序直接控制方式<ul><li>在等待I/O完成的过程中需要CPU不断轮询检查</li><li>优点：实现简单</li><li>缺点：CPU利用率低</li></ul></li><li>中断驱动方式<ul><li>优点：CPU和I/O设备可并行工作</li></ul></li><li>DMA方式（direct memory access）<ul><li>数据的传送单位是块</li></ul></li><li>通道控制方式<ul><li>识别并执行一系列通道指令</li><li>优点：CPU、通道、I/O设备可并行工作，资源利用率很高</li><li>缺点：实现复杂，需要专门的通道硬件支持</li></ul></li></ul><hr><p><strong>I/O软件的层次</strong>：</p><ul><li>用户层软件【实现了与用户交互的接口】:<ul><li>功能：【假脱机技术】</li></ul></li><li>I/O系统【属于操作系统的内核部分】：<ul><li>设备独立性软件<ul><li>功能：【I/O调度、设备保护、设备分配与回收、缓冲区管理】</li></ul></li><li>设备驱动程序</li><li>中断处理程序</li></ul></li></ul><p><code>假脱机技术</code>，又称<code>SPOOLing技术</code>，用软件的方式模拟脱机技术。<br>在内存中建立缓冲区，在磁盘中建立输入/输出井。</p>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020寒假</title>
      <link href="posts/hanjia_1.html"/>
      <url>posts/hanjia_1.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p><font face="myfont" size=5>有了想要守护的事物；加油，做个顶天立地的男子汉。</font></p><h1 id="1-日记"><a href="#1-日记" class="headerlink" title="1.日记"></a>1.日记</h1><h2 id="12-26"><a href="#12-26" class="headerlink" title="12.26"></a><code>12.26</code></h2><p>我想要什么？<br>现实是什么样子？<br>那你该怎么做？</p><p>我想30岁前财务自由，之后陪心爱的人旅行，或为人类做些事情。<br>现实，我菜的很，还懒，还不爱说话。</p><p>所以，我要好好努力，戒掉无聊的事情，去守护该守护的东西。</p><h2 id="12-27"><a href="#12-27" class="headerlink" title="12.27"></a><code>12.27</code></h2><p>读书《原则》-Ray Dalio，<a href="https://www.unielu.com/posts/yuanze.html">点我查看摘录</a></p><h2 id="12-28"><a href="#12-28" class="headerlink" title="12.28"></a><code>12.28</code></h2><p>一个CSS颜色代码网站：<a href="http://www.frjt.net/nuan-color/" target="_blank" rel="noopener">http://www.frjt.net/nuan-color/</a></p><p>呜呜呜，令人震撼的B站：</p><ul><li>野生钢铁侠：<a href="https://www.bilibili.com/video/BV1jE41137eu" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1jE41137eu</a></li><li>盛世中华：<a href="https://www.bilibili.com/video/BV19E41197Kc" target="_blank" rel="noopener">https://www.bilibili.com/video/BV19E41197Kc</a></li><li>小丑混剪：<a href="https://www.bilibili.com/video/BV1Jb411W7dH" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Jb411W7dH</a></li><li>最爱的钢铁侠：<a href="https://www.bilibili.com/video/BV1J541187Kz" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1J541187Kz</a></li><li>最热血的须臾：<a href="https://www.bilibili.com/video/BV1QK4y1a7Qs" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1QK4y1a7Qs</a></li><li>高端干饭局：<a href="https://www.bilibili.com/video/BV1pA411s71x" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1pA411s71x</a> </li></ul><p>以前可能都打游戏去了，没发现B站这么多宝藏。</p><p>对自己的通透，对美的追求。两者都是我前进的动力。</p><h2 id="12-29"><a href="#12-29" class="headerlink" title="12.29"></a><code>12.29</code></h2><p>观影《美丽心灵》<br>纳什平衡，非合作博弈均衡</p><h2 id="12-31"><a href="#12-31" class="headerlink" title="12.31"></a><code>12.31</code></h2><p>重观《超能陆战队》，2014的神片<br>megabot, electronmag suspension, vinyl, carbonfiber, 84次尝试</p><p>知识积累，和技术积累，量变到质变的过程。<br>DJI的无人机，Boston Dynamics的机器人，666</p><h2 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a><code>1.2</code></h2><p>读书《黑客与画家》-Paul Graham，阮一峰译，<a href="https://www.unielu.com/posts/hackers_and_painters.html">点我查看摘录</a></p><p>玩游戏《hades》, 挺棒的</p><h2 id="1-7"><a href="#1-7" class="headerlink" title="1.7"></a><code>1.7</code></h2><p>听书《回归故里》<br>论人，论事，到社会阶级，没意思，，，</p><p>左派：通常主张积极改革，主张把旧的意识形态和制度革除，从而建立新的意识形态和制度。<br>右派：一般较为保守，主张稳妥、秩序、渐进、缓慢的改革方式，强调维护旧有传统。</p><h2 id="1-9"><a href="#1-9" class="headerlink" title="1.9"></a><code>1.9</code></h2><p>#随记</p><p>《原则》教会我去寻找有意义的工作和有意义的人际关系<br>《黑客与画家》教会我作为一个手工艺人去创业产生财富<br>《回归故里》告诉我时代背景下的阶级隔阂，知识的可贵</p><p>我还是不太愿意看到我的缺点，即使我已经看见，作为人可难了啊</p><p>人们曾说高中好，目标近乎是唯一的，是啊。<br>可努力想想，高中也只是一般的工作+较有意义的人际关系。</p><p>现在，未来是考研，出国，还是实习，创业？又能干嘛呢？<br>瞬间把人问傻了，还容易产生各种抱怨</p><p>反正世界上各种各样的人、各种各样的事都会有，多见些，多经历，多学习吧</p><p>越想越清楚，也越糊涂，算了不想了</p><p>人生如同在一个个连续的刹那不停起舞，而蓦然四顾时常常惊觉，已经来到这里了吗。</p><p>反正有意义的工作+有意义的人际关系是我想要的，当一个手工艺人去创业是我必须的<br>那就去做吧，未来是肯定要创业的，现在尽力把当下做好。</p><p>大创，本菜鸡要来了，你的皇帝回来了。</p><h2 id="1-11"><a href="#1-11" class="headerlink" title="1.11"></a><code>1.11</code></h2><p>#关于<code>SHA256</code></p><p>SHA-256算法单向Hash函数是密码学和信息安全领域中的一个非常重要的基本算法，它是把任意长的消息转化为较短的、固定长度的消息摘要的算法。</p><p>这个博客的加密算法竟然是这个，在文章<code>password</code>配置中输入64位密文。</p><h2 id="1-12"><a href="#1-12" class="headerlink" title="1.12"></a><code>1.12</code></h2><p>观影《白日梦想家》<br>awesome，这极美的世界，鼻子酸了</p><h2 id="1-13-15"><a href="#1-13-15" class="headerlink" title="1.13-15"></a><code>1.13-15</code></h2><p>观影《自杀小队》，《心灵奇旅》</p><p>I’m going to live every minute of it，and it’s a courage to admit that life is no purpose.<br>Just something can inspair you to do something, and that’s enough!</p><h2 id="1-16"><a href="#1-16" class="headerlink" title="1.16"></a><code>1.16</code></h2><p>hhh，去吧去吧</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>言</title>
      <link href="posts/54fe.html"/>
      <url>posts/54fe.html</url>
      
        <content type="html"><![CDATA[<h1 id="澜"><a href="#澜" class="headerlink" title="澜"></a>澜</h1><hr><p><code>1</code><font size='4' face="Consolas">People come and go, we struggled with laughter and tears, and all the years have gone by, still I have you by my side.</font></p><p align="right">————《龙族》</p><hr><p><code>2</code><font size='5' face="myfont">离你越远，我爱你越深，我不禁叩问我自己，我所期望的究竟是幸福，还是走向幸福的过程.</font></p><p align="right">————佚名</p><hr><p><code>3</code><font size='5' face="myfont">那错过的人，那离去的脚步，那渐行渐远的路，就像是眼前的梧桐叶轻轻地飘落。</font></p><p align="right">————佚名</p><hr><p><code>4</code><font size='5' face="myfont">许多事在年少时想得很好，但真正到那一天来临，却又是另一番情景，生活不断为我们打折扣，送来沮丧。这就是真实的生活，幢憬再美丽，那也不可能为真，终究要面对。</font></p><p align="right">————佚名</p><hr><p><code>5</code><font size='5' face="myfont">有些事情即便可以从头再来，也很难再回到原点。纵然是相同的道路，人生可以两次路过，也不再会有原来的感觉。那些都是过去的事情了，人要向前走。</font></p><p align="right">————佚名</p><hr><p><code>6</code><font size='5' face="myfont">世上哪有什么天才，只有孜孜不倦的顽童。</font><br><font size='5' face="myfont">世上哪有什么完美，只有持之以恒的扮演。</font></p><p align="right">————佚名</p><hr><p><code>7</code><br><font size='4' face="Consolas">  How strange is the lot of us mortals! Each of us is here for a brief sojourn; for what purpose be knows not, though he sometimes thinks he senses it. But without deeper reflection one knows from daily life that one exists for other people-first of all for those upon whose smiles and well-being our own happiness is wholly dependent, and then for the many, unknown to us, to whose destinies we are bound by the ties of sympathy.</font></p><p align="right">————爱因斯坦</p><p><font size='4' face="Consolas">  A man can do what he wants, but not want what he wants. It has been a continual consolation in the face of life’s hardships.</font></p><p align="right">————爱因斯坦</p><hr><p><code>8</code><br><font size='5' face="myfont">“自己”这个东西是看不见的，撞上一些别的什么，</font><br><font size='5' face="myfont">反弹回来，才会了解“自己”</font><br><font size='5' face="myfont">所以，跟很强的东西相碰撞</font><br><font size='5' face="myfont">然后才“自己”是什么，这才是自我。</font></p><p align="right">————山本耀司</p><hr><p><code>9</code><br><font size='5' face="myfont">其实这个东西还是随缘。。做好自己就挺好的，总有人看得到你的优点，不用太刻意的。</font></p><p align="right">————同学</p><hr><p><code>10</code><br><font face="myfont" size=5>人生就像是在每一个瞬间连续起舞，暮然四顾时常常惊觉：“已经到这里了吗？”</font></p><p align="right">————《被讨厌的勇气》</p><h1 id="网易云"><a href="#网易云" class="headerlink" title="网易云"></a>网易云</h1><hr><p><code>1</code><br><font size='5' face="SimSun">弟子问老师：“您能谈谈人类的奇怪之处吗？”</font><br><font size='5' face="SimSun">老师答道：“他们急于成长，然后又哀叹失去的童年；他们以健康换取金钱，不久后又想用金钱恢复健康。他们对未来焦虑不已，却又无视现在的幸福。因此，他们既不活在当下，也不活在未来.他们活着仿佛从来不会死亡。临死前，又仿佛从未活过。”</font></p><hr><p><code>2</code><br><font size='5' face="SimSun">罗曼·罗兰有句名言，“世上只有一种英雄主义，就是在认清生活真相之后依然热爱生活。” 这种英雄主义最初级的表现形态就是——即使有被拒绝的可能，我依然要表达心中的想法。 一见钟情并非不靠谱，不好意思，刚认识就喜欢你。 喜欢你就要告诉你，大不了连朋友都做不成，反正我不缺朋友，只缺你。</font></p><hr><h1 id="豆瓣"><a href="#豆瓣" class="headerlink" title="豆瓣"></a>豆瓣</h1><h1 id="知乎"><a href="#知乎" class="headerlink" title="知乎"></a>知乎</h1><p><code>1</code><br><font size='5' face="myfont">不要轻易给如何人贴标签，人非圣贤，孰能无过，不要因为一个人的缺点而去否定其所有的优点。</font><br><font size='5' face="myfont">在看待一个人的时候，要回归到他最原始的属性上：他是个人。</font></p><p align="right">————知乎</p><hr><p><code>2</code><font size='5' face="myfont">在可预见的未来，人类都不可能参透生死和永恒，但即便须臾，我还是想多知道一点，多看一点，把世事里灰色区域的面积，尽量多挤压一点，使之变得黑白分明，是非可见。</font></p><p align="right">————知乎</p><hr><p><code>3</code><font size='5' face="myfont">期望值管理能力：Happiness=reality-expectations</font></p><p align="right">————知乎</p><hr><p><code>4</code><font size='5' face="myfont">突然不喜欢一个人，是什么感觉？</font><br><font size='5' face="myfont">他本来浑身是光。有那么一瞬间，突然就黯淡了，成为宇宙里一颗尘埃。我努力回想起他全身是光的样子，却怎么也想不起来。</font><br><font size='5' face="myfont">后来才慢慢发觉，那是我见到他时，我眼里的光。</font></p><p align="right">————知乎</p><hr><h1 id=""><a href="#" class="headerlink" title="~~"></a>~~</h1><p><font size='5' face="myfont">有时候我们所追求的，并不是一个结果。</font></p><p><font size='5' face="myfont">一但只追求结果，就容易想方设法抄近路。</font></p><p><font size='5' face="myfont">在抄近路的途中，人又容易迷失真相。</font></p><p><font size='5' face="myfont">慢慢地，做事的干劲也会消磨殆尽。</font></p><p><font size='5' face="myfont">所以有些时候，更重要的是：想要追求真相的意志。</font></p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 独立思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硬件</title>
      <link href="posts/d6d0.html"/>
      <url>posts/d6d0.html</url>
      
        <content type="html"><![CDATA[<h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><p><strong>CMOS</strong> (Complementary Metal Oxide Semiconducto)，互补金属氧化物半导体。它是指制造大规模集成电路芯片用的一种技术或用这种技术制造出来的芯片，是电脑主板上的一块可读写的RAM芯片。</p><p><strong>FPGA</strong>（Field Programmable Gate Array）是在PAL、GAL等可编程器件的基础上进一步发展的产物。它是作为专用集成电路（ASIC）领域中的一种半定制电路而出现的。</p><p><strong>MCU</strong> (Microcontroller Unit)，又称单片微型计算机(Single Chip Microcomputer )或者单片机，是把CPU的频率与规格做适当缩减，并将内存(memory)、计数器(Timer)、USB、A/D转换、UART、PLC、DMA等周边接口，甚至LCD驱动电路都整合在单一芯片上，形成芯片级的计算机。</p><p><strong>SoC</strong> (System on Chip)</p><p><strong>NPU</strong> (Neural-network Processing Unit)</p><p><strong>GND</strong> (Ground)代表地线或0线.GND就是公共端的意思，也可以说是地。但这个地并不是真正意义上的地。是出于应用而假设的一个地，对于电源来说，它就是一个电源的负极。它与大地是不同的。</p><p><strong>PID控制</strong>（<code>比例-积分-微分控制</code>）仍然是在工业控制中应用得最为广泛的一种控制方法。</p><p>在电子电路中，<strong>VCC</strong>是电路的供电电压, <strong>VDD</strong>是芯片的工作电压。<br><strong>VSS</strong>：S=series 表示公共连接的意思，通常指电路公共接地端电压；</p><p><strong>耦合</strong> (Coupling)，就是把某一电路的能量输送（或转换）到其他的电路中去。</p><p><strong>电感器</strong> (Inductor)，是能够把电能转化为磁能而存储起来的元件</p><p><strong>译码器</strong> (decoder)是一类多输入多输出组合逻辑电路器件，其可以分为：变量译码和显示译码两类。</p><h2 id="afterword"><a href="#afterword" class="headerlink" title="afterword"></a><em>afterword</em></h2><p>感觉都是些别人的抽象成果，需要的时候再学吧。</p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino语言基础</title>
      <link href="posts/2199.html"/>
      <url>posts/2199.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>社区教程：<a href="https://www.arduino.cn/thread-1066-1-1.html" target="_blank" rel="noopener">https://www.arduino.cn/thread-1066-1-1.html</a><br>官方文档：<a href="https://www.arduino.cc/reference/en/" target="_blank" rel="noopener">https://www.arduino.cc/reference/en/</a></p><h2 id="一、项目结构"><a href="#一、项目结构" class="headerlink" title="一、项目结构"></a>一、项目结构</h2><h3 id="setup"><a href="#setup" class="headerlink" title="setup()"></a>setup()</h3><hr><p>Arduino控制器<strong>通电或复位</strong>后，即会开始执行setup() 函数中的程序，该部分只会执行一次。<br>通常我们会在setup() 函数中<strong>完成Arduino的初始化设置，如配置I/O口状态，初始化串口等</strong>操作。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 给13号引脚连接的设备设置一个别名“led”</span><span class="token keyword">int</span> led <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在板子启动或者复位重启后， setup部分的程序只会运行一次</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 将“led”引脚设置为输出状态</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span>led<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// setup部分程序运行完后，loop部分的程序会不断重复运行</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>led<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 点亮LED</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 等待一秒钟</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>led<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 通过将引脚电平拉低，关闭LED</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 等待一秒钟</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="loop"><a href="#loop" class="headerlink" title="loop()"></a>loop()</h3><hr><p>在setup() 函数中的程序执行完后，Arduino会接着执行loop() 函数中的程序。而loop()函数是一个死循环，其中的程序会不断的重复运行。<br>通常我们会在loop() 函数中<strong>完成程序的主要功能，如驱动各种模块，采集数据等</strong>。</p><h3 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h3><hr><p>在进行Arduino开发时，没有像传统C/C++程序使用入口函数main。实际上<strong>main函数存在于Arduino核心库中，且仍然是程序的入口</strong>。<br>在Arduino核心库中可见main.cpp文件，其内容如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Arduino.h></span></span><span class="token comment" spellcheck="true">// Declared weak in Arduino.h to allow user redefinitions.</span><span class="token keyword">int</span> <span class="token function">atexit</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> <span class="token comment" spellcheck="true">/*func*/</span> <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Weak empty variant initialization function.</span><span class="token comment" spellcheck="true">// May be redefined by variant files.</span><span class="token keyword">void</span> <span class="token function">initVariant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>weak<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">initVariant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">setupUSB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>weak<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setupUSB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initVariant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> defined(USBCON)</span>    USBDevice<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//进行串口事件判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>serialEventRun<span class="token punctuation">)</span> <span class="token function">serialEventRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、数字输入输出"><a href="#二、数字输入输出" class="headerlink" title="二、数字输入输出"></a>二、数字输入输出</h2><h3 id="pinMode-pin-mode"><a href="#pinMode-pin-mode" class="headerlink" title="pinMode(pin, mode)"></a>pinMode(pin, mode)</h3><hr><p>在使用输入或输出功能前，你需要先通过pinMode() 函数<strong>配置引脚的模式</strong>为输入模式或输出模式。</p><ul><li>参数<code>pin</code>为指定配置的引脚编号</li><li>参数<code>mode</code>为指定的配置模式</li><li>通常可用模式有三种:<ul><li><strong>INPUT</strong> 输入模式</li><li><strong>OUTPUT</strong> 输出模式</li><li><strong>INPUT_PULLUP</strong> 输入上拉模式</li></ul></li></ul><h3 id="digitalWrite-pin-value"><a href="#digitalWrite-pin-value" class="headerlink" title="digitalWrite(pin, value)"></a>digitalWrite(pin, value)</h3><hr><p>引脚配置成输出模式后，可使用digitalWrite() 让其输出高电平或者是低电平。</p><p>Arduino中输出的低电平为0V，输出的高电平为当前Arduino的工作电压。</p><h3 id="digitalRead-pin"><a href="#digitalRead-pin" class="headerlink" title="digitalRead(pin)"></a>digitalRead(pin)</h3><hr><p>返回得到的信号状态。</p><h2 id="三、模拟输入输出"><a href="#三、模拟输入输出" class="headerlink" title="三、模拟输入输出"></a>三、模拟输入输出</h2><h3 id="analogRead-pin"><a href="#analogRead-pin" class="headerlink" title="analogRead(pin)"></a>analogRead(pin)</h3><hr><p>模拟输入引脚是带有ADC（Analog-to-Digital Converter，模数转换器）功能的引脚。</p><p>它可以将外部输入的模拟信号转换为芯片运算时可以识别的数字信号，从而实现<strong>读入模拟值</strong>的功能。</p><p>Arduino Uno模拟输入功能有10位精度，即可以将0～5V的电压信号转换为0～1023的整数形式表示。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*光敏电阻检测环境光http://www.arduino.cn/*/</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 初始化串口</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 读出当前光线强度，并输出到串口显示</span>  <span class="token keyword">int</span> sensorValue <span class="token operator">=</span> <span class="token function">analogRead</span><span class="token punctuation">(</span>A0<span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sensorValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="analogWrite-pin-value"><a href="#analogWrite-pin-value" class="headerlink" title="analogWrite(pin,value)"></a>analogWrite(pin,value)</h3><hr><p>使用analogWrite() 函数实现PWM（脉冲宽度调制，一种模拟控制的方法）<strong>输出</strong>功能。<br>在Arduino Uno中，提供PWM功能的引脚为3、5、6、9、10、11。</p><p>在analogWrite() 和analogRead() 函数内部，已经完成了引脚的初始化，因此不用在Setup() 函数中进行初始化操作。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*Fading通过analogWrite() 函数实现呼吸灯效果*/</span><span class="token keyword">int</span> ledPin <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// LED连接在9号引脚上</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// Setup部分不进行任何处理</span><span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 从暗到亮，以每次加5的形式逐渐亮起来</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> fadeValue <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> fadeValue <span class="token operator">&lt;=</span> <span class="token number">255</span><span class="token punctuation">;</span> fadeValue <span class="token operator">+</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 输出PWM</span>    <span class="token function">analogWrite</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> fadeValue<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 等待30ms，以便观察到渐变效果</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 从亮到暗，以每次减5的形式逐渐暗下来</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> fadeValue <span class="token operator">=</span> <span class="token number">255</span> <span class="token punctuation">;</span> fadeValue <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> fadeValue <span class="token operator">-</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 输出PWM</span>    <span class="token function">analogWrite</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> fadeValue<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 等待30ms，以便观察到渐变效果</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、高级输入输出"><a href="#四、高级输入输出" class="headerlink" title="四、高级输入输出"></a>四、高级输入输出</h2><h3 id="tone"><a href="#tone" class="headerlink" title="tone()"></a>tone()</h3><hr><p>tone() 主要用于Arduino连接蜂鸣器或扬声器发声。</p><h3 id="pulseln"><a href="#pulseln" class="headerlink" title="pulseln"></a>pulseln</h3><hr><p>检测指定引脚上的脉冲信号宽度。</p><h3 id="外部中断"><a href="#外部中断" class="headerlink" title="外部中断"></a>外部中断</h3><hr><h2 id="五、时间控制"><a href="#五、时间控制" class="headerlink" title="五、时间控制"></a>五、时间控制</h2><h3 id="millis"><a href="#millis" class="headerlink" title="millis()"></a>millis()</h3><hr><p>获取Arduino通电后（或复位后）到现在的时间,单位毫秒ms</p><h3 id="delay"><a href="#delay" class="headerlink" title="delay()"></a>delay()</h3><hr><p>参数为时长，类型unsigned long，单位毫秒ms</p><h2 id="六、串口通信"><a href="#六、串口通信" class="headerlink" title="六、串口通信"></a>六、串口通信</h2><h3 id="begin"><a href="#begin" class="headerlink" title="begin()"></a>begin()</h3><hr><p>使用串口与计算机通信，需要先使用 <code>Serial.begin(speed)</code> 初始化Arduino的串口通信功能。<br>参数speed指串口通信波特率，常用波特率：300、600、1200、2400、4800、9600、14400、19200、28800、38400、57600、115200</p><h3 id="print"><a href="#print" class="headerlink" title="print()"></a>print()</h3><hr><p>串口初始化完成后，我们便可以使用 <code>Serial.print(val)</code> 或<code>Serial.println(val)</code> 向计算机发送信息了。<br>println会在输出完指定数据后，再输出一组回车换行符。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> counter<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 计数器</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 初始化串口</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 每loop循环一次，计数器变量加1</span>counter <span class="token operator">=</span> counter<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出变量</span>Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出字符</span>Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>‘<span class="token punctuation">:</span>’<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出字符串;</span>Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hellow World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h3><hr><p>调用该语句，每次都会返回一个字节的数据，这个返回值便是当前串口读取到的数据。</p><h2 id="七、关于Uno"><a href="#七、关于Uno" class="headerlink" title="七、关于Uno"></a>七、关于Uno</h2><p>Arduino UNO带有4个LED指示灯，作用分别如下：</p><p><strong>ON：</strong></p><p>电源指示灯。当Arduino通电时，ON灯会点亮。</p><p><strong>TX：</strong></p><p>串口发送指示灯。当使用USB连接到计算机且Arduino向计算机传输数据时，TX灯会点亮。</p><p><strong>RX：</strong></p><p>串口接收指示灯。当使用USB连接到计算机且Arduino接收到计算机传来的数据时，RX灯会点亮。</p><p><strong>L：</strong></p><p>可编程控制指示灯。该LED通过特殊电路连接到Arduino的13号引脚，当13号引脚为高电平或高阻态时，该LED 会点亮；低电平时，不会点亮。可以通过程序或者外部输入信号，控制该LED亮灭。</p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino实践基础</title>
      <link href="posts/2198.html"/>
      <url>posts/2198.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://www.jianshu.com/u/9dcb33c9d805" target="_blank" rel="noopener">https://www.jianshu.com/u/9dcb33c9d805</a></p><h2 id="开发板"><a href="#开发板" class="headerlink" title="开发板"></a>开发板</h2><p>Arduino Uno R3：<a href="https://www.jianshu.com/p/afe07479b2c2" target="_blank" rel="noopener">https://www.jianshu.com/p/afe07479b2c2</a></p><h2 id="基础器件"><a href="#基础器件" class="headerlink" title="基础器件"></a>基础器件</h2><p><code>1</code>红外遥控的使用：<a href="https://www.jianshu.com/p/5add4c666983" target="_blank" rel="noopener">https://www.jianshu.com/p/5add4c666983</a></p><p><code>2</code>蜂鸣器的使用：<a href="https://www.jianshu.com/p/eae823cc343a" target="_blank" rel="noopener">https://www.jianshu.com/p/eae823cc343a</a></p><hr><p><code>3</code>MPU6050的使用：<a href="https://www.cnblogs.com/zhoug2020/p/7636742.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhoug2020/p/7636742.html</a></p><p>MPU6050的数据获取、分析与处理：<a href="https://blog.csdn.net/jickjiang/article/details/84237863" target="_blank" rel="noopener">https://blog.csdn.net/jickjiang/article/details/84237863</a></p><p>扫盲：<a href="https://blog.csdn.net/zuoheizhu/article/details/96697274" target="_blank" rel="noopener">https://blog.csdn.net/zuoheizhu/article/details/96697274</a></p><p>MPU6050是一种非常流行的空间运动传感器芯片，可以获取器件当前的三个加速度分量和三个旋转角速度。</p><p>使用集成的MPU6050模块。MPU6050的数据接口用的是I2C总线协议，因此我们需要Wire程序库的帮助来实现Arduino与MPU6050之间的通信。</p><hr><p><strong>陀螺仪</strong>（Gyroscope、GYRO-Sensor）也叫地感器，传统结构是内部有个陀螺，如下图所示（三轴陀螺），三轴陀螺仪的工作原理是通过测量三维坐标系内陀螺转子的垂直轴与设备之间的夹角，并计算角速度，通过夹角和角速度来判别物体在三维空间的运动状态。三轴陀螺仪可以同时测定上、下、左、右、前、后等6个方向（合成方向同样可分解为三轴坐标），最终可判断出设备的移动轨迹和加速度。</p><p>也就是说陀螺仪通过测量自身的旋转状态，判断出设备当前运动状态，是向前、向后、向上、向下、向左还是向右呢，是加速（角速度）还是减速（角速度）呢，都可以实现，但是要判断出设备的方位（东西南北），陀螺仪就没有办法。</p><p><strong>加速计</strong>（Accelerometer、G-Sensor）也叫重力感应器，实际上是可以感知任意方向上的加速度（重力加速度则只是地表垂直方向加速度），加速计通过测量组件在某个轴向的受力情况来得到结果，表现形式为轴向的加速度大小和方向（XYZ），这一点又有点类似于陀螺仪，但陀螺仪的更多关注自身旋转情况（原位运动），加速计则主要是测量设备的受力情况，也就是三轴运动情况，尽管加速计也可能在某个小范围换算出角速度的可能，但设计原理决定似乎更适合于空间运动判断。</p><p>两者看起来很接近，不过加速度计只能侦测物体的移动行为，并不具备精确侦测物体角度改变的能力，陀螺仪可以侦测物体水平改变的状态，但无法计算物体移动的激烈程度。</p><hr><p>数据格式：</p><ul><li>0x3B，加速度计的X轴分量ACC_X</li><li>0x3D，加速度计的Y轴分量ACC_Y</li><li>0x3F，加速度计的Z轴分量ACC_Z</li><li>0x41，当前温度TEMP</li><li>0x43，绕X轴旋转的角速度GYR_X</li><li>0x45，绕Y轴旋转的角速度GYR_Y</li><li>0x47，绕Z轴旋转的角速度GYR_Z</li></ul><hr><p><code>4</code>舵机控制：<a href="https://www.jianshu.com/p/f3fee0082519" target="_blank" rel="noopener">https://www.jianshu.com/p/f3fee0082519</a></p><p><code>5</code>步进电机：<a href="https://www.jianshu.com/p/877006ab4859" target="_blank" rel="noopener">https://www.jianshu.com/p/877006ab4859</a></p><p><code>7</code>继电器控制：<a href="https://www.jianshu.com/p/81ff85cbd82e" target="_blank" rel="noopener">https://www.jianshu.com/p/81ff85cbd82e</a></p><hr><p><code>6</code> L9110s四路直流电机驱动板</p><p>arduino上数字引脚动不了直流减速电机<br>试一下用驱动板控制，没</p><hr><p><code>7</code> 超声波模块</p><p><a href="https://www.arduino.cn/thread-3194-1-1.html" target="_blank" rel="noopener">https://www.arduino.cn/thread-3194-1-1.html</a></p><p>关于gnd没接时有数据：<br>GND作为参考电平在系统互联通讯时是一定要接的<br>也可能是某些信号线和GND之间的耦合代替了GND的作用<br>但这绝对是不正确的接法</p><hr><p><code>8</code>编码器（encoder）是将信号（如比特流）或数据进行编制、转换为可用以通讯、传输和存储的信号形式的设备。编码器把角位移或直线位移转换成电信号，前者称为码盘，后者称为码尺。</p><hr><p><code>9</code> 语音识别模块 LD3320</p><p>淘宝地址：<a href="https://detail.tmall.com/item.htm?id=41365254224&amp;spm=a1z09.2.0.0.67932e8dIj7xuu&amp;_u=62029c35dmffd0" target="_blank" rel="noopener">https://detail.tmall.com/item.htm?id=41365254224&amp;spm=a1z09.2.0.0.67932e8dIj7xuu&amp;_u=62029c35dmffd0</a></p><p>供电电压：5V<br>IO口输出：高电平3.3V<br>通信方式：串口通信（不支持max232，RS485）</p><p>+继电器=语音开关，可用于智能家居</p><hr><p><code>10</code> MPU6050<br>淘宝地址：<a href="https://detail.tmall.com/item.htm?id=608978882219&amp;spm=a1z09.2.0.0.67932e8dIj7xuu&amp;_u=62029c35dm8cce" target="_blank" rel="noopener">https://detail.tmall.com/item.htm?id=608978882219&amp;spm=a1z09.2.0.0.67932e8dIj7xuu&amp;_u=62029c35dm8cce</a></p><p>三轴陀螺仪+三轴加速计<br>通信方式：标准IIC通信协议</p><hr><p><code>11</code> HC06蓝牙模块</p><hr><p><strong>其它</strong>：<br>树莓派教程：<a href="https://shumeipai.nxez.com/hot-explorer" target="_blank" rel="noopener">https://shumeipai.nxez.com/hot-explorer</a></p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记219</title>
      <link href="posts/contest219.html"/>
      <url>posts/contest219.html</url>
      
        <content type="html"><![CDATA[<h2 id="三、石子游戏-VII"><a href="#三、石子游戏-VII" class="headerlink" title="三、石子游戏 VII"></a>三、石子游戏 VII</h2><p>石子游戏中，爱丽丝和鲍勃轮流进行自己的回合，<strong>爱丽丝先开始</strong> 。</p><p>有 n 块石子排成一排。每个玩家的回合中，可以从行中 <strong>移除</strong> 最左边的石头或最右边的石头，并获得与该行中剩余石头值之 <strong>和</strong> 相等的得分。当没有石头可移除时，得分较高者获胜。</p><p>鲍勃发现他总是输掉游戏（可怜的鲍勃，他总是输），所以他决定尽力 <strong>减小得分的差值</strong> 。爱丽丝的目标是最大限度地 <strong>扩大得分的差值</strong> 。</p><p>给你一个整数数组 <code>stones</code> ，其中 <code>stones[i]</code> 表示 <strong>从左边开始</strong> 的第 <code>i</code> 个石头的值，如果爱丽丝和鲍勃都 <strong>发挥出最佳水平</strong> ，请返回他们 <strong>得分的差值</strong> </p><hr><p><strong>输入</strong>：stones = <code>[5,3,1,4,2]</code><br><strong>输出</strong>：<code>6</code><br><strong>解释</strong>：</p><ul><li>爱丽丝移除 2 ，得分 5 + 3 + 1 + 4 = 13 。游戏情况：爱丽丝 = 13 ，鲍勃 = 0 ，石子 = <code>[5,3,1,4]</code> 。</li><li>鲍勃移除 5 ，得分 3 + 1 + 4 = 8 。游戏情况：爱丽丝 = 13 ，鲍勃 = 8 ，石子 = <code>[3,1,4]</code> 。</li><li>爱丽丝移除 3 ，得分 1 + 4 = 5 。游戏情况：爱丽丝 = 18 ，鲍勃 = 8 ，石子 = <code>[1,4]</code> 。</li><li>鲍勃移除 1 ，得分 4 。游戏情况：爱丽丝 = 18 ，鲍勃 = 12 ，石子 = <code>[4]</code> 。</li><li>爱丽丝移除 4 ，得分 0 。游戏情况：爱丽丝 = 18 ，鲍勃 = 12 ，石子 = <code>[]</code> 。<br>得分的差值 18 - 12 = <code>6</code> 。</li></ul><hr><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">stoneGameVII</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stones<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>stones<span class="token punctuation">)</span>        sum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            sum<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> stones<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> sum<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>l<span class="token punctuation">]</span>        @cache        <span class="token keyword">def</span> <span class="token function">dp</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> l <span class="token operator">==</span> r<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token keyword">return</span> max<span class="token punctuation">(</span>get<span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">-</span> dp<span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> get<span class="token punctuation">(</span>l<span class="token punctuation">,</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> dp<span class="token punctuation">(</span>l<span class="token punctuation">,</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ans <span class="token operator">=</span> dp<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        dp<span class="token punctuation">.</span>cache_clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># copy </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、堆叠长方体的最大高度"><a href="#四、堆叠长方体的最大高度" class="headerlink" title="四、堆叠长方体的最大高度"></a>四、堆叠长方体的最大高度</h2><p>给你 <code>n</code> 个长方体 <code>cuboids</code> ，其中第 <code>i</code> 个长方体的长宽高表示为 <code>cuboids[i] = [widthi, lengthi, heighti]</code>（下标从 <code>0</code> 开始）。请你从 <code>cuboids</code> 选出一个 <strong>子集</strong> ，并将它们堆叠起来。</p><p>如果 <code>widthi &lt;= widthj</code> 且 <code>lengthi &lt;= lengthj</code> 且 <code>heighti &lt;= heightj</code> ，你就可以将长方体 <code>i</code> 堆叠在长方体 <code>j</code> 上。你可以通过旋转把长方体的长宽高重新排列，以将它放在另一个长方体上。</p><p>返回 <strong>堆叠长方体</strong> <code>cuboids</code> 可以得到的 <strong>最大高度</strong> </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxHeight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cuboids<span class="token punctuation">)</span><span class="token punctuation">:</span>        new_cuboids <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> cuboids<span class="token punctuation">:</span>            new_cuboids<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        cuboids <span class="token operator">=</span> new_cuboids        n <span class="token operator">=</span> len<span class="token punctuation">(</span>cuboids<span class="token punctuation">)</span>        cuboids<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cuboids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> cuboids<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>cuboids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">and</span> cuboids<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> cuboids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">and</span> cuboids<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> cuboids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>cuboids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># copy</span><span class="token comment" spellcheck="true"># 像 dp 中最长上升子序列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><p>石子游戏：<a href="https://leetcode-cn.com/problems/stone-game/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/stone-game/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语言学基础</title>
      <link href="posts/yuyan.html"/>
      <url>posts/yuyan.html</url>
      
        <content type="html"><![CDATA[<h1 id="语音"><a href="#语音" class="headerlink" title="语音"></a>语音</h1><p><img src="https://img-blog.csdnimg.cn/20201222212425676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70"></p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p><img src="https://img-blog.csdnimg.cn/20201222212427328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70"></p><h4 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h4><p><code>判定下列词的构成方式，并指出是单纯词还是合成词。</code></p><p>天地        冷战        踢开<br>失明        海啸        老鹰<br>傻子        吩咐        奶奶<br>黑板        矛盾        手软</p><table><thead><tr><th>天地-并列-合成</th><th>冷战-偏正-合成</th><th>踢开-述补-合成</th></tr></thead><tbody><tr><td>失明-述宾-合成</td><td>海啸-主谓-合成</td><td>老鹰-附加-合成</td></tr><tr><td>傻子-附加-合成</td><td>吩咐-双声-单纯</td><td>奶奶-叠音-单纯</td></tr><tr><td>黑板-偏正-合成</td><td>矛盾-并列-合成</td><td>手软-述宾-合成</td></tr></tbody></table><hr><p><code>判定下列短语的构成方式</code></p><p>小王的书           逛公园          洗干净<br>努力学习            勤劳勇敢        闹元宵<br>好得很          解放思想        格外兴奋<br>拥护或反对      苦味道          非常高兴</p><table><thead><tr><th>小王的书-定中</th><th>逛公园-述宾</th><th>洗干净-述补</th></tr></thead><tbody><tr><td>努力学习-状中</td><td>勤劳勇敢-并列</td><td>闹元宵-述宾</td></tr><tr><td>好得很-述补</td><td>解放思想-述宾</td><td>格外兴奋-状中</td></tr><tr><td>拥护或反对-并列</td><td>苦味道-定中</td><td>非常高兴-状中</td></tr></tbody></table><hr><p><code>请用层次分析法分析下列句子</code></p><p>改革和发展是我们的主旋律。<br>我已经复习一晚上的英语了。<br>他听不懂这句话。<br>这部影片获得了最佳摄影奖和最佳美术奖。<br>他没有把身份证拿来。</p><h1 id="语义"><a href="#语义" class="headerlink" title="语义"></a>语义</h1><h2 id="语义、词义关系"><a href="#语义、词义关系" class="headerlink" title="语义、词义关系"></a>语义、词义关系</h2><p><strong>语义</strong>就是语言的意义，是语言形式所表达的内容，反映人们对客观事物的认识，这种认识用语言表达出来就是语义。</p><p><strong>类型</strong>：</p><ul><li>语言义：语言中固有的意义<ul><li>词汇义<ul><li>理性义</li><li>附加义</li></ul></li><li>语法义</li></ul></li><li>言语义：交际过程或语用中交际双方共同理解的意义<ul><li>词汇义</li><li>语法义</li></ul></li></ul><p><strong>词</strong>：有意义的能独立运用的最小的语言单位</p><p><strong>语素</strong>：最小的声音和意义的结合体，最小的有意义的语言单位</p><p><strong>词汇</strong>：语言里所有的词和固定短语的总和</p><ul><li>基本词汇</li><li>一般词汇</li></ul><p><strong>词义</strong>：</p><ul><li>理性意义（概念语义，逻辑意义，指称意义）</li><li>附加意义（感情色彩等）</li><li>语法意义（如伟大：形容词，可作谓语、定语）</li></ul><hr><p>同义词：几个声音不同而意义基本相同的词</p><p>同音词：语音相同而意义不同的一组词</p><hr><p>相对反义词，一定程度下反义</p><p>绝对反义词，如正-反、生-死</p><hr><p>词义的上下位关系，如奖牌（上位词），金牌（下位词）</p><p>广义语境（情景语境）</p><p>狭义语境（上下文语境）</p><p><code>试设计不同的语言环境使语句消歧</code><br>那里有很多鲁迅的书<br>A. 在新华书店里陈列着许多鲁迅的著作。<br>B. 在博物馆里陈列着不少鲁迅收藏的图书。<br>C. 在我们中文系的资料室里，有不少研究鲁迅的著作。</p><hr><p>本义：词的有历史可查的最初的意义</p><p>派生义：由本义衍生出来的意义</p><ul><li>产生途径：<ul><li><strong>隐喻</strong>：相似关系的比喻</li><li><strong>转喻</strong>：相关关系的比喻，如：china 瓷器</li></ul></li></ul><h2 id="语义理论"><a href="#语义理论" class="headerlink" title="语义理论"></a>语义理论</h2><p><strong>格语法</strong></p><ul><li>表层格：原指某些曲折语中用于表示词间语法关系的名词和代词的形态变化。如主格、宾格等。这些是传统上的格，属于表层格</li><li>深层格：也称为语义角色。它是指句子中体词（名词、代词等）和谓词（动词、形容词等）之间的及物性关系</li><li>施事格</li><li>工具格 </li><li>与格，句子动词所表现的事件、行为的参与者。</li><li>使成格，由动词确定的动作或状态所形成的客体或有生物。</li><li>方位格</li><li>客体格</li></ul><p><strong>语义网络</strong>：通过由概念和语义关系组成的有向图来表达知识、描述语义。</p><ul><li>一般用三元组（节点1，弧，节点2）来表达最基本的语义单元。</li></ul><p><strong>义素分析法</strong></p><ul><li>义素：对义位进行微观分析得到的语义单位。如“男人”这个义项可以分析为：[男性、成年、人]。其中[男性]、[成年]、[人]就是三个义素。</li><li>分析的原则<ul><li>对等性原则</li><li>系统性原则</li><li>简明性原则</li></ul></li><li><code>步骤</code><ul><li>确定范围</li><li>比较异同</li><li>简化义素</li></ul></li></ul><p><a href="https://img-blog.csdnimg.cn/20201223201452274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" target="_blank" rel="noopener">义素分析的使用</a></p><p><strong>语义场理论</strong></p><ul><li>语义场：由具有某些沟通核心义素的词语类聚而成的场或聚合体。<ul><li>层次性</li><li>系统性</li><li>相对性</li></ul></li></ul><h2 id="句义分析"><a href="#句义分析" class="headerlink" title="句义分析"></a>句义分析</h2><p><strong>句子意义</strong></p><ul><li>逻辑意义【句子中实词本身的意义和相互间的语义关系】</li><li>语法意义【词语的语法形式所表现的意义】</li><li>语用意义【说话人说出该句子时的交际意图和交际价值】</li></ul><p><strong>述谓结构</strong><br>常见的格有：</p><ul><li>“施事格”（A, Agentive）:动作或性状的主体</li><li>“受事格”（O, Object）:受动作支配的对象</li><li>“与事格”（D, Dative）:动作的参与者或受益者</li><li>“时间格”（T, Time) :动作的时间</li><li>“处所格”（L, Locative）:动作的处所方位</li><li>“工具格”（I, Instrumental）:动作的工具材料</li><li>“结果格”（F, Factitive）: 动作的结果</li></ul><p><strong>语义指向</strong></p><ul><li>狭义理解：语义指向是句子中某句法成分与哪个词语或哪个成分在语义上发生最直接的语义联系。主要反映成分之间的“相关关系”</li><li>语义指向分析是对述谓结构分析的一种必要的补充。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电路分析</title>
      <link href="posts/7c5f.html"/>
      <url>posts/7c5f.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、总论及电阻电路的分析"><a href="#一、总论及电阻电路的分析" class="headerlink" title="一、总论及电阻电路的分析"></a>一、总论及电阻电路的分析</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>集总电路</strong>：由电容、电感、电阻等集总参数元件组成的电路。<br><strong>集总假设</strong>：在电路分析过程中，各电器元件视为‘集总参数元件’（实际电路的尺寸远小于使用时最高工作频率对应的波长）。</p><p><strong>电阻电路</strong>：只含电阻元件和电源元件的电路。</p><p><strong>直流电路</strong>：电路中所含电源都是直流电源。</p><hr><p><strong>KCL</strong>：对于集总电路中的 <strong>任一节点</strong> ，在任意时刻，流进（或流出）该节点的所有支路电流的代数和为0。<br><strong>推广</strong>：对于任一集总电路的任一割集，在任一时刻，该割集的所有支路电流的代数和为零。</p><p><strong>KVL</strong>：对于集总电路中的 <strong>任一回路</strong> ，在任一时刻，沿该回路全部支路电压的代数和等于零。</p><p><strong>特勒根定理</strong>：电路各元件吸收功率的代数和为0。</p><hr><p><strong>受控源</strong>：输出电压或电流受到电路中其它部分的电压或电流控制的电源。</p><ul><li>VCVS、VCCS 的 <code>i1</code> 为0</li><li>CCVS、CCCS 的 <code>u1</code> 为0</li></ul><p><strong>理想电压源</strong>：一个二端元件当它接入任一电路时，如果其两端电压始终 <strong>保持规定的值或一定的时间函数</strong> ，而与其电流无关，则称为理想电压源。</p><p><strong>理想电流源</strong>：一个二端元件当它接入任一电路时，如果其两端电流始终 <strong>保持规定的值或一定的时间函数</strong> ，而与其电压无关，则称为理想电流源。</p><hr><p><strong>割集</strong>：有支路集S，在连通图G中移去支路集S，G变成两个互不连通的子图，少移去一条支路都不行。</p><p><strong>树</strong>：树T是连通图G的一个子图且满足:（联通）（包含所有节点）（不含闭合路径）</p><hr><p><strong>电导</strong>：<code>G = 1/R</code>，单位：<code>S</code></p><p><strong>网络函数</strong>：对单一激励的线性、时不变电路，指定响应与激励之比，记为 <code>H</code> <code>H = 响应/激励</code></p><p><strong>单口网络</strong>：对外只有两个端口的网络整体。</p><p><strong>等效</strong>：两个单口网络的电压、电流关系完全相同。</p><hr><h2 id="分析方法"><a href="#分析方法" class="headerlink" title="分析方法"></a>分析方法</h2><ul><li>2b法，<code>n-1</code>个独立KCL方程，<code>b-n-1</code>个独立KVL方程，<code>b</code>个VCR方程</li><li>支路电流法、支路电压法</li><li>网孔分析法<ul><li><code>内容</code>【网孔电流间的KVL】</li><li><strong>网孔</strong>：在回路内部不另含支路的回路。</li><li>参考例题： <code>2-1</code> <code>2-2</code> <code>2-3</code>（电流源两端有电压，设为U） <code>2-4</code></li></ul></li><li>节点分析法⭐<ul><li><code>内容</code>【节点电压降间的电流平衡】</li><li><code>说明</code>：<ul><li><code>G11·u1+G12·u2+···=i11</code></li><li><code>G12</code>称为互电导，连接两个节点之间的电导，取负号。</li><li><code>i11</code>是电源输送给节点1的电流的代数和。</li></ul></li><li><strong>节点电压</strong>：节点到参考节点的电压降</li><li>参考例题： <code>2-5</code> <code>2-6</code> <code>2-7</code> <code>2-8</code></li></ul></li><li>回路分析法<ul><li><code>内容</code>【选定树，逐个连接支路，其余类似网孔分析】</li><li>参考例题： <code>2-12</code>   <a href="https://img-blog.csdnimg.cn/20201223104402687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" target="_blank" rel="noopener">课堂例题</a></li></ul></li></ul><p>简化法则1：节点数少时，选择节点法，且设法选择电压源负极为参考电位。<br>简化法则2：网孔数少时，选择网孔法或回路法，且设法选择电流源为连支。</p><hr><h2 id="电路定理"><a href="#电路定理" class="headerlink" title="电路定理"></a>电路定理</h2><ul><li>线性电阻电路解答的存在性与唯一性定理<ul><li><code>内容</code>【由正电阻及独立电源组成且不含纯电压源回路及纯电流源割集的电路，其解答存在且唯一】</li></ul></li><li>齐次定理<ul><li><code>内容</code>【当一个激励源（独立电压源或电流源）作用于线性电路时，其任意支路的响应（电压或电流）与该激励源成正比】</li><li>参考例题：<a href="https://img-blog.csdnimg.cn/2020122311142034.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" target="_blank" rel="noopener">课堂例题</a></li></ul></li><li>叠加定理<ul><li><code>内容</code>【线性电路中，任一支路电流(或电压)都是电路中各个独立电源单独作用时，在该支路产生的电流(或电压)的代数和】</li><li><strong>电压源短路</strong>，<strong>电流源开路</strong>(去掉符号表示的圈圈)，受控源不变</li><li>参考例题： <code>3-3</code> <code>3-4</code>(受控源不参与叠加)  <code>3-6</code>(叠加定理简化了电路激励与响应的关系)</li><li>当N中含有电源时，假设该电源产生的U为恒值，<code>作业3-14</code></li></ul></li><li>置换定理<ul><li><code>内容</code>【利用理想电源替代支路】</li><li>参考例题：<code>4-4</code></li></ul></li><li>戴维南定理<ul><li><code>内容</code>【含电源、线性电阻、受控源的单口网络（含源线性单口网络），就其端口而言，可等效为一个电压源串联电阻支路】</li><li>参考例题：<code>4-12</code> <code>4-13</code>( <strong>戴维南等效电阻</strong> = 开路电压/短路电流 ) <code>4-14</code>(VCR: u = u0-R0·i)</li></ul></li><li>诺顿定理<ul><li><code>内容</code>【含源线性单口网络，就其端口而言，可等效为一个电流源并联电阻支路】</li><li>参考例题：<code>4-16</code>(叠加求Isc，电源去圈求R0，等效电路解决问题)</li><li>端口短路求Isc，电源去圈求R0，等效电路解决问题，<code>作业4-45</code></li></ul></li><li>最大功率传输定理<ul><li><code>内容</code>【含源线性单口网络传递给可变负载R的功率最大的条件：负载R应与戴维南（或诺顿）等效电阻相等】</li><li>说明：单口网络和它的等效电路，就内部功率而言是不等效的，效率不一定是50%</li><li>参考例题：<code>4-17</code></li></ul></li></ul><h1 id="二、动态电路时域分析"><a href="#二、动态电路时域分析" class="headerlink" title="二、动态电路时域分析"></a>二、动态电路时域分析</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>动态元件</strong>：</p><ul><li>电容 ( <code>q(t)=C·u(t)</code> <code>i(t)=C·du/dt</code> <code>W=C·u^2/2</code> )<ul><li>串联时：<code>1/C = 各个倒数相加</code></li><li>并联时：<code>C = 各个相加</code></li><li><strong>反电阻</strong></li></ul></li><li>电感 ( <code>磁链</code> <code>Ψ(t)=L·i(t)</code> <code>u(t)=L·di/dt</code> <code>W=L·i^2/2</code> )<ul><li>串联时：<code>L = 各个相加</code></li><li>并联时：<code>1/L = 各个倒数相加</code></li><li><strong>类电阻</strong></li></ul></li></ul><p><a href="https://img-blog.csdnimg.cn/20201223145557770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" target="_blank" rel="noopener">课堂例题：练习电容、电感微积分特性</a></p><hr><p><strong>动态电路</strong>：至少包含一个动态元件的电路</p><p><strong>一阶电路</strong>：用一阶微分方程描述的电路。</p><p><strong>状态变量</strong>：电容电压和电感电流。</p><p><strong>状态方程</strong>：基于状态变量建立的电路方程。</p><hr><p><strong>换路</strong>：电路中开关的接通、断开或元件参数突然变化。</p><p><strong>换路定理</strong>：在换路期间，电容电压和电感电流不发生跃变。</p><hr><p><strong>零输入响应</strong>：在 <code>t&gt;=t0</code> 时，没有外加输入，仅由 <code>t0</code> 时刻 <strong>非零初始状态</strong> 引起的响应。</p><p><strong>零状态响应</strong>：在零初始状态时，<strong>仅由</strong> <code>t0</code> 时刻 <strong>施加于电路的输入</strong> 引起的响应。</p><p><strong>全响应</strong>：零输入响应 + 零状态响应</p><hr><p>独立初始值的求解，电容：U(0+)=U(0-)，电感：I(0+)=I(0-) <a href="https://img-blog.csdnimg.cn/20201223154120211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener">例题</a></p><p>非独立初始值的求解，电容用电压源代替，电感用电流源代替。<a href="https://img-blog.csdnimg.cn/20201223154120212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener">例题</a></p><p>电容电路时间常数：RC<br>电感电路时间常数：L/R</p><h2 id="三要素法⭐"><a href="#三要素法⭐" class="headerlink" title="三要素法⭐"></a>三要素法⭐</h2><ul><li>y(0-)</li><li>y(∞)</li><li>时间常数</li></ul><p><a href="https://img-blog.csdnimg.cn/20201223155324701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" target="_blank" rel="noopener">三要素法分析电路的基本步骤</a></p><p>PPT10中的：<a href="https://img-blog.csdnimg.cn/20201223160143552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener">例题1</a> <a href="https://img-blog.csdnimg.cn/20201223160143561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener">例题2(1)</a> <a href="https://img-blog.csdnimg.cn/20201223160143559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener">例题2(2)</a><br>PPT11中第一个题</p><h1 id="三、动态电路相量分析"><a href="#三、动态电路相量分析" class="headerlink" title="三、动态电路相量分析"></a>三、动态电路相量分析</h1><p>时域（正弦函数集合）–&gt;相量域（相量集合）</p><p><strong>正弦量</strong>：大小和方向随时间按正弦规律变化的电压、电流等电学量统称为正弦交流电或正弦量。</p><p><strong>三要素</strong>：</p><ul><li>幅值（Um,Im），反映正弦量变化幅度的大小</li><li>角频率（w），反映正弦量变化快慢</li><li>初相位（θ），反映正弦量的计时起点</li></ul><hr><p>相量的表示：<strong>加一个小圆点</strong> 用来和普通的复数相区别(强调它与正弦量的联系)，它表示的不是一般意义的向量，而是表示一个正弦量。 <strong>振幅相量</strong> 的表示比有效值相量多m</p><ul><li>复数的运算<ul><li>加减法-图解</li><li>乘法：模相乘，角相加</li><li>除法：模相除，角相减</li><li>参考例题：<code>9-1</code></li></ul></li><li>旋转因子</li><li>相量图<ul><li>同频率的相量才能画在同一复平面</li></ul></li></ul><p><a href="https://img-blog.csdnimg.cn/20201223184652211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" target="_blank" rel="noopener">电感和电容的对偶关系</a></p><hr><p><strong>关于阻抗的理解</strong>：<code>ZL = jwL</code>，交流电越难以通过线圈，说明电感量越大，电感的阻碍作用就越大；交流电的频率越高，也难以通过线圈，说明电感的阻碍作用也大。</p><p><strong>关于电感电流滞后电压的理解</strong>：<br>对于电感，先施加电压，之后才会产生电流。</p><p><strong>关于电容电压滞后电流的理解</strong>：<br>先施加电流，之后才会逐渐产生电压。</p><hr><ul><li>阻抗<ul><li><code>定义</code>【元件在正弦稳态时电压相量与电流相量之比】</li><li><code>Zr = R</code></li><li><code>Zc = 1/jwC = -j/wC</code> </li><li><code>ZL = jwL</code></li></ul></li><li>导纳<ul><li><code>定义</code>【阻抗的倒数】</li><li><code>Yr= 1/R= G</code> </li><li><code>Yc = jwC</code> </li><li><code>YL = 1/jwL</code></li></ul></li><li>感抗：<ul><li><code>XL = wL</code></li></ul></li><li>容抗：<ul><li><code>XC = -1/wC</code></li></ul></li><li><strong>分析方法</strong>：<ul><li>画相量模型图，求出阻抗，类比电阻电路进行分析</li><li>相量图分析法</li></ul></li></ul><hr><p><strong>有功功率</strong>：<code>P = UIcosθ</code> 有功功率实际上是电阻消耗的功率，亦称为平均功率。</p><p><strong>无功功率</strong>：<code>Q = UIsinθ</code> 表示交换功率的最大值，单位：<code>var</code></p><ul><li>由储能元件LC决定，表示电抗的瞬时功率的最大值</li></ul><p><strong>视在功率</strong>：<code>S = UI</code> 单位：<code>VA</code></p><ul><li>反映电子设备的最大容量</li></ul><p><a href="https://img-blog.csdnimg.cn/20201223232016653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" target="_blank" rel="noopener">复功率</a>  <a href="https://img-blog.csdnimg.cn/20201223232201601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" target="_blank" rel="noopener">例题1</a></p><hr><p><code>cosθ</code> 称为<strong>功率因素</strong></p><ul><li>功率因素低下引起的问题：<ul><li>电源设备的容量不能充分利用（无功功率占用容量）</li><li>增加线路和发动机绕组的功率损耗</li></ul></li><li>功率因素低的原因：<ul><li>日常生活中多为感性负载</li></ul></li><li>功率因素的提高：<ul><li>在感性负载两端并联电容</li></ul></li></ul><p><a href="https://img-blog.csdnimg.cn/20201223231817701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener">共轭匹配</a> <a href="https://img-blog.csdnimg.cn/20201223231817702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener">模值匹配</a></p><hr><p>PPT14中：利用相量图来解决问题，动态元件功率问题<br>PPT15中：<strong>功率问题</strong>，一些复习题</p><h1 id="other"><a href="#other" class="headerlink" title="other"></a><em>other</em></h1><p>总结：</p><ul><li>一个假设：集总假设</li><li>两类约束：元件约束，基尔霍夫约束</li><li>三大基本方法：叠加、分解、变换域</li></ul><hr><p>其它：</p><ul><li>多画图</li><li>看清电路再解答</li><li>数学我真的没好好学啊</li></ul><hr><p>参考资料：</p><ul><li>《简明电路分析基础》-李瀚荪</li><li>课堂PPT</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="posts/database.html"/>
      <url>posts/database.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、数据库系统概述"><a href="#一、数据库系统概述" class="headerlink" title="一、数据库系统概述"></a>一、数据库系统概述</h1><p><code>1.4</code></p><p><strong>外模式</strong>   –&gt;   用户级</p><ul><li><p>数据库用户能看到并允许使用的那部分局部数据的逻辑结构和特征的描述 </p><p>||   <code>外模式/模式映像</code><br>||    保证了数据与程序间的逻辑一致性</p></li></ul><p><strong>模式</strong>     –&gt;   概念级</p><ul><li><p>数据库中全体数据的逻辑结构和特征的描述</p></li><li><p>一个数据库只有一个模式</p><p>||   <code>模式/内模式映像</code><br>||    保证了数据的物理一致性</p></li></ul><p><strong>内模式</strong>   –&gt;   物理级</p><ul><li>它是对数据库存储结构的描述，是数据在数据库内部的表示方式 </li></ul><blockquote><p>三级模式和二级映像的优点：</p><ul><li>保证数据独立性</li><li>简化用户接口</li><li>有利于数据共享</li><li>有利于数据的安全保密</li></ul></blockquote><p><code>1.3</code></p><p>数据库系统（DBS）的组成：</p><ul><li>DB（是存储在计算机内、有组织的、可共享的数据和数据对象的集合）</li><li>用户</li><li>软件系统</li><li>硬件系统</li></ul><p><code>1.6</code></p><p>数据库系统的<strong>核心软件</strong>：DBMS</p><p>数据库管理系统（DBMS）的主要功能：</p><ul><li>数据定义</li><li>数据操纵</li><li>数据库运行管理</li><li>数据库的建立和维护</li><li>数据通信接口</li><li>数据存储、组织和管理</li></ul><p>数据库管理系统（DBMS）的组成：</p><ul><li>语言编译处理程序</li><li>系统运行控制程序</li><li>系统建立、维护程序</li><li>数据字典</li></ul><p><code>1.9</code></p><ul><li>层次模型</li><li>网状模型</li><li>关系模型<ul><li>一个关系实例对应一张由行和列组成的二维表</li><li>每<strong>一行元组</strong>对应的列的属性值叫<strong>分量</strong></li><li>一个关系数据库文件中个条记录，前后顺序可颠倒</li><li>关系模式的任何属性不可再分</li></ul></li><li>面向对象模型</li></ul><h1 id="二、关系数据库"><a href="#二、关系数据库" class="headerlink" title="二、关系数据库"></a>二、关系数据库</h1><p><strong>候选码</strong>，能唯一标识关系中元组的一个属性或属性集</p><ul><li>唯一性</li><li>最小性</li></ul><p><strong>主码</strong>，被选用的候选码。</p><p><strong>超码</strong>，能够决定所有属性，其中可以包含候选码外其他属性。</p><hr><p>关系模型中的三类<strong>完整性约束</strong>：</p><ul><li>实体完整性</li><li>参照完整性</li><li>用户自定义完整性</li></ul><hr><p><strong>关系代数运算符</strong>：</p><ul><li>1.集合运算符<ul><li><code>∪</code> <code>-</code> <code>∩</code> 和 广义笛卡尔积<code>x</code></li></ul></li><li>2.专门的关系运算符<ul><li>选取、投影、连接</li></ul></li><li>3.算术比较运算符</li><li>4.逻辑运算符</li></ul><h2 id="关系代数练习"><a href="#关系代数练习" class="headerlink" title="关系代数练习"></a>关系代数练习</h2><p>基于以下三个关系:  </p><ul><li>学生S(SNO, SNAME, AGE)</li><li>课程C(CNO, CNAME, CT)</li><li>选修SC(SNO, CNO, SCORE)</li></ul><p>其中SNO, SNAME, AGE, CNO, CNAME, CT, SCORE分别代表学号、学生姓名、年龄、课程编号、课程名称、课时、成绩。</p><p>用关系代数完成下列操作：</p><p>(1)    查询年龄小于17或者大于23的学生选修的课程编号。<br><code>ΠCNO((σage&lt;17 or age&gt;23(S)) ⋈SC)</code></p><p>(2)    给出重名的名字。<br><code>ΠS.SNAME(σS.NAME=S1.NAME AND S.SNO!=S1.SNO (S☓ρS1(S)))</code></p><p>(3)    查询“张三”同学不学的课程编号。<br><code>ΠCNO(C) -ΠCNO(SC⋈σSNAME=&#39;张三&#39; (S))</code></p><p>(4)    给出既选修“高等数学”又选修“线性代数”的学生学号。<br><code>ΠSNO(SC⋈(σCNAME=&#39;高等数学&#39; (C)))∩ ΠSNO(SC⋈(σCNAME=&#39;线性代数&#39; (C)))</code></p><p>(5)    给出“数据库”课程成绩最高的学生学号。<br><code>R1:= ΠSNO,SCORE(SC⋈(σCNAME=&#39;数据库&#39; (C)))</code> (先将数据库成绩提出来，后面会简洁一些)<br><code>(ΠSNO ( R1 - ΠR1.SNO, R1.SCORE(σR1.SCORE&lt;R2.SCORE (R1☓ρR2(R1)))))</code></p><h1 id="三、SQL"><a href="#三、SQL" class="headerlink" title="三、SQL"></a>三、SQL</h1><p>一个数据库至少包含：</p><ul><li>数据文件 <code>.mdf</code></li><li>事务日志文件 <code>.ldf</code></li></ul><hr><p>SQL功能：</p><ul><li>数据<strong>查询</strong> <code>select</code></li><li>数据<strong>定义</strong> <code>create</code> <code>drop</code> <code>alter</code></li><li>数据<strong>操纵</strong> <code>insert</code> <code>update</code> <code>delete</code></li><li>数据<strong>控制</strong>  <code>grant</code> <code>revoke</code></li></ul><hr><h2 id="实验一：sql初步"><a href="#实验一：sql初步" class="headerlink" title="实验一：sql初步"></a>实验一：sql初步</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询1986年出生的</span><span class="token keyword">select</span> sno<span class="token punctuation">,</span>sn<span class="token punctuation">,</span>birth<span class="token keyword">from</span> s<span class="token keyword">where</span> birth <span class="token operator">like</span><span class="token string">'1986%'</span><span class="token comment" spellcheck="true">-- 或者 where year(birth)=1986</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--选取3次作业总分前三</span><span class="token keyword">select</span> top3 sno<span class="token punctuation">,</span>cno<span class="token punctuation">,</span>hw1<span class="token operator">+</span>hw2<span class="token operator">+</span>hw3 <span class="token keyword">as</span> total<span class="token keyword">from</span> homework<span class="token keyword">order</span> <span class="token keyword">by</span> total <span class="token keyword">desc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实验二：sql子查询"><a href="#实验二：sql子查询" class="headerlink" title="实验二：sql子查询"></a>实验二：sql子查询</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--查询与xxx同一班级的其他学生信息</span><span class="token comment" spellcheck="true">--连接查询</span><span class="token keyword">select</span> s<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">from</span> s<span class="token punctuation">,</span> s <span class="token keyword">as</span> s1<span class="token keyword">where</span> s<span class="token punctuation">.</span>class<span class="token operator">=</span>s1<span class="token punctuation">.</span>class <span class="token operator">and</span> s1<span class="token punctuation">.</span>sn<span class="token operator">=</span>xxx <span class="token operator">and</span> s<span class="token punctuation">.</span>sn<span class="token operator">!=</span>xxx<span class="token comment" spellcheck="true">--子查询</span><span class="token keyword">select</span> s<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">from</span> s<span class="token keyword">where</span> class<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> class <span class="token keyword">from</span> s <span class="token keyword">where</span> sn<span class="token operator">=</span>xxx<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">.</span>sn<span class="token operator">!=</span>xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询K001和M001都没有选修的学生信息</span><span class="token keyword">select</span> sno<span class="token punctuation">,</span>cno<span class="token punctuation">,</span>hw1<span class="token punctuation">,</span>hw2<span class="token punctuation">,</span>hw3<span class="token keyword">from</span> homework<span class="token keyword">where</span> sno <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span>    <span class="token keyword">select</span> sno    <span class="token keyword">from</span> homework    <span class="token keyword">where</span> cno<span class="token operator">=</span><span class="token string">'K001'</span> <span class="token operator">or</span> cno<span class="token operator">=</span><span class="token string">'M001'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询学时最少的课程</span><span class="token keyword">select</span> cn<span class="token keyword">from</span> <span class="token number">c</span><span class="token keyword">where</span> ct <span class="token operator">&lt;=</span><span class="token keyword">all</span><span class="token punctuation">(</span><span class="token keyword">select</span> ct <span class="token keyword">from</span> <span class="token number">c</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--或</span><span class="token keyword">select</span> cn<span class="token keyword">from</span> <span class="token number">c</span><span class="token keyword">where</span> <span class="token operator">not</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token number">c</span> <span class="token keyword">as</span> <span class="token number">c1</span> <span class="token keyword">where</span> <span class="token number">c</span><span class="token punctuation">.</span>ct<span class="token operator">></span><span class="token number">c1</span><span class="token punctuation">.</span>ct<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实验三：sql聚合函数"><a href="#实验三：sql聚合函数" class="headerlink" title="实验三：sql聚合函数"></a>实验三：sql聚合函数</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询学生人数</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">from</span> homework<span class="token keyword">where</span> cno<span class="token operator">=</span><span class="token string">'K001'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询多少个不同的班级</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> class<span class="token punctuation">)</span><span class="token keyword">from</span> s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询作业平均分</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>hw1<span class="token punctuation">)</span><span class="token keyword">from</span> <span class="token number">c</span> <span class="token keyword">join</span> homework <span class="token keyword">on</span> <span class="token number">c</span><span class="token punctuation">.</span>cno<span class="token operator">=</span>homework<span class="token punctuation">.</span>cno <span class="token operator">and</span> cn<span class="token operator">=</span><span class="token string">'python'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询选课人数最多的两名课程，给出课程号</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">2</span> cno<span class="token keyword">from</span> homework<span class="token keyword">group</span> <span class="token keyword">by</span> cno<span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token function">count</span><span class="token punctuation">(</span>sno<span class="token punctuation">)</span> <span class="token keyword">desc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询两个以上男生选修的课程编号。（包含两个）</span><span class="token comment" spellcheck="true">-- 因为一个SN对应多个SNo时出错</span><span class="token keyword">select</span> CNO<span class="token keyword">from</span> s <span class="token keyword">join</span> homework <span class="token keyword">on</span> s<span class="token punctuation">.</span>sno<span class="token operator">=</span>homework<span class="token punctuation">.</span>sno <span class="token operator">and</span> sex<span class="token operator">=</span><span class="token string">'男'</span><span class="token keyword">group</span> <span class="token keyword">by</span> CNO<span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 9. 查询每个同学的选课门数，如果没有选修则选课门数为0。</span><span class="token keyword">select</span> s<span class="token punctuation">.</span>sno<span class="token punctuation">,</span>sn<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>cno<span class="token punctuation">)</span> <span class="token keyword">as</span> 选课数<span class="token keyword">from</span> s <span class="token keyword">left</span> <span class="token keyword">join</span> homework <span class="token keyword">on</span> s<span class="token punctuation">.</span>sno<span class="token operator">=</span>homework<span class="token punctuation">.</span>sno<span class="token keyword">group</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span>sno<span class="token punctuation">,</span>sn<span class="token keyword">order</span> <span class="token keyword">by</span> 选课数 <span class="token keyword">desc</span><span class="token comment" spellcheck="true">-- 方法二：</span><span class="token keyword">select</span> s<span class="token punctuation">.</span>sno<span class="token punctuation">,</span>sn<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>cno<span class="token punctuation">)</span> <span class="token keyword">as</span> 选课数<span class="token keyword">from</span> s <span class="token keyword">join</span> homework <span class="token keyword">on</span> s<span class="token punctuation">.</span>sno<span class="token operator">=</span>homework<span class="token punctuation">.</span>sno<span class="token keyword">group</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span>sno<span class="token punctuation">,</span>sn<span class="token keyword">union</span><span class="token keyword">select</span> sno<span class="token punctuation">,</span>sn<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">as</span> 选课数<span class="token keyword">from</span> s<span class="token keyword">where</span> sno <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> sno <span class="token keyword">from</span> homework<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实验四：数据更新与约束⭐"><a href="#实验四：数据更新与约束⭐" class="headerlink" title="实验四：数据更新与约束⭐"></a>实验四：数据更新与约束⭐</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创表，约束，主外键</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Book<span class="token punctuation">(</span>    BNo CHAR<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    BName    nVARCHAR<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Publish    nVARCHAR<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    PDate    <span class="token keyword">datetime</span><span class="token punctuation">,</span>    BAuth    nVARCHAR<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    bprice    <span class="token keyword">NUMERIC</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    binprice    <span class="token keyword">NUMERIC</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    BCount    <span class="token keyword">INT</span> <span class="token keyword">check</span><span class="token punctuation">(</span>Bcount<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">check</span><span class="token punctuation">(</span>binprice<span class="token operator">&lt;</span>bprice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> BookSell<span class="token punctuation">(</span>    SDate    <span class="token keyword">datetime</span><span class="token punctuation">,</span>    BNO    CHAR<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token keyword">references</span> Book<span class="token punctuation">(</span>bno<span class="token punctuation">)</span><span class="token punctuation">,</span>    SCount    <span class="token keyword">int</span><span class="token punctuation">,</span>    SMoney    smallmoney<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--新进图书</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Book <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'9787115457004'</span><span class="token punctuation">,</span><span class="token string">'数据库原理及应用教程'</span><span class="token punctuation">,</span><span class="token string">'人民邮电出版社'</span><span class="token punctuation">,</span><span class="token string">'2017-11-1'</span><span class="token punctuation">,</span><span class="token string">'陈志泊'</span><span class="token punctuation">,</span><span class="token number">49.5</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--卖书退书</span><span class="token keyword">insert</span> <span class="token keyword">into</span> booksell <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'2020-2-1'</span><span class="token punctuation">,</span><span class="token string">'9787115457004'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">update</span> book  <span class="token keyword">set</span> bcount<span class="token operator">-</span><span class="token operator">=</span><span class="token number">20</span> <span class="token keyword">where</span> bno<span class="token operator">=</span><span class="token string">'9787115457004'</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> booksell <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'2020-2-2'</span><span class="token punctuation">,</span><span class="token string">'9787115457004'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">update</span> book  <span class="token keyword">set</span> bcount<span class="token operator">-</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">where</span> bno<span class="token operator">=</span><span class="token string">'9787115457004'</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> booksell <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'2020-2-3'</span><span class="token punctuation">,</span><span class="token string">'9787115457004'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> smoney<span class="token operator">/</span>scount<span class="token operator">*</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">from</span> booksell <span class="token keyword">where</span> scount<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">update</span> book  <span class="token keyword">set</span> bcount<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">where</span> bno<span class="token operator">=</span><span class="token string">'9787115457004'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 补充：delete from&lt;表名> [where&lt;条件>]</span><span class="token comment" spellcheck="true">-- 不加where可以修改多行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、关系数据库理论⭐"><a href="#四、关系数据库理论⭐" class="headerlink" title="四、关系数据库理论⭐"></a>四、关系数据库理论⭐</h1><p>关系模式中各属性之间相互依赖，相互制约的联系称为数据依赖。数据依赖一般分为 <strong>函数依赖</strong> 和 <strong>多值依赖</strong>。</p><p><strong>函数依赖</strong> 是关系模式中属性之间的一种逻辑依赖关系。</p><ul><li>完全函数依赖：属性集 <code>X</code> 的任何真子集都推不出 <code>Y</code>。</li><li>部分函数依赖：属性集 <code>X</code> 的某个真子集推出了 <code>Y</code>。</li></ul><blockquote><p><strong>求解最小函数依赖集</strong>：</p><ol><li>将每个函数依赖的右边变成单属性</li><li>去掉每个函数依赖左边的冗余属性</li><li>去掉冗余的函数依赖</li></ol></blockquote><blockquote><p><code>F+</code> = <code>G+</code> 时, 函数依赖集 <code>F</code> 和 <code>G</code> 等价</p></blockquote><hr><p><strong>闭包</strong>：<code>F+</code> 是被 <code>F</code> 逻辑蕴涵的全部函数依赖集合（字面意思）。</p><blockquote><p>若 <code>X+</code>包含了 <code>R</code> 的全部属性，则属性集 <code>X</code> 是 <code>R</code> 的一个码。</p></blockquote><hr><p><strong>1NF</strong> ：关系中每个属性都是不可再分的原子项</p><p>&emsp;&emsp;<code>1NF</code> -&gt; <code>2NF</code> 【消除了非主属性对主码 <strong>部分函数依赖</strong>】</p><p><strong>2NF</strong> ：不存在非主属性对主码部分函数依赖（每个非主属性都完全函数依赖于主码）</p><p>&emsp;&emsp;<code>2NF</code> -&gt; <code>3NF</code> 【消除非主属性对主码的 <strong>传递函数依赖</strong>】</p><p><strong>3NF</strong> ：每个非主属性都不传递函数依赖于主码.</p><p><strong>BCNF</strong> ：如果关系模式R∈1NF，且对于R的每个函数依赖X→Y（Y不属于X），决定因数X都包含了R的一个候选码，那么R∈BCNF。</p><hr><p><strong>书上例题</strong>：</p><ul><li>求函数依赖集的闭包 <code>4-2</code></li><li>求解候选码 <code>4-3</code> <code>4-4</code> <code>4-5</code></li><li>求最小函数依赖集 <code>4-6</code> <code>4-7</code> <code>4-8</code> <code>4-9</code></li><li>关系模式的分解 <code>4-10~14</code></li><li>范式 <code>4-15~21</code></li></ul><p><strong>判定问题：</strong></p><ul><li><code>无损连接性判定</code><br>①画表格（行是单个属性，列是分解的属性集）<br>②属性存在于属性集中的、能函数依赖推导出来的<br>③若有一行都满足②，则是无损连接分解<br>④特殊判定，R1 ∩ R2 -&gt; （R1-R2 或 R2-R1)</li><li><code>函数依赖保持性判定</code><br>看看每个分解的部分得出的依赖，能不能凑齐总的函数依赖</li></ul><p><strong>其他问题</strong>：</p><ul><li>任何一个包含两个属性的关系模式一定满足 BCNF</li><li>{ AB-&gt;CD , A-&gt;D } 最高属于 1NF</li></ul><h1 id="五、数据库安全保护"><a href="#五、数据库安全保护" class="headerlink" title="五、数据库安全保护"></a>五、数据库安全保护</h1><h5 id="一、安全性控制"><a href="#一、安全性控制" class="headerlink" title="一、安全性控制"></a>一、安全性控制</h5><ul><li><code>目的</code>：【防止非法使用造成数据的泄露、更改和破环】</li><li><code>方法</code>：<ul><li>用户标识和鉴定</li><li>用户存取权限控制</li><li>定义视图</li><li>数据加密和审计</li></ul></li><li>当用户要访问数据库时，必须要有 <code>登录账号</code> <code>用户账号</code></li></ul><hr><h5 id="二、完整性控制"><a href="#二、完整性控制" class="headerlink" title="二、完整性控制"></a>二、完整性控制</h5><p><code>目的</code>：【防止合法用户加入不符合语义的数据】<br><code>方法</code>：</p><ul><li>约束</li><li>默认值</li><li>规则</li><li>存储过程</li><li>触发器</li></ul><hr><h5 id="三、并发性控制"><a href="#三、并发性控制" class="headerlink" title="三、并发性控制"></a>三、并发性控制</h5><p><code>目的</code>：【防止多个同时存取同一数据造成不一致】<br><code>方法</code>：封锁（普遍采用），时标</p><hr><h5 id="四、数据恢复"><a href="#四、数据恢复" class="headerlink" title="四、数据恢复"></a>四、数据恢复</h5><p><code>三种模式</code></p><ul><li>完整恢复模式</li><li>大容量日志记录恢复模式（使用数据库备份和日志备份来还原数据库）</li><li>简单恢复模式（可执行完全数据库备份和增量数据库备份来还原数据库）</li></ul><p><code>基本原理</code>：利用数据的冗余（登记日志文件，数据转储）</p><h2 id="实验五：数据库安全管理"><a href="#实验五：数据库安全管理" class="headerlink" title="实验五：数据库安全管理"></a>实验五：数据库安全管理</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 授权权限</span><span class="token keyword">use</span> testgo<span class="token keyword">grant</span> <span class="token keyword">insert</span> <span class="token keyword">on</span> dbo<span class="token punctuation">.</span>t1 <span class="token keyword">to</span> zhang <span class="token keyword">with</span> <span class="token keyword">grant</span> <span class="token keyword">option</span>go<span class="token comment" spellcheck="true">--收回权限(级连)</span><span class="token keyword">revoke</span> <span class="token keyword">insert</span> <span class="token keyword">on</span> bdo<span class="token punctuation">.</span>t1 <span class="token keyword">from</span> zhang <span class="token keyword">cascade</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六、数据库设计"><a href="#六、数据库设计" class="headerlink" title="六、数据库设计"></a>六、数据库设计</h1><p>①<strong>需求分析</strong></p><ul><li>数据流图（表达了数据和处理过程的关系）</li><li>数据字典（对系统中数据的详细描述）</li></ul><p>②<strong>概念结构设计</strong></p><ul><li>概念模型（ER图）<ul><li>ER图冲突：属性冲突、命名冲突、结构冲突</li></ul></li></ul><p>③<strong>逻辑结构设计</strong></p><ol><li>初始关系模式设计</li><li>关系模式规范化</li><li>模式的评价和改进</li></ol><p>④<strong>物理结构设计</strong></p><ul><li>确定表、字段、索引</li></ul><p>⑤<strong>实施</strong></p><ul><li>建立实际数据库结构</li></ul><p>⑥<strong>运行和维护</strong></p><h1 id="七、高级应用"><a href="#七、高级应用" class="headerlink" title="七、高级应用"></a>七、高级应用</h1><hr><p><strong>事务</strong>：数据库系统中执行的一个工作单位，DBMS并发控制的基本单位。</p><ul><li>原子性 <code>要么不做，要么全做</code></li><li>一致性</li><li>隔离性</li><li>持久性</li></ul><hr><p><strong>批处理</strong>：一个批处理语句在一起通过解析才执行，每个批处理（两个 <code>go</code> 之间）单独执行。</p><hr><h2 id="实验六：Transaction-sql"><a href="#实验六：Transaction-sql" class="headerlink" title="实验六：Transaction-sql"></a>实验六：Transaction-sql</h2><p><code>事务练习</code></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--zhang转账给li</span><span class="token keyword">use</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">begin</span> <span class="token keyword">transaction</span>    <span class="token keyword">declare</span> <span class="token variable">@num</span><span class="token operator">=</span>balance <span class="token keyword">from</span> account <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'zhang'</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">@ba</span><span class="token operator">></span><span class="token number">100</span><span class="token punctuation">)</span>        <span class="token keyword">begin</span>        <span class="token keyword">update</span> account <span class="token keyword">set</span> balance<span class="token operator">+</span><span class="token operator">=</span><span class="token number">100</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'li'</span>        <span class="token keyword">update</span> account <span class="token keyword">set</span> balance<span class="token operator">-</span><span class="token operator">=</span><span class="token number">100</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'wang'</span>        <span class="token keyword">commit</span>        <span class="token keyword">end</span>    <span class="token keyword">else</span>        <span class="token keyword">rollback</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>case练习</code></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span>balance<span class="token punctuation">,</span>    <span class="token keyword">case</span>        <span class="token keyword">when</span> balance<span class="token operator">></span><span class="token number">1000</span> <span class="token keyword">then</span> <span class="token string">'high'</span>        <span class="token keyword">when</span> balance<span class="token operator">&lt;</span><span class="token number">1000</span> <span class="token operator">and</span> balance<span class="token operator">></span><span class="token number">0</span> the <span class="token string">'low'</span>        <span class="token keyword">else</span> <span class="token string">'other'</span>    <span class="token keyword">end</span> <span class="token keyword">as</span> 分类<span class="token keyword">from</span> account<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>时间函数练习</code></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 明年十月一星期几？</span><span class="token keyword">select</span> datename<span class="token punctuation">(</span>weekday<span class="token punctuation">,</span>cast<span class="token punctuation">(</span>year<span class="token punctuation">(</span>getdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'-10-01'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>保留两位小数</code></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> sno<span class="token punctuation">,</span><span class="token keyword">convert</span><span class="token punctuation">(</span><span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span> sc<span class="token keyword">group</span> <span class="token keyword">by</span> sno<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>自定义函数</code></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--查询成绩在XY之间的信息</span><span class="token keyword">create</span> <span class="token keyword">function</span> query<span class="token punctuation">(</span><span class="token variable">@x</span> <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token variable">@y</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">returns</span> <span class="token keyword">table</span><span class="token keyword">as</span> <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sc<span class="token keyword">where</span> score<span class="token operator">>=</span><span class="token variable">@x</span> <span class="token operator">and</span> score<span class="token operator">&lt;=</span><span class="token variable">@y</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--执行</span><span class="token keyword">declare</span> <span class="token variable">@x</span> <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token variable">@y</span> <span class="token keyword">int</span><span class="token keyword">set</span> <span class="token variable">@x</span><span class="token operator">=</span><span class="token number">60</span><span class="token keyword">set</span> <span class="token variable">@y</span><span class="token operator">=</span><span class="token number">80</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> query<span class="token punctuation">(</span><span class="token variable">@x</span><span class="token punctuation">,</span><span class="token variable">@y</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实验七：存储过程-amp-触发器"><a href="#实验七：存储过程-amp-触发器" class="headerlink" title="实验七：存储过程&amp;触发器"></a>实验七：存储过程&amp;触发器</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 存储过程，返回及格率</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> query<span class="token variable">@vcno</span> char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@vi</span> <span class="token keyword">float</span> output<span class="token keyword">as</span><span class="token keyword">declare</span> <span class="token variable">@a</span> <span class="token keyword">float</span><span class="token punctuation">,</span><span class="token variable">@b</span> <span class="token keyword">float</span><span class="token keyword">select</span> <span class="token variable">@a</span><span class="token operator">=</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> sc <span class="token keyword">where</span> cno<span class="token operator">=</span><span class="token variable">@vcno</span> <span class="token operator">and</span> grade<span class="token operator">>=</span><span class="token number">60</span><span class="token keyword">select</span> <span class="token variable">@b</span><span class="token operator">=</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> sc <span class="token keyword">where</span> cno<span class="token operator">=</span><span class="token variable">@vcno</span><span class="token keyword">set</span> <span class="token variable">@vi</span><span class="token operator">=</span><span class="token variable">@a</span><span class="token operator">/</span><span class="token variable">@b</span><span class="token keyword">print</span> <span class="token variable">@a</span><span class="token keyword">print</span> <span class="token variable">@b</span><span class="token keyword">print</span> <span class="token variable">@vi</span><span class="token keyword">declare</span> <span class="token variable">@ans</span> <span class="token keyword">float</span><span class="token keyword">exec</span> query <span class="token string">'cs'</span><span class="token punctuation">,</span> <span class="token variable">@ans</span> output<span class="token keyword">select</span> cast<span class="token punctuation">(</span><span class="token variable">@ans</span><span class="token operator">*</span><span class="token number">100</span> <span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'%'</span> <span class="token keyword">as</span> <span class="token string">'及格率'</span><span class="token comment" spellcheck="true">-- 触发器，限定删除</span><span class="token keyword">create</span> <span class="token keyword">trigger</span> del_s <span class="token keyword">on</span> dbo<span class="token punctuation">.</span>s<span class="token keyword">after</span> <span class="token keyword">delete</span><span class="token keyword">as</span><span class="token keyword">declare</span> <span class="token variable">@s</span> char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token variable">@s</span> <span class="token operator">=</span>sno <span class="token keyword">from</span> deleted<span class="token keyword">if</span> <span class="token variable">@s</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> sno <span class="token keyword">from</span> sc<span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">print</span> <span class="token string">'该生已有成绩，不能删除'</span>    <span class="token keyword">print</span> <span class="token variable">@s</span>    <span class="token keyword">rollback</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实验八：备份-amp-还原"><a href="#实验八：备份-amp-还原" class="headerlink" title="实验八：备份&amp;还原"></a>实验八：备份&amp;还原</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--对数据库进行完全备份</span><span class="token keyword">backup</span> <span class="token keyword">database</span> tmp <span class="token keyword">to</span> <span class="token keyword">disk</span><span class="token operator">=</span><span class="token string">'c:\tmp\tmpfull.bak'</span><span class="token comment" spellcheck="true">--对数据库进行差异备份</span><span class="token keyword">backup</span> <span class="token keyword">database</span> tmp <span class="token keyword">to</span> <span class="token keyword">disk</span><span class="token operator">=</span><span class="token string">'c:\tmp\tmpdiff.bak'</span> <span class="token keyword">with</span> differential<span class="token comment" spellcheck="true">--备份日志</span><span class="token comment" spellcheck="true">--日志记录着对数据库的更新操作</span><span class="token keyword">backup</span> log tmo <span class="token keyword">to</span> <span class="token keyword">disk</span><span class="token operator">=</span><span class="token string">'c:\tmp\tmplog.bak'</span><span class="token comment" spellcheck="true">--完整恢复模式，需要备份和还原事务日志</span><span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token number">abc</span> <span class="token keyword">set</span> recovery <span class="token keyword">full</span><span class="token keyword">restore</span> <span class="token keyword">database</span> tmp <span class="token keyword">from</span> <span class="token keyword">disk</span><span class="token operator">=</span><span class="token string">'c:\blog\tmpfull1.bak'</span> <span class="token keyword">with</span> norecovery<span class="token keyword">restore</span> log tmp <span class="token keyword">from</span> <span class="token keyword">disk</span><span class="token operator">=</span><span class="token string">'c:\blog\tmplog1.bak'</span> <span class="token keyword">with</span> norecovery<span class="token keyword">restore</span> log tmp <span class="token keyword">from</span> <span class="token keyword">disk</span><span class="token operator">=</span><span class="token string">'c:\blog\tmplog2.bak'</span> <span class="token keyword">with</span> stopat<span class="token operator">=</span><span class="token string">'2020-12-08 22:29:27'</span><span class="token punctuation">,</span>recovery<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>遗漏了</strong>：视图，索引</p>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020十二月</title>
      <link href="posts/ee30.html"/>
      <url>posts/ee30.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p><font face="myfont" size=5>平静下来，去追求和谐</font></p><h1 id="1-日记"><a href="#1-日记" class="headerlink" title="1.日记"></a>1.日记</h1><h2 id="11-28"><a href="#11-28" class="headerlink" title="11.28"></a><code>11.28</code></h2><p>每个不被记录的日子，都可能是对时光的辜负</p><p>加油，憨</p><h2 id="12-06"><a href="#12-06" class="headerlink" title="12.06"></a><code>12.06</code></h2><p>做一些事之前先备份，</p><h2 id="12-09"><a href="#12-09" class="headerlink" title="12.09"></a><code>12.09</code></h2><p>有些事，</p><p>坚持不住的时候，一定要走出去。</p><p>不要想着坚持，也不要想着放弃。</p><p>或许过段时间，就不是事了。</p><h2 id="12-11"><a href="#12-11" class="headerlink" title="12.11"></a><code>12.11</code></h2><p>《赛博朋克2077》头昏，，，<br>CDPR，真是一家神奇的公司</p><h2 id="12-12"><a href="#12-12" class="headerlink" title="12.12"></a><code>12.12</code></h2><p>每段时光都会有它的价值，多用脑子生活。</p><h2 id="12-18"><a href="#12-18" class="headerlink" title="12.18"></a><code>12.18</code></h2><p><font size='5' face="myfont">清风一壶酒，明月一盏诗，此间三两意，及尔与星兮。</font></p><p><font size='5' face="myfont">hh，这个我啊，该是陪着我饮尽了多少的孤独清欢？</font></p><hr><p><font size='5' face="myfont">多少的烦忧与欣喜，有段时间可以清醒地让我成为一个废人了</font></p><p><font size='5' face="myfont">hh，我会笑着，书读少了？人生不够沧桑？人性暴走了？</font></p><hr>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构作业</title>
      <link href="posts/cd81.html"/>
      <url>posts/cd81.html</url>
      
        <content type="html"><![CDATA[<h2 id="期末复习"><a href="#期末复习" class="headerlink" title="期末复习"></a>期末复习</h2><p>算法：输入输出，确定性，有穷性，有效性</p><p>线性表： N个元素的有限序列；具有逻辑上的顺序性，即：排列有其先后次序；表中元素的数据类型相同。</p><p>顺序表： 将线性表中的元素相继存放在一个连续的存储空间中。元素的逻辑顺序与物理顺序一致。</p><p>线性链表： 对线性表的链接存储表示；分为：单链表、循环链表、双向链表；</p><p>单链表：节点可以连续、可以不连续存储；节点的逻辑顺序与其物理顺序可以不一致</p><p>引用型参数 <code>&amp;</code> 的使用，函数体内对其的操作是对实际变量的操作</p><p>栈和队列都是限制了存储位置的线性表，逻辑结构是线性结构</p><p>栈与数据的存储结构无关。</p><p>广义表：允许线性表的元素有其自身的结构</p><hr><p>结点的度：结点所拥有的子树的棵树</p><p>叶节点：度为0的节点</p><p>满二叉树，肯定是完全二叉树</p><p>完全二叉树特点：最下层的叶子结点集中在左部。</p><p>二叉排序树：节点左子树所有关键字小于节点关键字。</p><p>先序+后序：一般无法确定唯一一颗二叉树</p><p>平衡二叉树： 任一结点左右子树的高度之差的绝对值不超过1</p><p>二叉链表示一颗 N 个结点的二叉树有 N+1 个空指针域</p><hr><p><strong>内排序</strong>：排序期间数据记录全部存放在内存中。</p><p>排序算法的<strong>稳定性</strong>：两个相等的值排序后相对次序不变。</p><p>希尔排序，又称缩小增量排序，是一种不稳定的排序。</p><h2 id="堆排序及优先队列⭐"><a href="#堆排序及优先队列⭐" class="headerlink" title="堆排序及优先队列⭐"></a>堆排序及优先队列⭐</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> maxsize 100</span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> key<span class="token punctuation">;</span><span class="token punctuation">}</span>node<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    node data<span class="token punctuation">[</span>maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span>datalist<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">siftdown</span><span class="token punctuation">(</span>datalist<span class="token operator">&amp;</span>h<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    node w <span class="token operator">=</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">.</span>key <span class="token operator">>=</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> j<span class="token punctuation">;</span>            j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">siftup</span><span class="token punctuation">(</span>datalist<span class="token operator">&amp;</span>h<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    node w <span class="token operator">=</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">></span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">.</span>key <span class="token operator">&lt;=</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> j<span class="token punctuation">;</span>            j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">heapsort</span><span class="token punctuation">(</span>datalist <span class="token operator">&amp;</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将表转换成堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>h<span class="token punctuation">.</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token function">siftdown</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">,</span> h<span class="token punctuation">.</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> h<span class="token punctuation">.</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        node tmp <span class="token operator">=</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token function">siftdown</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    datalist l<span class="token punctuation">,</span>h<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the length of datalist:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the numbers:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    h<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>    <span class="token function">heapsort</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//先构建一个n为5的最小堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            h<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token function">siftup</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n the top 5 :\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d "</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="哈希表的实现及链地址法处理冲突"><a href="#哈希表的实现及链地址法处理冲突" class="headerlink" title="哈希表的实现及链地址法处理冲突"></a>哈希表的实现及链地址法处理冲突</h2><p>理解：<br>哈希可以理解为一种<strong>映射关系</strong>，这样会查找得快一些<br>但哈希可能带来<strong>key冲突</strong>的问题，于是有了冲突处理</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> node <span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">struct</span> node<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span>ha<span class="token punctuation">,</span><span class="token operator">*</span>hap<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>ha arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    hap p <span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token punctuation">)</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    p<span class="token operator">-></span>val <span class="token operator">=</span> num<span class="token punctuation">;</span>    hap tmp <span class="token operator">=</span> new ha<span class="token punctuation">;</span>    tmp<span class="token operator">-></span>val <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    tmp<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>ha arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    hap p <span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>val <span class="token operator">==</span> x<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>x<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the length of hashtable:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    hap arr <span class="token operator">=</span> new ha<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//define the pointer of hash-linklist</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//init</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the length of numbers:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\ninput the num:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insert</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> num<span class="token operator">%</span>n<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将num%n作为key</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the num should find:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> x<span class="token operator">%</span>n<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将num%n作为key</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"success,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> key<span class="token punctuation">;</span><span class="token punctuation">}</span>node<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    node data<span class="token punctuation">[</span>maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span>datalist<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">quicksort</span><span class="token punctuation">(</span>datalist<span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quicksort</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quicksort</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span>datalist<span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>    node cur <span class="token operator">=</span> l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span>l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">>=</span> cur<span class="token punctuation">.</span>key<span class="token punctuation">)</span>            right<span class="token operator">--</span><span class="token punctuation">;</span>        l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span>l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;=</span> cur<span class="token punctuation">.</span>key<span class="token punctuation">)</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>        l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>    <span class="token keyword">return</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">insertsort</span><span class="token punctuation">(</span>datalist<span class="token operator">&amp;</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>    node w<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            w <span class="token operator">=</span> l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">.</span>key <span class="token operator">&lt;</span> l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>                    l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            l<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="稀疏矩阵的转置"><a href="#稀疏矩阵的转置" class="headerlink" title="稀疏矩阵的转置"></a>稀疏矩阵的转置</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> val<span class="token punctuation">;</span><span class="token punctuation">}</span>trituple<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    trituple <span class="token operator">*</span>terms<span class="token punctuation">;</span>    <span class="token keyword">int</span> cols<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span>sparsematrix<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int rowsize[a.cols] 报错：表达式必须含有常量值</span><span class="token keyword">void</span> <span class="token function">transpose_fast</span><span class="token punctuation">(</span><span class="token keyword">const</span> sparsematrix<span class="token operator">&amp;</span>a<span class="token punctuation">,</span> sparsematrix<span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>rowsize <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span>a<span class="token punctuation">.</span>cols<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>rowstart <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span>a<span class="token punctuation">.</span>cols<span class="token punctuation">]</span><span class="token punctuation">;</span>    b<span class="token punctuation">.</span>rows <span class="token operator">=</span> a<span class="token punctuation">.</span>cols<span class="token punctuation">;</span>    b<span class="token punctuation">.</span>cols <span class="token operator">=</span> a<span class="token punctuation">.</span>rows<span class="token punctuation">;</span>    b<span class="token punctuation">.</span>cnt <span class="token operator">=</span> a<span class="token punctuation">.</span>cnt<span class="token punctuation">;</span>    b<span class="token punctuation">.</span>terms <span class="token operator">=</span> new trituple<span class="token punctuation">[</span>a<span class="token punctuation">.</span>cnt<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//忘了初始化，报错：写入位置 0xCCCCCCD8 时发生访问冲突。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>cnt <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>cols<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            rowsize<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            rowsize<span class="token punctuation">[</span>a<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        rowstart<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>cols<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            rowstart<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rowstart<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> rowsize<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//for (int i = 0; i &lt; a.cols; i++) {</span>        <span class="token comment" spellcheck="true">//    printf("%d %d\n", rowsize[i], rowstart[i]);</span>        <span class="token comment" spellcheck="true">//}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> rowstart<span class="token punctuation">[</span>a<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>row <span class="token operator">=</span> a<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>col<span class="token punctuation">;</span>            b<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>col <span class="token operator">=</span> a<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>row<span class="token punctuation">;</span>            b<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">=</span> a<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>            rowstart<span class="token punctuation">[</span>a<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    delete<span class="token punctuation">[</span><span class="token punctuation">]</span> rowsize<span class="token punctuation">;</span>    delete<span class="token punctuation">[</span><span class="token punctuation">]</span> rowstart<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sparsematrix a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the rows,cols and count:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">.</span>rows<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">.</span>cols<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">.</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span>terms <span class="token operator">=</span> new trituple<span class="token punctuation">[</span>a<span class="token punctuation">.</span>cnt<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\ninput the row,col and val for every items (index begin from 0) :\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">transpose_fast</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the ans:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>row<span class="token punctuation">,</span> b<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>col<span class="token punctuation">,</span> b<span class="token punctuation">.</span>terms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo深入</title>
      <link href="posts/befa.html"/>
      <url>posts/befa.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p><code>HEXO</code>是一个由 node.js 提供动力的静态站点生成器。它为 web 开发提供了强大的 API 来集成现有的 npm 包，并通过编程将某些内容插入到文章中。</p><h2 id="1-部分说明"><a href="#1-部分说明" class="headerlink" title="1.部分说明"></a>1.部分说明</h2><h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><p><a href="http://www.fontawesome.com.cn/faicons/" target="_blank" rel="noopener">http://www.fontawesome.com.cn/faicons/</a></p><p>直接 <code>fas fa-name</code> 就可以应用图标了</p><h3 id="EJS-是什么？"><a href="#EJS-是什么？" class="headerlink" title="EJS 是什么？"></a>EJS 是什么？</h3><p>“E” 代表什么？可以表示 “可嵌入（Embedded）”，也可以是“高效（Effective）”、“优雅（Elegant）”或者是“简单（Easy）”。EJS 是一套简单的模板语言，帮你利用普通的 JavaScript 代码生成 HTML 页面。EJS 没有如何组织内容的教条；也没有再造一套迭代和控制流语法；有的只是普通的 JavaScript 代码而已。</p><pre class="line-numbers language-ejs"><code class="language-ejs">    <% if (site.categories && site.categories.length > 0) { %>    <%- partial('_widget/category-radar') %>    <% } %>    <% if (site.tags && site.tags.length > 0) { %>    <%- partial('_widget/tag-wordcloud') %>    <% } %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CNAME"><a href="#CNAME" class="headerlink" title="CNAME"></a>CNAME</h3><p>hexo根目录的source文件夹下，新建<code>CNAME</code>可防止setting老是改url.</p><h2 id="2-网站重构"><a href="#2-网站重构" class="headerlink" title="2.网站重构"></a>2.网站重构</h2><p>//2020.11.30 hexo更新，改动改崩了，所以重构一个，wuwuwu~</p><p>//以后好好写博客，不再整了，够用就行。</p><blockquote><p>做事之前先备份</p></blockquote><p>参考网站：</p><ul><li><a href="https://www.jianshu.com/p/0a8d738a5620" target="_blank" rel="noopener">https://www.jianshu.com/p/0a8d738a5620</a></li><li><a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery</a></li></ul><p>步骤：</p><ol><li>nodejs，git准备</li><li><code>npm install hexo-cli -g</code></li><li><code>hexo init blog</code> hexo初始化你的blog文件夹（需新建）</li><li><code>cd blog</code></li><li><code>npm install</code> </li><li><code>hexo s</code> 开启本地服务<blockquote><p>已完成初步，即默认的landscape主题</p></blockquote></li><li>添加matery主题，参照参考网站3</li><li>修改自己的matery主题</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息技术实践</title>
      <link href="posts/7bab.html"/>
      <url>posts/7bab.html</url>
      
        <content type="html"><![CDATA[<h3 id="windows命令："><a href="#windows命令：" class="headerlink" title="windows命令："></a>windows命令：</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>cls</code></td><td></td></tr><tr><td><code>help</code></td><td></td></tr><tr><td><code>dir</code></td><td></td></tr><tr><td><code>TREE</code></td><td>显示目录结构</td></tr><tr><td><code>COPY</code></td><td></td></tr><tr><td><code>MOVE</code></td><td></td></tr><tr><td><code>DEL</code></td><td></td></tr><tr><td><code>MD</code></td><td>创建文件夹</td></tr><tr><td><code>RD</code></td><td>删除文件夹</td></tr></tbody></table><h3 id="windows批处理文件："><a href="#windows批处理文件：" class="headerlink" title="windows批处理文件："></a>windows批处理文件：</h3><ul><li>一次性运行一批CMD命令，可以写在文本文档中</li><li>以<code>bat</code>为后缀名，双击可执行</li></ul><h3 id="Linux："><a href="#Linux：" class="headerlink" title="Linux："></a>Linux：</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>cd</code></td><td></td></tr><tr><td><code>pwd</code></td><td>显示当前所在路径</td></tr><tr><td><code>ls</code></td><td>显示当前路径文件列表</td></tr><tr><td><code>date</code></td><td></td></tr><tr><td><code>bc</code></td><td>计算器，<code>quit</code>退出</td></tr><tr><td><code>man</code></td><td>显示命令的帮助</td></tr><tr><td><code>cp</code> <code>mv</code> <code>rm</code></td><td>文件复制、移动、删除</td></tr><tr><td><code>mkdir</code> <code>rmdir</code></td><td>创建新目录，删除空目录</td></tr></tbody></table><hr><table><thead><tr><th>击键</th><th>描述</th></tr></thead><tbody><tr><td><code>TAB</code></td><td>自动补全命令</td></tr><tr><td><code>CTRL+C</code></td><td>终止当前命令</td></tr><tr><td><code>CTRL+D</code></td><td>退出终端</td></tr></tbody></table><hr><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>chmod</code></td><td>修改属性</td></tr><tr><td><code>cat</code></td><td>查看文件内容</td></tr><tr><td><code>touch t.txt</code></td><td>创建一个叫<code>t.txt</code>的文件</td></tr><tr><td><code>rm t.txt</code></td><td>删除一个叫<code>t.txt</code>的文件，删除文件可以直接用<code>rm</code></td></tr><tr><td><code>rm -rf m</code></td><td>删除一个叫<code>m</code>的文件夹</td></tr></tbody></table><blockquote><p><strong>cd 中的路径操作：</strong><br><code>cd /</code> 返回根目录（最高级）<br><code>cd ..</code>返回上级目录<br><code>cd m</code> 与 <code>cd ./m</code>相同<br><code>cd ~</code>普通用户相当于<code>cd /home/当前用户名</code>，root用户相当于 <code>cd /root</code></p></blockquote><blockquote><p><strong>绝对路径</strong>由 <code>/</code> 开始写起，如<code>/home/user</code></p></blockquote><blockquote><p>权限不足时<code>sudo -i</code>进入<strong>超级用户模式</strong></p></blockquote><h3 id="linux文件属性"><a href="#linux文件属性" class="headerlink" title="linux文件属性"></a>linux文件属性</h3><p>在Linux中我们可以使用<code>ll</code>或者<code>ls –l</code>命令来显示一个文件的属性以及文件所属的用户和组</p><p>现在文件夹m有如下信息：<code>drwxr-xr-x 4 root root 4096 Sep  6 03:51 m/</code></p><blockquote><p>第一个字符代表文件是目录、文件或链接文件等。<br><code>d</code>表示为目录，<code>-</code>表示为文件</p></blockquote><blockquote><p>接下来的字符中，三个为一组。且均为 <code>rwx</code> 的三个参数的组合。其中，<code>[ r ]</code>代表可读(read)、<code>[ w ]</code>代表可写(write)、<code>[ x ]</code>代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号<code>[ - ]</code>而已。<br><img src="https://www.runoob.com/wp-content/uploads/2014/06/363003_1227493859FdXT.png"></p></blockquote><hr><blockquote><p>关于文件属性为XXX的解释：<br><code>rwxrw----</code>  &lt;=&gt;  <code>111110000</code>  &lt;=&gt; <code>760</code></p></blockquote><blockquote><p><code>chmod  XXX  文件名</code><br>–&gt;修改文件为XXX属性</p></blockquote><blockquote><p><code>chmod  [-R]  XXX  目录名</code><br>–&gt;修改文件夹的属性，这里-R参数指示递归修改，将目录下所有文件的属性均修改为xxx</p></blockquote><p>更多信息：<a href="https://www.runoob.com/linux/linux-file-attr-permission.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-file-attr-permission.html</a></p><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><p>安装vim: <code>sudo apt-get install vim</code></p><p><code>vim 文件名</code>：<br>直接打开或新建一个文件</p><p>三种工作模式：</p><ul><li><strong>查看模式</strong></li><li><strong>编辑模式</strong>，在查看模式下按下<code>i</code> or <code>o</code> or <code>q</code>进入，<code>Esc</code>退出</li><li><strong>命令模式</strong>，在查看模式下按下<code>:</code>进入</li></ul><table><thead><tr><th>查看模式下</th><th>描述</th></tr></thead><tbody><tr><td><code>0</code></td><td>移动到当前行开头</td></tr><tr><td><code>$</code></td><td>移动到当前行末尾</td></tr><tr><td><code>gg</code></td><td>移动到文件开头</td></tr><tr><td><code>G</code></td><td>移动到文件末尾</td></tr><tr><td><code>[n]G</code></td><td>移动到第n行</td></tr><tr><td><code>[n]space</code></td><td></td></tr><tr><td><code>[n]Enter</code></td><td></td></tr><tr><td><code>dd</code> <code>[n]dd</code></td><td>删除行</td></tr><tr><td><code>yy</code> <code>[n]yy</code></td><td>复制行</td></tr><tr><td><code>p</code></td><td>粘贴</td></tr><tr><td><code>u</code></td><td>撤销</td></tr></tbody></table><hr><table><thead><tr><th>命令模式下</th><th>描述</th></tr></thead><tbody><tr><td><code>w</code></td><td>保存</td></tr><tr><td><code>q</code> <code>q!</code></td><td>退出,强制退出</td></tr><tr><td><code>wq</code></td><td>保存退出</td></tr><tr><td><code>set nu</code></td><td>显示行号</td></tr><tr><td><code>set nonu</code></td><td></td></tr><tr><td><code>syntax on</code></td><td>显示语法高亮</td></tr></tbody></table><h3 id="shell基础"><a href="#shell基础" class="headerlink" title="shell基础"></a>shell基础</h3><p>shell: 提供了用户与内核交互的接口</p><p>一般情况下 vim建立的文本文件属性值为<code>644</code>，需要添加<code>x</code>属性 <code>chmod 755 ~~~</code></p><p>变量是一个名字，不是一个值，用<code>$</code>来取值</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><code>echo</code></td><td>打印一行，自动换行</td></tr><tr><td><code>printf</code></td><td></td></tr><tr><td><code>var=num</code></td><td>变量不区分类型，<code>=</code>前后不能有空格</td></tr></tbody></table><hr><p>运行shell脚本:<br>① <code>chmod +x ./test.sh</code>  #使脚本具有执行权限<br>② <code>./test.sh</code>  #执行脚本</p><p>部分摘自：<a href="https://www.runoob.com/linux/linux-shell.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-shell.html</a></p><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td><code>-eq</code></td><td>两数相等返回true</td></tr><tr><td><code>-ne</code></td><td></td></tr><tr><td><code>-gt</code> <code>-ge</code></td><td><code>&gt;</code> <code>&gt;=</code></td></tr><tr><td><code>-lt</code> <code>-le</code></td><td><code>&lt;</code> <code>&lt;=</code></td></tr></tbody></table><h3 id="课堂作业："><a href="#课堂作业：" class="headerlink" title="课堂作业："></a>课堂作业：</h3><p>一、写出在Linux终端下，如下操作序列的命令行</p><p>（1）回到家目录<br>&emsp;&emsp;&emsp;<code>cd /home</code></p><p>（2）在家目录下建立test目录<br>&emsp;&emsp;&emsp;<code>mkdir test</code></p><p>（3）在其中建立t.txt文件（touch   t.txt），建立目录m<br>&emsp;&emsp;&emsp;<code>touch t.txt &amp;&amp; mkdir m</code></p><p>（4）将t.txt复制5份到m中，分别命名为t1.txt~t5.txt<br>&emsp;&emsp;&emsp;<code>cp t.txt m/t1.txt &amp;&amp; cp t.txt m/t2.txt &amp;&amp; cp t.txt m/t3.txt &amp;&amp; cp t.txt m/t4.txt &amp;&amp;cp t.txt m/t5.txt</code></p><p>（5）复制m目录为n目录<br>&emsp;&emsp;&emsp;<code>cp -r m n</code></p><p>（6）去掉m目录的三个x属性，出现什么情况？描述一下，再修改回来<br>&emsp;&emsp;&emsp;<code>chmod 644 m</code><br>&emsp;&emsp;&emsp;<code>文件无法打开</code><br>&emsp;&emsp;&emsp;<code>chmod 755 m</code><br>&emsp;说明：<code>rwxr-xr-x</code>的755变成644 </p><p>（7）修改n目录属性，使其及其下面的所有文件均具有最大权限（777）。<br>&emsp;&emsp;&emsp;<code>chmod -R 777 n</code><br>&emsp;注意：那个R区分大小写</p><p>（8）进入/tmp目录，选取一个文件，cp到你的m目录<br>&emsp;&emsp;&emsp;<code>cp /tmp/temp.txt m</code></p><hr><p>二、用shell写一个猜价格脚本</p><p>提示用户输入一个价格上限，然后根据上限数值产生一个合适的随机数价格。</p><p>然后提示用户输入猜测值。提示用户输入的猜测值与真实值的高低，直到用户猜中为止。</p><p>注：shell中，可以使用$RANDOM获得一个随机整数。<br><img src="https://img-blog.csdnimg.cn/20200913130551384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" alt="代码"></p><p><img src="https://img-blog.csdnimg.cn/20200913130551391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" alt="结果"></p><p><strong>注意：</strong> </p><ul><li><code>[</code> <code>]</code>左右要有空格</li><li><code>&quot;$num&quot;</code>，<code>&quot;$x&quot;</code> 的双引号都可以去掉</li><li>shell算术运算符有<code>==</code>，没有<code>&gt;</code> <code>&lt;</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序</title>
      <link href="posts/8ab2.html"/>
      <url>posts/8ab2.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p>本着做一个万能墙去开发一个小程序，<br>基本逻辑，前端完成了，删除、回复消息功能还没做。。</p><p>然后发现社交功能不对个人主体开放，上线不了只能体验。<br>到此记，<code>10.24</code></p><h1 id="1-基础"><a href="#1-基础" class="headerlink" title="1.基础"></a>1.基础</h1><p><strong>学习过程</strong>：</p><ol><li>学堂在线相关课程的学习</li><li>微信官方文档的查看</li><li>动手实践，百度</li></ol><p><strong>相关网站</strong>：</p><ul><li>微信开发管理平台：<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">https://mp.weixin.qq.com</a></li><li>微信官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/framework/</a></li></ul><p>基本每个界面都有以下4个文件：<code>wxml</code> , <code>wxss</code> , <code>js</code> , <code>json</code></p><p><strong>部分代码</strong>：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 发送消息到云端数据库的代码</span><span class="token keyword">const</span> app<span class="token operator">=</span><span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> db<span class="token operator">=</span>wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//省略其它</span>  send<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> that<span class="token operator">=</span><span class="token keyword">this</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>data<span class="token punctuation">.</span>detail<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>openid<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>data<span class="token punctuation">.</span>detail<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      wx<span class="token punctuation">.</span><span class="token function">showModal</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'提示'</span><span class="token punctuation">,</span>        content<span class="token punctuation">:</span> <span class="token string">'提交内容不能为空'</span><span class="token punctuation">,</span>        showCancel<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'info'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      data<span class="token punctuation">:</span><span class="token punctuation">{</span>        content<span class="token punctuation">:</span> that<span class="token punctuation">.</span>data<span class="token punctuation">.</span>detail<span class="token punctuation">,</span>        total_likes<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        face_url<span class="token punctuation">:</span> app<span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>userInfo<span class="token punctuation">.</span>avatarUrl<span class="token punctuation">,</span>        send_time<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        username<span class="token punctuation">:</span> app<span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>userInfo<span class="token punctuation">.</span>nickName      <span class="token punctuation">}</span><span class="token punctuation">,</span>      success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>        wx<span class="token punctuation">.</span><span class="token function">showModal</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          title<span class="token punctuation">:</span> <span class="token string">'提示'</span><span class="token punctuation">,</span>          content<span class="token punctuation">:</span> <span class="token string">'恭喜提交成功'</span><span class="token punctuation">,</span>          showCancel<span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 从云端数据库获取消息的代码</span><span class="token keyword">const</span> db<span class="token operator">=</span>wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  onLoad<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> that <span class="token operator">=</span><span class="token keyword">this</span>    db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'info'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        that<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> list<span class="token punctuation">:</span> res<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--将消息便于查看的html--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scroll-view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>scbg<span class="token punctuation">'</span></span> <span class="token attr-name">scroll-y</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>true<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{list}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itemName<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>box<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>firstblock<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>touxiang<span class="token punctuation">'</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>{{itemName.face_url}}<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>person<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>name<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>showname<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>{{itemName.username}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>tel<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>showtime<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>{{itemName.send_time}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>secondblock<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>content<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>{{itemName.content}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>thirdblock<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>like<span class="token punctuation">'</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>/images/like.png<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>num<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>{{itemName.total_likes}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scroll-view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>一个导图</strong>：<br><img src="https://img-blog.csdnimg.cn/20201024155225768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center"></p><h1 id="2-小结"><a href="#2-小结" class="headerlink" title="2.小结"></a>2.小结</h1><p><strong>学习了</strong></p><ul><li>微信小程序开发的基本流程，</li><li>html，css</li><li>js，json，mongdb数据库，</li></ul><p><strong>项目流程</strong>：<br>基本最小逻辑实现 <code>--&gt;</code> 基本实现 <code>--&gt;</code> 发展功能</p><p><strong>其它</strong>：<br><a href="https://developers.weixin.qq.com/miniprogram/product/material/" target="_blank" rel="noopener">小程序开放的服务类目</a></p>]]></content>
      
      
      <categories>
          
          <category> 应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网实现树莓派控制Arduino</title>
      <link href="posts/8178.html"/>
      <url>posts/8178.html</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title="preface"></a><em>preface</em></h2><p>参考博客：<a href="https://blog.csdn.net/weixin_42534940/article/details/81416578" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42534940/article/details/81416578</a></p><h1 id="1-基础"><a href="#1-基础" class="headerlink" title="1.基础"></a>1.基础</h1><h2 id="python模块"><a href="#python模块" class="headerlink" title="python模块"></a>python模块</h2><p>httpserver: <a href="https://docs.python.org/zh-cn/3.8/library/http.server.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3.8/library/http.server.html</a></p><h2 id="树莓派"><a href="#树莓派" class="headerlink" title="树莓派"></a>树莓派</h2><p>系统配置–&gt;网络配置–&gt;环境搭建–&gt;开发</p><p><code>ifconfig</code> ——查看IP地址 <code>eth0</code> <code>lo</code> <code>wlan0</code></p><p>连接方式：</p><ul><li><code>ssh user@192.168.1.102</code> ,可远程连接树莓派，进行命令行操作</li><li>VNC server 进行连接，IP,username,password同ssh</li></ul><p><code>ls /dev/tty*</code> 查看端口</p><h2 id="内网外网"><a href="#内网外网" class="headerlink" title="内网外网"></a>内网外网</h2><p>内网是从路由器以下开始的，ip都以192开头。<br>外网不经过路由器和交换机就可以上网的网络。</p><h1 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h1><h2 id="server-py"><a href="#server-py" class="headerlink" title="server.py"></a>server.py</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># --coding:utf-8--</span><span class="token keyword">from</span> http<span class="token punctuation">.</span>server <span class="token keyword">import</span> BaseHTTPRequestHandler<span class="token punctuation">,</span> HTTPServer<span class="token keyword">import</span> time<span class="token keyword">import</span> socket<span class="token keyword">import</span> urllib<span class="token keyword">import</span> serial<span class="token comment" spellcheck="true">#from car_controler import FourWheelDriveCar</span><span class="token comment" spellcheck="true">#from camera_controler import Camera</span>port<span class="token operator">=</span><span class="token string">'/dev/ttyUSB0'</span>rate<span class="token operator">=</span><span class="token number">9600</span>ser<span class="token operator">=</span>serial<span class="token punctuation">.</span>Serial<span class="token punctuation">(</span>port<span class="token punctuation">,</span>rate<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">CarServer</span><span class="token punctuation">(</span>BaseHTTPRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#    carControler = FourWheelDriveCar()</span><span class="token comment" spellcheck="true">#    cameraControler = Camera()</span>    <span class="token keyword">def</span> <span class="token function">get_host_ip</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        This method is used for getting local ip address        The car server will deploy on this ip        '''</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            serverSocket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span>            serverSocket<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"8.8.8.8"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            localIP <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span>getsockname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">finally</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> localIP    <span class="token keyword">def</span> <span class="token function">do_GET</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        Define the car control GUI for client        For the first edition, it will only return direction contol GUI        '''</span>        localIP <span class="token operator">=</span> CarServer<span class="token punctuation">.</span>get_host_ip<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># When this GET method is called, then should init the car</span>        <span class="token comment" spellcheck="true"># self.carControler.reset()</span>        <span class="token comment" spellcheck="true"># Read control page html file from control.html</span>        controlPageFile <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span>        controlPageGUI <span class="token operator">=</span> controlPageFile<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        controlPageFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        controlPageGUI <span class="token operator">=</span> controlPageGUI<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>            <span class="token string">"requestAddress"</span><span class="token punctuation">,</span> <span class="token string">"http://"</span> <span class="token operator">+</span> localIP <span class="token operator">+</span> <span class="token string">":9090/"</span><span class="token punctuation">)</span>        controlPageGUI <span class="token operator">=</span> controlPageGUI<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>            <span class="token string">"cameraAddress"</span><span class="token punctuation">,</span> <span class="token string">"http://"</span> <span class="token operator">+</span> localIP <span class="token operator">+</span> <span class="token string">":8080/"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_header<span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span> <span class="token string">"text/html"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>end_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>controlPageGUI<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">do_POST</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        length <span class="token operator">=</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Length'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        qs <span class="token operator">=</span> self<span class="token punctuation">.</span>rfile<span class="token punctuation">.</span>read<span class="token punctuation">(</span>length<span class="token punctuation">)</span>        direction <span class="token operator">=</span> qs<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>direction<span class="token punctuation">)</span>        ser<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    raspCarServer <span class="token operator">=</span> CarServer    hostIP <span class="token operator">=</span> raspCarServer<span class="token punctuation">.</span>get_host_ip<span class="token punctuation">(</span>raspCarServer<span class="token punctuation">)</span>    hostPort <span class="token operator">=</span> <span class="token number">9090</span>    myServer <span class="token operator">=</span> HTTPServer<span class="token punctuation">(</span><span class="token punctuation">(</span>hostIP<span class="token punctuation">,</span> hostPort<span class="token punctuation">)</span><span class="token punctuation">,</span> raspCarServer<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Server Starts - %s:%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>hostIP<span class="token punctuation">,</span> hostPort<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        myServer<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a><em>index.html</em></h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">directionBtnDown</span><span class="token punctuation">(</span>direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">"requestAddress"</span>        <span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>direction<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">directionBtnUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">"requestAddress"</span>        <span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"S"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">span<span class="token class">.car</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">30%</span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">480</span>px<span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token selector">span<span class="token class">.camera</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">5%</span><span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">290</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">480</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">640</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> blue    <span class="token punctuation">}</span>    <span class="token selector">span<span class="token class">.camera_control</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">30%</span><span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">950</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">480</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> blue    <span class="token punctuation">}</span>    <span class="token selector">button<span class="token class">.top</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">90</span>px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">90</span>px    <span class="token punctuation">}</span>    <span class="token selector">button<span class="token class">.left</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">90</span>px<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">button<span class="token class">.right</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">90</span>px<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">180</span>px    <span class="token punctuation">}</span>    <span class="token selector">button<span class="token class">.bottom</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">90</span>px<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">90</span>px    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>control page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>car_control<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top drectionBtn<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>F<span class="token punctuation">"</span></span> <span class="token attr-name">onmousedown</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>directionBtnDown(<span class="token punctuation">'</span>w<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">onmouseup</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>directionBtnUp()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>F<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left drectionBtn<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>L<span class="token punctuation">"</span></span> <span class="token attr-name">onmousedown</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>directionBtnDown(<span class="token punctuation">'</span>a<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">onmouseup</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>directionBtnUp()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>L<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right drectionBtn<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>R<span class="token punctuation">"</span></span> <span class="token attr-name">onmousedown</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>directionBtnDown(<span class="token punctuation">'</span>d<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">onmouseup</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>directionBtnUp()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>R<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bottom drectionBtn<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span> <span class="token attr-name">onmousedown</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>directionBtnDown(<span class="token punctuation">'</span>x<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">onmouseup</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>directionBtnUp()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在树莓派上：<code>sudo python3 server.py</code> </p><p>去网页<code>http://192.168.1.102:9090/</code>，实现内网控制小车。</p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python做个爬虫</title>
      <link href="posts/e960.html"/>
      <url>posts/e960.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><hr><p>本文将用到以下工具：</p><ul><li>requests</li><li>re</li><li>面向对象</li><li>pyqt5</li><li>pyinstaller</li></ul><p>暂时爬取网站： <a href="https://huaban.com/favorite/beauty" target="_blank" rel="noopener">https://huaban.com/favorite/beauty</a></p><h1 id="1-探究过程"><a href="#1-探究过程" class="headerlink" title="1.探究过程"></a>1.探究过程</h1><hr><h2 id="1-1-第一个难题："><a href="#1-1-第一个难题：" class="headerlink" title="1.1 第一个难题："></a>1.1 第一个难题：</h2><blockquote><p>关于爬到的html与f12得到的有区别，所以re写<code>pattern</code>不能凭着F12<br><strong>目标</strong>：找到一个合适的<code>pattern</code>便于找到url</p></blockquote><blockquote><p>所谓查看网页源代码，就是别人服务器发送到浏览器的原封不动的代码。这是爬虫获得的代码<br>你那些在源码中找不到的代码（元素），那是在浏览器执行js动态生成的，这些能在审查元素中看到<br>通过审查元素就,,,,看到就是浏览器处理过的最终的html代码。</p></blockquote><p>然后试了试更换头信息，</p><p><img src="https://img-blog.csdnimg.cn/20200801215657860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70"></p><blockquote><p>就离谱，requests.get过来的基本没找到<code>&lt;div&gt;</code>标签，F12检查元素全是<code>&lt;div&gt;</code>标签<br>感觉：爬到的和F12到的是两个东西</p></blockquote><h2 id="1-2-第二个难题："><a href="#1-2-第二个难题：" class="headerlink" title="1.2 第二个难题："></a>1.2 第二个难题：</h2><blockquote><p>从得到的text中找出图片的地址</p></blockquote><p>先用 <a href="http://www.bejson.com/" target="_blank" rel="noopener">http://www.bejson.com/</a> 进行text分析，发现图片的地址为<br><code>https://hbimg.huabanimg.com/</code>+<code>key</code></p><h2 id="1-3-第三个难题："><a href="#1-3-第三个难题：" class="headerlink" title="1.3 第三个难题："></a>1.3 第三个难题：</h2><blockquote><p>关于得到数据的不完整性，<br><strong>目标</strong>：找出<code>url_next</code></p></blockquote><p>爬到的东西只有前面一些图片，经查询好像是一种关于<strong>动态网页异步更新</strong>的技术<br>参考： <a href="https://zhuanlan.zhihu.com/p/27346009" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27346009</a><br>(当然网站表面没有页，表面的url也没有变）</p><p><img src="https://img-blog.csdnimg.cn/2020080121565813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70"></p><p>经查询，向下翻页时XHR会多出请求，url地址已给出<br>是时候更改1.0版本的代码，让它找到更多的图片🎈</p><p>经过第一个问题的折磨，容易理解：</p><ul><li>虽然（翻页后的）url，用浏览器无法访问，但get可以爬到</li></ul><h1 id="2-基础知识"><a href="#2-基础知识" class="headerlink" title="2.基础知识"></a>2.基础知识</h1><hr><h2 id="2-1-关于requests"><a href="#2-1-关于requests" class="headerlink" title="2.1 关于requests"></a>2.1 关于requests</h2><h3 id="开始使用第一步："><a href="#开始使用第一步：" class="headerlink" title="开始使用第一步："></a>开始使用第一步：</h3><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> requests  r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://"</span><span class="token punctuation">)</span>  r<span class="token punctuation">.</span>status_code                     <span class="token comment" spellcheck="true">#en,返回200表示成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="开始使用第二步："><a href="#开始使用第二步：" class="headerlink" title="开始使用第二步："></a>开始使用第二步：</h3><pre class="line-numbers language-python"><code class="language-python">  r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>  r<span class="token punctuation">.</span>text                            <span class="token comment" spellcheck="true">#en,返回网站的html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h3><p><code>r.apparent_encoding</code>  【从内容分析出响应内容编码方式，返回一个编码方式字符串】<br><code>r.raise_for_status</code>   【如果不是200，返回异常码】</p><blockquote><p>七个主要方法：</p><ul><li><code>requests.request(method,url,**kwargs)</code></li><li><code>requests.get(url,**kwargs)</code>, headers中伪装头信息</li><li>requests.post()</li><li>requests.put()</li><li>requests.patch()</li><li>requests.head()</li><li>requests.delete()</li></ul></blockquote><h2 id="2-2-关于re"><a href="#2-2-关于re" class="headerlink" title="2.2 关于re"></a>2.2 关于re</h2><p><a href="https://x-varywow.github.io/posts/10df.html" target="_blank" rel="noopener">https://x-varywow.github.io/posts/10df.html</a></p><h2 id="2-3-关于面向对象"><a href="#2-3-关于面向对象" class="headerlink" title="2.3 关于面向对象"></a>2.3 关于面向对象</h2><p><code>if __name__ == &#39;__main__&#39;</code><br>表示：只有当该文件作为一个独立的脚本运行时才会被调用。<br>换句话说，如果在其它文件中导入此文件，那么条件中的语句不被执行。</p><h1 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h1><hr><p>1.0版本代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">import</span> ospwd<span class="token operator">=</span><span class="token string">"C:/temp/temp"</span>url <span class="token operator">=</span> <span class="token string">"https://huaban.com/favorite/beauty/"</span> <span class="token comment" spellcheck="true">#这是你要爬取的页面url</span>url_img <span class="token operator">=</span> <span class="token string">"https://hbimg.huabanimg.com/"</span> <span class="token comment" spellcheck="true">#这是它放图片的url前缀</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token comment" spellcheck="true">#伪装头信息</span>head <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36 Edg/84.0.522.49'</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始下载："</span><span class="token punctuation">,</span>file<span class="token punctuation">,</span>url<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fd<span class="token punctuation">:</span>            <span class="token keyword">for</span> chunk <span class="token keyword">in</span> r<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                fd<span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载失败了"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> num    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*******************************************"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你的请求网址是："</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>head<span class="token punctuation">)</span>    pattern<span class="token operator">=</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'{"pin_id":(\d*?),.*?"key":"(.*?)",.*?"like_count":(\d*?),.*?"repin_count":(\d*?),.*?}'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    pid<span class="token operator">=</span><span class="token number">0</span>    items<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>        pid<span class="token punctuation">,</span>key<span class="token punctuation">,</span>like_cnt<span class="token punctuation">,</span>repin_cnt<span class="token operator">=</span>item        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始下载第{}张图片"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>        pic_url<span class="token operator">=</span>url_img<span class="token operator">+</span>key    <span class="token comment" spellcheck="true">#图片的url地址</span>        filename<span class="token operator">=</span>pwd<span class="token operator">+</span>str<span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".jpg"</span>  <span class="token comment" spellcheck="true">#文件保存的名字</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"文件存在："</span><span class="token punctuation">,</span>filename<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        download<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>pic_url<span class="token punctuation">)</span>        num<span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span>main<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.1版本代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">import</span> ospwd<span class="token operator">=</span><span class="token string">"C:/temp/temp"</span>url <span class="token operator">=</span> <span class="token string">"http://huaban.com/favorite/beauty/"</span>url_img <span class="token operator">=</span> <span class="token string">"https://hbimg.huabanimg.com/"</span>url_next<span class="token operator">=</span><span class="token string">"https://huaban.com/favorite/beauty?kdbpp4xg&amp;max="</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token comment" spellcheck="true">#伪装头信息</span>head <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36 Edg/84.0.522.49'</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始下载："</span><span class="token punctuation">,</span>file<span class="token punctuation">,</span>url<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fd<span class="token punctuation">:</span>            <span class="token keyword">for</span> chunk <span class="token keyword">in</span> r<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                fd<span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载失败了"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> num    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*******************************************"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你的请求网址是："</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>head<span class="token punctuation">)</span>    pattern<span class="token operator">=</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'{"pin_id":(\d*?),.*?"key":"(.*?)",.*?"like_count":(\d*?),.*?"repin_count":(\d*?),.*?}'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    pid<span class="token operator">=</span><span class="token number">0</span>    items<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>        pid<span class="token punctuation">,</span>key<span class="token punctuation">,</span>like_cnt<span class="token punctuation">,</span>repin_cnt<span class="token operator">=</span>item        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始下载第{}张图片"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>        pic_url<span class="token operator">=</span>url_img<span class="token operator">+</span>key    <span class="token comment" spellcheck="true">#图片的url地址</span>        filename<span class="token operator">=</span>pwd<span class="token operator">+</span>str<span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".jpg"</span>  <span class="token comment" spellcheck="true">#文件保存的名字</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"文件存在："</span><span class="token punctuation">,</span>filename<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        download<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>pic_url<span class="token punctuation">)</span>        num<span class="token operator">+=</span><span class="token number">1</span>    main<span class="token punctuation">(</span>url_next<span class="token operator">+</span>pid<span class="token operator">+</span><span class="token string">"&amp;limit=100&amp;wfl=1"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#比1.0多出的地方，参考问题3</span><span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span>main<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a>4.小结</h1><hr><p><code>2020.8.1</code><br> 啦啦啦， <code>1.1</code>版本成功，激动ing<br>今天还试了试beautifulsoup，fiddler，没领悟~</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>intermediate</title>
      <link href="posts/2e8f.html"/>
      <url>posts/2e8f.html</url>
      
        <content type="html"><![CDATA[<p>本文基于<a href="https://readthedocs.org/projects/intermediatepythongithubio/downloads/pdf/latest/" target="_blank" rel="noopener"><em>Intermediate Python</em></a>学习过程中摘要与实践。<br>感谢此书作者，书的更新日期：Jul 11, 2020.</p><blockquote><p><em>blueprint</em>-(伪代码)<br><em>parentheses</em>-(括号)<br><em>clause</em>-(从句)</p></blockquote><h2 id="args-and-kwargs"><a href="#args-and-kwargs" class="headerlink" title="*args and **kwargs"></a><em>*args and **kwargs</em></h2><p>When you do not know beforehand how many arguments can be passed to your function,<br>use it:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_var_args</span><span class="token punctuation">(</span>f_arg<span class="token punctuation">,</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"first normal arg:"</span><span class="token punctuation">,</span>f_arg<span class="token punctuation">)</span>    <span class="token keyword">for</span> arg <span class="token keyword">in</span> argv<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"another arg through *argv:"</span><span class="token punctuation">,</span>arg<span class="token punctuation">)</span>test_var_args<span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'wow'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->first normal arg: python</span><span class="token comment" spellcheck="true">#-->another arg through *argv: hello</span><span class="token comment" spellcheck="true">#-->another arg through *argv: wow</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_args_kwargs</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span>arg2<span class="token punctuation">,</span>arg3<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"arg1:"</span><span class="token punctuation">,</span>arg1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"arg2:"</span><span class="token punctuation">,</span>arg2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"arg3"</span><span class="token punctuation">,</span>arg3<span class="token punctuation">)</span>kwargs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"arg3"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"arg2"</span><span class="token punctuation">:</span><span class="token string">"two"</span><span class="token punctuation">,</span><span class="token string">"arg1"</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span>test_args_kwargs<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->arg1: 5</span><span class="token comment" spellcheck="true">#-->arg2: two</span><span class="token comment" spellcheck="true">#-->arg3 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>*args</code> is used to send a non-keyworded variable length argument list to the function.<br> <code>**kwargs</code> allows you to pass <strong>keyworded</strong> variable length of arguments to a function.<br> The <strong>order</strong> is <code>some_func(fargs, *args, **kwargs)</code></p><p> The most common use case is when making function decorators.</p><h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a><em>Debugging</em></h2><p>You can run a script from the commandline using the <strong>Python debugger</strong>(pdb). Here is an example:<br><code>$ python -m pdb my_script.py</code><br>Running from inside a script:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pdb<span class="token keyword">def</span> <span class="token function">make_bread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pdb<span class="token punctuation">.</span>set_trace<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token string">" i dont have time"</span><span class="token keyword">print</span><span class="token punctuation">(</span>make_bread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You would <strong>enter the debugger pattern</strong> as soon as you run it. Now it’s time to learn some of the commands of the debugger.<br><strong>Commands</strong>:</p><ul><li><p><code>c</code>: continue execution</p></li><li><p><code>w</code>: shows the context of the current line it is executing.</p></li><li><p><code>a</code>: print the argument list of the current function</p></li><li><p><code>s</code>: execute the current line and stop at the first possible occasion</p></li><li><p><code>n</code>: continue execution until the next line in the current function is reached or it returns</p></li></ul><h2 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a><em>Generators</em></h2><p>According to Wikipedia, an iterator is an object that enables a programmer to traverse a container, particularly lists. </p><h6 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h6><p>An <strong>iterable</strong> is any object in Python which has an <code>__iter__</code> or a <code>__getitem__</code> method<br>defined which returns an iterator or can take indexes.</p><h6 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h6><p>An <strong>iterator</strong> is any object in Python which has a  <code>__next__</code> method defined. </p><h6 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h6><p>When we use a loop to loop over something it is called <strong>iteration</strong>.</p><h6 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h6><ul><li><strong>Generators</strong> are iterators, but you can only iterate over them once.</li><li>It’s because they do <strong>not store all the values in memory</strong>, they generate the values on the fly.</li><li>Most of the time generators are implemented as functions.</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generator_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> i<span class="token keyword">for</span> item <span class="token keyword">in</span> generator_function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generator_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> igen <span class="token operator">=</span> generator_function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->0</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->1</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->error</span><span class="token comment" spellcheck="true"># after yielding all the values next() caused a StopIteration error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">my_string <span class="token operator">=</span> <span class="token string">"Yasoob"</span>my_iter <span class="token operator">=</span> iter<span class="token punctuation">(</span>my_string<span class="token punctuation">)</span>next<span class="token punctuation">(</span>my_iter<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># str是个可迭代对象，但不是迭代器</span><span class="token comment" spellcheck="true"># 用iter()函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Map-Filter-and-Reduce"><a href="#Map-Filter-and-Reduce" class="headerlink" title="Map, Filter and Reduce"></a><em>Map, Filter and Reduce</em></h2><p>菜鸟教程链接：<a href="https://www.runoob.com/python/python-func-map.html" target="_blank" rel="noopener">map</a> <a href="https://www.runoob.com/python/python-func-filter.html" target="_blank" rel="noopener">filter</a> <a href="https://www.runoob.com/python/python-func-reduce.html" target="_blank" rel="noopener">reduce</a></p><pre class="line-numbers language-python"><code class="language-python">items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>squared <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> items<span class="token punctuation">:</span>    squared<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#       ||</span><span class="token comment" spellcheck="true">#       ||</span><span class="token comment" spellcheck="true">#       \/</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>squared <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span> items<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">multiply</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>x<span class="token punctuation">)</span>funcs <span class="token operator">=</span> <span class="token punctuation">[</span>multiply<span class="token punctuation">,</span> add<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    value <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> funcs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># use map even a list of functions</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">number_list <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>less_than_zero <span class="token operator">=</span> list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span> number_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>less_than_zero<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->[-5, -4, -3, -2, -1]</span><span class="token comment" spellcheck="true">#If map &amp; filter do not appear beautiful to you</span><span class="token comment" spellcheck="true"># then you can read about list/dict/tuple comprehensions.(推导式)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">product <span class="token operator">=</span> <span class="token number">1</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">for</span> num <span class="token keyword">in</span> list<span class="token punctuation">:</span>    product <span class="token operator">=</span> product <span class="token operator">*</span> num<span class="token comment" spellcheck="true">#       ||</span><span class="token comment" spellcheck="true">#       ||</span><span class="token comment" spellcheck="true">#       \/</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> reduceproduct <span class="token operator">=</span> reduce<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Decorators"><a href="#Decorators" class="headerlink" title="Decorators"></a><em>Decorators</em></h2><p>Decorators are a significant part of Python. In simple words: they are functions which modify the functionality of other functions. They help to make our code shorter and more Pythonic.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"yasoob"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"hi "</span> <span class="token operator">+</span> name<span class="token keyword">print</span><span class="token punctuation">(</span>hi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output: 'hi yasoob'</span><span class="token comment" spellcheck="true"># 我们甚⾄可以将⼀个函数赋值给⼀个变量，⽐如</span>greet <span class="token operator">=</span> hi<span class="token comment" spellcheck="true"># 我们这⾥没有在使⽤⼩括号，因为我们并不是在调⽤hi函数</span><span class="token comment" spellcheck="true"># ⽽是在将它放在greet变量⾥头。我们尝试运⾏下这个</span><span class="token keyword">print</span><span class="token punctuation">(</span>greet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output: 'hi yasoob'</span><span class="token comment" spellcheck="true"># 如果我们删掉旧的hi函数，看看会发⽣什么！</span><span class="token keyword">del</span> hi<span class="token keyword">print</span><span class="token punctuation">(</span>hi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#outputs: NameError</span><span class="token keyword">print</span><span class="token punctuation">(</span>greet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#outputs: 'hi yasoob'</span><span class="token comment" spellcheck="true"># ======Everything in python is a object=====</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"yasoob"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"now you are in the greet() function"</span>    <span class="token keyword">def</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"now you are in the welcome() function"</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"yasoob"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> greet    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> welcomea <span class="token operator">=</span> hi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->function greet at 0x7f2143c01500></span><span class="token comment" spellcheck="true">#上⾯清晰地展示了`a`现在指向到hi()函数中的greet()函数</span><span class="token comment" spellcheck="true">#现在试试这个</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->now you are in the greet() function</span><span class="token comment" spellcheck="true">#=====在函数中定义函数，返回函数=====</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"hi yasoob!"</span><span class="token keyword">def</span> <span class="token function">doSomethingBeforeHi</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am doing some boring work before executing hi()"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>doSomethingBeforeHi<span class="token punctuation">(</span>hi<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->I am doing some boring work before executing hi()</span><span class="token comment" spellcheck="true"># hi yasoob!</span><span class="token comment" spellcheck="true">#=====将函数作为参数传给另一个函数=====</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">a_new_decorator</span><span class="token punctuation">(</span>a_func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapTheFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am doing some boring work before executing a_func()"</span><span class="token punctuation">)</span>        a_func<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am doing some boring work after executing a_func()"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapTheFunction<span class="token keyword">def</span> <span class="token function">a_function_requiring_decoration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am the function which needs some decoration"</span><span class="token punctuation">)</span>a_function_requiring_decoration<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#outputs: "I am the function which needs some decoration"</span>a_function_requiring_decoration <span class="token operator">=</span> a_new_decorator<span class="token punctuation">(</span>a_function_requiring_decoration<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#now a_function_requiring_decoration is wrapped by wrapTheFunction()</span>a_function_requiring_decoration<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#outputs:I am doing some boring work before executing a_func()</span><span class="token comment" spellcheck="true"># I am the function which needs some decoration</span><span class="token comment" spellcheck="true"># I am doing some boring work after executing a_func()</span><span class="token comment" spellcheck="true">###一个简单的装饰器，相当于赋给函数一个经修饰的函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">@a_new_decorator<span class="token keyword">def</span> <span class="token function">a_function_requiring_decoration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am the function which needs some decoration"</span><span class="token punctuation">)</span>a_function_requiring_decoration<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#outputs: I am doing some boring work before executing a_func()</span><span class="token comment" spellcheck="true"># I am the function which needs some decoration to remove my foul smell</span><span class="token comment" spellcheck="true"># I am doing some boring work after executing a_func()</span><span class="token comment" spellcheck="true">#重点理解一下 @ 符号</span><span class="token comment" spellcheck="true">#但此时a_function_requiring_decoration.__name__变成了wrapTheFunction</span><span class="token comment" spellcheck="true">#这时就有了functools.wraps，下面是蓝本：</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># blueprint</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">def</span> <span class="token function">decorator_name</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>    @wraps<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">decorated</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> can_run<span class="token punctuation">:</span>             <span class="token keyword">return</span> <span class="token string">"Function will not run"</span>        <span class="token keyword">return</span> f<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">return</span> decorated@decorator_name<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token string">"Function is running"</span><span class="token punctuation">)</span>can_run <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Output: Function is running</span>can_run <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Output: Function will not run</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a><em>Mutation</em></h2><pre class="line-numbers language-python"><code class="language-python">foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hi'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->['hi']</span>bar <span class="token operator">=</span> foobar <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'bye'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->['hi', 'bye']</span><span class="token comment" spellcheck="true">#将一个变量赋值为另一个可变类型变量时，对数据的改动会反映在两个变量上</span><span class="token comment" spellcheck="true">#python可变类型（mutable）：列表，字典</span><span class="token comment" spellcheck="true">#python不可变类型：数字，字符串，元组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_to</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> target<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    target<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token keyword">return</span> targetadd_to<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Output: [1]</span>add_to<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Output: [1, 2]</span>add_to<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Output: [1, 2, 3]</span><span class="token comment" spellcheck="true">#在Python中当函数被定义时，默认参数只会运算⼀次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Enumerate"><a href="#Enumerate" class="headerlink" title="Enumerate"></a><em>Enumerate</em></h2><pre class="line-numbers language-python"><code class="language-python">my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'grapes'</span><span class="token punctuation">,</span> <span class="token string">'pear'</span><span class="token punctuation">]</span><span class="token keyword">for</span> index<span class="token punctuation">,</span>name <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>my_list<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> index<span class="token punctuation">,</span>name<span class="token comment" spellcheck="true"># Output:</span><span class="token comment" spellcheck="true"># 1 apple</span><span class="token comment" spellcheck="true"># 2 banana</span><span class="token comment" spellcheck="true"># 3 grapes</span><span class="token comment" spellcheck="true"># 4 pear</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Object-introspection"><a href="#Object-introspection" class="headerlink" title="Object introspection"></a><em>Object introspection</em></h2><pre class="line-numbers language-python"><code class="language-python">dir<span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># It returns a list of attributes and methods belonging to an object</span>type<span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># It returns the type of an object.</span>id<span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># It returns the unique ids of various objects.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a><em>异常处理</em></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 打印⼀些异常⽇志，如果你想要的话</span>    <span class="token keyword">raise</span><span class="token comment" spellcheck="true"># try/else 在try不出现异常时触发</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a><em>Classes</em></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cal</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># pi is a class variable</span>    pi <span class="token operator">=</span> <span class="token number">3.142</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># self.radius is an instance variable</span>        self<span class="token punctuation">.</span>radius <span class="token operator">=</span> radius    <span class="token keyword">def</span> <span class="token function">area</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>pi <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>a <span class="token operator">=</span> Cal<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>area<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Output: 3217.408</span>a<span class="token punctuation">.</span>pi<span class="token comment" spellcheck="true"># Output: 3.142</span>a<span class="token punctuation">.</span>pi <span class="token operator">=</span> <span class="token number">43</span>a<span class="token punctuation">.</span>pi<span class="token comment" spellcheck="true"># Output: 43</span>b <span class="token operator">=</span> Cal<span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>area<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Output: 6082.912</span>b<span class="token punctuation">.</span>pi<span class="token comment" spellcheck="true"># Output: 3.142</span>b<span class="token punctuation">.</span>pi <span class="token operator">=</span> <span class="token number">50</span>b<span class="token punctuation">.</span>pi<span class="token comment" spellcheck="true"># Output: 50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Function-caching"><a href="#Function-caching" class="headerlink" title="Function caching"></a><em>Function caching</em></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> lru_cache@lru_cache<span class="token punctuation">(</span>maxsize<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">return</span> n    <span class="token keyword">return</span> fib<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span>fib<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>fib<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>fib<span class="token punctuation">.</span>cache_clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#这是一个被相同参数频繁调用的I/O密集的函数</span><span class="token comment" spellcheck="true">#使用lru_cache可以使这段代码的运行时间从53.6s变为0s(笔者自测)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文漏掉了<code>set结构</code> <code>Ternary Operators(三元运算符）</code> <code>装饰器的高级应用</code><br><code>Global &amp; Return</code>(尽量return多值代替global)<br><code>__slots__魔法</code> <code>Virtual Environment</code> <code>Collections</code><br><code>推导式</code> <code>lambda 参数:操作</code> <code>Python C extensions</code><br><code>for/else</code>(else会在for循环正常结束时执行)<br><code>open函数</code> <code>Targeting Python 2+3</code> <code>Coroutines(协程)</code><br><code>上下文管理器</code></p><p>唔，终于弄完了😀————————<em><code>2020.8.9</code></em></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>heapq模块</title>
      <link href="posts/9568.html"/>
      <url>posts/9568.html</url>
      
        <content type="html"><![CDATA[<h2 id="heappush-heap-item"><a href="#heappush-heap-item" class="headerlink" title="heappush(heap, item)"></a><em>heappush(heap, item)</em></h2><p>将 <code>item</code> 的值加入 <code>heap</code> 中，保持堆的不变性。</p><h2 id="heappop-heap"><a href="#heappop-heap" class="headerlink" title="heappop(heap)"></a><em>heappop(heap)</em></h2><p>弹出并返回 <code>heap</code> 的最小的元素，保持堆的不变性。</p><h2 id="heappushpop-heap-item"><a href="#heappushpop-heap-item" class="headerlink" title="heappushpop(heap, item)"></a><em>heappushpop(heap, item)</em></h2><p>将 <code>item</code> 放入堆中，然后弹出并返回 <code>heap</code> 的最小元素。</p><h2 id="heapify-x"><a href="#heapify-x" class="headerlink" title="heapify(x)"></a><em>heapify(x)</em></h2><p>将<code>list x</code> 转换成堆，原地，线性时间内。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>functools模块</title>
      <link href="posts/e9cc.html"/>
      <url>posts/e9cc.html</url>
      
        <content type="html"><![CDATA[<h2 id="lru-cache"><a href="#lru-cache" class="headerlink" title="lru_cache"></a>lru_cache</h2><p><code>@functools.lru_cache(maxsize=128, typed=False)</code><br>一个为函数提供缓存功能的装饰器，缓存 maxsize 组传入参数，在下次以相同参数调用时直接返回上一次的结果。用以<strong>节约高开销或I/O函数的调用时间</strong>。</p><ul><li>如果 maxsize 设为 None，LRU 特性将被禁用且缓存可无限增长。</li><li>如果 typed 设置为true，不同类型的函数参数将被分别缓存。例如， f(3) 和 f(3.0) 将被视为不同而分别缓存。</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron之旅</title>
      <link href="posts/6db0.html"/>
      <url>posts/6db0.html</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title="preface"></a><em>preface</em></h2><p>官方文档：<a href="http://www.electronjs.org/docs" target="_blank" rel="noopener">http://www.electronjs.org/docs</a><br>教程：<a href="https://www.jspang.com/detailed?id=62#toc262" target="_blank" rel="noopener">https://www.jspang.com/detailed?id=62#toc262</a></p><h2 id="0-介绍"><a href="#0-介绍" class="headerlink" title="0.介绍"></a>0.介绍</h2><p>使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序</p><h2 id="1-基础"><a href="#1-基础" class="headerlink" title="1.基础"></a>1.基础</h2><p>构建一个demo：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/demopark/electron-api-demos-Zh_CN$ <span class="token function">cd</span> electron-api-demos-Zh_CN$ <span class="token function">npm</span> <span class="token function">install</span>$ <span class="token function">npm</span> start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Hello World!<br>We are using Node.js 12.16.3, Chromium 85.0.4183.93, and Electron 10.1.1.</p><h2 id="js库"><a href="#js库" class="headerlink" title="js库"></a>js库</h2><p><code>React</code> 是一个用于构建用户界面的 JAVASCRIPT 库。</p><p>React 主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。</p><p>React 起源于 Facebook 的内部项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。</p><p><code>Vue.js</code>是一套构建用户界面的渐进式框架。</p><p>Vue 只关注视图层， 采用自底向上增量开发的设计。</p><p>Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p><blockquote><p>Electron 可以让你使用纯 JavaScript 调用丰富的原生(操作系统) APIs 来创造桌面应用。 你可以把它看作一个 Node. js 的变体，它专注于桌面应用而不是 Web 服务器端。</p></blockquote><blockquote><p><strong>两个核心:</strong><br>main-process<br>render-process</p></blockquote><blockquote><p><strong>三个部分:</strong><br><strong>chromium</strong>: for making web pages<br><strong>nodejs</strong>: for filesystems and networks<br><strong>native apis</strong>: for three systems</p></blockquote><p>应用架构：多窗口，单窗口</p><p>Electron在主进程和渲染进程中提供了大量API去帮助开发桌面应用程序， 在主进程和渲染进程中，你可以通过require的方式将其包含在模块中以此，获取Electron的API</p>]]></content>
      
      
      <categories>
          
          <category> 应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言</title>
      <link href="posts/c6f.html"/>
      <url>posts/c6f.html</url>
      
        <content type="html"><![CDATA[<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a><em>指针</em></h2><hr><h3 id="指针变量"><a href="#指针变量" class="headerlink" title="指针变量"></a>指针变量</h3><p><strong>指针是个变量，存放内存单元的地址。</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span> </span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//在内存中开辟一块空间    </span>    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对变量a取址,赋值给指针变量p               </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>野指针</strong>——就是指针指向的位置是不可知的。指针变量如果在定义时未初始化，其值是随机的，这意味着此时的解引用，是去访问一个不确定的地址，其结果是不可知的。</p><p><strong>空指针</strong>——指针的值为NULL。</p></blockquote><hr><h3 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h3><p><strong>指针类型，决定了指针每移动一次所跨越的字节。</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p %p"</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//000000000061FE14 000000000061FE18</span><span class="token comment" spellcheck="true">//移动了4个字节</span><span class="token comment" spellcheck="true">// type * 会定义一个变量为指针类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">short</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p %p"</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//000000000061FE14 000000000061FE16</span><span class="token comment" spellcheck="true">//移动了2个字节</span><span class="token comment" spellcheck="true">//(type *)是指针的类型转变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="指针解引用，是在访问内存"><a href="#指针解引用，是在访问内存" class="headerlink" title="指针解引用，是在访问内存"></a>指针解引用，是在访问内存</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span>      p<span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token operator">*</span>p<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//可以看见定义时*符号可以在type与p间随意放</span><span class="token comment" spellcheck="true">//解引用会访问指针类型相关的字节</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">char</span><span class="token operator">*</span> pstr<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>pstr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>string<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><blockquote><p>为什么要用指针：</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">nicejob</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    a<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//函数对传递参数的操作仅仅是对拷贝的操作</span><span class="token comment" spellcheck="true">//这时使用指针来改变函数外的值</span><span class="token keyword">void</span> <span class="token function">nicejob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span>a<span class="token operator">=</span><span class="token operator">*</span>a<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//*a通过解引用访问内存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>随便找个变量放地址是可行的，如 <code>int p=&amp;a;</code><br>但为什么，还麻烦的用<code> int * p</code>呢？</p></blockquote><blockquote><p>为什么使用指针类型：</p><ol><li> 不容易混淆</li><li> 指针类型给出了指针改变的实际字节偏移量</li></ol></blockquote><hr><h3 id="二级指针，函数指针"><a href="#二级指针，函数指针" class="headerlink" title="二级指针，函数指针"></a>二级指针，函数指针</h3><p><strong>一级指针</strong>用途：</p><ul><li>可以利用一级指针改变函数外部的变量，还可以跨进程改变变量（外挂就是这么搞的）。</li><li>一级指针可以存储数组的首地址，并通过指针或者下标访问元素。</li><li>一级指针作为函数的返回值，返回地址；注意：不能返回指向栈的地址，因为函数执行完，变量就被回收了。</li><li>函数的参数有副本机制，传递实参时，新建一个变量，容纳传递过来的实参。特例：数组在函数参数中拒绝副本机制，数组作为参数时数组的首地址。</li><li>return也有副本机制，返回值保存在CPU寄存器中，因此函数的返回值不能取地址。</li><li>为什么指针要有类型，因为类型可以让编译器知道如何解析，还有步长。</li></ul><p><strong>二级指针</strong>，在二维数组中常见：<br><code>array[2][1]</code>等价的指针表示法：<code>*(*(array+2)+1)</code></p><p>函数指针：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">></span> y <span class="token operator">?</span> x <span class="token punctuation">:</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* p 是函数指针 */</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span> max<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &amp;可以省略</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入三个数字:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token operator">&amp;</span> b<span class="token punctuation">,</span> <span class="token operator">&amp;</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    d <span class="token operator">=</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token function">p</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//等价d = max(max(a, b), c)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最大的数字是: %d\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="结构指针"><a href="#结构指针" class="headerlink" title="结构指针"></a>结构指针</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> LEN 20</span><span class="token keyword">struct</span> names <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//结构声明</span>    <span class="token keyword">char</span> first<span class="token punctuation">[</span>LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> last<span class="token punctuation">[</span>LEN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> guy <span class="token punctuation">{</span>    <span class="token keyword">struct</span> names handle<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//嵌套结构</span>    <span class="token keyword">float</span> income<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> guy fellow<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//结构数组变量</span>        <span class="token punctuation">{</span>            <span class="token punctuation">{</span><span class="token string">"li"</span><span class="token punctuation">,</span><span class="token string">"hua"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token number">12000.00</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token punctuation">{</span><span class="token string">"liu"</span><span class="token punctuation">,</span><span class="token string">"bei"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token number">23000.00</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> guy<span class="token operator">*</span> him<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指向结构的指针</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"address #1: %p #2: %p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>fellow<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>fellow<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    him<span class="token operator">=</span><span class="token operator">&amp;</span>fellow<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pointer #1: %p #2: %p\n"</span><span class="token punctuation">,</span>him<span class="token punctuation">,</span>him<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"him->income is $%.2f\n(*him).income is $%.2f"</span><span class="token punctuation">,</span>him<span class="token operator">-></span>income<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>him<span class="token punctuation">)</span><span class="token punctuation">.</span>income<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// address #1: 000000000061FDC0 #2: 000000000061FDEC</span><span class="token comment" spellcheck="true">// pointer #1: 000000000061FDC0 #2: 000000000061FDEC</span><span class="token comment" spellcheck="true">// him->income is $12000.00</span><span class="token comment" spellcheck="true">// (*him).income is $12000.00</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="存储类"><a href="#存储类" class="headerlink" title="存储类"></a><em>存储类</em></h2><p><strong>auto</strong> 是局部变量的默认存储类, 限定变量只能在函数内部使用；</p><p><strong>register</strong> 代表了寄存器变量，不在内存中使用；</p><p><strong>static</strong> 是全局变量的默认存储类,表示变量在程序生命周期内可见；</p><p><strong>extern</strong> 表示全局变量，即对程序内所有文件可见，类似于Java中的public关键字；</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a><em>枚举</em></h2><p>1、先定义枚举类型，再定义枚举变量</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">enum</span> DAY<span class="token punctuation">{</span>      MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">enum</span> DAY day<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、定义枚举类型的同时定义枚举变量</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">enum</span> DAY<span class="token punctuation">{</span>      MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token punctuation">}</span> day<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3、省略枚举名称，直接定义枚举变量</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">enum</span><span class="token punctuation">{</span>      MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token punctuation">}</span> day<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><em>字符串</em></h2><p><strong>定义</strong>：以 <code>null</code> 字符 <code>&#39;\0&#39;</code> 终止的一维字符数组。</p><p><code>&lt;string.h&gt;</code>中常用函数</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td><code>strcpy(s1,s2)</code></td><td>复制s2到s1</td></tr><tr><td><code>strcat(s1, s2)</code></td><td>连接s2到s1末尾</td></tr><tr><td><code>strlen()</code></td><td></td></tr><tr><td><code>strcmp(s1, s2)</code></td><td>比较s1、s2大小</td></tr><tr><td><code>strchr(s1, ch)</code></td><td>返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。</td></tr><tr><td><code>strstr(s1, s2)</code></td><td>返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</td></tr><tr><td><code>void *memset(void * str,int c,size_t n)</code></td><td>复制字符c 到str所指向的的前n个字符</td></tr></tbody></table><h2 id="stdio-h"><a href="#stdio-h" class="headerlink" title="stdio.h"></a><em>stdio.h</em></h2><table><thead><tr><th>函数原型</th><th>说明</th></tr></thead><tbody><tr><td><code>int fclose(FILE *stream)</code></td><td>关闭流 stream。刷新所有的缓冲区。</td></tr><tr><td><code>int fflush(FILE *stream)</code></td><td>刷新流 stream 的输出缓冲区。</td></tr><tr><td><code>void rewind(FILE *stream)</code></td><td>设置文件位置为给定流 stream 的文件的开头。</td></tr><tr><td><code>int printf(const char *format, ...)</code></td><td>发送格式化输出到标准输出 stdout。</td></tr><tr><td><code>int sprintf(char *str, const char *format, ...)</code></td><td>发送格式化输出到字符串。</td></tr><tr><td><code>int fgetc(FILE *stream)</code></td><td>从指定的流 stream 获取下一个字符（一个无符号字符），并把位置标识符往前移动。</td></tr><tr><td><code>char *fgets(char *str, int n, FILE *stream)</code></td><td>从指定的流 stream 读取一行，并把它存储在 str 所指向的字符串内。当读取 (n-1) 个字符时，或者读取到换行符时，或者到达文件末尾时，它会停止，具体视情况而定。</td></tr><tr><td><code>int snprintf(char *str, size_t size, const char *format, ...)</code></td><td>格式字符串到 str 中。</td></tr></tbody></table><hr><table><thead><tr><th>输入</th><th>输出</th><th>说明</th></tr></thead><tbody><tr><td><code>scanf()</code></td><td><code>printf()</code></td><td></td></tr><tr><td><code>fscanf(stdin,...)</code></td><td><code>fprintf(stdout,...)</code></td><td></td></tr><tr><td><code>getchar()</code></td><td><code>putchar()</code></td><td></td></tr><tr><td><code>gets()</code></td><td><code>puts()</code></td><td>遇到换行符结束</td></tr><tr><td><code>int getc(FILE *stream)</code></td><td></td><td>从文件读取字符，fgetc与getc差不多</td></tr><tr><td><code>fgets(str,n,fp)</code></td><td><code>fputs(str,fp)</code></td><td>最多只能读入n-1个字符到str，可存储<code>\n</code></td></tr><tr><td><code>gets_s(words,STLEN)</code></td><td></td><td></td></tr><tr><td></td><td><code>fprintf()</code></td><td><code>int fprintf(FILE *stream, const char *format, ...)</code></td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//snprintf</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> s <span class="token operator">=</span> <span class="token string">"runoobcom"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 读取字符串并存储在 buffer 中</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">snprintf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"%s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 输出 buffer及字符数</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"string:%s \n character count = %d\n"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//不能完全存入时snprintf返回-1</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="stdlib-h"><a href="#stdlib-h" class="headerlink" title="stdlib.h"></a><em>stdlib.h</em></h2><table><thead><tr><th>函数原型</th><th>说明</th></tr></thead><tbody><tr><td><code>double atof(const char *str)</code></td><td>把参数 str 所指向的字符串转换为一个浮点数（类型为 double 型）</td></tr><tr><td><code>int atoi(const char *str)</code></td><td></td></tr><tr><td><code>void *calloc(size_t nitems, size_t size)</code></td><td>分配所需的内存空间，并返回一个指向它的指针</td></tr><tr><td><code>void *malloc(size_t size)</code></td><td>malloc 和 calloc 之间的不同点是，malloc 不会设置内存为零，而 calloc 会设置分配的内存为零。</td></tr><tr><td><code>void free(void *ptr)</code></td><td>释放内存</td></tr><tr><td><code>void exit(int status)</code></td><td>立即终止调用进程<code>？？？</code></td></tr><tr><td><code>void qsort(void *base,nitems,size,func</code></td><td></td></tr></tbody></table><p>size_t 在这是一个库定义的变量类型，无符号整型。</p><p>关于动态内存:</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 最初的内存分配 */</span>   str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//强制指针类型转变，读度1</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"runoob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"String = %s,  Address = %u\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//String = runoob,  Address = 3662685808</span>   <span class="token comment" spellcheck="true">/* 重新分配内存 */</span>   str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">realloc</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">strcat</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">".com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"String = %s,  Address = %u\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//String = runoob.com,  Address = 3662685808</span>   <span class="token function">free</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a><em>文件读写</em></h2><p>挑一段代码看看，，，，</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    FILE  <span class="token operator">*</span>fp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建 （文件指针类型） 变量 </span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input your strings:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">gets</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        k<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>                k<span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">!=</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>str<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>                 <span class="token comment" spellcheck="true">//字符排序</span>    <span class="token comment" spellcheck="true">//函数原型 FILE *fopen( const char * filename, const char * mode );</span>    <span class="token comment" spellcheck="true">//单目运算符的优先级比双目的高</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"C:\\intel\\c.txt"</span><span class="token punctuation">,</span><span class="token string">"ab+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nCannot open file\nstrike any key exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nthe new:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">fputs</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//写入内容</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//关闭文件</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a><em>预处理器</em></h2><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><code>#define</code></td><td>定义宏</td></tr><tr><td><code>#include</code></td><td>包含一个源代码文件</td></tr><tr><td><code>#undef</code></td><td>取消已定义的宏</td></tr><tr><td><code>#ifdef</code></td><td>如果宏已经定义，则返回真</td></tr><tr><td><code>#ifndef</code></td><td>如果宏没有定义，则返回真</td></tr><tr><td><code>#if</code></td><td>如果给定条件为真，则编译下面代码</td></tr><tr><td><code>#else</code></td><td>#if 的替代方案</td></tr><tr><td><code>#elif</code></td><td>如果前面的 #if 给定条件不为真，当前条件为真，则编译下面代码</td></tr><tr><td><code>#endif</code></td><td>结束一个 #if……#else 条件编译块</td></tr><tr><td><code>#error</code></td><td>当遇到标准错误时，输出错误消息</td></tr><tr><td><code>#pragma</code></td><td>使用标准化方法，向编译器发布特殊的命令到编译器中</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//一个课堂上的例子，避免函数库的嵌套调用</span><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> __slnname__g_A__</span><span class="token macro property">#<span class="token directive keyword">define</span>  __slnname_g_A__</span><span class="token keyword">int</span> g_A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a><em>命令行参数</em></h2><p>命令行参数是使用 <code>main()</code> 函数参数来处理的，其中，<code>argc</code> 是指传入参数的个数，<code>argv[]</code> 是一个指针数组，指向传递给程序的每个参数。</p><ol><li><code>argv[0]</code> = _____.exe，<code>argv[1]</code> = 参数一，<code>argv[2]</code> = 参数二 ………</li><li>项目属性，调试中，可以更改命令行参数。cmd 中可直接输入命令行参数，如<code>a.exe argv1</code></li><li>程序中<code>argc</code>，<code>argv</code>已经是确定的值。</li></ol><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><em>题目</em></h2><ol><li>分别统计纯英文文本文件中<strong>每一个字符个数</strong>、<strong>单词总的个数</strong>；要求统计结果输出到另外一个文件中，源文件和结果文件名均<strong>由命令行参数指定</strong>.</li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>in <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>out <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fpout<span class="token punctuation">,</span> <span class="token operator">*</span>fpin<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fpin <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入文件打开失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> count<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fpin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//flag表示读到字母或数字时是否可以cnt++</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">&lt;=</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">&lt;=</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c<span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">&lt;=</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %c\n"</span><span class="token punctuation">,</span> flag<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fpin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fpin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fpout <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输出文件打开失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span>fpout<span class="token punctuation">,</span> <span class="token string">"单词个数为: %d\n"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span>fpout<span class="token punctuation">,</span> <span class="token string">"\n===================================\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span>fpout<span class="token punctuation">,</span> <span class="token string">"字符 \t 个数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span>fpout<span class="token punctuation">,</span> <span class="token string">"%3c: \t %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fpout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="all-fine"><a href="#all-fine" class="headerlink" title="all fine"></a><em>all fine</em></h2>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大一 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bisect模块</title>
      <link href="posts/7dd2.html"/>
      <url>posts/7dd2.html</url>
      
        <content type="html"><![CDATA[<h3 id="bisect"><a href="#bisect" class="headerlink" title="bisect"></a>bisect</h3><ul><li><code>bisect.bisect_left(a,x,lo=0,hi=len(a))</code></li></ul><ol><li>在 a 中找到 x 合适的插入点以<strong>维持有序</strong>。</li><li>如果 x 已经在 a 里存在，那么插入点会在已存在元素左边。</li><li>如果 a 是<code>list</code>，则返回值可以是 <code>list.insert()</code> 的第一个参数。</li><li>返回的<code>i</code>可以将数组 a 分成两部分。左侧是 <code>all(val &lt; x for val in a[lo:i])</code> ，右侧是 <code>all(val &gt;= x for val in a[i:hi])</code></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> bisectarr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span>x<span class="token operator">=</span><span class="token number">8</span>bisect<span class="token punctuation">.</span>bisect_left<span class="token punctuation">(</span>arr<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># --> 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>bisect.bisect_right(a, x, lo=0, hi=len(a))</code></li><li><code>bisect.bisect(a, x, lo=0, hi=len(a))</code><br>类似于 <code>bisect_left()</code>，但是返回的插入点是 a 中已存在元素 x 的右侧。</li></ul><h3 id="insort"><a href="#insort" class="headerlink" title="insort"></a>insort</h3><ul><li><code>bisect.insort_left(a, x, lo=0, hi=len(a))</code></li></ul><ol><li>相当于 a.<strong>insert</strong>(bisect.bisect_left(a, x, lo, hi), x)</li><li>注意搜索是 O(log n) 的，插入却是 O(n) 的。</li></ol><ul><li><code>bisect.insort_right(a, x, lo=0, hi=len(a))</code></li><li><code>bisect.insort(a, x, lo=0, hi=len(a))</code><br>类似于 <code>insort_left()</code>，但是把 x 插入到 a 中已存在元素 x 的右侧。</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">grade</span><span class="token punctuation">(</span>score<span class="token punctuation">,</span> breakpoints<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grades<span class="token operator">=</span><span class="token string">'FA'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> bisect<span class="token punctuation">(</span>breakpoints<span class="token punctuation">,</span> score<span class="token punctuation">)</span>    <span class="token keyword">return</span> grades<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>grade<span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">for</span> score <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># output: ['F',  'A', 'A']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>官方文档：<a href="https://docs.python.org/zh-cn/3.8/library/bisect.html?highlight=bisect#module-bisect" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3.8/library/bisect.html?highlight=bisect#module-bisect</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020十月上</title>
      <link href="posts/fa02.html"/>
      <url>posts/fa02.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p><font face="myfont" size=5>不因虚度年华而悔恨, 不因碌碌无为而羞愧。</font></p><h1 id="1-日记"><a href="#1-日记" class="headerlink" title="1.日记"></a>1.日记</h1><h2 id="10-3"><a href="#10-3" class="headerlink" title="10.3"></a><code>10.3</code></h2><p>人总会沉迷短暂的快乐。</p><h2 id="10-4"><a href="#10-4" class="headerlink" title="10.4"></a><code>10.4</code></h2><p>观看《灵笼》，⭐⭐⭐⭐⭐</p><p>心灵该是怎样的一种容器啊！！！</p><h2 id="10-5"><a href="#10-5" class="headerlink" title="10.5"></a><code>10.5</code></h2><p>戒游戏一个星期，说到做到。</p><p>多去看看外面的世界，了解自己</p><h2 id="10-7"><a href="#10-7" class="headerlink" title="10.7"></a><code>10.7</code></h2><blockquote><p>生活不是我们活过的日子，而是我们记住的日子。</p></blockquote><h2 id="10-8"><a href="#10-8" class="headerlink" title="10.8"></a><code>10.8</code></h2><p>今天试了一下<code>hexo-douban</code>的插件，有些鸡肋。</p><p>改不动这个hexo-matery，ejs代码看😵了</p><h2 id="10-9"><a href="#10-9" class="headerlink" title="10.9"></a><code>10.9</code></h2><p>坚持不住的时候，再坚持一下。加油！</p><p>下午逛了一大圈博客，相比之下这个博客挺棒的。<br>知足了，<font face="consolas" size=3 color='green'>i love you 3000.</font></p><p>更换域名，备案不了<br>参考：<a href="https://yafine66.gitee.io/posts/a170.html" target="_blank" rel="noopener">https://yafine66.gitee.io/posts/a170.html</a></p><h2 id="10-13"><a href="#10-13" class="headerlink" title="10.13"></a><code>10.13</code></h2><p>不知不觉一年快过去了，可我究竟活了多久？</p><p>这真是个傻乎乎的问题。</p><h2 id="10"><a href="#10" class="headerlink" title="10.~~"></a><code>10.~~</code></h2><p>如履薄冰，云淡风轻</p><h2 id="10-26"><a href="#10-26" class="headerlink" title="10.26"></a><code>10.26</code></h2><p>记一下，leancloud【为产品开发提供后端支持】<br>同微信小程序的云一样，调用API使用</p><p>hhh~，最近的生活还好吧，<br>看了《楚门的世界》《小森林》</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表达式求值</title>
      <link href="posts/8d87.html"/>
      <url>posts/8d87.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p>对栈的应用，中缀表达式的直接求值。</p><h1 id="1-代码实现"><a href="#1-代码实现" class="headerlink" title="1.代码实现"></a>1.代码实现</h1><p>项目包含：</p><ul><li>main.cpp</li><li>s.cpp</li><li>s.h</li></ul><h2 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a><em>main.cpp</em></h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"s.h"</span></span><span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">,</span> <span class="token keyword">char</span> op<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> c <span class="token operator">-</span> d<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> c <span class="token operator">+</span> d<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> c <span class="token operator">*</span> d<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> c <span class="token operator">/</span> d<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'%'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> c <span class="token operator">%</span> d<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'^'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token function">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">calcu</span><span class="token punctuation">(</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>    stackp num<span class="token punctuation">,</span> op<span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">push</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token punctuation">;</span>            <span class="token function">gettop</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//栈外的优先级高，进栈</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">osp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">isp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">push</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//栈内的优先级高，出栈</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">osp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">isp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">osp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">isp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">pop</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">pop</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token function">fun</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在pop op的时候计算</span>                    <span class="token function">pop</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">gettop</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">osp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">isp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">push</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">osp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">isp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">pop</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">gettop</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//处理栈中剩下的op符</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token function">gettop</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">pop</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pop</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token function">fun</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pop</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">gettop</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">gettop</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    stackp s<span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the infix expression:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"!!!! dont take # \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gets_s</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s = %d"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token function">calcu</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="s-cpp"><a href="#s-cpp" class="headerlink" title="s.cpp"></a><em>s.cpp</em></h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"s.h"</span></span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>stackp<span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token keyword">const</span> stackp<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//change s</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>stackp <span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    stackp p <span class="token operator">=</span> new stack<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p<span class="token operator">-></span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>    s <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//change s</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span>stackp<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    stackp p <span class="token operator">=</span> s<span class="token punctuation">;</span>    s <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    x <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>    delete p<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">gettop</span><span class="token punctuation">(</span><span class="token keyword">const</span> stackp<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> s<span class="token operator">-></span>data<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">isp</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'#'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'('</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'^'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token string">'%'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">')'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">osp</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'#'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'('</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'^'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token string">'%'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">')'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="s-h"><a href="#s-h" class="headerlink" title="s.h"></a><em>s.h</em></h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __S_H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __S_H__</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4477)</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> node <span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> node<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span>stack<span class="token punctuation">,</span> <span class="token operator">*</span>stackp<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>stackp <span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token keyword">const</span> stackp <span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>stackp <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span>stackp <span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">gettop</span><span class="token punctuation">(</span><span class="token keyword">const</span> stackp <span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">isp</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">osp</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-小结"><a href="#2-小结" class="headerlink" title="2.小结"></a>2.小结</h1><p>主要就是那个calcu函数，伪代码理解：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> infix_expression<span class="token punctuation">:</span>    <span class="token keyword">if</span> i是数字：        放入数字栈    <span class="token keyword">else</span>（i是操作符）：        <span class="token keyword">if</span> 优先级高：            放入运算符栈        <span class="token keyword">elif</span> 优先级低：            运算符栈pop，同时在数字栈中运算            调整运算符栈        <span class="token keyword">if</span> 优先级相等：            调整运算符栈<span class="token keyword">for</span> op <span class="token keyword">in</span> 运算符栈中的残留：    数字栈中运算<span class="token keyword">return</span> 数字栈中的唯一数字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言线性表</title>
      <link href="posts/fd16.html"/>
      <url>posts/fd16.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>文件结构：</p><ul><li><p><code>l.cpp</code>    定义链表功能函数</p><pre class="line-numbers language-cC"><code class="language-cC">#include "l.h"功能一。。。功能二。。。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>l.h</code>      存放链表函数原型，结构体定义</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __L_H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __L_H__</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span>结构体定义函数原型<span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>main.cpp</code> 执行链表的操作</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"l.h"</span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>分为不带头，带头，无说明则代码通用。 <code>***</code>说明通用</p><h3 id="l-h"><a href="#l-h" class="headerlink" title="l.h"></a><em>l.h</em></h3><ul><li><code>node</code> 链表的节点</li><li><code>nodep</code> 指向该节点的指针</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> elemtype<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> lnode <span class="token punctuation">{</span>    elemtype data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> lnode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>node<span class="token punctuation">;</span><span class="token keyword">typedef</span> node<span class="token operator">*</span> nodep<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">create_h</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">create_t</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">travel</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">locate</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="init"><a href="#init" class="headerlink" title="init ***"></a><em>init</em> ***</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="create"><a href="#create" class="headerlink" title="create"></a><em>create</em></h3><p>带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">create_h</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    head <span class="token operator">=</span> new node<span class="token punctuation">;</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the node num:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nodep tmp <span class="token operator">=</span> new node<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        tmp<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">create_h</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    head <span class="token operator">=</span> new node<span class="token punctuation">;</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the node num:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>head<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nodep tmp <span class="token operator">=</span> new node<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        tmp<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//步骤一：将新建的节点连上去</span>        head <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//步骤二：改变头指针的位置</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//多了在首处填值的步骤</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="free"><a href="#free" class="headerlink" title="free ***"></a><em>free</em> ***</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nodep tmp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        delete head<span class="token punctuation">;</span>        head <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="travel"><a href="#travel" class="headerlink" title="travel"></a><em>travel</em></h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">travel</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodep tmp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//带头，不带头的将tmp指向头</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: %d\n"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> tmp<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">;</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="len"><a href="#len" class="headerlink" title="len"></a><em>len</em></h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    nodep tmp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//带头，不带头的将tmp指向头</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cnt <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a><em>locate</em></h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">locate</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodep tmp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//带头，不带头的将tmp指向头</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tmp<span class="token operator">-></span>data<span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">;</span>            i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a><em>insert</em></h3><p>不带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> num<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the address:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the num:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nodep m <span class="token operator">=</span> new node<span class="token punctuation">;</span>        m<span class="token operator">-></span>data <span class="token operator">=</span> num<span class="token punctuation">;</span>        m<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> m<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    nodep p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            nodep m <span class="token operator">=</span> new node<span class="token punctuation">;</span>            m<span class="token operator">-></span>data <span class="token operator">=</span> num<span class="token punctuation">;</span>            m<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            p<span class="token operator">-></span>next <span class="token operator">=</span> m<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"complete\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error input\n "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> num<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the address:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the num:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    nodep p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            nodep m <span class="token operator">=</span> new node<span class="token punctuation">;</span>            m<span class="token operator">-></span>data <span class="token operator">=</span> num<span class="token punctuation">;</span>            m<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            p<span class="token operator">-></span>next <span class="token operator">=</span> m<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"complete\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error input\n "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="del"><a href="#del" class="headerlink" title="del"></a><em>del</em></h3><p>不带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the num should del:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    nodep p<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        q <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> p<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        delete q<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the num should del:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    nodep p<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> p<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    delete q<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a><em>clear</em></h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodep p <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//带头，不带头的将p指向头</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h2><p>分为不带头，带头，无说明则代码通用。 <code>***</code>说明通用</p><h3 id="l-h-1"><a href="#l-h-1" class="headerlink" title="l.h"></a><em>l.h</em></h3><ul><li><code>node</code> 链表的节点</li><li><code>nodep</code> 指向该节点的指针</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> elemtype<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> lnode <span class="token punctuation">{</span>    elemtype data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> lnode <span class="token operator">*</span>next<span class="token punctuation">,</span> <span class="token operator">*</span>pre<span class="token punctuation">;</span><span class="token punctuation">}</span>node<span class="token punctuation">;</span><span class="token keyword">typedef</span> node<span class="token operator">*</span> nodep<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">create_h</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//头插</span><span class="token keyword">void</span> <span class="token function">create_t</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//尾插</span><span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">travel</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">locate</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="init-1"><a href="#init-1" class="headerlink" title="init ***"></a><em>init</em> ***</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">=</span> new node<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>pre <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="create-1"><a href="#create-1" class="headerlink" title="create"></a><em>create</em></h3><p>不带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">create_t</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodep p <span class="token operator">=</span> head<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the node num:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    n <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>head<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        q <span class="token operator">=</span> new node<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        q<span class="token operator">-></span>pre <span class="token operator">=</span> p<span class="token punctuation">;</span>        q<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token operator">-></span>pre <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> q<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">create_t</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodep p <span class="token operator">=</span> head<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the node num:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        q <span class="token operator">=</span> new node<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        q<span class="token operator">-></span>pre <span class="token operator">=</span> p<span class="token punctuation">;</span>        q<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token operator">-></span>pre <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> q<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="free-1"><a href="#free-1" class="headerlink" title="free ***"></a><em>free</em> ***</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodep p<span class="token punctuation">;</span>    head<span class="token operator">-></span>pre<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置断点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        delete p<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="travel-1"><a href="#travel-1" class="headerlink" title="travel"></a><em>travel</em></h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">travel</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodep tmp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//带头，不带头的将tmp指向头</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: %d\n"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> tmp<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">;</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="len-1"><a href="#len-1" class="headerlink" title="len"></a><em>len</em></h3><p>不带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    nodep tmp <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        cnt <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    nodep tmp <span class="token operator">=</span> head<span class="token operator">-></span>pre<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="locate-1"><a href="#locate-1" class="headerlink" title="locate"></a><em>locate</em></h3><p>不带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">locate</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodep tmp <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tmp<span class="token operator">-></span>data<span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">locate</span><span class="token punctuation">(</span><span class="token keyword">const</span> nodep<span class="token operator">&amp;</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodep tmp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tmp<span class="token operator">-></span>data<span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="insert-1"><a href="#insert-1" class="headerlink" title="insert"></a><em>insert</em></h3><p>不带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> num<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the address where insert:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the num:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    nodep p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nodep m <span class="token operator">=</span> new node<span class="token punctuation">;</span>        m<span class="token operator">-></span>data <span class="token operator">=</span> num<span class="token punctuation">;</span>        m<span class="token operator">-></span>pre <span class="token operator">=</span> head<span class="token operator">-></span>pre<span class="token punctuation">;</span>        m<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token operator">-></span>pre<span class="token operator">-></span>next <span class="token operator">=</span> m<span class="token punctuation">;</span>        head<span class="token operator">-></span>pre <span class="token operator">=</span> m<span class="token punctuation">;</span>        head <span class="token operator">=</span> m<span class="token punctuation">;</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            nodep m <span class="token operator">=</span> new node<span class="token punctuation">;</span>            m<span class="token operator">-></span>data <span class="token operator">=</span> num<span class="token punctuation">;</span>            m<span class="token operator">-></span>pre <span class="token operator">=</span> p<span class="token punctuation">;</span>            m<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            p<span class="token operator">-></span>next<span class="token operator">-></span>pre <span class="token operator">=</span> m<span class="token punctuation">;</span>            p<span class="token operator">-></span>next <span class="token operator">=</span> m<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"complete\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error input\n "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> num<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the address where to insert:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the num:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    nodep p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            nodep m <span class="token operator">=</span> new node<span class="token punctuation">;</span>            m<span class="token operator">-></span>data <span class="token operator">=</span> num<span class="token punctuation">;</span>            m<span class="token operator">-></span>pre <span class="token operator">=</span> p<span class="token punctuation">;</span>            m<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            p<span class="token operator">-></span>next<span class="token operator">-></span>pre <span class="token operator">=</span> m<span class="token punctuation">;</span>            p<span class="token operator">-></span>next <span class="token operator">=</span> m<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"complete\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error input\n "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="del-1"><a href="#del-1" class="headerlink" title="del"></a><em>del</em></h3><p>不带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the address of num should del:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    nodep p <span class="token operator">=</span> head<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p<span class="token operator">-></span>pre<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            p<span class="token operator">-></span>next<span class="token operator">-></span>pre <span class="token operator">=</span> p<span class="token operator">-></span>pre<span class="token punctuation">;</span>            delete p<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>         p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带头：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the address of num should del:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    nodep p <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p<span class="token operator">-></span>pre<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            p<span class="token operator">-></span>next<span class="token operator">-></span>pre <span class="token operator">=</span> p<span class="token operator">-></span>pre<span class="token punctuation">;</span>            delete p<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="clear-1"><a href="#clear-1" class="headerlink" title="clear"></a><em>clear</em></h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>nodep<span class="token operator">&amp;</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodep p <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//带头，不带头的将p指向头</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        p<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>c语言真累。。。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>math模块</title>
      <link href="posts/2cb4.html"/>
      <url>posts/2cb4.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）数论与表示函数"><a href="#（一）数论与表示函数" class="headerlink" title="（一）数论与表示函数"></a>（一）数论与表示函数</h3><ol><li><p><code>math.ceil(x)</code><br>返回 x 的上限，即大于或者等于 x 的最小整数。</p></li><li><p><code>math.floor(x)</code><br>返回 x 的向下取整，小于或等于 x 的最大整数。</p></li><li><p><code>math.comb(n,k)</code>，<strong>3.8新功能</strong><br>返回不重复且无顺序地从 n 项中选择 k 项的方式总数。<br>当 k &lt;= n 时取值为 n! / (k! * (n - k)!)；当 k &gt; n 时取值为零。<br>也称为二项式系数，因为它等价于表达式 (1 + x) ** n 的多项式展开中第 k 项的系数。</p></li><li><p><code>math.fabs(x)</code><br>返回 x 的绝对值。</p></li><li><p><code>math.factorial(x)</code><br>以一个整数返回 x 的阶乘。如果 x 不是整数或为负数时则将引发ValueError。</p></li><li><p><code>math.gcd(a, b)</code><br>返回整数 a 和 b 的最大公约数。</p></li><li><p><code>math.isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0)</code><br>若 a 和 b 的值比较接近则返回 True，否则返回 False。<br>根据给定的绝对和相对容差确定两个值是否被认为是接近的。</p></li><li><p><code>math.isinf(x)</code><br>如果 x 是正或负无穷大，则返回 True ，否则返回 False 。</p></li><li><p><code>math.modf(x)</code><br>返回 x 的小数和整数部分。两个结果都带有 x 的符号并且是浮点数。</p></li><li><p><code>math.perm(n, k=None)</code>，<strong>3.8新功能</strong><br>排列不重复且无顺序地从 n 项中选择 k 项的方式总数。<br>当 k &lt;= n 时取值为 n! / (n - k)!；当 k &gt; n 时取值为零。<br>如果 k 未指定或为 None，则 k 默认值为 n 并且函数将返回 n!。</p></li></ol><h3 id="（二）幂函数与对数函数"><a href="#（二）幂函数与对数函数" class="headerlink" title="（二）幂函数与对数函数"></a>（二）幂函数与对数函数</h3><ol start="11"><li><p><code>math.exp(x)</code><br>返回 e 次 x 幂。</p></li><li><p><code>math.log(x[, base ])</code><br>使用一个参数时，返回 x 的自然对数（底为 e ）。</p></li><li><p><code>math.sqrt(x)</code><br>返回 x 的平方根。</p></li></ol><h3 id="（三）三角函数与几何"><a href="#（三）三角函数与几何" class="headerlink" title="（三）三角函数与几何"></a>（三）三角函数与几何</h3><ol start="14"><li><p><code>math.asin(x)</code><br>以弧度为单位返回 x 的反正弦值。<br><code>math.acos(x)</code><br>以弧度为单位返回 x 的反余弦值。<br><code>math.atan(x)</code><br>以弧度为单位返回 x 的反正切值。<br><code>math.sin(x)</code><br>返回 x 弧度的正弦值。<br><code>math.cos(x)</code><br>返回 x 弧度的余弦值。<br><code>math.tan(x)</code><br>返回 x 弧度的正切值。</p></li><li><p><code>math.atan2(y, x)</code><br>以弧度为单位返回 atan(y / x) ，结果在 <code>(-pi,pi]</code> 之间。</p></li><li><p><code>math.dist(p, q)</code>，<strong>3.8新功能</strong><br>返回 p 与 q 两点之间的欧几里得距离（两点间直线距离），<code>sqrt(sum((px - qx) ** 2.0 for px, qx in zip(p, q)))</code>。以一个坐标序列（或可迭代对象）的形式给出。两个点必须具有相同的维度。</p></li><li><p> <code>math.hypot(*coordinates)</code><br>返回欧几里得范数，<code>sqrt(sum(x**2 for x in coordinates))</code>。这是从原点到坐标给定点的向量长度。</p></li><li><p><code>math.degrees(x)</code><br>将角度 x 从弧度转换为度数。<br><code>math.radians(x)</code><br>将角度 x 从度数转换为弧度。</p></li></ol><h3 id="（四）常数"><a href="#（四）常数" class="headerlink" title="（四）常数"></a>（四）常数</h3><ol start="20"><li><p><code>math.pi</code><br>数学常数 π = 3.141592…，精确到可用精度。</p></li><li><p><code>math.e</code><br>数学常数 e = 2.718281…，精确到可用精度。</p></li></ol><p><strong>小结</strong><br>本文基本包含math够用的函数。<br>未摘要的部分：</p><ul><li> 一些提高精度的函数</li><li> 双曲函数</li><li> 特殊函数，如伽马函数，统计等</li></ul><p>发现3.8新功能好好啊。</p><p><strong>实践</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> <span class="token operator">*</span>ceil<span class="token punctuation">(</span><span class="token number">3.9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>floor<span class="token punctuation">(</span><span class="token number">3.9</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->4,3</span>gcd<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#-->3</span>perm<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>，perm<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->120,20</span>log<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#-->2.0</span>dist<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#-->2.8284271247461903</span>radians<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#-->3.141592653589793</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020开学初</title>
      <link href="posts/f3a1.html"/>
      <url>posts/f3a1.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p>世界上很多东西，他们之间根本不存在因果关系。</p><p>如同鸡与蛋的关系，可只要给出个鸡或蛋就行了。</p><p>再比如，我学不了习因为我静不下心来，</p><p>可不学习怎么静下心来呢？</p><p>无聊的，大概只是无聊本身吧。</p><h2 id="1-开始"><a href="#1-开始" class="headerlink" title="1.开始"></a>1.开始</h2><ul><li><code>git clone</code> 弄项目到本地<blockquote><p>Fn+Ins可以粘贴</p></blockquote></li><li>找回torch环境</li><li>看不懂torch视频教程，</li></ul><p><strong>实验：</strong></p><p><strong>步进电机+ULN2003：</strong><br>&emsp;&emsp;比较精确慢速的马达。</p><p><strong>9g舵机：</strong><br>&emsp;&emsp;一般用于控制角度，180的范围。</p><p><strong>红外模块：</strong><br>&emsp;一、红外接收头<br>&emsp;&emsp;  红外遥控器发出的信号是一连串的二进制脉冲码。为了使其在无线传输过程中免受其他红外信号的干扰,通常都是先将其调制在特定的载波频率上,然后再经红外发射二极管发射出去,而红外线接收装置则要滤除其他杂波,叧接收该特定频率的信号并将其还原成二进制脉冲码,也就是解调.<br>&emsp;二、工作原理<br>&emsp;&emsp;  内置接收管将红外发射管发射出来癿光信号转换为微弱的电信号，此信号经由IC内部放大器进行放大，然后通过自动增益控制、带通滤波、解调变、波形整形后还原为遥控器发射出的原始编码，经由接收头的信号输出脚输入到电器上的编码识别电路。</p><h3 id="8-30"><a href="#8-30" class="headerlink" title="8.30"></a><code>8.30</code></h3><ul><li><code>print(&quot;\033[46;1m&quot;+&quot;attack&quot;+&quot;\033[0m&quot;)</code>这个可以更改字符颜色、粗细，末尾将格式复原</li><li>leetcode周赛204 ，吐了</li></ul><h3 id="8-31"><a href="#8-31" class="headerlink" title="8.31"></a><code>8.31</code></h3><ul><li>大学其实挺无趣的，</li><li>那就跟着自己，去做大事吧~~</li><li>真的喜欢和自己和睦共处</li></ul><h3 id="9-1"><a href="#9-1" class="headerlink" title="9.1"></a><code>9.1</code></h3><ul><li>再见了，<font color="#1E90FF">《逆水寒》</font> ，一个<font color="#FF00FF">令人惊艳</font> 的武侠游戏。</li><li>最美若初见，hhh~~</li></ul><h3 id="9-3"><a href="#9-3" class="headerlink" title="9.3"></a><code>9.3</code></h3><hr><ul><li><strong>数据结构</strong>，听课+自学+MOOC</li><li><strong>数据库</strong>，听课+自学</li><li><strong>电路分析</strong>，自学+MOOC</li><li><strong>概率统计</strong></li></ul><hr><ul><li><strong>语言学基础</strong></li><li>综合英语</li><li>视听说</li></ul><hr><ul><li>马克思原理</li><li>西方哲学</li><li>国别经济</li></ul><hr><p>时间零零散散的，问题不大~~</p><blockquote><p>今天的彩虹：</p></blockquote><img src="https://img-blog.csdnimg.cn/20200903232447960.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" style="zoom:40%"><h3 id="9-4"><a href="#9-4" class="headerlink" title="9.4"></a><code>9.4</code></h3><p>观看《钢铁侠》</p><p><font color="#7B68EE" size=5>我曾踏足山巅，也曾跌入谷底，<br>而如今，二者都让我受益良多。</font></p><h3 id="9-7"><a href="#9-7" class="headerlink" title="9.7"></a><code>9.7</code></h3><p>钢铁侠3中烟火爆炸的时候，godfather!!!</p><h3 id="9-10"><a href="#9-10" class="headerlink" title="9.10"></a><code>9.10</code></h3><p>。。。蹉跎岁月？？？</p><p>哲学老师，经济老师，搞我啊<br>可能我状态不太好，<br>可这种课，硬把一个人塞进去，钉在位子上硬听3个小时。</p><p>还不如我多看看书，看看别人书评。<br>真蹉跎，</p><p>想去就去，我心中不会没有尺子，<br>我是我自己，我知道我在干嘛，可能在以后看来傻乎乎的</p><p>嗯，就这样了，自律、自由缺一不可，hh~~<br>其它时间嘛，多做些有意义的事，多思考，你是一个世界，不是一个傻傻的个体。</p><p>最后只有自己的经历，自己的思考，与他人的羁绊，才是最有意思的，不是吗？</p><p>花开堪折直须折，莫待无花空折枝。</p><p>我管你个憨憨</p><h3 id="9-11"><a href="#9-11" class="headerlink" title="9.11"></a><code>9.11</code></h3><p>守望先锋，先分开一段时间。</p><p>给我时间，我会变得更强，hh~~</p><h3 id="9-12"><a href="#9-12" class="headerlink" title="9.12"></a><code>9.12</code></h3><p>愿无岁月可回首，且以深情共余生。</p><p>对美的追求，对自己的通透。</p><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>itertools模块</title>
      <link href="posts/9ba5.html"/>
      <url>posts/9ba5.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为高效循环而创建<strong>迭代器</strong>的函数。</p><h2 id="product"><a href="#product" class="headerlink" title="product"></a><em>product</em></h2><p>参数：<code>(*iterables, repeat=1)</code></p><pre class="line-numbers language-python"><code class="language-python">product<span class="token punctuation">(</span><span class="token string">'AB'</span><span class="token punctuation">,</span> <span class="token string">'xy'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#--> ('A', 'x')，('A', 'y')，('B', 'x')，('B', 'y')</span>product<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> repeat<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#--> 2*2*2，8个元组</span><span class="token comment" spellcheck="true"># 笛卡儿积</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="permutations"><a href="#permutations" class="headerlink" title="permutations"></a><em>permutations</em></h2><p>参数：<code>(iterable, r=None)</code></p><pre class="line-numbers language-python"><code class="language-python">permutations<span class="token punctuation">(</span><span class="token string">'ABCD'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># --> AB AC AD BA BC BD CA CB CD DA DB DC</span>permutations<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># --> 012 021 102 120 201 210</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="combinations"><a href="#combinations" class="headerlink" title="combinations"></a><em>combinations</em></h2><p>参数：<code>(iterable, r)</code></p><pre class="line-numbers language-python"><code class="language-python">combinations<span class="token punctuation">(</span><span class="token string">'ABCD'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># --> AB AC AD BC BD CD</span>combinations<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># --> 012 013 023 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="combinations-with-replacement"><a href="#combinations-with-replacement" class="headerlink" title="combinations_with_replacement"></a><em>combinations_with_replacement</em></h2><p>参数：<code>(iterable, r)</code></p><pre class="line-numbers language-python"><code class="language-python">combinations_with_replacement<span class="token punctuation">(</span><span class="token string">'ABC'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#--> AA AB AC BB BC CC</span><span class="token comment" spellcheck="true">#允许元素重复出现</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate"></a><em>accumulate</em></h2><p>参数：<code>(iterable[, func, *, initial=None])</code></p><pre class="line-numbers language-python"><code class="language-python">accumulate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">#--> 1 3 6 10 15</span>accumulate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> initial<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#--> 100 101 103 106 110 115</span>accumulate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> operator<span class="token punctuation">.</span>mul<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#--> 1 2 6 24 120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="other"><a href="#other" class="headerlink" title="other"></a><em>other</em></h2><p>无限迭代器：<code>repeat()</code>, <code>count()</code>, <code>cycle()</code></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>copy模块</title>
      <link href="posts/4b99.html"/>
      <url>posts/4b99.html</url>
      
        <content type="html"><![CDATA[<p>Python 中赋值语句<strong>不复制对象</strong>，而是在目标和对象之间创建**绑定 (bindings)**关系。对于自身可变或者包含可变项的集合对象，开发者有时会需要生成其副本用于改变操作，进而避免改变原对象。</p><p>本模块提供了通用的浅层复制和深层复制操作:</p><ul><li><code>copy.copy()</code></li><li><code>copy.deepcopy()</code></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 关于拷贝的机制</span><span class="token keyword">import</span> copya<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#原始对象</span>b<span class="token operator">=</span>a                 <span class="token comment" spellcheck="true">#赋值，传对象的引用</span>c<span class="token operator">=</span>copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>a<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#浅拷贝</span>d<span class="token operator">=</span>copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#深拷贝</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -->[1, 2, 3, ['a', 'b', 'c'], 5]</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -->[1, 2, 3, ['a', 'b', 'c'], 5]</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -->[1, 2, 3, ['a', 'b', 'c']]</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -->[1, 2, 3, ['a', 'b']]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#关于同数据，字符串+=</span>a<span class="token operator">=</span><span class="token string">"abc"</span>b<span class="token operator">=</span>a<span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->1652389179952 1652389179952</span>c<span class="token operator">=</span><span class="token string">"abc"</span>d<span class="token operator">=</span><span class="token string">""</span>d<span class="token operator">+=</span>c<span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>id<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->1652389179952 1652389179952</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#-->abc</span>d<span class="token operator">+=</span>c<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>id<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span>id<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->abcabc 1652431257904 1652389179952</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>collections模块</title>
      <link href="posts/4890.html"/>
      <url>posts/4890.html</url>
      
        <content type="html"><![CDATA[<h1 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h1><ol><li>一个 <code>Counter</code> 是一个 <code>dict</code> 的子类，用于计数可哈希对象。</li><li>元素从一个 <code>iterable</code> 被计数或从其他的 <code>mapping (or counter)</code>初始化.</li><li>设置一个计数为0不会从计数器中移去一个元素。使用 <code>del</code> 来删除它</li></ol><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化:"></a><em>初始化:</em></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> <span class="token operator">*</span>c <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment" spellcheck="true"># a new, empty counter</span>c <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token string">'gallahad'</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># a new counter from an iterable</span>c <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'red'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># a new counter from a mapping</span>c <span class="token operator">=</span> Counter<span class="token punctuation">(</span>cats<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> dogs<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># a new counter from keyword args</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="elements"><a href="#elements" class="headerlink" title="elements()"></a><em>elements()</em></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#elements()返回一个迭代器</span>c <span class="token operator">=</span> Counter<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>sorted<span class="token punctuation">(</span>c<span class="token punctuation">.</span>elements<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#-->['a', 'a', 'a', 'a', 'b', 'b']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="most-common"><a href="#most-common" class="headerlink" title="most_common()"></a><em>most_common()</em></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#相等个数的元素顺序随机</span>Counter<span class="token punctuation">(</span><span class="token string">'abracadabra'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#-->[('a', 5), ('r', 2), ('b', 2)]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="subtract"><a href="#subtract" class="headerlink" title="subtract()"></a><em>subtract()</em></h2><pre class="line-numbers language-python"><code class="language-python">c <span class="token operator">=</span> Counter<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>d <span class="token operator">=</span> Counter<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>subtract<span class="token punctuation">(</span>d<span class="token punctuation">)</span>c            <span class="token comment" spellcheck="true">#-->Counter({'a': 3, 'b': 0, 'c': -3, 'd': -6})</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一些用法："><a href="#一些用法：" class="headerlink" title="一些用法："></a><em>一些用法：</em></h2><pre class="line-numbers language-python"><code class="language-python">sum<span class="token punctuation">(</span>c<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># total of all counts</span>c<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># reset all counts</span>list<span class="token punctuation">(</span>c<span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true"># list unique elements</span>set<span class="token punctuation">(</span>c<span class="token punctuation">)</span>                          <span class="token comment" spellcheck="true"># convert to a set</span>dict<span class="token punctuation">(</span>c<span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true"># convert to a regular dictionary</span>c<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># convert to a list of (elem, cnt) pairs</span>Counter<span class="token punctuation">(</span>dict<span class="token punctuation">(</span>list_of_pairs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># convert from a list of (elem, cnt) pairs</span>c<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span>n<span class="token number">-1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true"># n least common elements</span><span class="token operator">+</span>c                              <span class="token comment" spellcheck="true"># remove zero and negative counts</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> rewords <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\w+'</span><span class="token punctuation">,</span> open<span class="token punctuation">(</span><span class="token string">'hamlet.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Counter<span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''-->[('the', 1143), ('and', 966), ('to', 762), ('of', 669), ('i', 631),  ('you', 554),  ('a', 546), ('my', 514), ('hamlet', 471), ('in', 451)]'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h1><p>类似<code>list</code>的容器，实现了在两端快速<code>append</code>和<code>pop</code></p><ul><li><code>append(x)</code></li><li><code>appendleft(x)</code></li><li><code>clear()</code></li><li><code>copy()</code>  浅拷贝</li><li><code>count(x)</code></li><li><code>extend()</code></li><li><code>insert(i,x)</code></li><li><code>pop()</code></li><li><code>reverse()</code></li></ul><h1 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple()"></a>namedtuple()</h1><p>创建命名元组子类的工厂函数</p><h1 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h1><p>字典的子类，提供了一个工厂函数，为字典查询提供一个默认值。<br>常见用法：</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>d <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> s<span class="token punctuation">:</span>    d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>sorted<span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->[('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>re模块</title>
      <link href="posts/10df.html"/>
      <url>posts/10df.html</url>
      
        <content type="html"><![CDATA[<h2 id="python函数"><a href="#python函数" class="headerlink" title="python函数"></a><em>python函数</em></h2><p><code>re.match(pattern,str)</code><br>从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p><p><code>re.search()</code><br>扫描整个字符串并返回第一个成功的匹配。</p><p><code>re.compile()</code><br>用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。</p><p><code>re.findall()</code><br>在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">"el"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#--> &lt;re.Match object; span=(0, 1), match='h'></span><span class="token comment" spellcheck="true">#--> None</span><span class="token comment" spellcheck="true">#--> (0,1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正则符号"><a href="#正则符号" class="headerlink" title="正则符号"></a><em>正则符号</em></h2><hr><p><code>[ ]</code><br>匹配需要的字符<strong>集合</strong>，如<code>[1-3]</code>或<code>[123]</code>都是匹配1、2或者3。</p><hr><p><code>( )</code><br>捕获需要的字符。</p><hr><p><code>(?: )</code><br>非捕获分组。</p><hr><p><code>^</code>：脱字符号。<br><strong>方括号中加入</strong>脱字符号，就是匹配未列出的所有其他字符，如<code>[^a]</code>匹配除a以外的所有其他字符。</p><hr><p><code>\</code><br>和python字符串使用规则一样，可以匹配特殊字符本身。<br>如<code>\d</code>表示匹配0到9的任意一个数字字符，而<code>\\d</code>则表示匹配<code>\d</code>本身。</p><hr><p><code>|</code><br>相当于或</p><hr><p>多次匹配</p><ul><li><code>*</code> : 匹配前一个字符0到n次，如pytho*n可以匹配pythn、pytoon、pythooooon等。</li><li><code>?</code> : 匹配前一个字符0或1次。</li><li><code>+</code> : 匹配前一个字符1到n次。等价于<code>{1,}</code></li><li><code>{n,m}</code> : 匹配前一个字符n次到m次。</li><li><code>{n}</code>: 匹配前一个字符n次。</li></ul><hr><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td><code>^</code></td><td>匹配字符串的开头</td></tr><tr><td><code>$</code></td><td>匹配字符串的末尾。</td></tr><tr><td><code>.</code></td><td>匹配任意字符，除了换行符</td></tr><tr><td><code>\s</code></td><td>匹配任意空白字符，等价于 [\t\n\r\f]。</td></tr><tr><td><code>\S</code></td><td>匹配任意非空字符</td></tr><tr><td><code>\d</code></td><td>匹配任意数字，等价于 [0-9]。</td></tr><tr><td><code>\D</code></td><td>匹配任意非数字</td></tr><tr><td><code>\w</code></td><td>匹配数字字母下划线</td></tr><tr><td><code>\W</code></td><td>匹配非数字字母下划线</td></tr><tr><td><code>\A</code></td><td>匹配字符串开始</td></tr><tr><td><code>\z</code></td><td>匹配字符串结束</td></tr><tr><td><code>\b</code></td><td>匹配一个单词边界。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr></tbody></table><p>正则匹配修饰符<code>re.S</code>使 <code>.</code> 匹配包括换行在内的所有字符</p><h2 id="python实践"><a href="#python实践" class="headerlink" title="python实践"></a><em>python实践</em></h2><pre class="line-numbers language-python"><code class="language-python">re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"d(ds)*"</span><span class="token punctuation">,</span><span class="token string">"askldjasaddsa"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#-->['', 'ds']</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"d[ds]*"</span><span class="token punctuation">,</span><span class="token string">"askldjasaddsa"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#-->['d', 'dds']</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"d{ds}*"</span><span class="token punctuation">,</span><span class="token string">"askldjasaddsa"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#-->[]</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"d{ds}"</span><span class="token punctuation">,</span><span class="token string">"askldjasad{ds}a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#-->['d{ds}']</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"ds?"</span><span class="token punctuation">,</span><span class="token string">"askldjasad{dsssssss}a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#-->['d', 'd', 'ds']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非贪婪模式与贪婪模式：</p><pre class="line-numbers language-python"><code class="language-python">re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"/(\S*?)/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"//asd/sdsa/asda"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#-->['', 'sdsa']</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"/(\S*)/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"//asd/sdsa/asda"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->['/asd/sdsa']</span><span class="token comment" spellcheck="true">#'*', '+'，和 '?' 修饰符都是贪婪的；它们在字符串进行尽可能多的匹配。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正则实践"><a href="#正则实践" class="headerlink" title="正则实践"></a><em>正则实践</em></h2><hr><p><code>(\w)(\w)\2\1</code> 可以匹配ABBA型数据（回溯引用）</p><hr><p><code>http.*/$</code> 匹配以http开头,以/结尾的数据</p><hr><p><code>^\d{n}$</code>  匹配n位的数字</p><hr><p><code>^(?!(xx+)\1+$)x*</code> 匹配质数个x,不懂</p><hr><p>从<code>2002-1-2</code> <code>2020-01-02</code> <code>2020.01.02</code> <code>2020 01 02</code> <code>20200102</code> <code>2020/01/02</code>提取年月日的数据<br><code>(\d{4})[\-/\s]?(\d{1,2})[\-/\s]?{\d{1,2}}</code></p><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><em>小结</em></h2><p>ennn，入门应该够了，漏掉了<code>先行断言</code>,<code>(?.....)</code>等等<br>正则表达式太强了，还能密码强度认证</p><blockquote><ul><li>正则表达式在线测试：<br><a href="http://c.runoob.com/front-end/854" target="_blank" rel="noopener">http://c.runoob.com/front-end/854</a></li><li>python官方re文档：<br><a href="https://docs.python.org/zh-cn/3/library/re.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/re.html</a></li><li><strong>推荐的正则课程</strong>：<br><a href="https://codejiaonang.com/#/courses" target="_blank" rel="noopener">https://codejiaonang.com/#/courses</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sys模块</title>
      <link href="posts/5098.html"/>
      <url>posts/5098.html</url>
      
        <content type="html"><![CDATA[<p>该模块提供了一些变量和函数。这些变量可能被解释器使用，也可能由解释器提供。这些函数会影响解释器。本模块总是可用的。</p><h2 id="sys-path"><a href="#sys-path" class="headerlink" title="sys.path"></a><em>sys.path</em></h2><p>一个由字符串组成的列表，用于指定模块的搜索路径。<br>程序启动时将初始化该列表，列表的第一项 path[0] 目录含有调用 Python 解释器的脚本。如果脚本目录不可用（比如以交互方式调用了解释器，或脚本是从标准输入中读取的），则 path[0] 为空字符串，这将导致 Python 优先搜索当前目录中的模块</p><h2 id="sys-argv"><a href="#sys-argv" class="headerlink" title="sys.argv"></a><em>sys.argv</em></h2><p>一个列表，其中包含了被传递给 Python 脚本的命令行参数。 argv[0] 为脚本的名称（是否是完整的路径名取决于操作系统）。如果是通过 Python 解释器的命令行参数 -c 来执行的， argv[0] 会被设置成字符串 ‘-c’ 。如果没有脚本名被传递给 Python 解释器， argv[0] 为空字符串。</p><h2 id="sys-setrecursionlimit-limit"><a href="#sys-setrecursionlimit-limit" class="headerlink" title="sys.setrecursionlimit(limit)"></a><em>sys.setrecursionlimit(limit)</em></h2><p>Set the maximum depth of the Python interpreter stack to limit. This limit prevents infinite recursion from causing an overflow of the C stack and crashing Python.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020七月下</title>
      <link href="posts/412e.html"/>
      <url>posts/412e.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><hr><p>终于有些解脱了，等着科目二考试。。。<br>在这段时间里，我得去做些有意义的事，<br>所以写下这篇文章，每天更新一次，用来记录七月下这段时间以及自己的一些感受。</p><h1 id="1-开始吧"><a href="#1-开始吧" class="headerlink" title="1.开始吧"></a>1.开始吧</h1><hr><p><strong>DO</strong></p><ol><li>试试别踩白块物理外挂</li><li>试试OPENCV做OW脚本</li></ol><p><strong>DONE</strong></p><ol><li>···</li><li>···</li></ol><h2 id="7-14晚"><a href="#7-14晚" class="headerlink" title="7.14晚"></a><code>7.14晚</code></h2><p>观看<a href="https://space.bilibili.com/20259914?from=search&seid=5994959373714429448" target="_blank" rel="noopener">B站稚晖君的视频</a><br>看<a href="http://www.woshicver.com/FirstSection/0_OpenCV-Python%20Tutorials/" target="_blank" rel="noopener">opencv教程</a><br>更改本站样式</p><blockquote><p>电位器：是具有三个引出端、阻值可按某种变化规律调节的电阻元件</p><ol><li>用作分压器</li><li>用作变阻器</li><li>用作电流控制器</li></ol></blockquote><h2 id="7-15早"><a href="#7-15早" class="headerlink" title="7.15早"></a><code>7.15早</code></h2><p>上课<a href="https://www.icourse163.org/course/XJTU-1001647001" target="_blank" rel="noopener">微机原理与接口技术</a><br>学用<a href="https://www.xmind.cn/" target="_blank" rel="noopener">Xmind</a></p><blockquote><p>硬件系统</p><ul><li>外部设备：通过输入输出接口与计算机进行信息交互的电子设备</li><li>主机系统：CPU、存储器、输入输出接口、总线</li></ul></blockquote><blockquote><p>读取一条指令的流程：</p><ol><li>将指令所在地址<strong>赋给程序计数器PC</strong></li><li>PC内容送给地址寄存器AR，PC自动+1</li><li>AR内容通过地址总线送给内存储器，经<strong>地址译码器译码</strong>，选中相应单元</li><li>CPU的控制器发出读命令</li><li>把所选中单元的内容(即指令操作码)经数据总线送到数据寄存器DR</li><li>(<strong>指令译码</strong>)DR内容送到指令寄存器IR，再送到指令译码器ID</li></ol></blockquote><blockquote><p>（第三代微处理器）<br>&emsp;&emsp;&emsp;<strong>8088与8086</strong>：对外通道分别为8位、16位，内部都为16位</p></blockquote><blockquote><p><strong>8088/8086CPU特点</strong></p><ul><li>采用并行流水线【通过设置指令预取队列实现】</li><li>对内存空间实行分段管理【实模式存储器寻址】</li><li>支持协处理器</li></ul></blockquote><h2 id="7-17早"><a href="#7-17早" class="headerlink" title="7.17早"></a><code>7.17早</code></h2><p>上课<a href="https://www.icourse163.org/course/XJTU-1001647001" target="_blank" rel="noopener">微机原理与接口技术</a></p><blockquote><p>实模型下的存储器寻址</p><ul><li>内存物理地址=<strong>段基地址</strong>x16+<strong>偏移地址</strong></li><li>段首的偏移地址：0000H</li></ul></blockquote><blockquote><p><strong>段寄存器</strong> （Segment Register）（8088为4个）</p><ul><li>作用：用于存放相应逻辑段(便于分时复用吧)的段基地址</li><li>分类：代码段CS，数据段DS，附加段ES，堆栈段SS</li><li>每类逻辑段的数量最多为64k</li></ul></blockquote><blockquote><p>小结</p><ul><li>对1MB内存空间的访问需要20位物理地址，而8088内部的16位编码通过内存地址变换变成20位</li><li>内存的分段是逻辑分段，不是物理段。每个内存单元的物理地址唯一，逻辑地址不唯一</li><li>EU 是 8086/8088 微处理器的执行部件(Execution Unit)</li><li>BIU 是 8086/8088 微处理器的总线接口部件(Bus Interface Unit)</li></ul></blockquote><p><img src="http://www.elecfans.com/uploads/allimg/110712/182555-110G2160I5496.jpg"></p><blockquote><p><strong>【指令系统】</strong></p><ul><li>指令格式： <strong>操作码</strong> &emsp;<strong>[操作数]</strong> ，**[操作数]**</li><li>三种操作数：立即数，寄存器操作数，存储器操作数(带[ ])</li></ul></blockquote><blockquote><p>操作数的寻址方式</p><ul><li>立即寻址</li><li>寄存器直接寻址</li><li>寄存器间接寻址，通过间址寄存器【BX，BP，SI，DI】(带[ ])</li><li>寄存器相对寻址</li></ul></blockquote><blockquote><p>一般指令对操作数的要求：</p><ul><li>两操作数字长必须相同</li><li>两操作数不允许同时为存储器操作数（在内存中）</li><li>两操作数不允许同时为段寄存器</li><li>源操作数是立即数时，目标操作数不能是段寄存器</li><li>IP和CS不作为目标操作数，FLAGS一般不作为操作数</li></ul></blockquote><p>一个汇编题目：将（*）的ASCII码2AH送入内存数据段1000H开始的100个单元中<br>代码如下：</p><pre><code>       MOV DI, 1000H    ；间址寄存器DI,赋给首地址       MOV CX, 64H      ；通用寄存器CX,计算count       MOV AL, 2AH      ; 通用寄存器AL,存入符号AGAIN: MOV [DI], AL       INC DI           ；DI+1       DEC CX           ；CX-1       JNZ AGAIN        ; CX！=0继续       HLT</code></pre><p><img src="http://www.elecfans.com/uploads/allimg/110712/182555-110G2160P12B.jpg"></p><h2 id="7-19早"><a href="#7-19早" class="headerlink" title="7.19早"></a><code>7.19早</code></h2><p>上课<a href="https://www.icourse163.org/course/XJTU-1001647001" target="_blank" rel="noopener">微机原理与接口技术</a><br>做题<a href="https://leetcode-cn.com/contest/weekly-contest-198" target="_blank" rel="noopener">leetcode周赛198</a></p><blockquote><p>通用指令系统</p><ul><li><code>MOV dest, src</code></li><li><code>XCHG REG, MEM/REG</code></li><li><code>LEA REG, MEM</code></li><li><code>IN acc, PORT</code></li><li><code>OUT PORT, acc</code></li></ul></blockquote><blockquote><p>漏了指令系统这部分没学，漏了运算操作、串操作，程序控制类【CS,IP会改变执行方向】，感觉这门课远离了我想要的实践。<br>课程最后还是有些东西，芯片组合，汇编实现程序，一些芯片的引脚······<br>三态门，模电，数电，8253，D/A，A/D都是问题。。。</p></blockquote><h2 id="7-19晚"><a href="#7-19晚" class="headerlink" title="7.19晚"></a><code>7.19晚</code></h2><p>读书《人类群星闪耀时》</p><blockquote><p>豆瓣评论区都是大佬</p></blockquote><h2 id="7-20早"><a href="#7-20早" class="headerlink" title="7.20早"></a><code>7.20早</code></h2><p>再刷<a href="https://www.bilibili.com/video/BV19W411q7Fq?from=search&seid=12394289545937645210" target="_blank" rel="noopener">Elon Musk演讲</a><br>People are mistaken when they think that technology just automatically improves. It does not automatically improve. It only improves if a lot of people work very hard to make it better, and actually I think it will degrade by itself. You look at great civilizations like Ancient Egypt, and they were able to make the pyramids, and they forgot how to do that.And the Romans, they built these incredible aqueducts. They forgot how to do it.</p><h2 id="7-21早"><a href="#7-21早" class="headerlink" title="7.21早"></a><code>7.21早</code></h2><p>学学c，pta<br>发现一个<a href="https://github.com/ix64/unlock-music" target="_blank" rel="noopener">音乐格式转换项目</a>，它的<a href="https://moresound.tk/music/tool/" target="_blank" rel="noopener">在线网页</a><br>写<a href="https://x-varywow.github.io/posts/d6d.html" target="_blank" rel="noopener">硬件设计</a>这篇blog</p><blockquote><p>c中，大小写没看清，编辑器还不给提示，是真的……<br>emmm,漏掉&amp;也是坑。。</p></blockquote><h2 id="7-22早"><a href="#7-22早" class="headerlink" title="7.22早"></a><code>7.22早</code></h2><p>学硬件设计<br>写<a href="https://x-varywow.github.io/posts/d6d.html" target="_blank" rel="noopener">硬件设计</a>这篇blog</p><h2 id="7-30晚"><a href="#7-30晚" class="headerlink" title="7.30晚"></a><code>7.30晚</code></h2><p>&emsp;一生是漫长又瑰奇的瞬息；<br>&emsp;&emsp;&emsp;&emsp;何谓枯荣又何谓云泥；<br>&emsp;像孤舟巡游，不为逝水追惜；<br>&emsp;&emsp;&emsp;&emsp;在初逢灯火，在别时钟磬；<br>&emsp;自在随心~<br>&emsp;&emsp;&emsp;&emsp; &emsp;&emsp;&emsp;     &emsp;&emsp;             ——–摘自歌曲《琉璃》</p><blockquote><p>ennnn,完结啦💖</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200730223606549.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/2020073021573846.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center"></p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020秋季个人赛</title>
      <link href="posts/8a9a.html"/>
      <url>posts/8a9a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/contest/season/2020-fall/problems/nGK0Fy/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/season/2020-fall/problems/nGK0Fy/</a><br>第二题：<a href="https://leetcode-cn.com/contest/season/2020-fall/problems/2vYnGI/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/season/2020-fall/problems/2vYnGI/</a><br>第三题：<a href="https://leetcode-cn.com/contest/season/2020-fall/problems/UlBDOe/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/season/2020-fall/problems/UlBDOe/</a><br>第四题：<a href="https://leetcode-cn.com/contest/season/2020-fall/problems/meChtZ/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/season/2020-fall/problems/meChtZ/</a><br>第五题：<a href="https://leetcode-cn.com/contest/season/2020-fall/problems/Za25hA/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/season/2020-fall/problems/Za25hA/</a></p></blockquote><h2 id="一、速算机器人"><a href="#一、速算机器人" class="headerlink" title="一、速算机器人"></a>一、速算机器人</h2><p>小扣在秋日市集发现了一款速算机器人。店家对机器人说出两个数字（记作 <code>x</code> 和 <code>y</code>），请小扣说出计算指令：</p><p><code>&quot;A&quot;</code> 运算：使 <code>x = 2 * x + y</code>；<br><code>&quot;B&quot;</code> 运算：使 <code>y = 2 * y + x</code>。<br>在本次游戏中，店家说出的数字为 <code>x = 1</code> 和 <code>y = 0</code>，小扣说出的计算指令记作仅由大写字母 <code>A</code>、<code>B</code> 组成的字符串 <code>s</code>，字符串中字符的顺序表示计算顺序，请返回最终 <code>x</code> 与 <code>y</code> 的和为多少。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">calculate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        x<span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token string">'A'</span><span class="token punctuation">:</span> x<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token operator">+</span>y            <span class="token keyword">else</span><span class="token punctuation">:</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>y<span class="token operator">+</span>x        <span class="token keyword">return</span> x<span class="token operator">+</span>y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、早餐组合"><a href="#二、早餐组合" class="headerlink" title="二、早餐组合"></a>二、早餐组合</h2><p>小扣在秋日市集选择了一家早餐摊位，一维整型数组 <code>staple</code> 中记录了每种主食的价格，一维整型数组 <code>drinks</code> 中记录了每种饮料的价格。小扣的计划选择一份主食和一款饮料，且花费不超过 <code>x</code> 元。请返回小扣共有多少种购买方案。</p><p>注意：答案需要以 <code>1e9 + 7 (1000000007)</code> 为底取模，如：计算初始结果为：<code>1000000008</code>，请返回 <code>1</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">breakfastNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> staple<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> drinks<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        mod<span class="token operator">=</span><span class="token number">1000000007</span>        staple<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        drinks<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> staple<span class="token punctuation">:</span>            a<span class="token operator">=</span>bisect<span class="token punctuation">.</span>bisect_right<span class="token punctuation">(</span>drinks<span class="token punctuation">,</span>x<span class="token operator">-</span>s<span class="token punctuation">)</span>            <span class="token keyword">if</span> a<span class="token punctuation">:</span>                ans<span class="token operator">+=</span>bisect<span class="token punctuation">.</span>bisect_right<span class="token punctuation">(</span>drinks<span class="token punctuation">,</span>x<span class="token operator">-</span>s<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                 <span class="token keyword">break</span>        <span class="token keyword">return</span> ans<span class="token operator">%</span>mod<span class="token comment" spellcheck="true">### bisect的二分，防止超时。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、秋叶收藏集"><a href="#三、秋叶收藏集" class="headerlink" title="三、秋叶收藏集"></a>三、秋叶收藏集</h2><p>小扣出去秋游，途中收集了一些红叶和黄叶，他利用这些叶子初步整理了一份秋叶收藏集 <code>leaves</code>， 字符串 <code>leaves</code> 仅包含小写字符 <code>r</code> 和 <code>y</code>， 其中字符 <code>r</code> 表示一片红叶，字符 y 表示一片黄叶。</p><p>出于美观整齐的考虑，小扣想要将收藏集中树叶的排列调整成「红、黄、红」三部分。每部分树叶数量可以不相等，但均需大于等于 1。每次调整操作，小扣可以将一片红叶替换成黄叶或者将一片黄叶替换成红叶。请问小扣最少需要多少次调整操作才能将秋叶收藏集调整完毕。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 思路：</span><span class="token comment" spellcheck="true"># 1. 动态规划</span><span class="token comment" spellcheck="true"># 2. dp[i][0]表示全部为红需要修改几次</span><span class="token comment" spellcheck="true">#    dp[i][1]表示【红黄】需要修改几次</span><span class="token comment" spellcheck="true">#    dp[i][2]表示【红黄红】需要修改几次</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minimumOperations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> leaves<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>leaves<span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span> <span class="token keyword">else</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'y'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'y'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 3种模式下的状态转移方程，可以的</span><span class="token comment" spellcheck="true"># DP厉害啊，从无到有</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、快速公交"><a href="#四、快速公交" class="headerlink" title="四、快速公交"></a>四、快速公交</h2><p>小扣打算去秋日市集，由于游客较多，小扣的移动速度受到了人流影响：</p><p>小扣从 x 号站点移动至 x + 1 号站点需要花费的时间为 <code>inc</code>；<br>小扣从 x 号站点移动至 x - 1 号站点需要花费的时间为 <code>dec</code>。</p><p>现有 <code>m</code> 辆公交车，编号为 <code>0</code> 到 <code>m-1</code>。小扣也可以通过搭乘编号为 <code>i</code> 的公交车，从 <code>x</code> 号站点移动至 <code>jump[i]*x</code> 号站点，耗时仅为 <code>cost[i]</code>。小扣可以搭乘任意编号的公交车且搭乘公交次数不限。</p><p>假定小扣起始站点记作 <code>0</code>，秋日市集站点记作 <code>target</code>，请返回小扣抵达秋日市集最少需要花费多少时间。由于数字较大，最终答案需要对 <code>1000000007 (1e9 + 7)</code> 取模。</p><p>注意：小扣可在移动过程中到达编号大于 <code>target</code> 的站点。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> lru_cache<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">busRapidTransit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">,</span> inc<span class="token punctuation">:</span> int<span class="token punctuation">,</span> dec<span class="token punctuation">:</span> int<span class="token punctuation">,</span> jump<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> cost<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        @lru_cache<span class="token punctuation">(</span>None<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">min_cost</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            cur_cost <span class="token operator">=</span> inc <span class="token operator">*</span> target  <span class="token comment" spellcheck="true"># 1.直接走回站点</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>jump<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> target <span class="token operator">%</span> jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    cur_cost <span class="token operator">=</span> min<span class="token punctuation">(</span>cur_cost<span class="token punctuation">,</span> min_cost<span class="token punctuation">(</span>target <span class="token operator">//</span> jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span>                  <span class="token comment" spellcheck="true"># 2.刚好有公交</span>                cur_cost <span class="token operator">=</span> min<span class="token punctuation">(</span>cur_cost<span class="token punctuation">,</span> min_cost<span class="token punctuation">(</span>target <span class="token operator">//</span> jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>target <span class="token operator">%</span> jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> inc<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 3.往前走再公交</span>                <span class="token keyword">if</span> target <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>                    cur_cost <span class="token operator">=</span> min<span class="token punctuation">(</span>cur_cost<span class="token punctuation">,</span> min_cost<span class="token punctuation">(</span>target <span class="token operator">//</span> jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> target <span class="token operator">%</span> jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> dec<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 4. 往后走再公交</span>            <span class="token keyword">return</span> cur_cost        mod <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span>        <span class="token keyword">return</span> min_cost<span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token comment" spellcheck="true"># from copy</span><span class="token comment" spellcheck="true"># 核心思想：记忆化递归</span><span class="token comment" spellcheck="true"># 从终点回到起点，4种方式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、追逐游戏"><a href="#五、追逐游戏" class="headerlink" title="五、追逐游戏"></a>五、追逐游戏</h2><p>秋游中的小力和小扣设计了一个追逐游戏。他们选了秋日市集景区中的 <code>N</code> 个景点，景点编号为 <code>1~N</code>。此外，他们还选择了 <code>N</code> 条小路，满足任意两个景点之间都可以通过小路互相到达，且不存在两条连接景点相同的小路。整个游戏场景可视作一个无向连通图，记作二维数组 <code>edges</code>，数组中以 <code>[a,b]</code> 形式表示景点 a 与景点 b 之间有一条小路连通。</p><p>小力和小扣只能沿景点间的小路移动。小力的目标是在最快时间内追到小扣，小扣的目标是尽可能延后被小力追到的时间。游戏开始前，两人分别站在两个不同的景点 <code>startA</code> 和 <code>startB</code>。每一回合，小力先行动，小扣观察到小力的行动后再行动。小力和小扣在每回合可选择以下行动之一：</p><ul><li>移动至相邻景点</li><li>留在原地</li></ul><p>如果小力追到小扣（即两人于某一时刻出现在同一位置），则游戏结束。若小力可以追到小扣，请返回最少需要多少回合；若小力无法追到小扣，请返回 -1。</p><p>注意：小力和小扣一定会采取最优移动策略。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">chaseGame</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> edges<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> startA<span class="token punctuation">:</span> int<span class="token punctuation">,</span> startB<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">get_cycle</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> start<span class="token operator">=</span>startA<span class="token punctuation">)</span><span class="token punctuation">:</span>            cycle <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>            father <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            depth <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            father<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> start            depth<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            queue <span class="token operator">=</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span>            i <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">:</span>                u <span class="token operator">=</span> queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">for</span> v <span class="token keyword">in</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> depth<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                        depth<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> depth<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>                        father<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u                        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> father<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> v<span class="token punctuation">:</span>                            <span class="token keyword">continue</span>                        <span class="token keyword">while</span> depth<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">></span> depth<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">:</span>                            cycle<span class="token punctuation">.</span>add<span class="token punctuation">(</span>u<span class="token punctuation">)</span>                            u <span class="token operator">=</span> father<span class="token punctuation">[</span>u<span class="token punctuation">]</span>                        <span class="token keyword">while</span> depth<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> depth<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>                            cycle<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v<span class="token punctuation">)</span>                            v <span class="token operator">=</span> father<span class="token punctuation">[</span>v<span class="token punctuation">]</span>                        <span class="token keyword">while</span> u <span class="token operator">!=</span> v<span class="token punctuation">:</span>                            cycle<span class="token punctuation">.</span>add<span class="token punctuation">(</span>u<span class="token punctuation">)</span>                            cycle<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v<span class="token punctuation">)</span>                            u <span class="token operator">=</span> father<span class="token punctuation">[</span>u<span class="token punctuation">]</span>                            v <span class="token operator">=</span> father<span class="token punctuation">[</span>v<span class="token punctuation">]</span>                        cycle<span class="token punctuation">.</span>add<span class="token punctuation">(</span>u<span class="token punctuation">)</span>                        <span class="token keyword">return</span> cycle                i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> cycle<span class="token punctuation">,</span> start<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            circle_pos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>            min_arrival <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>            arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            queue <span class="token operator">=</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span>            i <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">:</span>                u <span class="token operator">=</span> queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">if</span> u <span class="token keyword">in</span> cycle <span class="token operator">and</span> arr<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min_arrival<span class="token punctuation">:</span>                    circle_pos <span class="token operator">=</span> u                    min_arrival <span class="token operator">=</span> arr<span class="token punctuation">[</span>u<span class="token punctuation">]</span>                <span class="token keyword">for</span> v <span class="token keyword">in</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> arr<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                        arr<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>                        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">return</span> arr<span class="token punctuation">,</span> circle_pos        n <span class="token operator">=</span> len<span class="token punctuation">(</span>edges<span class="token punctuation">)</span>        graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> u<span class="token punctuation">,</span> v <span class="token keyword">in</span> edges<span class="token punctuation">:</span>            graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>            graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>u<span class="token punctuation">)</span>        cycle <span class="token operator">=</span> get_cycle<span class="token punctuation">(</span>graph<span class="token punctuation">)</span>        arrA<span class="token punctuation">,</span> posA <span class="token operator">=</span> bfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> cycle<span class="token punctuation">,</span> startA<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        arrB<span class="token punctuation">,</span> posB <span class="token operator">=</span> bfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> cycle<span class="token punctuation">,</span> startB<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(cycle)</span>        <span class="token comment" spellcheck="true"># print(arrA, posA, arrA[posA])</span>        <span class="token comment" spellcheck="true"># print(arrB, posB, arrB[posB])</span>        <span class="token keyword">if</span> arrA<span class="token punctuation">[</span>startB<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> arrA<span class="token punctuation">[</span>startB<span class="token punctuation">]</span>        <span class="token keyword">if</span> arrA<span class="token punctuation">[</span>posB<span class="token punctuation">]</span> <span class="token operator">></span> arrB<span class="token punctuation">[</span>posB<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">and</span> len<span class="token punctuation">(</span>cycle<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        ans <span class="token operator">=</span> arrA<span class="token punctuation">[</span>startB<span class="token punctuation">]</span>        queue <span class="token operator">=</span> <span class="token punctuation">[</span>startB<span class="token punctuation">]</span>        i <span class="token operator">=</span> <span class="token number">0</span>        arrived <span class="token operator">=</span> set<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">:</span>            u <span class="token operator">=</span> queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">for</span> v <span class="token keyword">in</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> v <span class="token operator">not</span> <span class="token keyword">in</span> arrived <span class="token operator">and</span> arrA<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> arrB<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>                    arrived<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v<span class="token punctuation">)</span>                    queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>                    ans <span class="token operator">=</span> max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> arrA<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    ans <span class="token operator">=</span> max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> arrA<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># from copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>二题选手，要好好努力了</p><p>多跟大佬学习，多刷知识</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记185</title>
      <link href="posts/contest185.html"/>
      <url>posts/contest185.html</url>
      
        <content type="html"><![CDATA[<h2 id="（1）重新格式化字符串"><a href="#（1）重新格式化字符串" class="headerlink" title="（1）重新格式化字符串"></a>（1）重新格式化字符串</h2><p>给你一个混合了数字和字母的字符串 <code>s</code>，其中的字母均为小写英文字母。<br>请你将该字符串重新格式化，使得任意两个相邻字符的类型都不同。也就是说，字母后面应该跟着数字，而数字后面应该跟着字母。<br>请你返回 重新格式化后 的字符串；如果无法按要求重新格式化，则返回一个 空字符串 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reformat</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> s<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">""</span>        ln<span class="token punctuation">,</span>ls<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>ln<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>ans<span class="token operator">=</span>len<span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">""</span>        <span class="token keyword">if</span> a<span class="token operator">==</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> ls<span class="token punctuation">:</span>                ans<span class="token operator">+=</span><span class="token punctuation">(</span>ln<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>ls<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> ans<span class="token operator">+</span>ln<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> b<span class="token operator">==</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> ln<span class="token punctuation">:</span>                ans<span class="token operator">+=</span><span class="token punctuation">(</span>ls<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>ln<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> ans<span class="token operator">+</span>ls<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> b<span class="token operator">==</span>a<span class="token punctuation">:</span>            <span class="token keyword">while</span> ln<span class="token punctuation">:</span>                ans<span class="token operator">+=</span><span class="token punctuation">(</span>ls<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>ln<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> ans        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="（2）点菜展示表"><a href="#（2）点菜展示表" class="headerlink" title="（2）点菜展示表"></a>（2）点菜展示表</h2><p>给你一个数组 <code>orders</code>，表示客户在餐厅中完成的订单，确切地说， <code>orders[i]=[customerNamei,tableNumberi,foodItemi]</code> ，其中 <code>customerNamei</code> 是客户的姓名，<code>tableNumberi</code> 是客户所在餐桌的桌号，而 <code>foodItemi</code> 是客户点的餐品名称。<br>请你返回该餐厅的 <strong>点菜展示表</strong> 。在这张表中，表中第一行为标题，其第一列为餐桌桌号 “Table” ，后面每一列都是按字母顺序排列的餐品名称。接下来每一行中的项则表示每张餐桌订购的相应餐品数量，第一列应当填对应的桌号，后面依次填写下单的餐品数量。<br>注意：客户姓名不是点菜展示表的一部分。此外，表中的数据行应该按餐桌桌号升序排列。<br><img src="https://img-blog.csdnimg.cn/20200525095748249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">displayTable</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> orders<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        fs<span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span>        ts<span class="token operator">=</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> _ <span class="token punctuation">,</span>t<span class="token punctuation">,</span>f <span class="token keyword">in</span> orders<span class="token punctuation">:</span>            fs<span class="token punctuation">.</span>add<span class="token punctuation">(</span>f<span class="token punctuation">)</span>            ts<span class="token punctuation">[</span>int<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"Table"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> f <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>list<span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#菜名</span>            ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">)</span>        <span class="token keyword">for</span> t <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>list<span class="token punctuation">(</span>ts<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#桌号</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>str<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>               <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#份数</span>                ans<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>ts<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结</strong></p><blockquote><p>好难。。。</p></blockquote><h2 id="（3）数青蛙"><a href="#（3）数青蛙" class="headerlink" title="（3）数青蛙"></a>（3）数青蛙</h2><p>给你一个字符串 <code>croakOfFrogs</code>，它表示不同青蛙发出的蛙鸣声（字符串 “croak” ）的组合。由于同一时间可以有多只青蛙呱呱作响，所以 <code>croakOfFrogs</code> 中会混合多个 <code>“croak”</code> 。请你返回模拟字符串中所有蛙鸣所需不同青蛙的<strong>最少数目</strong>。<br>注意：要想发出蛙鸣 “croak”，青蛙必须 依序 输出 ‘c’, ’r’, ’o’, ’a’, ’k’ 这 5 个字母。如果没有输出全部五个字母，那么它就不会发出声音。<br>如果字符串 <code>croakOfFrogs</code> 不是由若干有效的 <code>&quot;croak&quot;</code> 字符混合而成，请返回 <code>-1</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minNumberOfFrogs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cr<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        pre <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> cr<span class="token punctuation">:</span>            <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">'c'</span><span class="token punctuation">:</span>                pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">'r'</span><span class="token punctuation">:</span>                pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">'o'</span><span class="token punctuation">:</span>                pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                pre<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">'a'</span><span class="token punctuation">:</span>                pre<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                pre<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">'k'</span><span class="token punctuation">:</span>                pre<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">if</span> any<span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> pre<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>            res <span class="token operator">=</span> max<span class="token punctuation">(</span>res<span class="token punctuation">,</span> sum<span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> any<span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> pre<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="（4）生成数组"><a href="#（4）生成数组" class="headerlink" title="（4）生成数组"></a>（4）生成数组</h2><p>给你三个整数 <code>n</code>、<code>m</code> 和 <code>k</code> 。下图描述的算法用于找出正整数数组中最大的元素。</p><pre class="line-numbers language-python"><code class="language-python">maximum_value <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>maximum_index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>search_cost <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>maximum_value <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        maximum_value <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        maximum_index <span class="token operator">=</span> i        search_cost<span class="token operator">+=</span><span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> maximum_index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请你生成一个具有下述属性的数组 arr ：</p><ul><li><code>arr</code> 中有 <code>n</code> 个整数。</li><li><code>1 &lt;= arr[i] &lt;= m</code> 其中 <code>(0 &lt;= i &lt; n)</code> 。</li><li>将上面提到的算法应用于 <code>arr</code> ，<code>search_cost</code> 的值等于 <code>k</code> 。<br>返回上述条件下生成数组 <code>arr</code> 的 方法数 ，由于答案可能会很大，所以 必须 对 <code>10^9 + 7</code> 取余。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numOfArrays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        mod <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> pre <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> pre <span class="token operator">>=</span> j<span class="token punctuation">:</span>                        <span class="token keyword">for</span> kk <span class="token keyword">in</span> range<span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span>kk<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span>kk<span class="token punctuation">]</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">for</span> kk <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>kk<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span>kk <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>        <span class="token keyword">return</span> res <span class="token operator">%</span> mod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双周赛34</title>
      <link href="posts/98e0.html"/>
      <url>posts/98e0.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/problems/matrix-diagonal-sum/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/matrix-diagonal-sum/</a><br>第二题：<a href="https://leetcode-cn.com/problems/number-of-ways-to-split-a-string/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-ways-to-split-a-string/</a><br>第三题：<a href="https://leetcode-cn.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/</a><br>第四题：<a href="https://leetcode-cn.com/problems/count-all-possible-routes/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-all-possible-routes/</a></p></blockquote><h3 id="1-矩阵对角线元素的和"><a href="#1-矩阵对角线元素的和" class="headerlink" title="(1)矩阵对角线元素的和"></a>(1)矩阵对角线元素的和</h3><p>给你一个正方形矩阵 <code>mat</code>，请你返回矩阵对角线元素的和。</p><p>输入：<code>mat = [[1,2,3],[4,5,6],[7,8,9]]</code><br>输出：<code>25</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">diagonalSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mat<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        l<span class="token operator">=</span>len<span class="token punctuation">(</span>mat<span class="token punctuation">)</span>        prim<span class="token operator">=</span>sum<span class="token punctuation">(</span><span class="token punctuation">[</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        seco<span class="token operator">=</span>sum<span class="token punctuation">(</span><span class="token punctuation">[</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> l<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> prim<span class="token operator">+</span>seco        <span class="token keyword">else</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> prim<span class="token operator">+</span>seco<span class="token operator">-</span>mat<span class="token punctuation">[</span>l<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-分割字符串的方案数"><a href="#2-分割字符串的方案数" class="headerlink" title="(2)分割字符串的方案数"></a>(2)分割字符串的方案数</h3><p>给你一个二进制串 <code>s</code>  （一个只包含 0 和 1 的字符串），我们可以将 <code>s</code> 分割成 3 个 非空 字符串 s1, s2, s3 （s1 + s2 + s3 = s）。</p><p>请你返回分割 <code>s</code> 的方案数，满足 s1，s2 和 s3 中字符 ‘1’ 的数目相同。</p><p>由于答案可能很大，请将它对 <code>10^9 + 7</code> 取余后返回。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numWays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>             mod<span class="token operator">=</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span>        len_s<span class="token operator">=</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        helper<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len_s<span class="token punctuation">)</span><span class="token punctuation">:</span>            helper<span class="token punctuation">.</span>append<span class="token punctuation">(</span>helper<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cnt<span class="token operator">=</span>helper<span class="token punctuation">[</span>len_s<span class="token punctuation">]</span>        <span class="token keyword">if</span> cnt<span class="token operator">%</span><span class="token number">3</span> <span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> <span class="token operator">not</span> cnt<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>len_s<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>len_s<span class="token number">-2</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token operator">%</span>mod        <span class="token keyword">return</span> helper<span class="token punctuation">.</span>count<span class="token punctuation">(</span>cnt<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span>helper<span class="token punctuation">.</span>count<span class="token punctuation">(</span>cnt<span class="token operator">//</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token comment" spellcheck="true"># helper就很灵性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-删除最短的子数组使剩余数组有序"><a href="#3-删除最短的子数组使剩余数组有序" class="headerlink" title="(3)删除最短的子数组使剩余数组有序"></a>(3)删除最短的子数组使剩余数组有序</h3><p>给你一个整数数组 <code>arr</code> ，请你删除一个子数组（可以为空），使得 <code>arr</code> 中剩下的元素是 非递减 的。</p><p>一个子数组指的是原数组中连续的一个子序列。</p><p>请你返回满足题目要求的最短子数组的长度。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findLengthOfShortestSubarray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        len_arr<span class="token operator">=</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># k 用于计算非递减的个数</span>        k<span class="token operator">=</span>len_arr<span class="token number">-1</span>        <span class="token keyword">while</span> k<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> arr<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span> k<span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">if</span> k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        r<span class="token operator">=</span>k        j<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">while</span> j<span class="token operator">&lt;</span>len_arr<span class="token number">-1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># j 从0到倒数第二个元素</span>            ci<span class="token operator">=</span>bisect_left<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            t<span class="token operator">=</span>len_arr<span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len_arr<span class="token operator">-</span>k<span class="token operator">-</span>ci<span class="token punctuation">)</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> r<span class="token operator">></span>t<span class="token punctuation">:</span> r<span class="token operator">=</span>t            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">break</span>            j<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> r<span class="token comment" spellcheck="true"># 不懂</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-统计所有可行路径"><a href="#4-统计所有可行路径" class="headerlink" title="(4)统计所有可行路径"></a>(4)统计所有可行路径</h3><p>给你一个 <strong>互不相同</strong> 的整数数组，其中 <code>locations[i]</code> 表示第 <code>i</code> 个城市的位置。同时给你 <code>start</code>，<code>finish</code> 和 <code>fuel</code> 分别表示出发城市、目的地城市和你初始拥有的汽油总量</p><p>每一步中，如果你在城市 <code>i</code> ，你可以选择任意一个城市 <code>j</code> ，满足  <code>j != i</code> 且 <code>0 &lt;= j &lt; locations.length</code> ，并移动到城市 <code>j</code> 。从城市 <code>i</code> 移动到 <code>j</code> 消耗的汽油量为 <code>|locations[i] - locations[j]|</code>，<code>|x|</code> 表示 <code>x</code> 的绝对值。</p><p>请注意， <code>fuel</code> 任何时刻都 <strong>不能</strong> 为负，且你 <strong>可以</strong> 经过任意城市超过一次（包括 start 和 finish ）。</p><p>请你返回从 <code>start</code> 到 <code>finish</code> 所有可能路径的数目。</p><p>由于答案可能很大， 请将它对 <code>10^9 + 7</code> 取余后返回。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countRoutes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token punctuation">:</span> int<span class="token punctuation">,</span> finish<span class="token punctuation">:</span> int<span class="token punctuation">,</span> fuel<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        dp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>locations<span class="token punctuation">)</span>        mod <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">7</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> c<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">and</span> s<span class="token operator">==</span>finish<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span>            k <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">,</span> s<span class="token punctuation">)</span>            <span class="token keyword">if</span> k <span class="token keyword">in</span> dp<span class="token punctuation">:</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span>            <span class="token keyword">if</span> s<span class="token operator">==</span>finish<span class="token punctuation">:</span>                r<span class="token operator">=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                r<span class="token operator">=</span><span class="token number">0</span>            i <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">!=</span>s<span class="token punctuation">:</span>                    d <span class="token operator">=</span> locations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>locations<span class="token punctuation">[</span>s<span class="token punctuation">]</span>                    <span class="token keyword">if</span> d<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span> d<span class="token operator">=</span><span class="token operator">-</span>d                    <span class="token keyword">if</span> c<span class="token operator">>=</span>d<span class="token punctuation">:</span>                        r <span class="token operator">+=</span> dfs<span class="token punctuation">(</span>c<span class="token operator">-</span>d<span class="token punctuation">,</span> i<span class="token punctuation">)</span>                        r <span class="token operator">%=</span> mod                i<span class="token operator">+=</span><span class="token number">1</span>            dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> r            <span class="token keyword">return</span> r        <span class="token keyword">return</span> dfs<span class="token punctuation">(</span>fuel<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#不懂</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记187</title>
      <link href="posts/contest187.html"/>
      <url>posts/contest187.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、旅行终点站"><a href="#一、旅行终点站" class="headerlink" title="一、旅行终点站"></a>一、旅行终点站</h2><p>给你一份旅游线路图，该线路图中的旅行线路用数组 <code>paths</code> 表示，其中 <code>paths[i] = [cityAi, cityBi]</code> 表示该线路将会从 <code>cityAi</code> 直接前往 <code>cityBi</code> 。请你找出这次旅行的终点站，即没有任何可以通往其他城市的线路的城市。<br>题目数据保证线路图会形成一条不存在循环的线路，因此只会有一个旅行终点站。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">destCity</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> paths<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        lista<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> paths<span class="token punctuation">]</span>        listb<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> paths<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>set<span class="token punctuation">(</span>listb<span class="token punctuation">)</span><span class="token operator">-</span>set<span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、是否所有-1-都至少相隔-k-个元素"><a href="#二、是否所有-1-都至少相隔-k-个元素" class="headerlink" title="二、是否所有 1 都至少相隔 k 个元素"></a>二、是否所有 1 都至少相隔 k 个元素</h2><p>给你一个由若干 <code>0</code> 和 <code>1</code> 组成的数组 <code>nums</code> 以及整数 <code>k</code>。如果所有 <code>1</code> 都至少相隔 <code>k</code> 个元素，则返回 <code>True</code> ；否则，返回 <code>False</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">kLengthApart</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        temp<span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">-</span>temp<span class="token operator">&lt;=</span>k<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>temp<span class="token operator">=</span>i        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、绝对差不超过限制的最长连续子数组"><a href="#三、绝对差不超过限制的最长连续子数组" class="headerlink" title="三、绝对差不超过限制的最长连续子数组"></a>三、绝对差不超过限制的最长连续子数组</h2><p>给你一个整数数组 <code>nums</code> ，和一个表示限制的整数 <code>limit</code>，请你返回最长连续子数组的长度，该子数组中的任意两个元素之间的绝对差必须小于或者等于 <code>limit</code> 。<br>如果不存在满足条件的子数组，则返回 <code>0</code> 。</p><blockquote><p>话说dp和双指针好像，双指针的话最后一个十几万数的测试用例超时了。。。</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestSubarray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> limit<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        ans<span class="token operator">=</span><span class="token number">1</span>        a<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> l <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            minnum<span class="token punctuation">,</span>maxnum<span class="token operator">=</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span>            <span class="token keyword">for</span> r <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>                minnum<span class="token operator">=</span>min<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span>minnum<span class="token punctuation">]</span><span class="token punctuation">)</span>                maxnum<span class="token operator">=</span>max<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span>maxnum<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> maxnum<span class="token operator">-</span>minnum<span class="token operator">&lt;=</span>limit<span class="token punctuation">:</span>                    ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>from copy :</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestSubarray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> limit<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span>        st <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            bisect<span class="token punctuation">.</span>insort<span class="token punctuation">(</span>st<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">while</span> st<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> st<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> limit<span class="token punctuation">:</span>                st<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            j <span class="token operator">+=</span> <span class="token number">1</span>            ans <span class="token operator">=</span> max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> len<span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、有序矩阵中的第-k-个最小数组和"><a href="#四、有序矩阵中的第-k-个最小数组和" class="headerlink" title="四、有序矩阵中的第 k 个最小数组和"></a>四、有序矩阵中的第 k 个最小数组和</h2><p>给你一个 <code>m * n</code> 的矩阵 <code>mat</code>，以及一个整数 <code>k</code> ，矩阵中的每一行都以非递减的顺序排列。<br>你可以从每一行中选出 1 个元素形成一个数组。返回所有可能数组中的第 k 个最小数组和。</p><blockquote><p>利用sorted逐行更新。。</p></blockquote><p>from copy:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mat<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> mat<span class="token punctuation">:</span>            ans <span class="token operator">=</span> sorted<span class="token punctuation">(</span><span class="token punctuation">[</span>a <span class="token operator">+</span> r <span class="token keyword">for</span> a <span class="token keyword">in</span> ans <span class="token keyword">for</span> r <span class="token keyword">in</span> row<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span> k<span class="token punctuation">]</span>        <span class="token keyword">return</span> ans<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记189</title>
      <link href="posts/contest189.html"/>
      <url>posts/contest189.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、在既定时间做作业的学生人数"><a href="#一、在既定时间做作业的学生人数" class="headerlink" title="一、在既定时间做作业的学生人数"></a>一、在既定时间做作业的学生人数</h2><p>给你两个整数数组 <code>startTime</code>（开始时间）和 <code>endTime</code>（结束时间），并指定一个整数 <code>queryTime</code> 作为查询时间。<br>已知，第 <code>i</code> 名学生在 <code>startTime[i]</code> 时开始写作业并于 <code>endTime[i]</code> 时完成作业。<br>请返回在查询时间 <code>queryTime</code> 时正在做作业的学生人数。形式上，返回能够使 <code>queryTime</code> 处于区间 <code>[startTime[i], endTime[i]]</code>（含）的学生人数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">busyStudent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> startTime<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> endTime<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> queryTime<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">return</span> sum<span class="token punctuation">(</span>startTime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> queryTime <span class="token operator">&lt;=</span> endTime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="二、重新排列句子中的单词"><a href="#二、重新排列句子中的单词" class="headerlink" title="二、重新排列句子中的单词"></a>二、重新排列句子中的单词</h2><p>「句子」是一个用空格分隔单词的字符串。给你一个满足下述格式的句子 <code>text</code> :</p><ul><li>句子的首字母大写</li><li><code>text</code> 中的每个单词都用单个空格分隔。</li></ul><p>请你重新排列 <code>text</code> 中的单词，使所有单词按其长度的升序排列。如果两个单词的长度相同，则保留其在原句子中的相对顺序。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">arrangeWords</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        li<span class="token operator">=</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>        li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>        li<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>len<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结</strong></p><blockquote><ol><li><code>str.capitalize()</code></li><li><code>.sort(key=len)</code></li></ol></blockquote><h2 id="三、收藏清单"><a href="#三、收藏清单" class="headerlink" title="三、收藏清单"></a>三、收藏清单</h2><p>给你一个数组 <code>favoriteCompanies</code> ，其中 <code>favoriteCompanies[i]</code> 是第 <code>i</code> 名用户收藏的公司清单（下标从 0 开始）。<br>请找出不是其他任何人收藏的公司清单的子集的收藏清单，并返回该清单下标。下标需要按升序排列。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">peopleIndexes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> favoriteCompanies<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span>_ <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>favoriteCompanies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>favoriteCompanies<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>favoriteCompanies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                a<span class="token punctuation">,</span>b<span class="token operator">=</span>set<span class="token punctuation">(</span>favoriteCompanies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>set<span class="token punctuation">(</span>favoriteCompanies<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> a<span class="token operator">==</span>b <span class="token operator">and</span> i <span class="token keyword">in</span> ans<span class="token punctuation">:</span>                    ans<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token keyword">elif</span> a<span class="token punctuation">.</span>issubset<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">and</span> i <span class="token keyword">in</span> ans<span class="token punctuation">:</span>                     ans<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token keyword">elif</span> b<span class="token punctuation">.</span>issubset<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">and</span> j <span class="token keyword">in</span> ans<span class="token punctuation">:</span>                     ans<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>j<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结</strong></p><blockquote><ol><li><code>a.issubset(b)</code>，判断a是否是b子集</li><li><code>.remove(i)</code>，若<code>i</code>不存在会报错</li></ol></blockquote><h2 id="四、圆形靶内的最大飞镖数量"><a href="#四、圆形靶内的最大飞镖数量" class="headerlink" title="四、圆形靶内的最大飞镖数量"></a>四、圆形靶内的最大飞镖数量</h2><p>墙壁上挂着一个圆形的飞镖靶。现在请你蒙着眼睛向靶上投掷飞镖。<br>投掷到墙上的飞镖用二维平面上的点坐标数组表示。飞镖靶的半径为 <code>r</code> 。<br>请返回能够落在 <strong>任意</strong> 半径为 <code>r</code> 的圆形靶内或靶上的最大飞镖数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numPoints</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> points<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        func<span class="token operator">=</span><span class="token keyword">lambda</span> o<span class="token punctuation">:</span>sum<span class="token punctuation">(</span>dist<span class="token punctuation">(</span>p<span class="token punctuation">,</span>o<span class="token punctuation">)</span><span class="token operator">&lt;=</span>r <span class="token keyword">for</span> p <span class="token keyword">in</span> points<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#检查包含</span>        ans<span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">for</span> p1 <span class="token keyword">in</span> points<span class="token punctuation">:</span>            <span class="token keyword">for</span> p2 <span class="token keyword">in</span> points<span class="token punctuation">:</span>                           <span class="token comment" spellcheck="true">#枚举</span>                <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;</span>dist<span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>r<span class="token punctuation">:</span>                  <span class="token comment" spellcheck="true">#走数学流程</span>                    mid <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>p2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>p2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span>                    d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>p2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>p2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span>                    k <span class="token operator">=</span> sqrt<span class="token punctuation">(</span>r<span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span>hypot<span class="token punctuation">(</span><span class="token operator">*</span>d<span class="token punctuation">)</span>                    o <span class="token operator">=</span> <span class="token punctuation">[</span>mid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>k<span class="token punctuation">,</span>mid<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>k<span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#圆心</span>                    ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> func<span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要思路：<strong>枚举</strong></p><ol><li>枚举points中每两个点，确定圆心。</li><li>更新最大值，输出</li></ol><p><strong>小结：</strong><br> 第四题的<code>枚举</code>+<code>math模块</code>+<code>数学</code>，666。<br> 每天都要好好学习</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记202</title>
      <link href="posts/contest202.html"/>
      <url>posts/contest202.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、存在连续三个奇数的数组"><a href="#一、存在连续三个奇数的数组" class="headerlink" title="一、存在连续三个奇数的数组"></a>一、存在连续三个奇数的数组</h2><p>给你一个整数数组 <code>arr</code>，请你判断数组中是否存在连续三个元素都是奇数的情况：如果存在，请返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">threeConsecutiveOdds</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        l<span class="token operator">=</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">and</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">and</span> arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                 <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、使数组中所有元素相等的最小操作数"><a href="#二、使数组中所有元素相等的最小操作数" class="headerlink" title="二、使数组中所有元素相等的最小操作数"></a>二、使数组中所有元素相等的最小操作数</h2><p>存在一个长度为 <code>n</code> 的数组 <code>arr</code> ，其中 <code>arr[i] = (2 * i) + 1 （ 0 &lt;= i &lt; n </code>。</p><p>一次操作中，你可以选出两个下标，记作 <code>x</code> 和 <code>y</code> （ 0 &lt;= x, y &lt; n ）并使 arr[x] 减去 1 、arr[y] 加上 1 （即 arr[x] -=1 且 arr[y] += 1 ）。最终的目标是使数组中的所有元素都 相等 。题目测试用例将会 保证 ：在执行若干步操作后，数组中的所有元素最终可以全部相等。</p><p>给你一个整数 <code>n</code>，即数组的长度。请你返回使数组 <code>arr</code> 中所有元素相等所需的 <code>最小操作数</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minOperations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        table<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            table<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token operator">+</span>table<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> table<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、两球之间的磁力"><a href="#三、两球之间的磁力" class="headerlink" title="三、两球之间的磁力"></a>三、两球之间的磁力</h2><p>在代号为 C-137 的地球上，Rick 发现如果他将两个球放在他新发明的篮子里，它们之间会形成特殊形式的磁力。Rick 有 <code>n</code> 个空的篮子，第 <code>i</code> 个篮子的位置在 <code>position[i]</code> ，Morty 想把 <code>m</code> 个球放到这些篮子里，使得任意两球间 最小磁力 最大。</p><p>已知两个球如果分别位于 <code>x</code> 和 <code>y</code> ，那么它们之间的磁力为 <code>|x - y|</code> 。</p><p>给你一个整数数组 <code>position</code> 和一个整数 <code>m</code> ，请你返回最大化的最小磁力。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        p<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        lenp<span class="token operator">=</span>len<span class="token punctuation">(</span>p<span class="token punctuation">)</span>        l<span class="token operator">=</span>min<span class="token punctuation">(</span><span class="token punctuation">[</span>p<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>lenp<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#最小答案</span>        r<span class="token operator">=</span>p<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                                <span class="token comment" spellcheck="true">#最大答案</span>        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>            count<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>            <span class="token keyword">while</span> j<span class="token operator">&lt;</span>lenp<span class="token punctuation">:</span>                <span class="token keyword">while</span> j<span class="token operator">&lt;</span>lenp <span class="token operator">and</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>ans<span class="token punctuation">:</span> j<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">if</span> j<span class="token operator">&lt;</span>lenp<span class="token punctuation">:</span> count<span class="token operator">+=</span><span class="token number">1</span>                i<span class="token operator">=</span>j            <span class="token keyword">return</span> count<span class="token operator">>=</span> m<span class="token number">-1</span>        <span class="token keyword">while</span> l<span class="token operator">&lt;=</span>r<span class="token punctuation">:</span>            mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token keyword">if</span> check<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">:</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> r<span class="token operator">=</span>mid<span class="token number">-1</span>        <span class="token keyword">return</span> l<span class="token number">-1</span><span class="token comment" spellcheck="true"># 有些不懂，以后再看看</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、吃掉-N-个橘子的最少天数"><a href="#四、吃掉-N-个橘子的最少天数" class="headerlink" title="四、吃掉 N 个橘子的最少天数"></a>四、吃掉 N 个橘子的最少天数</h2><p>厨房里总共有 n 个橘子，你决定每一天选择如下方式之一吃这些橘子：</p><p>吃掉一个橘子。<br>如果剩余橘子数 <code>n</code> 能被 <code>2</code> 整除，那么你可以吃掉 <code>n/2</code> 个橘子。<br>如果剩余橘子数 <code>n</code> 能被 <code>3</code> 整除，那么你可以吃掉 <code>2*(n/3)</code> 个橘子。<br>每天你只能从以上 <code>3</code> 种方案中选择一种方案。</p><p>请你返回吃掉所有 <code>n</code> 个橘子的最少天数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minDays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">from</span> functools <span class="token keyword">import</span> lru_cache        @lru_cache<span class="token punctuation">(</span>maxsize<span class="token operator">=</span><span class="token number">2048</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> k<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> k            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> k<span class="token operator">%</span><span class="token number">6</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> min<span class="token punctuation">(</span>bfs<span class="token punctuation">(</span>k<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>bfs<span class="token punctuation">(</span>k<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> k<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> min<span class="token punctuation">(</span>bfs<span class="token punctuation">(</span>k<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>bfs<span class="token punctuation">(</span>k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> k<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> min<span class="token punctuation">(</span>bfs<span class="token punctuation">(</span>k<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>bfs<span class="token punctuation">(</span>k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> bfs<span class="token punctuation">(</span>k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">return</span> bfs<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第一次把第四题做出来，开心ing</span><span class="token comment" spellcheck="true"># 看了一下其它题解，n-1的情况后期不用考虑</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记201</title>
      <link href="posts/contest201.html"/>
      <url>posts/contest201.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、整理字符串"><a href="#一、整理字符串" class="headerlink" title="一、整理字符串"></a>一、整理字符串</h2><p>给你一个由大小写英文字母组成的字符串 <code>s</code> 。</p><p>一个整理好的字符串中，两个相邻字符 <code>s[i]</code> 和 <code>s[i + 1]</code> 不会同时满足下述条件：</p><ul><li><code>0</code> &lt;= <code>i</code> &lt;= <code>s.length - 2</code></li><li><code>s[i]</code> 是小写字符，但 <code>s[i + 1]</code> 是相同的大写字符；反之亦然 。</li></ul><p>请你将字符串整理好，每次你都可以从字符串中选出满足上述条件的两个相邻字符并删除，直到字符串整理好为止。</p><p>请返回整理好的 字符串 。题目保证在给出的约束条件下，测试样例对应的答案是唯一的。</p><p>注意：空字符串也属于整理好的字符串，尽管其中没有任何字符</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">makeGood</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            last<span class="token operator">=</span>None            <span class="token keyword">if</span> stack<span class="token punctuation">:</span> last<span class="token operator">=</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> last <span class="token operator">and</span> <span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">32</span><span class="token operator">==</span>ord<span class="token punctuation">(</span>last<span class="token punctuation">)</span> <span class="token operator">or</span> ord<span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">32</span><span class="token operator">==</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span>last<span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> stack <span class="token keyword">if</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#熟悉了stack，ord()与32，list.extend()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、找出第-N-个二进制字符串中的第-K-位"><a href="#二、找出第-N-个二进制字符串中的第-K-位" class="headerlink" title="二、找出第 N 个二进制字符串中的第 K 位"></a>二、找出第 N 个二进制字符串中的第 K 位</h2><p>给你两个正整数 n 和 k，二进制字符串  Sn 的形成规则如下：</p><p><code>S1 = &quot;0&quot;</code><br>当 <code>i &gt; 1</code> 时，<code>Si = Si-1 + &quot;1&quot; + reverse(invert(Si-1))</code><br>其中 <code>+</code>表示串联操作，<code>reverse(x)</code> 返回反转 x 后得到的字符串，而 <code>invert(x)</code> 则会翻转 x 中的每一位（0 变为 1，而 1 变为 0）</p><p>例如，符合上述描述的序列的前 4 个字符串依次是：</p><p>S1 = “0”<br>S2 = “011”<br>S3 = “0111001”<br>S4 = “011100110110001”<br>请你返回  Sn 的 第 k 位字符 ，题目数据保证 k 一定在 Sn 长度范围以内。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findKthBit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        s<span class="token operator">=</span><span class="token string">'0'</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            s<span class="token operator">=</span>s<span class="token operator">+</span><span class="token string">'1'</span><span class="token operator">+</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>str<span class="token punctuation">(</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> s<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 熟悉了 ^1 操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、和为目标值的非空不重叠子数组最大数目"><a href="#三、和为目标值的非空不重叠子数组最大数目" class="headerlink" title="三、和为目标值的非空不重叠子数组最大数目"></a>三、和为目标值的非空不重叠子数组最大数目</h2><p>给你一个数组 <code>nums</code> 和一个整数 <code>target</code> 。</p><p>请你返回 非空不重叠 子数组的最大数目，且每个子数组中数字和都为 <code>target</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxNonOverlapping</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token number">0</span>        pre <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#这是一个前缀和的集合</span>        sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            sum <span class="token operator">+=</span> num            <span class="token keyword">if</span> sum <span class="token operator">-</span> target <span class="token keyword">in</span> pre<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#有一段和满足要求</span>                res <span class="token operator">+=</span> <span class="token number">1</span>                sum <span class="token operator">=</span> <span class="token number">0</span>                pre <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                pre<span class="token punctuation">.</span>add<span class="token punctuation">(</span>sum<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token comment" spellcheck="true"># 像560.和为k的子数组,忘了</span><span class="token comment" spellcheck="true"># 一遍就出来了,思路都固定死了，就是前缀和</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、切棍子的最小成本"><a href="#四、切棍子的最小成本" class="headerlink" title="四、切棍子的最小成本"></a>四、切棍子的最小成本</h2><p>有一根长度为 <code>n</code> 个单位的木棍，棍上从 <code>0</code> 到 <code>n</code> 标记了若干位置。<br>给你一个整数数组 <code>cuts</code> ，其中 <code>cuts[i]</code> 表示你需要将棍子切开的位置。</p><p>你可以按顺序完成切割，也可以根据需要更改切割的顺序。</p><p>每次切割的成本都是当前要切割的棍子的长度，切棍子的总成本是历次切割成本的总和。对棍子进行切割将会把一根木棍分成两根较小的木棍（这两根木棍的长度和就是切割前木棍的长度）。请参阅第一个示例以获得更直观的解释。</p><p>返回切棍子的 <code>最小总成本</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minCost</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> cuts<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">import</span> sys           sys<span class="token punctuation">.</span>setrecursionlimit<span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#改一下递归深度</span>        <span class="token keyword">import</span> functools        @functools<span class="token punctuation">.</span>lru_cache<span class="token punctuation">(</span>None<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#用一下缓存</span>        <span class="token keyword">def</span> <span class="token function">dp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> c <span class="token keyword">in</span> cuts<span class="token punctuation">:</span>                <span class="token keyword">if</span> c <span class="token operator">></span> i <span class="token operator">and</span> c <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                    res <span class="token operator">=</span> min<span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">(</span>i<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">+</span> dp<span class="token punctuation">(</span>c<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> j <span class="token operator">-</span> i<span class="token punctuation">)</span>            <span class="token keyword">if</span> res <span class="token operator">==</span> float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token keyword">return</span> res        <span class="token keyword">return</span> dp<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 懂了一些，dp的不是表，是函数了，厉害</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记190</title>
      <link href="posts/contest190.html"/>
      <url>posts/contest190.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、检查单词是否为句中其他单词的前缀"><a href="#一、检查单词是否为句中其他单词的前缀" class="headerlink" title="一、检查单词是否为句中其他单词的前缀"></a>一、检查单词是否为句中其他单词的前缀</h2><p>给你一个字符串 <code>sentence</code> 作为句子并指定检索词为 <code>searchWord</code> ，其中句子由若干用 单个空格 分隔的单词组成。<br>请你检查检索词 <code>searchWord</code> 是否为句子 <code>sentence</code> 中任意单词的前缀。</p><ul><li>如果 <code>searchWord</code> 是某一个单词的前缀，则返回句子 <code>sentence</code> 中该单词所对应的下标（下标从 <code>1</code> 开始）。</li><li>如果 <code>searchWord</code> 是多个单词的前缀，则返回匹配的第一个单词的下标（最小下标）。</li><li>如果 <code>searchWord</code> 不是任何单词的前缀，则返回 <code>-1</code> 。<br>字符串 <code>S</code> 的 「前缀」是 <code>S</code> 的任何前导连续子字符串。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPrefixOfWord</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sentence<span class="token punctuation">:</span> str<span class="token punctuation">,</span> searchWord<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> s <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>searchWord<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、定长子串中元音的最大数目"><a href="#二、定长子串中元音的最大数目" class="headerlink" title="二、定长子串中元音的最大数目"></a>二、定长子串中元音的最大数目</h2><p>给你字符串 <code>s</code> 和整数 <code>k</code> 。<br>请返回字符串 <code>s</code> 中长度为 <code>k</code> 的单个子字符串中可能包含的最大元音字母数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxVowels</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        ans<span class="token punctuation">,</span>tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token string">'aeiou'</span><span class="token punctuation">:</span> tmp<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> i<span class="token operator">>=</span>k<span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token string">'aeiou'</span><span class="token punctuation">:</span> tmp<span class="token operator">-=</span><span class="token number">1</span>            ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结</strong></p><blockquote><p>不能多想。。好菜</p></blockquote><h2 id="三、二叉树中的伪回文路径"><a href="#三、二叉树中的伪回文路径" class="headerlink" title="三、二叉树中的伪回文路径"></a>三、二叉树中的伪回文路径</h2><p>给你一棵二叉树，每个节点的值为 1 到 9 。我们称二叉树中的一条路径是 「伪回文」的，当它满足：路径经过的所有节点值的排列中，存在一个回文序列。<br>请你返回从根到叶子节点的所有路径中 <strong>伪回文</strong> 路径的数目。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> pseudoPalindromicPaths <span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root <span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root <span class="token punctuation">:</span> <span class="token keyword">return</span>             helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>tmp<span class="token operator">+</span><span class="token punctuation">[</span>root<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span>            helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>tmp<span class="token operator">+</span><span class="token punctuation">[</span>root<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span>            tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">.</span>left <span class="token operator">and</span> <span class="token operator">not</span> root<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                cnt<span class="token operator">=</span><span class="token number">0</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> Counter<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">:</span> cnt<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">if</span> cnt<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>ans<span class="token operator">+=</span><span class="token number">1</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、两个子序列的最大点积"><a href="#四、两个子序列的最大点积" class="headerlink" title="四、两个子序列的最大点积"></a>四、两个子序列的最大点积</h2><p>给你两个数组 <code>nums1</code> 和 <code>nums2</code> 。<br>请你返回 <code>nums1</code> 和 <code>nums2</code> 中两个长度相同的 非空 子序列的最大点积。<br>数组的非空子序列是通过删除原数组中某些元素（可能一个也不删除）后剩余数字组成的序列，但不能改变数字间相对顺序。比方说，<code>[2,3,5]</code> 是 <code>[1,2,3,4,5]</code> 的一个子序列而 <code>[1,5,3]</code> 不是。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDotProduct</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        m<span class="token punctuation">,</span>n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums2<span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span>float<span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>nums1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums2<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结</strong></p><blockquote><p>DP题看的时候一点思路没有。。。被菜昏了</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记207</title>
      <link href="posts/be9d.html"/>
      <url>posts/be9d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/contest/weekly-contest-207/problems/rearrange-spaces-between-words/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-207/problems/rearrange-spaces-between-words/</a><br>第二题：<a href="https://leetcode-cn.com/contest/weekly-contest-207/problems/split-a-string-into-the-max-number-of-unique-substrings/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-207/problems/split-a-string-into-the-max-number-of-unique-substrings/</a><br>第三题：<a href="https://leetcode-cn.com/contest/weekly-contest-207/problems/maximum-non-negative-product-in-a-matrix/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-207/problems/maximum-non-negative-product-in-a-matrix/</a><br>第四题：<a href="https://leetcode-cn.com/contest/weekly-contest-207/problems/minimum-cost-to-connect-two-groups-of-points/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-207/problems/minimum-cost-to-connect-two-groups-of-points/</a></p></blockquote><h2 id="一、重新排列单词间的空格"><a href="#一、重新排列单词间的空格" class="headerlink" title="一、重新排列单词间的空格"></a>一、重新排列单词间的空格</h2><p>给你一个字符串 <code>text</code> ，该字符串由若干被空格包围的单词组成。每个单词由一个或者多个小写英文字母组成，并且两个单词之间至少存在一个空格。题目测试用例保证 <code>text</code> 至少包含一个单词 。</p><p>请你重新排列空格，使每对相邻单词之间的空格数目都 相等 ，并尽可能 最大化 该数目。如果不能重新平均分配所有空格，请 将多余的空格放置在字符串末尾 ，这也意味着返回的字符串应当与原 <code>text</code> 字符串的长度相等。</p><p>返回 <strong>重新排列空格后的字符串</strong> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reorderSpaces</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        n<span class="token operator">=</span>text<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>        t<span class="token operator">=</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        len_t<span class="token operator">=</span>len<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">if</span> len_t<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">+</span>n<span class="token operator">*</span><span class="token string">" "</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">" "</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">//</span>len_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">%</span>len_t<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、拆分字符串使唯一子字符串的数目最大"><a href="#二、拆分字符串使唯一子字符串的数目最大" class="headerlink" title="二、拆分字符串使唯一子字符串的数目最大"></a>二、拆分字符串使唯一子字符串的数目最大</h2><p>给你一个字符串 <code>s</code> ，请你拆分该字符串，并返回拆分后唯一子字符串的最大数目。</p><p>字符串 <code>s</code> 拆分后可以得到若干 <strong>非空子字符串</strong> ，这些子字符串连接后应当能够还原为原字符串。但是拆分出来的每个子字符串都必须是 <strong>唯一的</strong> 。</p><p>注意：<strong>子字符串</strong> 是字符串中的一个连续字符序列。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxUniqueSplit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> l<span class="token operator">==</span>r<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#print(path[:])</span>                self<span class="token punctuation">.</span>ans<span class="token operator">=</span>max<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ans<span class="token punctuation">,</span>len<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>                tmp<span class="token operator">=</span>s<span class="token punctuation">[</span>l<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> tmp <span class="token operator">not</span> <span class="token keyword">in</span> path<span class="token punctuation">:</span>                    path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>                    bk<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>path<span class="token punctuation">)</span>                    path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        bk<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span class="token comment" spellcheck="true"># hhh,最近写多了回溯，</span><span class="token comment" spellcheck="true"># 这题写着写着拐进了dfs,又回溯了，回溯神奇啊</span><span class="token comment" spellcheck="true">#看着的时候挺抽象的，</span><span class="token comment" spellcheck="true">#回溯出来也就这样了</span><span class="token comment" spellcheck="true">#回溯应对拆分，专长了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、矩阵的最大非负积"><a href="#三、矩阵的最大非负积" class="headerlink" title="三、矩阵的最大非负积"></a>三、矩阵的最大非负积</h2><p>给你一个大小为 <code>rows</code> x <code>cols</code> 的矩阵 <code>grid</code> 。最初，你位于左上角 <code>(0, 0)</code> ，每一步，你可以在矩阵中 向右 或 向下 移动。</p><p>在从左上角 <code>(0, 0)</code> 开始到右下角 <code>(rows - 1, cols - 1)</code> 结束的所有路径中，找出具有 <strong>最大非负积</strong> 的路径。路径的积是沿路径访问的单元格中所有整数的乘积。</p><p>返回 最大非负积 对 <code>10**9 + 7</code> 取余 的结果。如果最大积为负数，则返回 <code>-1</code> 。</p><p>注意，取余是在得到最大积之后执行的。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProductPath</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        mod<span class="token operator">=</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">7</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>        @lru_cache<span class="token punctuation">(</span>None<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;=</span>x<span class="token operator">&lt;</span>rows <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>y<span class="token operator">&lt;</span>cols<span class="token punctuation">:</span>                tmp<span class="token operator">=</span>tmp<span class="token operator">*</span>grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span>                <span class="token keyword">if</span> x<span class="token operator">==</span>rows<span class="token number">-1</span> <span class="token operator">and</span> y<span class="token operator">==</span>cols<span class="token number">-1</span><span class="token punctuation">:</span>                     self<span class="token punctuation">.</span>ans<span class="token operator">=</span>max<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ans<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span>                    <span class="token keyword">return</span>                 dfs<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>tmp<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>ans<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">else</span> self<span class="token punctuation">.</span>ans<span class="token operator">%</span>mod<span class="token comment" spellcheck="true">#lru_cache 个神仙</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>记录一下报错:</p><ol><li>ans 不加self在这里会<code>error：referenced before assignment</code><br>&emsp;还有一种改法：把ans弄成列表，子函数中用ans[0]更改</li></ol></blockquote><h2 id="四、连通两组点的最小成本"><a href="#四、连通两组点的最小成本" class="headerlink" title="四、连通两组点的最小成本"></a>四、连通两组点的最小成本</h2><p>给你两组点，其中第一组中有 <code>size1</code> 个点，第二组中有 <code>size2</code> 个点，且 <code>size1 &gt;= size2</code> 。</p><p>任意两点间的连接成本 <code>cost</code> 由大小为 <code>size1 x size2</code> 矩阵给出，其中 <code>cost[i][j]</code> 是第一组中的点 <code>i</code> 和第二组中的点 <code>j</code> 的连接成本。<strong>如果两个组中的每个点都与另一组中的一个或多个点连接，则称这两组点是连通的。</strong>换言之，第一组中的每个点必须至少与第二组中的一个点连接，且第二组中的每个点必须至少与第一组中的一个点连接。</p><p>返回连通两组点所需的最小成本。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">connectTwoGroups</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cost<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>cost<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>cost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">argmin</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>            mini<span class="token punctuation">,</span>minv<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> v<span class="token operator">&lt;</span>minv<span class="token punctuation">:</span>                    mini<span class="token punctuation">,</span>minv<span class="token punctuation">,</span><span class="token operator">=</span>i<span class="token punctuation">,</span>v            <span class="token keyword">return</span> mini        mina<span class="token operator">=</span><span class="token punctuation">[</span>argmin<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> cost<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#横排最小值索引表</span>        minb<span class="token operator">=</span><span class="token punctuation">[</span>argmin<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>cost<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#竖列最小值的索引表</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>vis<span class="token punctuation">,</span>pre<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> index <span class="token operator">>=</span>rows<span class="token punctuation">:</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token operator">==</span>cols<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>ans<span class="token operator">=</span>min<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ans<span class="token punctuation">,</span>pre<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> vis<span class="token punctuation">:</span>                            j<span class="token operator">=</span>minb<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                            pre<span class="token operator">+=</span>cost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>                    self<span class="token punctuation">.</span>ans<span class="token operator">=</span>min<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ans<span class="token punctuation">,</span>pre<span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">if</span> pre<span class="token operator">></span>self<span class="token punctuation">.</span>ans<span class="token punctuation">:</span> <span class="token keyword">return</span>             x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>cost<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">]</span>            x<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># sort()不能直接写在上面，机制不懂</span>            <span class="token keyword">for</span> c<span class="token punctuation">,</span>i <span class="token keyword">in</span> x<span class="token punctuation">:</span>                dfs<span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>vis<span class="token operator">|</span><span class="token punctuation">{</span>i<span class="token punctuation">}</span><span class="token punctuation">,</span>pre<span class="token operator">+</span>c<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 集合中 | 表示或运算</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span class="token comment" spellcheck="true"># from copy</span><span class="token comment" spellcheck="true"># km</span><span class="token comment" spellcheck="true"># 不懂</span><span class="token comment" spellcheck="true"># 二分图： 不含奇数条边的环的一种图</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200920123941686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" alt="离内推最近的一次"></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记204</title>
      <link href="posts/bfdd.html"/>
      <url>posts/bfdd.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/problems/detect-pattern-of-length-m-repeated-k-or-more-times/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/detect-pattern-of-length-m-repeated-k-or-more-times/</a><br>第二题：<a href="https://leetcode-cn.com/problems/maximum-length-of-subarray-with-positive-product/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-length-of-subarray-with-positive-product/</a><br>第三题：<a href="https://leetcode-cn.com/problems/minimum-number-of-days-to-disconnect-island/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-number-of-days-to-disconnect-island/</a><br>第四题：<a href="https://leetcode-cn.com/problems/number-of-ways-to-reorder-array-to-get-same-bst/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-ways-to-reorder-array-to-get-same-bst/</a></p></blockquote><h2 id="一、重复至少-K-次且长度为-M-的模式"><a href="#一、重复至少-K-次且长度为-M-的模式" class="headerlink" title="一、重复至少 K 次且长度为 M 的模式"></a>一、重复至少 K 次且长度为 M 的模式</h2><p>给你一个正整数数组 <code>arr</code>，请你找出一个长度为 <code>m</code> 且在数组中至少重复 <code>k</code> 次的模式。</p><p>模式 是由一个或多个值组成的子数组（连续的子序列），连续 重复多次但 不重叠 。 模式由其长度和重复次数定义。</p><p>如果数组中存在一个至少重复 <code>k</code> 次且长度为 <code>m</code> 的模式，则返回 <code>true</code> ，否则返回  <code>false</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">containsPattern</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        len_arr<span class="token operator">=</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len_arr<span class="token punctuation">)</span><span class="token punctuation">:</span>            temp<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>m<span class="token punctuation">]</span>            <span class="token keyword">if</span> temp<span class="token operator">*</span>k<span class="token operator">==</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>m<span class="token operator">*</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true">#暴力法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、乘积为正数的最长子数组长度"><a href="#二、乘积为正数的最长子数组长度" class="headerlink" title="二、乘积为正数的最长子数组长度"></a>二、乘积为正数的最长子数组长度</h2><p>给你一个整数数组 <code>nums</code> ，请你求出乘积为正数的最长子数组的长度。</p><p>一个数组的子数组是由原数组中零个或者更多个连续数字组成的数组。</p><p>请你返回乘积为正数的最长子数组长度。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getMaxLen</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        start <span class="token operator">=</span> <span class="token number">0</span>        temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> t <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">:</span>            <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#偶数个负数</span>                    ans <span class="token operator">=</span> max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> i<span class="token operator">-</span>start<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#用i-start更新ans</span>                <span class="token keyword">else</span> <span class="token punctuation">:</span>                    ans <span class="token operator">=</span> max<span class="token punctuation">(</span><span class="token punctuation">[</span>ans<span class="token punctuation">,</span> i<span class="token operator">-</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> temp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">#还是用偶数个负数的情况来更新ans</span>                start <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>                temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">elif</span> t <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">:</span>                temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#暂存小于0的数</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#主要思路：硬模拟，负数为主线索</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、使陆地分离的最少天数"><a href="#三、使陆地分离的最少天数" class="headerlink" title="三、使陆地分离的最少天数"></a>三、使陆地分离的最少天数</h2><p>给你一个由若干 <code>0</code> 和 <code>1</code> 组成的二维网格 <code>grid</code> ，其中 <code>0</code> 表示水，而 <code>1</code> 表示陆地。岛屿由水平方向或竖直方向上相邻的 <code>1 </code>（陆地）连接形成。</p><p>如果 恰好只有一座岛屿 ，则认为陆地是 <code>连通</code> 的 ；否则，陆地就是 <code>分离</code> 的 。</p><p>一天内，可以将任何单个陆地单元（<code>1</code>）更改为水单元（<code>0</code>）。</p><p>返回使陆地分离的最少天数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#不会啊，吐了</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、将子数组重新排序得到同一个二叉查找树的方案数"><a href="#四、将子数组重新排序得到同一个二叉查找树的方案数" class="headerlink" title="四、将子数组重新排序得到同一个二叉查找树的方案数"></a>四、将子数组重新排序得到同一个二叉查找树的方案数</h2><p>给你一个数组 <code>nums</code> 表示 <code>1</code> 到 <code>n</code> 的一个排列。我们按照元素在 <code>nums</code> 中的顺序依次插入一个初始为空的二叉查找树（BST）。请你统计将 <code>nums</code> 重新排序后，统计满足如下条件的方案数：重排后得到的二叉查找树与 <code>nums</code> 原本数字顺序得到的二叉查找树相同。</p><p>比方说，给你 <code>nums = [2,1,3]</code>，我们得到一棵 <code>2</code> 为根，<code>1</code> 为左孩子，<code>3</code> 为右孩子的树。数组 <code>[2,3,1]</code> 也能得到相同的 BST，但 <code>[3,2,1]</code> 会得到一棵不同的 BST 。</p><p>请你返回重排 <code>nums</code> 后，与原数组 <code>nums</code> 得到相同二叉查找树的方案数。</p><p>由于答案可能会很大，请将结果对 <code>10^9 + 7</code> 取余数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> comb<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numOfWays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span>            left <span class="token operator">=</span> <span class="token punctuation">[</span>num <span class="token keyword">for</span> num <span class="token keyword">in</span> nums <span class="token keyword">if</span> num <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            right <span class="token operator">=</span> <span class="token punctuation">[</span>num <span class="token keyword">for</span> num <span class="token keyword">in</span> nums <span class="token keyword">if</span> num <span class="token operator">></span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            l<span class="token punctuation">,</span> r <span class="token operator">=</span> f<span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">(</span>right<span class="token punctuation">)</span>            res <span class="token operator">=</span> comb<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> l <span class="token operator">*</span> r            <span class="token keyword">return</span> res        <span class="token keyword">return</span> <span class="token punctuation">(</span>f<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 分治</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记209</title>
      <link href="posts/b9e4.html"/>
      <url>posts/b9e4.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/problems/special-array-with-x-elements-greater-than-or-equal-x/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/special-array-with-x-elements-greater-than-or-equal-x/</a><br>第二题：<a href="https://leetcode-cn.com/problems/even-odd-tree/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/even-odd-tree/</a><br>第三题：<a href="https://leetcode-cn.com/problems/maximum-number-of-visible-points/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-number-of-visible-points/</a><br>第四题：<a href="https://leetcode-cn.com/problems/minimum-one-bit-operations-to-make-integers-zero/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-one-bit-operations-to-make-integers-zero/</a></p></blockquote><h2 id="一、特殊数组的特征值"><a href="#一、特殊数组的特征值" class="headerlink" title="一、特殊数组的特征值"></a>一、特殊数组的特征值</h2><p>给你一个非负整数数组 <code>nums</code> 。如果存在一个数 <code>x</code> ，使得 <code>nums</code> 中恰好有 <code>x</code> 个元素 大于或者等于 <code>x</code> ，那么就称 <code>nums</code> 是一个 特殊数组 ，而 <code>x</code> 是该数组的 特征值 。</p><p>注意： <code>x</code> 不必 是 <code>nums</code> 的中的元素。</p><p>如果数组 <code>nums</code> 是一个 特殊数组 ，请返回它的特征值 <code>x</code> 。否则，返回 <code>-1</code> 。可以证明的是，如果 <code>nums</code> 是特殊数组，那么其特征值 <code>x</code> 是 唯一的 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">specialArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 特征值的遍历</span>            <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token punctuation">(</span>n<span class="token operator">-</span>bisect_left<span class="token punctuation">(</span>nums<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 <span class="token keyword">return</span> x        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token comment" spellcheck="true"># nums.sort(reverse=True)</span><span class="token comment" spellcheck="true"># sorted(nums,reverse=True)</span><span class="token comment" spellcheck="true"># 今天bisect对递减的数组出错了，未知原因</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、奇偶树"><a href="#二、奇偶树" class="headerlink" title="二、奇偶树"></a>二、奇偶树</h2><p>如果一棵二叉树满足下述几个条件，则可以称为 奇偶树 ：</p><p>二叉树根节点所在层下标为 <code>0</code> ，根的子节点所在层下标为 <code>1</code> ，根的孙节点所在层下标为 <code>2</code> ，依此类推。</p><p>偶数下标 层上的所有节点的值都是 奇 整数，从左到右按顺序 严格递增<br>奇数下标 层上的所有节点的值都是 偶 整数，从左到右按顺序 严格递减</p><p>给你二叉树的根节点，如果二叉树为 奇偶树 ，则返回 <code>true</code> ，否则返回 <code>false</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isEvenOddTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token operator">==</span>depth<span class="token punctuation">:</span> ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                ans<span class="token punctuation">[</span>depth<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> depth<span class="token punctuation">,</span>nums <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>            flag<span class="token operator">=</span>depth<span class="token operator">%</span><span class="token number">2</span>            <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>depth<span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> flag<span class="token punctuation">:</span>                           <span class="token comment" spellcheck="true">#奇数</span>                <span class="token keyword">if</span> sorted<span class="token punctuation">(</span>nums<span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">!=</span>nums<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                            <span class="token comment" spellcheck="true">#偶数</span>                <span class="token keyword">if</span> sorted<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">!=</span>nums<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、可见点的最大数目"><a href="#三、可见点的最大数目" class="headerlink" title="三、可见点的最大数目"></a>三、可见点的最大数目</h2><p>给你一个点数组 <code>points</code> 和一个表示角度的整数 <code>angle</code> ，你的位置是 <code>location</code> ，其中 <code>location = [posx, posy]</code> 且 <code>points[i] = [xi, yi]</code> 都表示 X-Y 平面上的整数坐标。</p><p>最开始，你面向东方进行观测。你 不能 进行移动改变位置，但可以通过 自转 调整观测角度。换句话说，<code>posx</code> 和 <code>posy</code> 不能改变。你的视野范围的角度用 <code>angle</code> 表示， 这决定了你观测任意方向时可以多宽。设 <code>d</code> 为逆时针旋转的度数，那么你的视野就是角度范围 <code>[d - angle/2, d + angle/2]</code> 所指示的那片区域。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">visiblePoints</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> points<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> angle<span class="token punctuation">:</span> int<span class="token punctuation">,</span> location<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        ret<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>points<span class="token punctuation">)</span>        a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> points<span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token operator">==</span> location<span class="token punctuation">:</span>                ret <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>atan2<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>location<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>location<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>atan2<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>location<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>location<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>pi<span class="token punctuation">)</span>        a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        j<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> i<span class="token operator">+</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span> <span class="token operator">and</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> angle<span class="token operator">/</span><span class="token number">180</span><span class="token operator">*</span>pi<span class="token punctuation">:</span>                j <span class="token operator">+=</span> <span class="token number">1</span>            ans <span class="token operator">=</span> max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> j<span class="token operator">-</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> ret<span class="token operator">+</span>ans<span class="token comment" spellcheck="true">#copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、使整数变为-0-的最少操作次数"><a href="#四、使整数变为-0-的最少操作次数" class="headerlink" title="四、使整数变为 0 的最少操作次数"></a>四、使整数变为 0 的最少操作次数</h2><p>给你一个整数 <code>n</code>，你需要重复执行多次下述操作将其转换为 <code>0</code> ：</p><ul><li>翻转 <code>n</code> 的二进制表示中最右侧位（第 <code>0</code> 位）。</li><li>如果第 <code>(i-1)</code> 位为 <code>1</code> 且从第 <code>(i-2)</code> 位到第 <code>0</code> 位都为 <code>0</code>，则翻转 <code>n</code> 的二进制表示中的第 <code>i</code> 位。</li></ul><p>返回将 <code>n</code> 转换为 <code>0</code> 的最小操作次数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 格雷码：一种二进制编码方式，相邻码只有一位二进制数不同</span><span class="token comment" spellcheck="true"># 0001->0001,0010->0011,0011->0010,0100->0110</span><span class="token comment" spellcheck="true"># 弄清编码方式，总结规律即可。</span><span class="token comment" spellcheck="true">#方法一：格雷码的解码</span><span class="token comment" spellcheck="true"># eg:n=1110</span><span class="token comment" spellcheck="true">#  1. n的左边第二位：1，与前一位已经解码：1，进行异或，1^1=0，所以数字变成10xx</span><span class="token comment" spellcheck="true">#  2. n的左边第三位：1，与前一位已经解码：0，进行异或，1^0=1，所以数字变成101x</span><span class="token comment" spellcheck="true">#  3. n的左边第四位：0，与前一位已经解码：1，进行异或，0^1=1，所以数字变成1011</span><span class="token comment" spellcheck="true">#  所以答案就是1011B=11D</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minimumOneBitOperations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        nums<span class="token operator">=</span><span class="token punctuation">[</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> bin<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        pre<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span><span class="token operator">=</span>pre            pre<span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> eval<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token operator">+</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#方法二：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minimumOneBitOperations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        dp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> k <span class="token keyword">in</span> dp<span class="token punctuation">:</span>                <span class="token keyword">return</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span>            <span class="token keyword">if</span> k <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>                res <span class="token operator">=</span> k            <span class="token keyword">else</span><span class="token punctuation">:</span>                m <span class="token operator">=</span> <span class="token number">1</span>                <span class="token keyword">while</span> m <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> k<span class="token punctuation">:</span>                    m <span class="token operator">*=</span> <span class="token number">2</span>                n <span class="token operator">=</span> m <span class="token operator">//</span> <span class="token number">2</span>                <span class="token comment" spellcheck="true">#print(k, m, n)</span>                <span class="token keyword">if</span> k <span class="token operator">>=</span> m <span class="token operator">+</span> n<span class="token punctuation">:</span>                    res <span class="token operator">=</span> m <span class="token operator">+</span> helper<span class="token punctuation">(</span>k <span class="token operator">-</span> m <span class="token operator">-</span> n<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    res <span class="token operator">=</span> m <span class="token operator">+</span> helper<span class="token punctuation">(</span>k <span class="token operator">-</span> n<span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> res            <span class="token keyword">return</span> res        <span class="token keyword">return</span> helper<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>考察数学。。。<br>复习了<code>math</code>, <code>bisect</code>，角度问题<br>那个树，hhh，做题还是有好处</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记210</title>
      <link href="posts/2f25.html"/>
      <url>posts/2f25.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/problems/maximum-nesting-depth-of-the-parentheses/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-nesting-depth-of-the-parentheses/</a><br>第二题：<a href="https://leetcode-cn.com/problems/maximal-network-rank/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximal-network-rank/</a><br>第三题：<a href="https://leetcode-cn.com/problems/split-two-strings-to-make-palindrome/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/split-two-strings-to-make-palindrome/</a><br>第四题：<a href="https://leetcode-cn.com/problems/count-subtrees-with-max-distance-between-cities/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-subtrees-with-max-distance-between-cities/</a></p></blockquote><h2 id="一、括号的最大嵌套深度"><a href="#一、括号的最大嵌套深度" class="headerlink" title="一、括号的最大嵌套深度"></a>一、括号的最大嵌套深度</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token number">0</span>        cnt<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token string">"("</span><span class="token punctuation">:</span> ans<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token string">")"</span><span class="token punctuation">:</span> ans<span class="token operator">-=</span><span class="token number">1</span>            cnt<span class="token operator">=</span>max<span class="token punctuation">(</span>cnt<span class="token punctuation">,</span>ans<span class="token punctuation">)</span>        <span class="token keyword">return</span> cnt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、最大网络秩"><a href="#二、最大网络秩" class="headerlink" title="二、最大网络秩"></a>二、最大网络秩</h2><p><code>n</code> 座城市和一些连接这些城市的道路 <code>roads</code> 共同组成一个基础设施网络。每个 <code>roads[i] = [ai, bi]</code> 都表示在城市 <code>ai</code> 和 <code>bi</code> 之间有一条双向道路。</p><p>两座不同城市构成的 城市对 的 <strong>网络秩</strong> 定义为：与这两座城市 直接 相连的道路总数。如果存在一条道路直接连接这两座城市，则这条道路只计算 一次 。</p><p>整个基础设施网络的 最大网络秩 是所有不同城市对中的 最大网络秩 。</p><p>给你整数 <code>n</code> 和数组 <code>roads</code>，返回整个基础设施网络的 最大网络秩 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maximalNetworkRank</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> roads<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token number">0</span>        d<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span> roads<span class="token punctuation">:</span>            d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>            d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                tmp<span class="token operator">=</span>len<span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>len<span class="token punctuation">(</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> i <span class="token keyword">in</span> d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span> tmp<span class="token operator">-=</span><span class="token number">1</span>                ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 穷举</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、分割两个字符串得到回文串"><a href="#三、分割两个字符串得到回文串" class="headerlink" title="三、分割两个字符串得到回文串"></a>三、分割两个字符串得到回文串</h2><p>给你两个字符串 <code>a</code> 和 <code>b</code> ，它们长度相同。请你选择一个下标，将两个字符串都在 相同的下标 分割开。由 <code>a</code> 可以得到两个字符串： <code>aprefix</code> 和 <code>asuffix</code> ，满足 <code>a = aprefix + asuffix</code> ，同理，由 <code>b</code> 可以得到两个字符串 <code>bprefix</code> 和 <code>bsuffix</code> ，满足 <code>b = bprefix + bsuffix</code> 。请你判断 <code>aprefix + bsuffix</code> 或者 <code>bprefix + asuffix</code> 能否构成回文串。</p><p>当你将一个字符串 <code>s</code> 分割成 <code>sprefix</code> 和 <code>ssuffix</code> 时， <code>ssuffix</code> 或者 <code>sprefix</code> 可以为空。比方说， <code>s = &quot;abc&quot;</code> 那么 <code>&quot;&quot; + &quot;abc&quot;</code> ， <code>&quot;a&quot; + &quot;bc&quot;</code> ， <code>&quot;ab&quot; + &quot;c&quot;</code> 和 <code>&quot;abc&quot; + &quot;&quot;</code> 都是合法分割。</p><p>如果 能构成回文字符串 ，那么请返回 <code>true</code>，否则返回 <code>false</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">checkPalindromeFormation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">:</span> str<span class="token punctuation">,</span> b<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">,</span>left<span class="token punctuation">)</span><span class="token punctuation">:</span>            right<span class="token operator">=</span>len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>left            <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">and</span> right<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> str1<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">!=</span>str2<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">break</span>                left<span class="token operator">-=</span><span class="token number">1</span>                right<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">return</span> left        left<span class="token operator">=</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span>               <span class="token comment" spellcheck="true">#第一次检测的下标</span>        left<span class="token operator">=</span>min<span class="token punctuation">(</span>check<span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">,</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span>check<span class="token punctuation">(</span>b<span class="token punctuation">,</span>b<span class="token punctuation">,</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>        left<span class="token operator">=</span>min<span class="token punctuation">(</span>check<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span>check<span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> left<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span>                <span class="token comment" spellcheck="true">#检测是否扩展到底</span><span class="token comment" spellcheck="true"># 核心思路：中心扩展</span><span class="token comment" spellcheck="true"># 第一步：前a后a,前b后b,找到中间的回文串</span><span class="token comment" spellcheck="true"># 第二步：开始拼接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、统计子树间最大距离"><a href="#四、统计子树间最大距离" class="headerlink" title="四、统计子树间最大距离"></a>四、统计子树间最大距离</h2><p>任意城市之间只有唯一的一条路径。换句话说，所有城市形成了一棵 树 。</p><p><strong>输入</strong>：n = 4, edges = [[1,2],[2,3],[2,4]]<br><strong>输出</strong>：[3,4,0]<br><strong>解释</strong>：<br>子树 {1,2}, {2,3} 和 {2,4} 最大距离都是 1 。<br>子树 {1,2,3}, {1,2,4}, {2,3,4} 和 {1,2,3,4} 最大距离都为 2 。<br>不存在城市间最大距离为 3 的子树。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countSubgraphsForEachDiameter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">,</span> edges<span class="token punctuation">)</span><span class="token punctuation">:</span>        d<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> edges<span class="token punctuation">:</span>            d<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            d<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">maxd</span><span class="token punctuation">(</span>mask0<span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask0<span class="token punctuation">:</span>                    mask <span class="token operator">=</span> mask0                    bfs<span class="token punctuation">,</span> bfs2 <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                    cur <span class="token operator">=</span> <span class="token number">0</span>                    <span class="token keyword">while</span> bfs<span class="token punctuation">:</span>                        <span class="token keyword">for</span> i <span class="token keyword">in</span> bfs<span class="token punctuation">:</span>                            mask <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i                            <span class="token keyword">for</span> j <span class="token keyword">in</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                                <span class="token keyword">if</span> mask <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>                                    bfs2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>                        cur <span class="token operator">+=</span> <span class="token number">1</span>                        bfs<span class="token punctuation">,</span> bfs2 <span class="token operator">=</span> bfs2<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                    <span class="token keyword">if</span> mask<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>                    res <span class="token operator">=</span> max<span class="token punctuation">(</span>res<span class="token punctuation">,</span> cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> res        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> mask <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> mask <span class="token operator">&amp;</span> <span class="token punctuation">(</span>mask <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>            k <span class="token operator">=</span> maxd<span class="token punctuation">(</span>mask<span class="token punctuation">)</span>            <span class="token keyword">if</span> k<span class="token punctuation">:</span>                res<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res<span class="token comment" spellcheck="true"># copy</span><span class="token comment" spellcheck="true"># 不懂</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记211</title>
      <link href="posts/efe4.html"/>
      <url>posts/efe4.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/problems/largest-substring-between-two-equal-characters/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/largest-substring-between-two-equal-characters/</a><br>第二题：<a href="https://leetcode-cn.com/problems/lexicographically-smallest-string-after-applying-operations/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/lexicographically-smallest-string-after-applying-operations/</a><br>第三题：<a href="https://leetcode-cn.com/problems/best-team-with-no-conflicts/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/best-team-with-no-conflicts/</a><br>第四题：<a href="https://leetcode-cn.com/problems/graph-connectivity-with-threshold/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/graph-connectivity-with-threshold/</a></p></blockquote><h2 id="一、两个相同字符之间的最长子字符串"><a href="#一、两个相同字符之间的最长子字符串" class="headerlink" title="一、两个相同字符之间的最长子字符串"></a>一、两个相同字符之间的最长子字符串</h2><p>给你一个字符串 <code>s</code>，请你返回 两个相同字符之间的最长子字符串的长度 ，计算长度时不含这两个字符。如果不存在这样的子字符串，返回 <code>-1</code> 。</p><p>子字符串 是字符串中的一个连续字符序列。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxLengthBetweenEqualCharacters</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        d<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>x <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            nums<span class="token operator">=</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>                ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、执行操作后字典序最小的字符串"><a href="#二、执行操作后字典序最小的字符串" class="headerlink" title="二、执行操作后字典序最小的字符串"></a>二、执行操作后字典序最小的字符串</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#暴力</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findLexSmallestString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">,</span> a<span class="token punctuation">:</span> int<span class="token punctuation">,</span> b<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        b <span class="token operator">=</span> b<span class="token operator">%</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp<span class="token operator">=</span><span class="token string">""</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> tmp<span class="token operator">+=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span> tmp<span class="token operator">+=</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> tmp        <span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> s<span class="token punctuation">[</span><span class="token operator">-</span>b<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span>b<span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token punctuation">{</span>s<span class="token punctuation">}</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>add<span class="token punctuation">(</span>s<span class="token punctuation">)</span>            s1<span class="token punctuation">,</span>s2<span class="token operator">=</span>f1<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>f2<span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> ans<span class="token punctuation">:</span> dfs<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">return</span> min<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、无矛盾的最佳球队"><a href="#三、无矛盾的最佳球队" class="headerlink" title="三、无矛盾的最佳球队"></a>三、无矛盾的最佳球队</h2><p>假设你是球队的经理。对于即将到来的锦标赛，你想组合一支总体得分最高的球队。球队的得分是球队中所有球员的分数 总和 。</p><p>然而，球队中的矛盾会限制球员的发挥，所以必须选出一支 没有矛盾 的球队。如果一名年龄较小球员的分数 严格大于 一名年龄较大的球员，则存在矛盾。同龄球员之间不会发生矛盾。</p><p>给你两个列表 <code>scores</code> 和 <code>ages</code>，其中每组 <code>scores[i]</code> 和 <code>ages[i]</code> 表示第 <code>i</code> 名球员的分数和年龄。请你返回 <strong>所有可能的无矛盾球队中得分最高那支的分数</strong> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bestTeamScore</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> scores<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> ages<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>scores<span class="token punctuation">)</span>        arr <span class="token operator">=</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>ages<span class="token punctuation">,</span> scores<span class="token punctuation">)</span><span class="token punctuation">)</span>        arr<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 按年龄递增排序，年龄相同的按分数递增排序</span>        <span class="token comment" spellcheck="true">#print(arr)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token comment" spellcheck="true">#类似最长上升子序列问题</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># DPxiu</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 优化版：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bestTeamScore</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> scores<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> ages<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">import</span> bisect        d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>score<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token keyword">for</span> age<span class="token punctuation">,</span> score <span class="token keyword">in</span> zip<span class="token punctuation">(</span>ages<span class="token punctuation">,</span> scores<span class="token punctuation">)</span><span class="token punctuation">]</span>        d<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>d<span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token number">0</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># print(d)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            score<span class="token punctuation">,</span> age <span class="token operator">=</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            idx <span class="token operator">=</span> bisect<span class="token punctuation">.</span>bisect_right<span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token punctuation">(</span>age<span class="token punctuation">,</span>float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            s <span class="token operator">=</span> stack<span class="token punctuation">[</span>idx<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            res <span class="token operator">=</span> max<span class="token punctuation">(</span>res<span class="token punctuation">,</span> s<span class="token operator">+</span>score<span class="token punctuation">)</span>            <span class="token keyword">while</span> idx <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">and</span> stack<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> s<span class="token operator">+</span>score<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>idx<span class="token punctuation">)</span>            stack<span class="token punctuation">[</span>idx<span class="token punctuation">:</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> s<span class="token operator">+</span>score<span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">while</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">and</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(stack)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、带阈值的图连通性"><a href="#四、带阈值的图连通性" class="headerlink" title="四、带阈值的图连通性"></a>四、带阈值的图连通性</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 并查集</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记212</title>
      <link href="posts/eea4.html"/>
      <url>posts/eea4.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/problems/slowest-key/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/slowest-key/</a><br>第二题：<a href="https://leetcode-cn.com/problems/arithmetic-subarrays/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/arithmetic-subarrays/</a><br>第三题：<a href="https://leetcode-cn.com/problems/path-with-minimum-effort/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/path-with-minimum-effort/</a><br>第四题：<a href="https://leetcode-cn.com/problems/rank-transform-of-a-matrix/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/rank-transform-of-a-matrix/</a></p></blockquote><h2 id="一、按键持续时间最长的键"><a href="#一、按键持续时间最长的键" class="headerlink" title="一、按键持续时间最长的键"></a>一、按键持续时间最长的键</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">slowestKey</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> releaseTimes<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> keysPressed<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        ans<span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        tmp<span class="token operator">=</span><span class="token punctuation">[</span>releaseTimes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>releaseTimes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>releaseTimes<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>releaseTimes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(tmp)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>time <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> time<span class="token operator">></span>t<span class="token punctuation">:</span>                 ans<span class="token punctuation">,</span>t<span class="token operator">=</span>keysPressed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>time            <span class="token keyword">elif</span> time<span class="token operator">==</span>t<span class="token punctuation">:</span>                 ans<span class="token operator">=</span>max<span class="token punctuation">(</span>keysPressed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(ans,t)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、等差子数组"><a href="#二、等差子数组" class="headerlink" title="二、等差子数组"></a>二、等差子数组</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">checkArithmeticSubarrays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>bool<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>tmp<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            t<span class="token operator">=</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>            t<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(i,t)</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>check<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、-最小体力消耗路径"><a href="#三、-最小体力消耗路径" class="headerlink" title="三、 最小体力消耗路径"></a>三、 最小体力消耗路径</h2><p>你准备参加一场远足活动。给你一个二维 <code>rows x columns</code> 的地图 <code>heights</code> ，其中 <code>heights[row][col]</code> 表示格子 <code>(row, col)</code> 的高度。一开始你在最左上角的格子 <code>(0, 0)</code> ，且你希望去最右下角的格子 <code>(rows-1, columns-1)</code> （注意下标从 0 开始编号）。你每次可以往 <strong>上</strong>，<strong>下</strong>，<strong>左</strong>，<strong>右</strong> 四个方向之一移动，你想要找到耗费 <strong>体力</strong> 最小的一条路径。</p><p>一条路径耗费的 <strong>体力值</strong> 是路径上相邻格子之间 <strong>高度差绝对值</strong> 的 <strong>最大值</strong> 决定的。</p><p>请你返回从左上角走到右下角的最小 <strong>体力消耗值</strong> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># dfs回溯超时</span><span class="token comment" spellcheck="true"># 目的性不强，hhh</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minimumEffortPath</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> heights<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>heights<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>heights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>travel<span class="token punctuation">,</span>hp<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x<span class="token operator">==</span>rows<span class="token number">-1</span> <span class="token operator">and</span> y<span class="token operator">==</span>cols<span class="token number">-1</span><span class="token punctuation">:</span>                 self<span class="token punctuation">.</span>ans<span class="token operator">=</span>min<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ans<span class="token punctuation">,</span>hp<span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">for</span> nx<span class="token punctuation">,</span>ny <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;=</span>nx<span class="token operator">&lt;</span>rows <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>ny<span class="token operator">&lt;</span>cols<span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nx<span class="token punctuation">,</span>ny<span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token keyword">in</span> travel<span class="token punctuation">:</span>                        travel<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span>ny<span class="token punctuation">)</span><span class="token punctuation">)</span>                        dfs<span class="token punctuation">(</span>nx<span class="token punctuation">,</span>ny<span class="token punctuation">,</span>travel<span class="token punctuation">,</span>max<span class="token punctuation">(</span>hp<span class="token punctuation">,</span>abs<span class="token punctuation">(</span>heights<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token operator">-</span>heights<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        travel<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># copy的bfs+二分:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minimumEffortPath</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> heights<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        m<span class="token punctuation">,</span> n <span class="token operator">=</span> len<span class="token punctuation">(</span>heights<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>heights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        mat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>        l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">999999</span>        <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            mat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>            mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            queue <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">while</span> queue<span class="token punctuation">:</span>                i<span class="token punctuation">,</span> j <span class="token operator">=</span> queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;=</span>x<span class="token operator">&lt;</span>m <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>y<span class="token operator">&lt;</span>n <span class="token operator">and</span> mat<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">and</span> abs<span class="token punctuation">(</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> heights<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> mid<span class="token punctuation">:</span>                        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>                        mat<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">if</span> mat<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                r <span class="token operator">=</span> mid            <span class="token keyword">else</span><span class="token punctuation">:</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、矩阵转换后的秩"><a href="#四、矩阵转换后的秩" class="headerlink" title="四、矩阵转换后的秩"></a>四、矩阵转换后的秩</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># copy: 全排序+并查集</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">matrixRankTransform</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>         R<span class="token punctuation">,</span> C <span class="token operator">=</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>C <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>R<span class="token punctuation">)</span><span class="token punctuation">]</span>        countR<span class="token punctuation">,</span> countC <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>R<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>C        <span class="token comment" spellcheck="true"># 按元素大小分别存储元素坐标</span>        ls <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        <span class="token keyword">for</span> r<span class="token punctuation">,</span> row <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">for</span> c<span class="token punctuation">,</span> val <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>                 ls<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 并查集用于合并行或列相同的元素</span>        union <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span>LIM<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">if</span> union<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">:</span> <span class="token keyword">return</span> i            union<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> find<span class="token punctuation">(</span>union<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> union<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 按val从小到大遍历</span>        pool <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        <span class="token keyword">for</span> val <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>ls<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 用并查集合并行和列相同的元素并分组</span>            <span class="token keyword">for</span> r<span class="token punctuation">,</span> c <span class="token keyword">in</span> ls<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">:</span>                 union<span class="token punctuation">[</span>find<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> find<span class="token punctuation">(</span>c<span class="token operator">+</span>LIM<span class="token punctuation">)</span>            pool<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> r<span class="token punctuation">,</span> c <span class="token keyword">in</span> ls<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">:</span>                 pool<span class="token punctuation">[</span>find<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 行和列相同的元素，共享相同的rank</span>            <span class="token keyword">for</span> group <span class="token keyword">in</span> pool<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 rank <span class="token operator">=</span> max<span class="token punctuation">(</span>max<span class="token punctuation">(</span><span class="token punctuation">(</span>countR<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> countC<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> r<span class="token punctuation">,</span> c <span class="token keyword">in</span> group<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">for</span> r<span class="token punctuation">,</span> c <span class="token keyword">in</span> group<span class="token punctuation">:</span>                     countR<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> countC<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> rank                    <span class="token comment" spellcheck="true"># 重置并查集</span>                    union<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> r                    union<span class="token punctuation">[</span>c<span class="token operator">+</span>LIM<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token operator">+</span>LIM        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记213</title>
      <link href="posts/2e65.html"/>
      <url>posts/2e65.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/problems/check-array-formation-through-concatenation/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/check-array-formation-through-concatenation/</a><br>第二题：<a href="https://leetcode-cn.com/problems/count-sorted-vowel-strings/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-sorted-vowel-strings/</a><br>第三题：<a href="https://leetcode-cn.com/problems/furthest-building-you-can-reach/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/furthest-building-you-can-reach/</a><br>第四题：<a href="https://leetcode-cn.com/problems/kth-smallest-instructions/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/kth-smallest-instructions/</a></p></blockquote><h2 id="一、能否连接形成数组"><a href="#一、能否连接形成数组" class="headerlink" title="一、能否连接形成数组"></a>一、能否连接形成数组</h2><p>输入：<code>arr</code> = [91,4,64,78], <code>pieces</code> = [[78],[4,64],[91]]<br>输出：<code>true</code><br>解释：依次连接 [91]、[4,64] 和 [78]</p><p>输入：<code>arr</code> = [49,18,16], <code>pieces</code> = [[16,18,49]]<br>输出：false<br>解释：即便数字相符，也不能重新排列 <code>pieces[0]</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canFormArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> pieces<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">for</span> piece <span class="token keyword">in</span> pieces<span class="token punctuation">:</span>            <span class="token keyword">for</span> x <span class="token keyword">in</span> piece<span class="token punctuation">:</span>                <span class="token keyword">if</span> x <span class="token operator">not</span> <span class="token keyword">in</span> arr<span class="token punctuation">:</span>                     <span class="token keyword">return</span> <span class="token boolean">False</span>            pre<span class="token operator">=</span>arr<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> x <span class="token keyword">in</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                cur<span class="token operator">=</span>arr<span class="token punctuation">.</span>index<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                <span class="token keyword">if</span> cur<span class="token operator">-</span>pre<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                pre<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true"># 有些繁杂，可以优化map</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、统计字典序元音字符串的数目"><a href="#二、统计字典序元音字符串的数目" class="headerlink" title="二、统计字典序元音字符串的数目"></a>二、统计字典序元音字符串的数目</h2><p><code>n=1 return 5</code>  [“a”,”e”,”i”,”o”,”u”]<br><code>n=2 return 15</code> [“aa”,”ae”,”ai”,”ao”,”au”,”ee”,”ei”,”eo”,”eu”,”ii”,”io”,”iu”,”oo”,”ou”,”uu”]</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法一：暴力模拟</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countVowelStrings</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        d<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>        tmp<span class="token operator">=</span>ans<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> ans<span class="token punctuation">:</span>                tmp<span class="token operator">+=</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            ans<span class="token operator">=</span>tmp<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sum<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#一开始有点炸，运行中ans变了，for也变了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法二：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countVowelStrings</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span>        <span class="token keyword">return</span> sum<span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#好好学一下,hzx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、可以到达的最远建筑"><a href="#三、可以到达的最远建筑" class="headerlink" title="三、可以到达的最远建筑"></a>三、可以到达的最远建筑</h2><p>给你一个整数数组 <code>heights</code> ，表示建筑物的高度。另有一些砖块 <code>bricks</code> 和梯子 <code>ladders</code> 。</p><p>你从建筑物 <code>0</code> 开始旅程，不断向后面的建筑物移动，期间可能会用到砖块或梯子。</p><p>当从建筑物 <code>i</code> 移动到建筑物 <code>i+1</code>（下标 从 <code>0</code> 开始 ）时：</p><ul><li>如果当前建筑物的高度 <strong>大于或等于</strong> 下一建筑物的高度，则不需要梯子或砖块</li><li>如果当前建筑的高度 <strong>小于</strong> 下一个建筑的高度，您可以使用 <code>一架梯子</code> 或 <code>(h[i+1] - h[i])</code> 个砖块</li></ul><p>如果以最佳方式使用给定的梯子和砖块，返回你可以到达的最远建筑物的下标（下标 从 <code>0</code> 开始 ）。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># TLE dfs</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">furthestBuilding</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> heights<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> bricks<span class="token punctuation">:</span> int<span class="token punctuation">,</span> ladders<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span>bricks<span class="token punctuation">,</span>ladders<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> bricks<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> cur<span class="token number">-1</span>            <span class="token keyword">if</span> ladders<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> cur<span class="token number">-1</span>            <span class="token keyword">if</span> cur<span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>len<span class="token punctuation">(</span>heights<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> cur            height<span class="token operator">=</span>heights<span class="token punctuation">[</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>heights<span class="token punctuation">[</span>cur<span class="token punctuation">]</span>            <span class="token keyword">if</span> height<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> dfs<span class="token punctuation">(</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>bricks<span class="token punctuation">,</span>ladders<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 一：直接走</span>            <span class="token keyword">return</span> max<span class="token punctuation">(</span>dfs<span class="token punctuation">(</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>bricks<span class="token operator">-</span>height<span class="token punctuation">,</span>ladders<span class="token punctuation">)</span><span class="token punctuation">,</span>dfs<span class="token punctuation">(</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>bricks<span class="token punctuation">,</span>ladders<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>bricks<span class="token punctuation">,</span>ladders<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#优先队列+贪心</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">furthestBuilding</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> heights<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> bricks<span class="token punctuation">:</span> int<span class="token punctuation">,</span> ladders<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>heights<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 由于我们需要维护最大的 l 个值，因此使用小根堆</span>        q <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 需要使用砖块的 delta h 的和</span>        sumH <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            deltaH <span class="token operator">=</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> heights<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> deltaH <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> deltaH<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 如果优先队列已满，需要拿出一个其中的最小值，改为使用砖块</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token operator">></span> ladders<span class="token punctuation">:</span>                    sumH <span class="token operator">+=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>                <span class="token keyword">if</span> sumH <span class="token operator">></span> bricks<span class="token punctuation">:</span>                    <span class="token keyword">return</span> i <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">return</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token comment" spellcheck="true">#设置一个优先队列来当梯子</span><span class="token comment" spellcheck="true">#。。。。。。。。。。。。。。。。。。。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、第-K-条最小指令"><a href="#四、第-K-条最小指令" class="headerlink" title="四、第 K 条最小指令"></a>四、第 K 条最小指令</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 优先确定高位 + 组合计数</span><span class="token comment" spellcheck="true"># 分解成小问题</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">kthSmallestPath</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> destination<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        v<span class="token punctuation">,</span>h<span class="token operator">=</span>destination        self<span class="token punctuation">.</span>ans<span class="token operator">=</span><span class="token string">""</span>        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>h<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> h<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>ans<span class="token operator">+=</span><span class="token string">"V"</span><span class="token operator">*</span>v            <span class="token keyword">else</span><span class="token punctuation">:</span>                tmp<span class="token operator">=</span>comb<span class="token punctuation">(</span>h<span class="token operator">+</span>v<span class="token number">-1</span><span class="token punctuation">,</span>h<span class="token number">-1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#高位为h的个数</span>                <span class="token keyword">if</span> k<span class="token operator">></span>tmp<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>ans<span class="token operator">+=</span><span class="token string">"V"</span>                        f<span class="token punctuation">(</span>v<span class="token number">-1</span><span class="token punctuation">,</span>h<span class="token punctuation">,</span>k<span class="token operator">-</span>tmp<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>ans<span class="token operator">+=</span><span class="token string">"H"</span>                    f<span class="token punctuation">(</span>v<span class="token punctuation">,</span>h<span class="token number">-1</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span>        f<span class="token punctuation">(</span>v<span class="token punctuation">,</span>h<span class="token punctuation">,</span>k<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><code>11.1</code></p><p>困难可以学会很多啊，很多时候并不能事事如愿。</p><p>最近看了《大话西游之大圣娶亲》，<br>有感动，更多的无奈与自嘲，<br>他好像一条狗啊，那个落寞的背影取经去了…</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛笔记217</title>
      <link href="posts/contest217.html"/>
      <url>posts/contest217.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/problems/richest-customer-wealth/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/richest-customer-wealth/</a><br>第二题：<a href="https://leetcode-cn.com/problems/find-the-most-competitive-subsequence/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-the-most-competitive-subsequence/</a><br>第三题：<a href="https://leetcode-cn.com/problems/minimum-moves-to-make-array-complementary/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-moves-to-make-array-complementary/</a><br>第四题：<a href="https://leetcode-cn.com/problems/minimize-deviation-in-array/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimize-deviation-in-array/</a></p></blockquote><h2 id="二、找出最具竞争力的子序列"><a href="#二、找出最具竞争力的子序列" class="headerlink" title="二、找出最具竞争力的子序列"></a>二、找出最具竞争力的子序列</h2><p><strong>输入</strong>：<code>nums = [3,5,2,6]</code>, <code>k = 2</code><br><strong>输出</strong>：<code>[2,6]</code><br><strong>解释</strong>：在所有可能的子序列集合 <code>{[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}</code> 中，<code>[2,6]</code> 最具竞争力。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mostCompetitive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        count<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span>k <span class="token comment" spellcheck="true">#最多可删除</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> stack <span class="token operator">and</span> i<span class="token operator">&lt;</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">and</span> count<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                count<span class="token operator">-=</span><span class="token number">1</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> stack<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 单调栈</span><span class="token comment" spellcheck="true"># 用那个count和栈来简化问题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、使数组互补的最少操作次数"><a href="#三、使数组互补的最少操作次数" class="headerlink" title="三、使数组互补的最少操作次数"></a>三、使数组互补的最少操作次数</h2><p>给你一个长度为 偶数 <code>n</code> 的整数数组 <code>nums</code> 和一个整数 <code>limit</code> 。每一次操作，你可以将 <code>nums</code> 中的任何整数替换为 <code>1</code> 到 <code>limit</code> 之间的另一个整数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minMoves</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>A<span class="token punctuation">)</span>        count <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>limit <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>        mi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>limit <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>        ma <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>limit <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            a<span class="token punctuation">,</span> b <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span><span class="token operator">~</span>i<span class="token punctuation">]</span>            count<span class="token punctuation">[</span>a <span class="token operator">+</span> b<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            mi<span class="token punctuation">[</span>min<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            ma<span class="token punctuation">[</span>max<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> limit <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> limit <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ma<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> ma<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>limit <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            mi<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> mi<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> min<span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> mi<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> ma<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> limit <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、数组的最小偏移量"><a href="#四、数组的最小偏移量" class="headerlink" title="四、数组的最小偏移量"></a>四、数组的最小偏移量</h2><p>给你一个由 <code>n</code> 个正整数组成的数组 <code>nums</code> 。</p><p>你可以对数组的任意元素执行任意次数的两类操作：</p><ul><li>如果元素是 <strong>偶数</strong> ，<strong>除以</strong> <code>2</code></li><li>例如，如果数组是 <code>[1,2,3,4]</code> ，那么你可以对最后一个元素执行此操作，使其变成 <code>[1,2,3,2]</code></li><li>如果元素是 <strong>奇数</strong> ，<strong>乘上</strong> <code>2</code></li><li>例如，如果数组是 <code>[1,2,3,4]</code> ，那么你可以对第一个元素执行此操作，使其变成 <code>[2,2,3,4]</code></li></ul><p>数组的 <strong>偏移量</strong> 是数组中任意两个元素之间的 <strong>最大差值</strong> 。</p><p>返回数组在执行某些操作之后可以拥有的 <strong>最小偏移量</strong> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minimumDeviation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>A<span class="token punctuation">)</span>        heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> a <span class="token keyword">in</span> A<span class="token punctuation">:</span>            a2 <span class="token operator">=</span> a            <span class="token keyword">while</span> a2 <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                a2 <span class="token operator">>></span><span class="token operator">=</span> <span class="token number">1</span>            heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> <span class="token punctuation">[</span>a2<span class="token punctuation">,</span> a<span class="token punctuation">]</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>        ma <span class="token operator">=</span> max<span class="token punctuation">(</span>a <span class="token keyword">for</span> a<span class="token punctuation">,</span> a0 <span class="token keyword">in</span> heap<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            a<span class="token punctuation">,</span> a0 <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span>            res <span class="token operator">=</span> min<span class="token punctuation">(</span>res<span class="token punctuation">,</span> ma <span class="token operator">-</span> a<span class="token punctuation">)</span>            <span class="token keyword">if</span> a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">or</span> a <span class="token operator">&lt;</span> a0<span class="token punctuation">:</span>                a <span class="token operator">*=</span> <span class="token number">2</span>                ma <span class="token operator">=</span> max<span class="token punctuation">(</span>ma<span class="token punctuation">,</span> a<span class="token punctuation">)</span>                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> a0<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">return</span> res<span class="token comment" spellcheck="true">#copy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><code>11.29</code> 好久了，又一次被吊打。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微观经济学</title>
      <link href="posts/bd56.html"/>
      <url>posts/bd56.html</url>
      
        <content type="html"><![CDATA[<ol><li>经济学：关于资源稀缺性的配置。</li><li>如何定义一个概念：通常用外延更宽的事物来定义。</li><li><strong>机会成本</strong>：为得到某种东西，而放弃的可能收益。</li><li><strong>沉没成本</strong>：指以往发生的，但与当前决策无关的费用。</li><li>禀赋效应：大多数人对于损失和获得的敏感程度不对称。<blockquote><p>假设你现在捡到了100元，你很开心；<br>走着走着，你刚捡到的100元，不知道什么时候掉了。<br>请问，这个时候你的心情？<br>大多数人的心情是痛苦的。<br>可实际上什么都没变。</p></blockquote></li></ol><p>这也适用于销售策略中：减少客户的损失厌恶。<br>6. 博弈论因素：参与者，规则，支付。<br>限制规则来改变博弈。<br>7. 纳什均衡：非合作博弈均衡。<br>如竞争者的商品定价均衡，囚徒困境。<br>8. 边际收益：增加一单位产品的销售所增加的收益，即最后一单位产品的售出所取得的收益。</p><blockquote><p>课程最后：<strong>考虑非货币机会成本，忽略沉没成本，对未来行为更加实际。</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> e-class </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mooc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次深度学习</title>
      <link href="posts/ec3h.html"/>
      <url>posts/ec3h.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><h2 id="人工智能、机器学习、深度学习"><a href="#人工智能、机器学习、深度学习" class="headerlink" title="人工智能、机器学习、深度学习"></a>人工智能、机器学习、深度学习</h2><p><code>人工智能</code>是计算机科学的一个分支，它希望了解智能的实质，并生产出一种新的能以人类智能相似的方式做出反应的智能机器，该领域的研究包括机器人、语言识别、图像识别、自然语言处理和专家系统等。<br><code>机器学习</code>是一门多领域交叉学科，是人工智能的核心。<br><code>深度学习</code>是机器学习领域中一个新的研究方向，它被引入机器学习使其更接近于最初的目标——人工智能。<br><img src="https://img-blog.csdnimg.cn/202005061919299.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="机器学习模型"><a href="#机器学习模型" class="headerlink" title="机器学习模型"></a>机器学习模型</h2><p><code>机器学习模型</code>是机器学习算法产出的结果，可以将其看作是在给定输入情况下、输出一定结果的函数。<br>机器学习模型不是预先定义好的固定函数，而是从历史数据中推导出来的。<br>机器学习的任务，就是从广阔的映射空间中学习函数。</p><h1 id="1-torch环境准备"><a href="#1-torch环境准备" class="headerlink" title="1.torch环境准备"></a>1.torch环境准备</h1><ul><li>torch  (1.6.0)</li><li>torchvision  (0.7.0)</li><li>cuda  (10.2)<br><img src="https://img-blog.csdnimg.cn/20200429183137908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center"><br>输入指令执行代码,速度不行的话复制下载链接迅雷打开，可能有惊喜<img src="https://img-blog.csdnimg.cn/20200429183453171.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center"></li></ul><p><strong>对whl文件的安装</strong>，进入文件位置，pip install <strong>____</strong>.whl</p><p>环境配好后，执行:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pythontorch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时应该返回True.</p><h1 id="2-一次baseline代码"><a href="#2-一次baseline代码" class="headerlink" title="2.一次baseline代码"></a>2.一次baseline代码</h1><h2 id="加载pytorch框架下的依赖项"><a href="#加载pytorch框架下的依赖项" class="headerlink" title="加载pytorch框架下的依赖项"></a>加载pytorch框架下的依赖项</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token punctuation">,</span> division<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">import</span> lr_scheduler<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable<span class="token keyword">import</span> torchvision<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> datasets<span class="token punctuation">,</span> models<span class="token punctuation">,</span> transforms<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加载数据集，并分为训练集和测试集"><a href="#加载数据集，并分为训练集和测试集" class="headerlink" title="加载数据集，并分为训练集和测试集"></a>加载数据集，并分为训练集和测试集</h2><pre class="line-numbers language-python"><code class="language-python">dataTrans <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>            transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            transforms<span class="token punctuation">.</span>CenterCrop<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>data_dir <span class="token operator">=</span> <span class="token string">'./images'</span>all_image_datasets <span class="token operator">=</span> datasets<span class="token punctuation">.</span>ImageFolder<span class="token punctuation">(</span>data_dir<span class="token punctuation">,</span> dataTrans<span class="token punctuation">)</span>trainsize <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token number">0.8</span><span class="token operator">*</span>len<span class="token punctuation">(</span>all_image_datasets<span class="token punctuation">)</span><span class="token punctuation">)</span>testsize <span class="token operator">=</span> len<span class="token punctuation">(</span>all_image_datasets<span class="token punctuation">)</span> <span class="token operator">-</span> trainsizetrain_dataset<span class="token punctuation">,</span> test_dataset <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>random_split<span class="token punctuation">(</span>all_image_datasets<span class="token punctuation">,</span><span class="token punctuation">[</span>trainsize<span class="token punctuation">,</span>testsize<span class="token punctuation">]</span><span class="token punctuation">)</span>image_datasets <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'train'</span><span class="token punctuation">:</span>train_dataset<span class="token punctuation">,</span><span class="token string">'val'</span><span class="token punctuation">:</span>test_dataset<span class="token punctuation">}</span>dataloders <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>image_datasets<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>                                                 batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>                                                 shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                                 num_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'val'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>dataset_sizes <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> len<span class="token punctuation">(</span>image_datasets<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'val'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># use gpu or not</span>use_gpu <span class="token operator">=</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train_model</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> lossfunc<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> scheduler<span class="token punctuation">,</span> num_epochs<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    best_model_wts <span class="token operator">=</span> model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    best_acc <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch {}/{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> num_epochs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Each epoch has a training and validation phase</span>        <span class="token keyword">for</span> phase <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'val'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> phase <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">:</span>                scheduler<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Set model to training mode</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Set model to evaluate mode</span>            running_loss <span class="token operator">=</span> <span class="token number">0.0</span>            running_corrects <span class="token operator">=</span> <span class="token number">0.0</span>            <span class="token comment" spellcheck="true"># Iterate over data.</span>            <span class="token keyword">for</span> data <span class="token keyword">in</span> dataloders<span class="token punctuation">[</span>phase<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># get the inputs</span>                inputs<span class="token punctuation">,</span> labels <span class="token operator">=</span> data                <span class="token comment" spellcheck="true"># wrap them in Variable</span>                <span class="token keyword">if</span> use_gpu<span class="token punctuation">:</span>                    inputs <span class="token operator">=</span> Variable<span class="token punctuation">(</span>inputs<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    labels <span class="token operator">=</span> Variable<span class="token punctuation">(</span>labels<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    inputs<span class="token punctuation">,</span> labels <span class="token operator">=</span> Variable<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">,</span> Variable<span class="token punctuation">(</span>labels<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># zero the parameter gradients</span>                optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># forward</span>                outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>                _<span class="token punctuation">,</span> preds <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                loss <span class="token operator">=</span> lossfunc<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># backward + optimize only if in training phase</span>                <span class="token keyword">if</span> phase <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">:</span>                    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>                    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># statistics</span>                running_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>data                running_corrects <span class="token operator">+=</span> torch<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>preds <span class="token operator">==</span> labels<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>            epoch_loss <span class="token operator">=</span> running_loss <span class="token operator">/</span> dataset_sizes<span class="token punctuation">[</span>phase<span class="token punctuation">]</span>            epoch_acc <span class="token operator">=</span> running_corrects <span class="token operator">/</span> dataset_sizes<span class="token punctuation">[</span>phase<span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{} Loss: {:.4f} Acc: {:.4f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>                phase<span class="token punctuation">,</span> epoch_loss<span class="token punctuation">,</span> epoch_acc<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># deep copy the model</span>            <span class="token keyword">if</span> phase <span class="token operator">==</span> <span class="token string">'val'</span> <span class="token operator">and</span> epoch_acc <span class="token operator">></span> best_acc<span class="token punctuation">:</span>                best_acc <span class="token operator">=</span> epoch_acc                best_model_wts <span class="token operator">=</span> model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    elapsed_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Training complete in {:.0f}m {:.0f}s'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>        elapsed_time <span class="token operator">//</span> <span class="token number">60</span><span class="token punctuation">,</span> elapsed_time <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Best val Acc: {:4f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>best_acc<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># load best model weights</span>    model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>best_model_wts<span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span class="token comment" spellcheck="true"># get model and replace the original fc layer with your fc layer</span>model_ft <span class="token operator">=</span> models<span class="token punctuation">.</span>resnet50<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>num_ftrs <span class="token operator">=</span> model_ft<span class="token punctuation">.</span>fc<span class="token punctuation">.</span>in_featuresmodel_ft<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_ftrs<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">if</span> use_gpu<span class="token punctuation">:</span>    model_ft <span class="token operator">=</span> model_ft<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># define loss function</span>lossfunc <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setting optimizer and trainable parameters</span> <span class="token comment" spellcheck="true">#   params = model_ft.parameters()</span> <span class="token comment" spellcheck="true"># list(model_ft.fc.parameters())+list(model_ft.layer4.parameters())</span><span class="token comment" spellcheck="true">#params = list(model_ft.fc.parameters())+list( model_ft.parameters())</span>params <span class="token operator">=</span> list<span class="token punctuation">(</span>model_ft<span class="token punctuation">.</span>fc<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>optimizer_ft <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>params<span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Decay LR by a factor of 0.1 every 7 epochs</span>exp_lr_scheduler <span class="token operator">=</span> lr_scheduler<span class="token punctuation">.</span>StepLR<span class="token punctuation">(</span>optimizer_ft<span class="token punctuation">,</span> step_size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>model_ft <span class="token operator">=</span> train_model<span class="token punctuation">(</span>model<span class="token operator">=</span>model_ft<span class="token punctuation">,</span>                           lossfunc<span class="token operator">=</span>lossfunc<span class="token punctuation">,</span>                           optimizer<span class="token operator">=</span>optimizer_ft<span class="token punctuation">,</span>                           scheduler<span class="token operator">=</span>exp_lr_scheduler<span class="token punctuation">,</span>                           num_epochs<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是训练过程产生的输出：</p><pre class="line-numbers language-python"><code class="language-python">Epoch <span class="token number">0</span><span class="token operator">/</span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>C<span class="token punctuation">:</span>\Users\<span class="token number">16413</span>\anaconda3\lib\site<span class="token operator">-</span>packages\torch\optim\lr_scheduler<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">123</span><span class="token punctuation">:</span> UserWarning<span class="token punctuation">:</span> Detected call of `lr_scheduler<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>` before `optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>`<span class="token punctuation">.</span> In PyTorch <span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">0</span> <span class="token operator">and</span> later<span class="token punctuation">,</span> you should call them <span class="token keyword">in</span> the opposite order<span class="token punctuation">:</span> `optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>` before `lr_scheduler<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>`<span class="token punctuation">.</span>  Failure to do this will result <span class="token keyword">in</span> PyTorch skipping the first value of the learning rate schedule<span class="token punctuation">.</span> See more details at https<span class="token punctuation">:</span><span class="token operator">//</span>pytorch<span class="token punctuation">.</span>org<span class="token operator">/</span>docs<span class="token operator">/</span>stable<span class="token operator">/</span>optim<span class="token punctuation">.</span>html<span class="token comment" spellcheck="true">#how-to-adjust-learning-rate</span>    <span class="token string">"https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate"</span><span class="token punctuation">,</span> UserWarning<span class="token punctuation">)</span>train Loss<span class="token punctuation">:</span> <span class="token number">0.0750</span> Acc<span class="token punctuation">:</span> <span class="token number">0.6700</span>val Loss<span class="token punctuation">:</span> <span class="token number">0.0436</span> Acc<span class="token punctuation">:</span> <span class="token number">0.8200</span>Epoch <span class="token number">1</span><span class="token operator">/</span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>train Loss<span class="token punctuation">:</span> <span class="token number">0.0399</span> Acc<span class="token punctuation">:</span> <span class="token number">0.8250</span>val Loss<span class="token punctuation">:</span> <span class="token number">0.0345</span> Acc<span class="token punctuation">:</span> <span class="token number">0.8470</span>Epoch <span class="token number">2</span><span class="token operator">/</span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>train Loss<span class="token punctuation">:</span> <span class="token number">0.0330</span> Acc<span class="token punctuation">:</span> <span class="token number">0.8473</span>val Loss<span class="token punctuation">:</span> <span class="token number">0.0303</span> Acc<span class="token punctuation">:</span> <span class="token number">0.8610</span>Epoch <span class="token number">3</span><span class="token operator">/</span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>train Loss<span class="token punctuation">:</span> <span class="token number">0.0300</span> Acc<span class="token punctuation">:</span> <span class="token number">0.8575</span>val Loss<span class="token punctuation">:</span> <span class="token number">0.0293</span> Acc<span class="token punctuation">:</span> <span class="token number">0.8650</span>Epoch <span class="token number">4</span><span class="token operator">/</span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>train Loss<span class="token punctuation">:</span> <span class="token number">0.0288</span> Acc<span class="token punctuation">:</span> <span class="token number">0.8643</span>val Loss<span class="token punctuation">:</span> <span class="token number">0.0281</span> Acc<span class="token punctuation">:</span> <span class="token number">0.8750</span>Training complete <span class="token keyword">in</span> 6m 31sBest val Acc<span class="token punctuation">:</span> <span class="token number">0.875000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存模型，任务完成：</p><pre class="line-numbers language-python"><code class="language-python">torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model_ft<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'./model.pth'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> modelarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调用API</title>
      <link href="posts/ec3f.html"/>
      <url>posts/ec3f.html</url>
      
        <content type="html"><![CDATA[<p>代码包含</p><ul><li>use-api.py </li><li>post.py</li><li>get-token.py</li></ul><h3 id="use-api-py"><a href="#use-api-py" class="headerlink" title="use-api.py"></a>use-api.py</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> postname <span class="token operator">=</span> <span class="token string">" "</span> password <span class="token operator">=</span> <span class="token string">" "</span>api_url <span class="token operator">=</span> <span class="token string">" "</span> <span class="token comment" spellcheck="true"># api地址</span>image_path <span class="token operator">=</span> r<span class="token string">"timg.jpg"</span>  <span class="token comment" spellcheck="true"># 图像文件完整路径</span><span class="token comment" spellcheck="true"># 发送请求</span>r <span class="token operator">=</span> post<span class="token punctuation">.</span>main<span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> api_url<span class="token punctuation">,</span> image_path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="post-py"><a href="#post-py" class="headerlink" title="post.py"></a>post.py</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> os<span class="token keyword">import</span> get_token<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> api_url<span class="token punctuation">,</span> image_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    image_name <span class="token operator">=</span> image_path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 查看本地是否存在token</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"token.txt"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"token.txt"</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            token <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 调用get_token.py中的函数获取token</span>        token <span class="token operator">=</span> get_token<span class="token punctuation">.</span>main<span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 缓存token以便下次使用</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"token.txt"</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>token<span class="token punctuation">)</span>    <span class="token keyword">if</span> token <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"token获取错误"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        header <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"X-Auth-Token"</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span>                <span class="token punctuation">}</span>        files <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"images"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>image_name<span class="token punctuation">,</span> open<span class="token punctuation">(</span>image_path<span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'image/png'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>        z <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>                    api_url<span class="token punctuation">,</span>                    headers <span class="token operator">=</span> header<span class="token punctuation">,</span>                    files<span class="token operator">=</span>files<span class="token punctuation">,</span>                    verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                    <span class="token punctuation">)</span>        <span class="token keyword">if</span> z<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> z<span class="token punctuation">.</span>text        <span class="token keyword">elif</span> len<span class="token punctuation">(</span>z<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> z<span class="token punctuation">.</span>text        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"程序错误"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">" "</span>         <span class="token comment" spellcheck="true"># 用户名</span>    password <span class="token operator">=</span> <span class="token string">" "</span> <span class="token comment" spellcheck="true"># 密码</span>    api_url <span class="token operator">=</span> <span class="token string">" "</span> <span class="token comment" spellcheck="true"># api地址</span>    image_path <span class="token operator">=</span> r<span class="token string">"test.jpg"</span>  <span class="token comment" spellcheck="true"># 图像文件完整路径</span>    r <span class="token operator">=</span> main<span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> api_url<span class="token punctuation">,</span> image_path<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="get-token-py"><a href="#get-token-py" class="headerlink" title="get-token.py"></a>get-token.py</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> domain_name<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> region<span class="token operator">=</span><span class="token string">"cn-north-4"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> domain_name <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>        domain_name <span class="token operator">=</span> name    urls <span class="token operator">=</span> <span class="token string">"https://iam."</span> <span class="token operator">+</span> region <span class="token operator">+</span> <span class="token string">".myhuaweicloud.com/v3/auth/tokens"</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"PostmanRuntime/7.24.1"</span><span class="token punctuation">,</span>        <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json;charset=utf8"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    json_data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"auth"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"identity"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"methods"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"user"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                        <span class="token string">"name"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>                        <span class="token string">"password"</span><span class="token punctuation">:</span> password<span class="token punctuation">,</span>                        <span class="token string">"domain"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                            <span class="token string">"name"</span><span class="token punctuation">:</span> domain_name<span class="token punctuation">,</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"scope"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"project"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"name"</span><span class="token punctuation">:</span> region                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    z <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>                    url <span class="token operator">=</span> urls<span class="token punctuation">,</span>                    headers <span class="token operator">=</span> header<span class="token punctuation">,</span>                    json <span class="token operator">=</span> json_data<span class="token punctuation">,</span>                    verify <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>                    <span class="token punctuation">)</span>    <span class="token keyword">if</span> z<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">201</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> z<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"X-Subject-Token"</span><span class="token punctuation">]</span>    <span class="token keyword">elif</span> z<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">401</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">''</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">' '</span>         <span class="token comment" spellcheck="true"># 用户名</span>    password <span class="token operator">=</span> <span class="token string">' '</span>     <span class="token comment" spellcheck="true"># 密码</span><span class="token comment" spellcheck="true">#    domain_name = ' '  # 可选，所属账号，默认为用户名</span><span class="token comment" spellcheck="true">#    region="cn-north-4"     # 可选，使用区域</span>    token <span class="token operator">=</span> main<span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">)</span>    <span class="token keyword">if</span> token <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><ol><li>将name,password,api_url更改，即可进行API的调用。</li><li>一段代码：<pre class="line-numbers language-python"><code class="language-python">z<span class="token operator">=</span>request<span class="token punctuation">.</span>post<span class="token punctuation">(</span>api_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span>files<span class="token operator">=</span>files<span class="token punctuation">,</span>verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">if</span> z<span class="token punctuation">.</span>status_code <span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">:</span>   <span class="token keyword">return</span> z<span class="token punctuation">.</span>text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>比较难理解的是那个get-token，查阅Modelarts文档的json格式。<br>再利用requests进行post</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> modelarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib模块</title>
      <link href="posts/c78f.html"/>
      <url>posts/c78f.html</url>
      
        <content type="html"><![CDATA[<p><code>import matplotlib.pyplot as plt</code></p><p>这是<strong>框架</strong>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true">#解决中文乱码问题</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.family'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Microsoft YaHei'</span><span class="token punctuation">]</span>x<span class="token operator">=</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span>y<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">5</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'测试'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'哈哈'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最重要的plot"><a href="#最重要的plot" class="headerlink" title="最重要的plot()"></a>最重要的plot()</h2><p><code>plt.plot(x,y,format_string,**kwargs)</code></p><ul><li><code>format_string</code>,控制曲线的格式字符串，可选</li><li><code>**kwargs</code>,第二组或更多<code>(x,y,format_string)</code>，可选</li></ul><p><strong>format_string</strong></p><ol><li>颜色字符</li><li>风格字符<br><code>&#39;-&#39;</code>，实线<br><code>&#39;--&#39;</code>，破折线<br><code>&#39;-.&#39;</code>，点划线<br><code>&#39;:&#39;</code>，虚线<br><code>&#39;.&#39;</code>，点标记<br><code>&#39;,&#39;</code>，像素标记<br><code>&#39;o&#39;</code>，实心圆标记<br><code>&#39;v&#39;</code> <code>&#39;^&#39;</code>，三角标记<br><code>&#39;x&#39;</code>,<code>&#39;*&#39;</code></li></ol><h2 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>plt.plot()</code></td><td>绘制一个坐标图</td></tr><tr><td><code>plt.boxplot()</code></td><td>绘制一个箱型图</td></tr><tr><td><code>plt.bar()</code></td><td>绘制一个条形图</td></tr><tr><td><code>plt.barh()</code></td><td>绘制一个横向条形图</td></tr><tr><td><code>plt.hist()</code></td><td>绘制直方图</td></tr><tr><td><code>plt.polar()</code></td><td>绘制极坐标图</td></tr><tr><td><code>plt.pie()</code></td><td>绘制饼图</td></tr><tr><td><code>plt.psd()</code></td><td>绘制功率谱密度图</td></tr><tr><td><code>plt.specgram()</code></td><td>绘制谱图</td></tr><tr><td><code>plt.cohere()</code></td><td>绘制相关性函数</td></tr><tr><td><code>plt.scatter()</code></td><td>绘制散点图</td></tr><tr><td><code>plt.step()</code></td><td>绘制步阶图</td></tr></tbody></table><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol><li><code>sorted([f.name for f in matplotlib.font_manager.fontManager.ttflist])</code>，查看电脑字体</li><li>中文显示<br>方法一： <code>plt.rcParams[&#39;font.family&#39;]</code>，<code>font.size</code>，<br>方法二： 在中文输出的地方，添加属性<code>fornproperties=&#39;  &#39;</code>，<code>fontsize</code></li><li><code>plt.savefig(&#39;foo&#39;,dpi=600)</code>，默认输出png文件</li><li><code>plt.subplot(nrows,ncols,plot_number)</code>，在全局绘图区域中创建分区体系,并进入</li><li><code>plt.grid(True)</code>，显示网格</li><li><code>plt.axis([x0,x1,y0,y1])</code>，坐标轴跨度</li><li><code>plt.annotate()</code>，在图形中增加带箭头的注解</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文基于官方文档，和mooc一门课的笔记。<br>还很杂乱，需要重学时再整理。<br>感觉这个模块和EXCEL的可视化功能重叠了。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy模块</title>
      <link href="posts/48ab.html"/>
      <url>posts/48ab.html</url>
      
        <content type="html"><![CDATA[<p><code>NumPy</code> is the fundamental package for <strong>scientific computing</strong> in Python.</p><h2 id="ndarray"><a href="#ndarray" class="headerlink" title="ndarray"></a>ndarray</h2><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>.ndim</code></td><td>秩，即轴的数量或维度的数量</td></tr><tr><td><code>.shape</code></td><td>n行m列</td></tr><tr><td><code>.size</code></td><td>n*m个数</td></tr><tr><td><code>.dtype</code></td><td>元素类型</td></tr><tr><td><code>.itemsize</code></td><td>元素大小，单位：字节</td></tr></tbody></table><p>ndarray数组可以由非同质对象构成。<br>非同质ndarray元素为对象类型，<code>dtype(&#39;O&#39;)</code></p><h3 id="（1）创建方法"><a href="#（1）创建方法" class="headerlink" title="（1）创建方法"></a>（1）创建方法</h3><ol><li><code>np.array(list/tuple,dtype=np.float32)</code></li><li><code>np.arange(n)</code></li><li><code>np.ones(shape)</code></li><li><code>np.zeros(shape)</code></li><li><code>np.full(shape,val)</code></li><li><code>np.eye(n)</code></li><li><code>np.ones_like(a)</code></li><li><code>np.zeros_like(a)</code></li><li><code>np.full_like(a,val)</code></li><li><code>np.linspace(n,m,k,endpoint=True)</code></li><li><code>np.concatenate()</code> </li></ol><h3 id="（2）变换方法"><a href="#（2）变换方法" class="headerlink" title="（2）变换方法"></a>（2）变换方法</h3><ol><li><code>a.reshape(shape)</code>，对a<code>reshape</code>,返回shape形状数组</li><li><code>a.resize(shape)</code>，同<code>reshape</code>，但修改原数组</li><li><code>a.swapaxes(ax1,ax2)</code>，调换维度</li><li><code>a.flatten()</code>，降维，不改变a</li><li><code>new_a=a.astype(new_type)</code></li><li><code>a.tolist()</code></li></ol><h3 id="（3）操作方法"><a href="#（3）操作方法" class="headerlink" title="（3）操作方法"></a>（3）操作方法</h3><ol><li>索引切片同1维，多维间用 <code>,</code> </li><li><code>:</code> 可选取整个维度</li></ol><h3 id="（4）运算方法"><a href="#（4）运算方法" class="headerlink" title="（4）运算方法"></a>（4）运算方法</h3><ol><li><code>a.mean()</code></li><li>元素群运算：<code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>**</code><br><code>np.maxmum(x,y)</code><br><code>np.minimum(x,y)</code><br>算术比较，返回bool值</li><li><code>np.abs()</code>，<code>np.fabs()</code></li><li><code>np.sqrt()</code>，<code>np.square()</code></li><li><code>np.log()</code>，<code>np.log2()</code></li><li><code>np.ceil()</code>，<code>np.floor()</code> </li><li><code>np.rint()</code>，四舍五入</li><li><code>np.sin()</code>···</li><li><code>np.exp()</code>，计算指数</li><li><code>np.sign()</code>，返回1，0，-1 </li></ol><p><strong>实践</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npnp<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#-->array([0, 1, 2, 3, 4])</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">#-->array([[1., 1.],1., 1.]])</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#-->array([ 1.,  4.,  7., 10.])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="（1）random函数"><a href="#（1）random函数" class="headerlink" title="（1）random函数"></a>（1）random函数</h3><ol><li><code>np.random.uniform(low,high,size)</code><br>产生均匀分布数组</li><li><code>np.random.normal(loc,scale,size)</code><br>产生正态分布数组，<code>loc</code>均值，<code>scale</code>标准差</li><li><code>np.random.poisson(lam,size)</code><br>产生泊松分布数组，<code>lam</code>随机事件发生概率</li></ol><h3 id="（2）统计函数"><a href="#（2）统计函数" class="headerlink" title="（2）统计函数"></a>（2）统计函数</h3><ol><li><code>.sum(a,axis=None)</code></li><li><code>.mean(a,axis=None)</code>，计算期望</li><li><code>.average(a,axis=None,weights=None)</code>，计算加权平均</li><li><code>.std(a,axis=None)</code>，计算标准差</li><li><code>.var(a,axis=None)</code>，计算方差</li></ol><h3 id="（3）梯度函数"><a href="#（3）梯度函数" class="headerlink" title="（3）梯度函数"></a>（3）梯度函数</h3><ol><li><code>np.gradient(f)</code>,计算斜率</li></ol><h3 id="（4）文件读写"><a href="#（4）文件读写" class="headerlink" title="（4）文件读写"></a>（4）文件读写</h3><p><strong>一维或二维</strong></p><ol><li><code>np.savetxt(frame,array,fmt,delimiter=None)</code><br>其中delimiter应该为 <code>,</code><br>eg. <code>np.savetxt(&#39;foo.csv&#39;,a,fmt=&#39;%d&#39;,delimiter=&#39;,&#39;)</code></li><li><code>np.loadtxt(frame,dtype=np.float,delimiter=None,unpack=False)</code></li></ol><p><strong>多维</strong></p><ol><li><code> a.tofile()</code></li><li><code>np.fromfile</code> </li><li><code>np.save()</code>,npy文件</li><li><code>np.load()</code></li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文基于官方文档，和mooc一门课的笔记。<br>还很杂乱，需要重学时再整理。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 这是课程代码的copy:</span><span class="token comment" spellcheck="true"># （对图片进行手绘风格转变）</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'./beijing.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float'</span><span class="token punctuation">)</span>depth <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">.</span>                      <span class="token comment" spellcheck="true"># (0-100)</span>grad <span class="token operator">=</span> np<span class="token punctuation">.</span>gradient<span class="token punctuation">(</span>a<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">#取图像灰度的梯度值</span>grad_x<span class="token punctuation">,</span> grad_y <span class="token operator">=</span> grad               <span class="token comment" spellcheck="true">#分别取横纵图像梯度值</span>grad_x <span class="token operator">=</span> grad_x<span class="token operator">*</span>depth<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">.</span>grad_y <span class="token operator">=</span> grad_y<span class="token operator">*</span>depth<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">.</span>A <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>grad_x<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> grad_y<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">)</span>uni_x <span class="token operator">=</span> grad_x<span class="token operator">/</span>Auni_y <span class="token operator">=</span> grad_y<span class="token operator">/</span>Auni_z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token operator">/</span>Avec_el <span class="token operator">=</span> np<span class="token punctuation">.</span>pi<span class="token operator">/</span><span class="token number">2.2</span>                   <span class="token comment" spellcheck="true"># 光源的俯视角度，弧度值</span>vec_az <span class="token operator">=</span> np<span class="token punctuation">.</span>pi<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">.</span>                    <span class="token comment" spellcheck="true"># 光源的方位角度，弧度值</span>dx <span class="token operator">=</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>vec_el<span class="token punctuation">)</span><span class="token operator">*</span>np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>vec_az<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#光源对x 轴的影响</span>dy <span class="token operator">=</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>vec_el<span class="token punctuation">)</span><span class="token operator">*</span>np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>vec_az<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#光源对y 轴的影响</span>dz <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>vec_el<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">#光源对z 轴的影响</span>b <span class="token operator">=</span> <span class="token number">255</span><span class="token operator">*</span><span class="token punctuation">(</span>dx<span class="token operator">*</span>uni_x <span class="token operator">+</span> dy<span class="token operator">*</span>uni_y <span class="token operator">+</span> dz<span class="token operator">*</span>uni_z<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#光源归一化</span>b <span class="token operator">=</span> b<span class="token punctuation">.</span>clip<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span>im <span class="token operator">=</span> Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>b<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'uint8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#重构图像</span>im<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'./beijingHD.jpg'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas模块</title>
      <link href="posts/c3aa.html"/>
      <url>posts/c3aa.html</url>
      
        <content type="html"><![CDATA[<p><code>Pandas</code> 是 Python 的<strong>核心数据分析支持库</strong>，是 Python 中统计计算生态系统的重要组成部分。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>一维的<code>Series</code>和二维的  <code>DataFrame</code></p><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>，index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0    1</span><span class="token comment" spellcheck="true"># 1    2</span><span class="token comment" spellcheck="true"># 2    3</span><span class="token comment" spellcheck="true"># dtype: int64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建方法:</strong></p><ol><li>同上</li><li>字典</li></ol><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Empty DataFrame</span><span class="token comment" spellcheck="true"># Columns: []</span><span class="token comment" spellcheck="true"># Index: []</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">dates<span class="token operator">=</span>pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span><span class="token string">'20200511'</span><span class="token punctuation">,</span>periods<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>dates<span class="token comment" spellcheck="true"># DatetimeIndex(['2020-05-11', '2020-05-12', '2020-05-13'], dtype='datetime64[ns]', freq='D')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span>dates<span class="token punctuation">,</span>columns<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th></th><th>a</th><th>b</th><th>c</th><th>d</th></tr></thead><tbody><tr><td>2020-05-11</td><td>-1.712588</td><td>0.403376</td><td>-0.152608</td><td>-0.428465</td></tr><tr><td>2020-05-12</td><td>-1.259988</td><td>-0.310385</td><td>-0.816578</td><td>0.321397</td></tr><tr><td>2020-05-13</td><td>-0.444678</td><td>-1.894342</td><td>0.172485</td><td>0.717187</td></tr></tbody></table><h3 id="1-查看数据"><a href="#1-查看数据" class="headerlink" title="(1)查看数据"></a>(1)查看数据</h3><ul><li><code>df.head()</code>，k值默认为5.</li><li><code>df.tail()</code>，k值默认为5</li><li><code>df.index</code></li><li><code>df.columns</code></li></ul><h3 id="2-选择"><a href="#2-选择" class="headerlink" title="(2)选择"></a>(2)选择</h3><ol><li>获取单列，<code>df.a</code>与<code>df[&#39;a&#39;]</code>等效</li><li>获取行，用 [ ] 切片行</li><li>按标签选择</li><li>按位置选择</li></ol><h3 id="3-操作"><a href="#3-操作" class="headerlink" title="(3)操作"></a>(3)操作</h3><ol><li><code>Series</code>操作类似字典类型，含：保留字<code>in</code>操作、<code>.get(key,default=None)</code>方法</li><li><code>.reindex()</code>，改变或重排<code>Series</code>或<code>DataFrame</code>索引数据输入输出</li><li><code>.drop()</code>，删除<code>Series</code>或<code>DataFrame</code>指定行或列索引，默认0轴(竖的)</li></ol><h3 id="4-运算"><a href="#4-运算" class="headerlink" title="(4)运算"></a>(4)运算</h3><ol><li><strong>算术运算</strong>根据行列索引，补齐后运算，运算默认产生浮点数。</li><li>补齐时缺项填充NaN(空值)</li><li>不同维度数据间运算为广播运算</li><li><code>+</code> 或 <code>b.add(a,fill_value=NaN)</code></li><li><strong>比较运算</strong></li></ol><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ol><li><code>.sort_index(axis=0,ascending=True)</code>，根据索引排序，默认升序</li><li><code>Series.sort_values(axis=0,ascending=True)</code><br><code>DataFrame.sort_values(by,axis=0,ascending=True)</code></li></ol><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h6 id="CSV："><a href="#CSV：" class="headerlink" title="CSV："></a>CSV：</h6><ul><li><code>df.to_csv(&#39;___.csv&#39;)</code></li><li><code>pd.read_csv(&#39;___.csv&#39;)</code></li></ul><h6 id="Excel："><a href="#Excel：" class="headerlink" title="Excel："></a>Excel：</h6><ul><li><code>df.to_excel(&#39;___.xlsx&#39;, sheet_name=&#39;Sheet1&#39;)</code></li><li><code>pd.read_excel(&#39;___.xlsx&#39;, &#39;Sheet1&#39;, index_col=None, na_values=[&#39;NA&#39;])</code></li></ul><h2 id="统计分析"><a href="#统计分析" class="headerlink" title="统计分析"></a>统计分析</h2><ol><li>对数据<code>.describe()</code>，能得到很多信息。</li><li><code>.cov()</code>，计算协方差矩阵。</li><li><code>.corr()</code>，计算相关系数矩阵。</li></ol><p><strong>实践</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npb<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>4.000000</td>      <td>4.000000</td>      <td>4.000000</td>      <td>4.000000</td>      <td>4.000000</td>    </tr>    <tr>      <th>mean</th>      <td>7.500000</td>      <td>8.500000</td>      <td>9.500000</td>      <td>10.500000</td>      <td>11.500000</td>    </tr>    <tr>      <th>std</th>      <td>6.454972</td>      <td>6.454972</td>      <td>6.454972</td>      <td>6.454972</td>      <td>6.454972</td>    </tr>    <tr>      <th>min</th>      <td>0.000000</td>      <td>1.000000</td>      <td>2.000000</td>      <td>3.000000</td>      <td>4.000000</td>    </tr>    <tr>      <th>25%</th>      <td>3.750000</td>      <td>4.750000</td>      <td>5.750000</td>      <td>6.750000</td>      <td>7.750000</td>    </tr>    <tr>      <th>50%</th>      <td>7.500000</td>      <td>8.500000</td>      <td>9.500000</td>      <td>10.500000</td>      <td>11.500000</td>    </tr>    <tr>      <th>75%</th>      <td>11.250000</td>      <td>12.250000</td>      <td>13.250000</td>      <td>14.250000</td>      <td>15.250000</td>    </tr>    <tr>      <th>max</th>      <td>15.000000</td>      <td>16.000000</td>      <td>17.000000</td>      <td>18.000000</td>      <td>19.000000</td>    </tr>  </tbody></table></div><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>官方文档：<a href="https://pandas.pydata.org/pandas-docs/stable/index.html" target="_blank" rel="noopener">https://pandas.pydata.org/pandas-docs/stable/index.html</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于HTTP理解</title>
      <link href="posts/ea97.html"/>
      <url>posts/ea97.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>HTTP是一个请求-响应协议，是两点间传输超文本数据的约定和规范。</p></blockquote><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><table><thead><tr><th>状态码</th><th>描述</th></tr></thead><tbody><tr><td>1XX</td><td>表示目前是协议处理中间状态</td></tr><tr><td>2XX</td><td>成功，报文已接受且正确处理</td></tr><tr><td>3XX</td><td>重定向，资源位置发生变动</td></tr><tr><td>4XX</td><td>客户端错误，请求报文有误，服务器无法处理</td></tr><tr><td>5XX</td><td>服务器处理请求时发生错误</td></tr></tbody></table><h2 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h2><pre class="line-numbers language-bash"><code class="language-bash">GET /admin_ui/rdx/core/images/close.png HTTP/1.1Accept: */*Referer: http://xxx.xxx.xxx.xxx/menu/neoAccept-Language: en-USUser-Agent: Mozilla/4.0 <span class="token punctuation">(</span>compatible<span class="token punctuation">;</span> MSIE 7.0<span class="token punctuation">;</span> Windows NT 6.1<span class="token punctuation">;</span> WOW64<span class="token punctuation">;</span> Trident/7.0<span class="token punctuation">;</span> SLCC2<span class="token punctuation">;</span> .NET CLR 2.0.50727<span class="token punctuation">;</span> .NET CLR 3.5.30729<span class="token punctuation">;</span> .NET CLR 3.0.30729<span class="token punctuation">;</span> .NET4.0C<span class="token punctuation">;</span> .NET4.0E<span class="token punctuation">)</span>Accept-Encoding: gzip, deflateHost: xxx.xxx.xxx.xxxConnection: Keep-AliveCookie: startupapp<span class="token operator">=</span>neo<span class="token punctuation">;</span> is_cisco_platform<span class="token operator">=</span>0<span class="token punctuation">;</span> rdx_pagination_size<span class="token operator">=</span>250%20Per%20Page<span class="token punctuation">;</span> SESSID<span class="token operator">=</span>deb31b8eb9ca68a514cf55777744e339<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HTTP版本"><a href="#HTTP版本" class="headerlink" title="HTTP版本"></a>HTTP版本</h2><table><thead><tr><th>版本</th><th>信息</th></tr></thead><tbody><tr><td>1.0</td><td>每发起一次请求，都要建立一次TCP链接（三次握手）</td></tr><tr><td>1.1</td><td>①提出了长连接通信方式，减少TCP连接开销 。②管道网络传输，减少整体效应时间</td></tr><tr><td>2.0</td><td></td></tr></tbody></table><blockquote><p>http无状态、明文传输、不安全</p></blockquote><blockquote><p>http无法验证报文完整性、不验证通信方身份</p></blockquote><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>在TCP和HTTP网络层之间加入了SSL/TLS安全协议<br>①加密（Encryption)<br>②身份认证（Authentication)<br>③数据一致性 （Data integrity)</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂货区</title>
      <link href="posts/5bf8.html"/>
      <url>posts/5bf8.html</url>
      
        <content type="html"><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a><em>HTML</em></h2><p>markdown中支持html语句。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 使用font来更改字体样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>verdana<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 或则使用p来更改字体样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-family</span><span class="token punctuation">:</span>verdana<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">80%</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>green</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is a paragraph with some text in it.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- p 中 align="right" 可以更改位置 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 使用img来更改图片大小 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片路径<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">zoom</span><span class="token punctuation">:</span><span class="token number">50%</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>彩虹字体生成器：<a href="https://www.qqxiuzi.cn/zh/caihongzi/index.htm" target="_blank" rel="noopener">https://www.qqxiuzi.cn/zh/caihongzi/index.htm</a></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mystyle.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>hello,html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是一个标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- br表示换行 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- hr创建水平线 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="kmp"><a href="#kmp" class="headerlink" title="kmp"></a><em>kmp</em></h2><p>kmp是一个效率非常高的<strong>字符串匹配</strong>算法。<br>有问题如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#求b在a中出现次数</span>a <span class="token operator">=</span> <span class="token string">"ababacababadababadadda"</span>b <span class="token operator">=</span> <span class="token string">"ababad"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>kmp可以将暴力法的<code>O(m*n)</code>降低为<code>O(m+n)</code></p><p><strong>过程:</strong></p><ol><li><strong>计算temp数组</strong><br>temp数组可理解为一组b中相同前后缀的标记(不能为本身长度)<blockquote><p><code>b = &quot;ababad&quot;</code><br>对第一位<code>&#39;a&#39;</code>，没有相同前后缀，<code>temp[0] = 0</code><br>对第二位<code>&#39;ab&#39;</code>，<code>temp[1] = 0</code><br>对第三位<code>’aba&#39;</code>，<code>temp[2] = 1</code><br>以此类推，<code>temp= [0,0,1,2,3,0]</code></p></blockquote></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cal_temp</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#K是一个对相同前后缀的标记</span>    temp<span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span>    <span class="token comment" spellcheck="true">#从索引1处开始遍历</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> k<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>            k<span class="token operator">=</span>temp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>            k<span class="token operator">+=</span><span class="token number">1</span>        temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token keyword">return</span> temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析一下代码：</p><blockquote><ul><li><code>i=1</code>时，’ab’，b[1]!=b[0]，temp.append(0)</li><li><code>i=2</code>时，’aba’，b[2]==b[0]，temp.append(1)</li><li><code>i=3</code>时，’abab’，b[3]==b[1]，temp.append(2)</li><li><code>i=4</code>时，’ababa’，b[4]==b[2]，temp.append(3)</li><li><code>i=5</code>时，’ababad’，temp=[0,0,1,2,3]<br>b[5]!=b[3]，k=temp[3-1]=1<br>b[5]!=b[1]，k=temp[1-1]=0<br>temp.append(0)</li></ul></blockquote><p>发现比较难理解的是那个回溯的地方：<code>k=temp[k-1]</code><br>没事，把<code>i=5</code>的情况再分析一下：</p><blockquote><p><code>i=5</code>时，’ababad’，temp=[0,0,1,2,3]，k=3</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200514161345927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70"></p><blockquote><p>aba and aba can match,k=3<br>a and a can match,k=(aba的匹配数1,即temp[k-1])<br>more explain: aba can see as a and a,the first <code>a</code> can match the fourth <code>a</code></p></blockquote><ol start="2"><li><strong>kmp</strong><br>打完上面的怪，就可以直接写kmp了</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">kmp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp<span class="token operator">=</span>cal_temp<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    ans<span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> k<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>            k<span class="token operator">=</span>temp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>            k<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">if</span> k<span class="token operator">==</span>len<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token operator">+=</span><span class="token number">1</span>            k<span class="token operator">=</span>temp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> num<span class="token comment" spellcheck="true">#小结：利用已匹配的信息，迈出比较大的步子。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="all-fine"><a href="#all-fine" class="headerlink" title="all fine"></a><em>all fine</em></h2><h5 id="①代码块快捷操作："><a href="#①代码块快捷操作：" class="headerlink" title="①代码块快捷操作："></a>①代码块快捷操作：</h5><ul><li>拉选块之后，按下 <code>tab</code> 键，整个块就会缩进</li><li>按下 <code>shift + tab</code> 就会反向缩进</li><li>选中块后，<code>ctrl+/</code> 集体注释</li><li>vscode，jupyter中都可用</li></ul><h5 id="②大一python："><a href="#②大一python：" class="headerlink" title="②大一python："></a>②大一python：</h5><ul><li>定义函数时，带默认参数的必须出现在参数列表最右边</li><li>多行注释<code>&#39;&#39;&#39;  &#39;&#39;&#39;</code></li><li><code>eval()</code>执行字符串表达式</li><li><code>print(&quot;:2f&quot;.format())</code></li><li><code>del list(index)</code>，删除</li><li><code>list</code>使用<code>+=</code>可进行扩充</li></ul><h5 id="③leetcode中引用："><a href="#③leetcode中引用：" class="headerlink" title="③leetcode中引用："></a>③leetcode中引用：</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span>countSubgraphsForEachDiameter<span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> edges<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="④staticmethod"><a href="#④staticmethod" class="headerlink" title="④staticmethod"></a>④staticmethod</h5><p><strong>返回函数的静态方法</strong>。<br>该方法不强制要求传递参数，如下声明一个静态方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以上实例声明了静态方法 <code>f</code>，从而可以实现实例化使用 <code>C().f()</code>，当然也可以不实例化调用该方法 <code>C.f()</code>。</p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo文档及建站</title>
      <link href="posts/3eeb.html"/>
      <url>posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><blockquote><p>以上为官方文档<br><strong>想建站的，可以参考：</strong><br><a href="https://www.jianshu.com/p/0a8d738a5620" target="_blank" rel="noopener">https://www.jianshu.com/p/0a8d738a5620</a><br><strong>这是装修教程：</strong><br><a href="https://yafine66.gitee.io/" target="_blank" rel="noopener">https://yafine66.gitee.io/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟</title>
      <link href="posts/4d93.html"/>
      <url>posts/4d93.html</url>
      
        <content type="html"><![CDATA[<h2 id="LCP-03-机器人大冒险"><a href="#LCP-03-机器人大冒险" class="headerlink" title="LCP 03. 机器人大冒险"></a>LCP 03. 机器人大冒险</h2><p>力扣团队买了一个可编程机器人，机器人初始位置在原点<code>(0, 0)</code>。小伙伴事先给机器人输入一串指令<code>command</code>，机器人就会无限循环这条指令的步骤进行移动。指令有两种：</p><p><code>U</code>: 向y轴正方向移动一格<br><code>R</code>: 向x轴正方向移动一格。<br>不幸的是，在 xy 平面上还有一些障碍物，他们的坐标用<code>obstacles</code>表示。机器人一旦碰到障碍物就会被损毁。</p><p>给定终点坐标<code>(x, y)</code>，返回机器人能否完好地到达终点。如果能，返回<code>true</code>；否则返回<code>false</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">robot</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> command<span class="token punctuation">:</span> str<span class="token punctuation">,</span> obstacles<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">,</span> y<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        xi<span class="token punctuation">,</span>yi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        circle<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#第一次循环走过的点</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> command<span class="token punctuation">:</span>            <span class="token keyword">if</span> c<span class="token operator">==</span><span class="token string">"R"</span><span class="token punctuation">:</span> xi<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> yi<span class="token operator">+=</span><span class="token number">1</span>            circle<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>xi<span class="token punctuation">,</span>yi<span class="token punctuation">]</span><span class="token punctuation">)</span>        cnt<span class="token operator">=</span>min<span class="token punctuation">(</span>x<span class="token operator">//</span>xi<span class="token punctuation">,</span>y<span class="token operator">//</span>yi<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#是否会经过目标点</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span>x<span class="token operator">-</span>xi<span class="token operator">*</span>cnt<span class="token punctuation">,</span>y<span class="token operator">-</span>yi<span class="token operator">*</span>cnt<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> circle<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> x1<span class="token punctuation">,</span>y1 <span class="token keyword">in</span> obstacles<span class="token punctuation">:</span>            cnt<span class="token operator">=</span>min<span class="token punctuation">(</span>x1<span class="token operator">//</span>xi<span class="token punctuation">,</span>y1<span class="token operator">//</span>yi<span class="token punctuation">)</span>            <span class="token keyword">if</span> x1<span class="token operator">&lt;=</span>x <span class="token operator">and</span> y1<span class="token operator">&lt;=</span>y <span class="token operator">and</span> <span class="token punctuation">[</span>x1<span class="token operator">-</span>xi<span class="token operator">*</span>cnt<span class="token punctuation">,</span>y1<span class="token operator">-</span>yi<span class="token operator">*</span>cnt<span class="token punctuation">]</span> <span class="token keyword">in</span> circle<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true"># 写这些为了不超时，为难了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="845-数组中的最长山脉"><a href="#845-数组中的最长山脉" class="headerlink" title="845.数组中的最长山脉"></a>845.数组中的最长山脉</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestMountain</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        ans<span class="token operator">=</span>i<span class="token operator">=</span>j<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">and</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                i<span class="token operator">+=</span><span class="token number">1</span>            j<span class="token operator">=</span>i              <span class="token comment" spellcheck="true"># begin up</span>            <span class="token keyword">while</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">and</span> A<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                j<span class="token operator">+=</span><span class="token number">1</span>            summit<span class="token operator">=</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span>      <span class="token comment" spellcheck="true"># begin down </span>            <span class="token keyword">while</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">and</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>A<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                j<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>summit <span class="token operator">and</span> summit<span class="token operator">></span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            i<span class="token operator">=</span>j        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#一种双指针的模拟</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心</title>
      <link href="posts/8ca6.html"/>
      <url>posts/8ca6.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="(0)前言"></a>(0)前言</h2><p>通过<strong>局部最优</strong>得到全局最优解。</p><h2 id="1-55-跳跃游戏"><a href="#1-55-跳跃游戏" class="headerlink" title="(1)55.跳跃游戏"></a>(1)55.跳跃游戏</h2><p>给定一个非负整数数组，你最初位于数组的第一个位置。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个位置。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canJump</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        max_pos<span class="token operator">=</span><span class="token number">0</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">></span>max_pos<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>            max_pos<span class="token operator">=</span>max<span class="token punctuation">(</span>max_pos<span class="token punctuation">,</span>i<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> max_pos<span class="token operator">>=</span>n<span class="token number">-1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-45-跳跃游戏-II"><a href="#2-45-跳跃游戏-II" class="headerlink" title="(2)45.跳跃游戏 II"></a>(2)45.跳跃游戏 II</h2><p>给定一个非负整数数组，你最初位于数组的第一个位置。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">jump</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">0</span>        count<span class="token punctuation">,</span>end<span class="token punctuation">,</span>max_pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            max_pos<span class="token operator">=</span>max<span class="token punctuation">(</span>max_pos<span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> i<span class="token operator">==</span>end<span class="token punctuation">:</span>       <span class="token comment" spellcheck="true">#解法的核心</span>                end<span class="token operator">=</span>max_pos                 count<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> end<span class="token operator">>=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> count        <span class="token keyword">return</span> count<span class="token comment" spellcheck="true"># 经典贪心</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串&amp;数组</title>
      <link href="posts/95d1.html"/>
      <url>posts/95d1.html</url>
      
        <content type="html"><![CDATA[<h2 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17.电话号码的字母组合"></a>17.电话号码的字母组合</h2><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> digits<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        map<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'2'</span><span class="token punctuation">:</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">:</span><span class="token string">"def"</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">:</span><span class="token string">"ghi"</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">:</span><span class="token string">"jkl"</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">:</span><span class="token string">"mno"</span><span class="token punctuation">,</span><span class="token string">'7'</span><span class="token punctuation">:</span><span class="token string">"pqrs"</span><span class="token punctuation">,</span><span class="token string">'8'</span><span class="token punctuation">:</span><span class="token string">"tuv"</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">:</span><span class="token string">"wxyz"</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token operator">not</span> digits<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> digits<span class="token punctuation">:</span>            ans<span class="token operator">=</span><span class="token punctuation">[</span>pre<span class="token operator">+</span>suf <span class="token keyword">for</span> pre <span class="token keyword">in</span> ans <span class="token keyword">for</span> suf <span class="token keyword">in</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="696-计数二进制子串"><a href="#696-计数二进制子串" class="headerlink" title="696.计数二进制子串"></a>696.计数二进制子串</h2><p>给定一个字符串 <code>s</code>，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。</p><p>重复出现的子串要计算它们出现的次数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countBinarySubstrings</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        temp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                temp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token operator">+=</span>min<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 计算相邻数的频数</span><span class="token comment" spellcheck="true"># 看着有些抽象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="605-种花问题"><a href="#605-种花问题" class="headerlink" title="605.种花问题"></a>605.种花问题</h2><p>假设你有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。</p><p>给定一个花坛（表示为一个数组包含<code>0</code>和<code>1</code>，其中<code>0</code>表示没种植花，<code>1</code>表示种植了花），和一个数 <code>n</code> 。能否在不打破种植规则的情况下种入 <code>n</code> 朵花？能则返回<code>True</code>，不能则返回<code>False</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canPlaceFlowers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> f<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        f<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>        ans<span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> cnt<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                 ans<span class="token operator">+=</span><span class="token punctuation">(</span>cnt<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>                cnt<span class="token operator">=</span><span class="token number">0</span>        <span class="token comment" spellcheck="true">#print(ans,n)</span>        <span class="token keyword">return</span> ans<span class="token operator">>=</span>n<span class="token comment" spellcheck="true"># 数组，两端加值便于解题。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="75-颜色分类"><a href="#75-颜色分类" class="headerlink" title="75.颜色分类"></a>75.颜色分类</h2><p>给定一个包含红色、白色和蓝色，一共 <code>n</code> 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p><p>此题中，我们使用整数 <code>0</code>、 <code>1</code> 和 <code>2</code> 分别表示红色、白色和蓝色。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#荷兰国旗问题，快速排序基础</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortColors</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        i<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;=</span>r<span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                l<span class="token operator">+=</span><span class="token number">1</span>                i<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                r<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> i<span class="token operator">+=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈</title>
      <link href="posts/9199.html"/>
      <url>posts/9199.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-20-有效的括号"><a href="#1-20-有效的括号" class="headerlink" title="(1)20.有效的括号"></a>(1)20.有效的括号</h2><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;{&#39;</code>，<code>&#39;}&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><ul><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>注意空字符串可被认为是有效字符串。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        hashmap<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'('</span><span class="token punctuation">:</span><span class="token string">')'</span><span class="token punctuation">,</span><span class="token string">'{'</span><span class="token punctuation">:</span><span class="token string">'}'</span><span class="token punctuation">,</span><span class="token string">'['</span><span class="token punctuation">:</span><span class="token string">']'</span><span class="token punctuation">}</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token keyword">in</span> hashmap<span class="token punctuation">:</span> stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token operator">not</span> stack<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">elif</span> i<span class="token operator">!=</span>hashmap<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token operator">not</span> stack<span class="token comment" spellcheck="true">#注意：not stack是stack为空，不是stack==None</span><span class="token comment" spellcheck="true">#其它版本：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'{'</span><span class="token punctuation">:</span> <span class="token string">'}'</span><span class="token punctuation">,</span>  <span class="token string">'['</span><span class="token punctuation">:</span> <span class="token string">']'</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">:</span> <span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">:</span> <span class="token string">'?'</span><span class="token punctuation">}</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'?'</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> c <span class="token keyword">in</span> dic<span class="token punctuation">:</span> stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span>            <span class="token keyword">elif</span> dic<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">!=</span> c<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>         <span class="token keyword">return</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图</title>
      <link href="posts/b7fa.html"/>
      <url>posts/b7fa.html</url>
      
        <content type="html"><![CDATA[<h3 id="322-重新安排行程（8-27"><a href="#322-重新安排行程（8-27" class="headerlink" title="322.重新安排行程（8.27)"></a>322.重新安排行程（<code>8.27</code>)</h3><p>给定一个机票的字符串二维数组 [from, to]，子数组中的两个成员分别表示飞机出发和降落的机场地点，对该行程进行重新规划排序。所有这些机票都属于一个从 JFK（肯尼迪国际机场）出发的先生，所以该行程必须从 JFK 开始。</p><p>说明:</p><ul><li>如果存在多种有效的行程，你可以按字符自然排序返回最小的行程组合。例如，行程 [“JFK”, “LGA”] 与 [“JFK”, “LGB”] 相比就更小，排序更靠前</li><li>所有的机场都用三个大写字母表示（机场代码）。</li><li>假定所有机票至少存在一种合理的行程。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#map硬套不行啊，会在图里死循环。</span><span class="token comment" spellcheck="true">#什么是欧拉路径？欧拉路径就是一条能够不重不漏地经过图上的**每一条边**的路径，</span><span class="token comment" spellcheck="true">#即小学奥数中的一笔画问题。而若这条路径的起点和终点相同，则将这条路径称为欧拉回路。</span><span class="token comment" spellcheck="true">#如何判断一个图是否有欧拉路径呢？显然，与一笔画问题相同，一个图有欧拉路径需要以下几个条件：</span><span class="token comment" spellcheck="true"># 1. 首先，这是一个连通图</span><span class="token comment" spellcheck="true"># 2. 若是无向图，则这个图的度数为奇数的点的个数必须是0或2；</span><span class="token comment" spellcheck="true">#    若是有向图，则要么所有点的入度和出度相等，要么有且只有两个点的入度分别比出度大1和少1</span><span class="token comment" spellcheck="true">#具有欧拉回路的无向图称为欧拉图。</span><span class="token comment" spellcheck="true">#具有欧拉通路但不具有欧拉回路的无向图称为半欧拉图。</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findItinerary</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tickets<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> vec<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#pop出最小值</span>                tmp<span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>vec<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>curr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#一个{depart:[arrive...]}的字典</span>        vec<span class="token operator">=</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        <span class="token keyword">for</span> depart<span class="token punctuation">,</span>arrive <span class="token keyword">in</span> tickets<span class="token punctuation">:</span>            vec<span class="token punctuation">[</span>depart<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>arrive<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#便于排序</span>        <span class="token keyword">for</span> key <span class="token keyword">in</span> vec<span class="token punctuation">:</span>            heapq<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>vec<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#heapq是一个标准库模块,优先队列算法</span>        <span class="token comment" spellcheck="true">#heapify转换列表成为堆结构</span>        stack<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span><span class="token string">"JFK"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> stack<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#dfs和逆序那块迷糊</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li>由于题目中说必然存在一条有效路径(至少是半欧拉图)，所以算法不需要回溯（既加入到结果集里的元素不需要删除）</li><li>整个图最多存在一个死胡同(出度和入度相差1），且这个死胡同一定是最后一个访问到的，否则无法完成一笔画。</li><li>DFS的调用其实是一个拆边的过程（既每次调用删除一条边），一定是递归到这个死胡同（无边可拆）后递归函数开始返回。所以死胡同是第一个加入栈中的元素。</li><li>最后逆序的输出即可。</li></ol></blockquote><h3 id="133-克隆图（8-12"><a href="#133-克隆图（8-12" class="headerlink" title="133. 克隆图（8.12)"></a>133. 克隆图（<code>8.12</code>)</h3><p>给你无向 连通 图中一个节点的引用，请你返回该图的 深拷贝（克隆）。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>visited<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#新node字典</span>    <span class="token keyword">def</span> <span class="token function">cloneGraph</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span> node        <span class="token keyword">if</span> node <span class="token keyword">in</span> self<span class="token punctuation">.</span>visited<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span>        clone_node<span class="token operator">=</span>Node<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token operator">=</span>clone_node        clone_node<span class="token punctuation">.</span>neighbors<span class="token operator">=</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>cloneGraph<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> node<span class="token punctuation">.</span>neighbors<span class="token punctuation">]</span>        <span class="token keyword">return</span> clone_node<span class="token comment" spellcheck="true"># 对于一张图而言，它的深拷贝即构建一张与原图结构，值均一样的图，但是其中的节点不再是原来图节点的引用.</span><span class="token comment" spellcheck="true"># 或者用copy.deepcopy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="207-课程表（8-4"><a href="#207-课程表（8-4" class="headerlink" title="207. 课程表（8.4)"></a>207. 课程表（<code>8.4</code>)</h3><p>你这个学期必须选修 <code>numCourse</code> 门课程，记为 <code>0</code> 到 <code>numCourse-1</code> 。</p><p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 <code>0</code> ，你需要先完成课程 <code>1</code> ，我们用一个匹配来表示他们：<code>[0,1]</code></p><p>给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canFinish</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numCourses<span class="token punctuation">:</span> int<span class="token punctuation">,</span> prerequisites<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        relation<span class="token operator">=</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        indegree<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>numCourses   <span class="token comment" spellcheck="true">#入度值列表</span>        <span class="token keyword">for</span> info <span class="token keyword">in</span> prerequisites<span class="token punctuation">:</span>            relation<span class="token punctuation">[</span>info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#基础：[进阶]关系字典</span>            indegree<span class="token punctuation">[</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>        <span class="token comment" spellcheck="true">#先建一个入度为0的队列</span>        q <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">[</span>c <span class="token keyword">for</span> c <span class="token keyword">in</span> range<span class="token punctuation">(</span>numCourses<span class="token punctuation">)</span> <span class="token keyword">if</span> indegree<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        visited <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> q<span class="token punctuation">:</span>            visited <span class="token operator">+=</span> <span class="token number">1</span>            u <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> relation<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>                indegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">if</span> indegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> visited <span class="token operator">==</span> numCourses<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>小结：</strong></p><ul><li>核心思想：以入度进行BFS</li><li>入度：图中的一个节点，多少个节点指向它</li></ul><p>唔，经典拓扑图的算法.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFS&amp;BFS</title>
      <link href="posts/4832.html"/>
      <url>posts/4832.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-1219-黄金矿工"><a href="#1-1219-黄金矿工" class="headerlink" title="(1)1219.黄金矿工"></a>(1)1219.黄金矿工</h2><p>你要开发一座金矿，地质勘测学家已经探明了这座金矿中的资源分布，并用大小为 <code>m * n</code> 的网格 <code>grid</code> 进行了标注。每个单元格中的整数就表示这一单元格中的黄金数量；如果该单元格是空的，那么就是 <code>0</code>。</p><p>为了使收益最大化，矿工需要按以下规则来开采黄金：</p><ul><li>每当矿工进入一个单元，就会收集该单元格中的所有黄金。</li><li>矿工每次可以从当前位置向上下左右四个方向走。</li><li>每个单元格只能被开采（进入）一次。</li><li>不得开采（进入）黄金数目为 0 的单元格。</li><li>矿工可以从网格中 <strong>任意一个</strong> 有黄金的单元格出发或者是停止。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getMaximumGold</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;=</span>i<span class="token operator">&lt;</span>rows <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>j<span class="token operator">&lt;</span>cols <span class="token operator">and</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                tmp<span class="token punctuation">,</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span>                gain<span class="token operator">=</span>max<span class="token punctuation">(</span>dfs<span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>tmp                <span class="token keyword">return</span> tmp<span class="token operator">+</span>gain            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># dfs带上回溯</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-841-钥匙和房间"><a href="#2-841-钥匙和房间" class="headerlink" title="(2)841.钥匙和房间"></a>(2)841.钥匙和房间</h2><p>有 <code>N</code> 个房间，开始时你位于 <code>0</code> 号房间。每个房间有不同的号码：<code>0，1，2，...，N-1</code>，并且房间里可能有一些钥匙能使你进入下一个房间。</p><p>在形式上，对于每个房间 <code>i</code> 都有一个钥匙列表 <code>rooms[i]</code>，每个钥匙 <code>rooms[i][j]</code> 由 <code>[0,1，...，N-1]</code> 中的一个整数表示，其中 <code>N = rooms.length</code>。 钥匙<code> rooms[i][j] = v</code> 可以打开编号为 <code>v</code> 的房间。</p><p>最初，除 <code>0</code> 号房间外的其余所有房间都被锁住。</p><p>你可以自由地在房间之间来回走动。</p><p>如果能进入每个房间返回 <code>true</code>，否则返回 <code>false</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canVisitAllRooms</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> rooms<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        visited<span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">for</span> room <span class="token keyword">in</span> rooms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> room <span class="token operator">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span>                    dfs<span class="token punctuation">(</span>room<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>list<span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>len<span class="token punctuation">(</span>rooms<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-扫雷游戏"><a href="#3-扫雷游戏" class="headerlink" title="(3)扫雷游戏"></a>(3)扫雷游戏</h2><p><a href="https://leetcode-cn.com/problems/minesweeper/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minesweeper/</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">updateBoard</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> board<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> click<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> board<span class="token punctuation">[</span>click<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>click<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"M"</span><span class="token punctuation">:</span>            board<span class="token punctuation">[</span>click<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>click<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"X"</span>            <span class="token keyword">return</span> board        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            cnt<span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span><span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;=</span>i<span class="token operator">&lt;</span>rows <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>j<span class="token operator">&lt;</span>cols<span class="token punctuation">:</span>                    <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"M"</span><span class="token punctuation">:</span> cnt<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">return</span> cnt        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> x<span class="token operator">>=</span>rows <span class="token operator">or</span> y<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> y<span class="token operator">>=</span>cols<span class="token punctuation">:</span>                <span class="token keyword">return</span>             <span class="token keyword">if</span> board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"E"</span><span class="token punctuation">:</span>                tmp<span class="token operator">=</span>check<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>                <span class="token keyword">if</span> tmp<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"B"</span>                    <span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span><span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                        dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>str<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>click<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>click<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> board<span class="token comment" spellcheck="true"># 看起来抽象的东西不一定难</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-200-岛屿数量"><a href="#3-200-岛屿数量" class="headerlink" title="(3)200. 岛屿数量"></a>(3)200. 岛屿数量</h2><p>给你一个由 <code>&#39;1&#39;</code>（陆地）和 <code>&#39;0&#39;</code>（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numIslands</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> grid<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">#有个index(0) out of的bug</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> x<span class="token operator">>=</span>rows <span class="token operator">or</span> y<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> y<span class="token operator">>=</span>cols<span class="token punctuation">:</span> <span class="token keyword">return</span>             <span class="token keyword">if</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token keyword">return</span>            grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span>            dfs<span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"1"</span><span class="token punctuation">:</span>                    dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>                    ans<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># wa~,可以瞎写这个原来觉得神奇的题了。</span><span class="token comment" spellcheck="true"># 2020-09-23</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-695-岛屿的最大面积"><a href="#4-695-岛屿的最大面积" class="headerlink" title="(4)695. 岛屿的最大面积"></a>(4)695. 岛屿的最大面积</h2><p>给定一个包含了一些 <code>0</code> 和 <code>1</code> 的非空二维数组 <code>grid</code> 。</p><p>一个 岛屿 是由一些相邻的 <code>1</code> (代表土地) 构成的组合，这里的「相邻」要求两个 <code>1</code> 必须在水平或者竖直方向上相邻。你可以假设 <code>grid</code> 的四个边缘都被 <code>0</code>（代表水）包围着。</p><p>找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为 <code>0</code> 。)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxAreaOfIsland</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> grid<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> x<span class="token operator">>=</span>rows <span class="token operator">or</span> y<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> y<span class="token operator">>=</span>cols<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token keyword">if</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>            grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span>dfs<span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">+</span>dfs<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">+</span>dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span>dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                    ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 这1不是“1”了...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-N叉树的层序遍历"><a href="#5-N叉树的层序遍历" class="headerlink" title="(5)N叉树的层序遍历"></a>(5)N叉树的层序遍历</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> <span class="token string">'Node'</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token operator">&lt;=</span>depth<span class="token punctuation">:</span> ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            ans<span class="token punctuation">[</span>depth<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> node<span class="token punctuation">.</span>children<span class="token punctuation">:</span>                dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-二叉树的堂兄弟节点"><a href="#6-二叉树的堂兄弟节点" class="headerlink" title="(6)二叉树的堂兄弟节点"></a>(6)二叉树的堂兄弟节点</h2><p>在二叉树中，根节点位于深度 <code>0</code> 处，每个深度为 <code>k</code> 的节点的子节点位于深度 <code>k+1</code> 处。</p><p>如果二叉树的两个节点深度相同，但父节点不同，则它们是一对堂兄弟节点。</p><p>我们给出了具有唯一值的二叉树的根节点 <code>root</code>，以及树中两个不同节点的值 <code>x</code> 和 <code>y</code>。</p><p>只有与值 <code>x</code> 和 <code>y</code> 对应的节点是堂兄弟节点时，才返回 <code>true</code>。否则，返回 <code>false</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isCousins</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">,</span> y<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x<span class="token punctuation">,</span>self<span class="token punctuation">.</span>y<span class="token operator">=</span>None<span class="token punctuation">,</span>None        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>pre<span class="token punctuation">,</span>depth<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span>             <span class="token keyword">if</span> node<span class="token punctuation">.</span>val<span class="token operator">==</span>x<span class="token punctuation">:</span> self<span class="token punctuation">.</span>x<span class="token operator">=</span><span class="token punctuation">[</span>pre<span class="token punctuation">,</span>depth<span class="token punctuation">]</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>val<span class="token operator">==</span>y<span class="token punctuation">:</span> self<span class="token punctuation">.</span>y<span class="token operator">=</span><span class="token punctuation">[</span>pre<span class="token punctuation">,</span>depth<span class="token punctuation">]</span>            dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>node<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>node<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span>None<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span>self<span class="token punctuation">.</span>y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> self<span class="token punctuation">.</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>self<span class="token punctuation">.</span>y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">###</span><span class="token comment" spellcheck="true">###</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-1162-地图分析"><a href="#7-1162-地图分析" class="headerlink" title="(7)1162.地图分析"></a>(7)1162.地图分析</h2><p><a href="https://leetcode-cn.com/problems/as-far-from-land-as-possible/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/as-far-from-land-as-possible/</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span>        steps<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>        queue<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">*</span>n<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                x<span class="token punctuation">,</span>y<span class="token operator">=</span>queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> xi<span class="token punctuation">,</span>yi <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;=</span>xi<span class="token operator">&lt;</span>n <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>yi<span class="token operator">&lt;</span>n <span class="token operator">and</span> grid<span class="token punctuation">[</span>xi<span class="token punctuation">]</span><span class="token punctuation">[</span>yi<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>xi<span class="token punctuation">,</span>yi<span class="token punctuation">)</span><span class="token punctuation">)</span>                        grid<span class="token punctuation">[</span>xi<span class="token punctuation">]</span><span class="token punctuation">[</span>yi<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>            steps<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> steps<span class="token comment" spellcheck="true"># BFS</span><span class="token comment" spellcheck="true"># 从陆地（1）扩展到海洋（0）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-水域大小"><a href="#8-水域大小" class="headerlink" title="(8)水域大小"></a>(8)水域大小</h2><p><a href="https://leetcode-cn.com/problems/pond-sizes-lcci/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/pond-sizes-lcci/</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pondSizes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> land<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>land<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>land<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>            queue<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span>            size<span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">while</span> len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>                x<span class="token punctuation">,</span>y<span class="token operator">=</span>queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                size<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">for</span> xi<span class="token punctuation">,</span>yi <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;=</span>xi<span class="token operator">&lt;</span>rows <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>yi<span class="token operator">&lt;</span>cols <span class="token operator">and</span> land<span class="token punctuation">[</span>xi<span class="token punctuation">]</span><span class="token punctuation">[</span>yi<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>xi<span class="token punctuation">,</span>yi<span class="token punctuation">)</span><span class="token punctuation">)</span>                        land<span class="token punctuation">[</span>xi<span class="token punctuation">]</span><span class="token punctuation">[</span>yi<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">return</span> size        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> land<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    land<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>                    ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>bfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        ans<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># return ans.sort() 返回的 null</span><span class="token comment" spellcheck="true"># 发现bfs是queue的更新，dfs是树的遍历</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-边框着色"><a href="#9-边框着色" class="headerlink" title="(9)边框着色"></a>(9)边框着色</h2><p>对联通分量的边界进行着色</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">colorBorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r0<span class="token punctuation">:</span> int<span class="token punctuation">,</span> c0<span class="token punctuation">:</span> int<span class="token punctuation">,</span> color<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        border<span class="token punctuation">,</span>visit<span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># visit记录同色，不用d了</span>        mark<span class="token operator">=</span>grid<span class="token punctuation">[</span>r0<span class="token punctuation">]</span><span class="token punctuation">[</span>c0<span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">&lt;=</span>x<span class="token operator">&lt;</span>rows <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>y<span class="token operator">&lt;</span>cols <span class="token operator">and</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>mark<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token keyword">in</span> visit<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>            visit<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> dfs<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">+</span>dfs<span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">+</span>dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">:</span> border<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        dfs<span class="token punctuation">(</span>r0<span class="token punctuation">,</span>c0<span class="token punctuation">)</span>        <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> border<span class="token punctuation">:</span>            grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>color        <span class="token keyword">return</span> grid<span class="token comment" spellcheck="true"># 额外数组的加入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表</title>
      <link href="posts/41d3.html"/>
      <url>posts/41d3.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        hashmap<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>num <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            j<span class="token operator">=</span>hashmap<span class="token punctuation">.</span>get<span class="token punctuation">(</span>target<span class="token operator">-</span>num<span class="token punctuation">)</span>            <span class="token keyword">if</span> j <span class="token operator">!=</span> None <span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># j可为0</span>            hashmap<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">=</span>i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="560-和为K的子数组"><a href="#560-和为K的子数组" class="headerlink" title="560.和为K的子数组"></a>560.和为K的子数组</h2><p>给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subarraySum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        pre <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#记载所有前缀和</span>        ans<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            sum<span class="token operator">+=</span>num            need<span class="token operator">=</span>sum<span class="token operator">-</span>k            <span class="token keyword">if</span> need <span class="token keyword">in</span> pre<span class="token punctuation">:</span>                ans <span class="token operator">+=</span> pre<span class="token punctuation">[</span>need<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">#在hash table里查找key，如果有返回对应的value，反之返回0 </span>            pre<span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">.</span>get<span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结</strong></p><blockquote><ol><li>前缀和+hash的优化</li><li><code>dict.get(key,default=None)</code></li></ol></blockquote><h2 id="other"><a href="#other" class="headerlink" title="other"></a><em>other</em></h2><pre class="line-numbers language-python"><code class="language-python">jewelsSet <span class="token operator">=</span> set<span class="token punctuation">(</span>J<span class="token punctuation">)</span><span class="token keyword">return</span> sum<span class="token punctuation">(</span>s <span class="token keyword">in</span> jewelsSet <span class="token keyword">for</span> s <span class="token keyword">in</span> S<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#集合是一个哈希表，降低遍历的时间复杂度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 每次都遇到这个问题：</span><span class="token comment" spellcheck="true"># unhashable type: 'list'</span><span class="token comment" spellcheck="true"># 不能在哈希表中快速找到这个表，不能集合为多重表去重</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学</title>
      <link href="posts/c6d1.html"/>
      <url>posts/c6d1.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试题64-求1-2-…-n"><a href="#面试题64-求1-2-…-n" class="headerlink" title="面试题64. 求1+2+…+n"></a>面试题64. 求1+2+…+n</h2><p>求 <code>1+2+...+n </code>，要求<strong>不能使用</strong>乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sumNums</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">return</span> n <span class="token operator">and</span> n<span class="token operator">+</span>self<span class="token punctuation">.</span>sumNums<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 学会了and的特性</span><span class="token comment" spellcheck="true"># a and b 返回 b, a and 0 返回 a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136.只出现一次的数字"></a>136.只出现一次的数字</h2><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均<strong>出现两次</strong>。找出那个只出现了一次的元素。</p><p>说明：</p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">return</span> reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">^</span> y<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reduce(function, iterable[, initializer])内置函数</span><span class="token comment" spellcheck="true">#异或（在二进制基础上）的特性：a^a=0，a^0=a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="172-阶乘后的零"><a href="#172-阶乘后的零" class="headerlink" title="172.阶乘后的零"></a>172.阶乘后的零</h2><p>给定一个整数 n，返回 n! 结果尾数中零的数量。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        cnt <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            n <span class="token operator">//=</span> <span class="token number">5</span>            cnt <span class="token operator">+=</span> n        <span class="token keyword">return</span> cnt<span class="token comment" spellcheck="true"># 数学观察</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="231-2的幂"><a href="#231-2的幂" class="headerlink" title="231.2的幂"></a>231.2的幂</h2><p>给定一个整数，编写一个函数来判断它是否是 2 的幂次方。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">return</span> n<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> n<span class="token operator">&amp;</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：</p><table><thead><tr><th>num</th><th>n</th><th>n-1</th><th>n&amp;(n-1)</th></tr></thead><tbody><tr><td>2**0</td><td>0001</td><td>0000</td><td>0000</td></tr><tr><td>2**1</td><td>0010</td><td>0001</td><td>0000</td></tr><tr><td>2**2</td><td>0100</td><td>0011</td><td>0000</td></tr></tbody></table><h2 id="60-第k个排列"><a href="#60-第k个排列" class="headerlink" title="60.第k个排列"></a>60.第k个排列</h2><p>给出集合 [1,2,3,…,n]，其所有元素共有 n! 种排列。</p><p>按大小顺序列出所有排列情况，并一一标记，当 n = 3 时, 所有排列如下：<br>“123”，”132”，”213”，”231”，”312”，”321”</p><p>给定 <code>n</code> 和 <code>k</code>，返回第 <code>k</code> 个排列。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getPermutation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token string">""</span>        factroial<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            factroial<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token operator">*</span>factroial<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        valid<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        k<span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            order<span class="token operator">=</span>k<span class="token operator">//</span>factroial<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                order<span class="token operator">-=</span>valid<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">if</span> order<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    ans<span class="token operator">+=</span>str<span class="token punctuation">(</span>j<span class="token punctuation">)</span>                    valid<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>                    <span class="token keyword">break</span>            k <span class="token operator">%=</span> factroial<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#康托展开，不懂</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计数质数"><a href="#计数质数" class="headerlink" title="计数质数"></a>计数质数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>n        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>n<span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">:</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>len<span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">:</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sum<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token comment" spellcheck="true">#埃氏筛</span><span class="token comment" spellcheck="true">#那个i的范围还是没懂</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树</title>
      <link href="posts/5b58.html"/>
      <url>posts/5b58.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-二叉树的遍历"><a href="#1-二叉树的遍历" class="headerlink" title="(1)二叉树的遍历"></a>(1)二叉树的遍历</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1.中序遍历：</span><span class="token comment" spellcheck="true"># -->走左边-->记录-->走右边</span><span class="token comment" spellcheck="true"># 遍历BST非递减</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                <span class="token keyword">yield</span> <span class="token keyword">from</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">yield</span> node<span class="token punctuation">.</span>val                <span class="token keyword">yield</span> <span class="token keyword">from</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> inorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#关于yield，next的使用</span><span class="token comment" spellcheck="true">#找到BST中第k小的元素：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                <span class="token keyword">yield</span> <span class="token keyword">from</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">yield</span> node<span class="token punctuation">.</span>val                <span class="token keyword">yield</span> <span class="token keyword">from</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        it <span class="token operator">=</span>inorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token operator">=</span>next<span class="token punctuation">(</span>it<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 2.前序遍历：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">preorder</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                <span class="token keyword">yield</span> node<span class="token punctuation">.</span>val                <span class="token keyword">yield</span> <span class="token keyword">from</span> preorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">yield</span> <span class="token keyword">from</span> preorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> preorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 3. 后序遍历</span><span class="token comment" spellcheck="true"># 3.1 N叉树后序遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">postorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> <span class="token string">'Node'</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> node<span class="token punctuation">.</span>children<span class="token punctuation">:</span> <span class="token keyword">yield</span> <span class="token keyword">from</span> f<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token keyword">yield</span> node<span class="token punctuation">.</span>val        <span class="token keyword">return</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-112-路径总和"><a href="#2-112-路径总和" class="headerlink" title="(2)112. 路径总和"></a>(2)112. 路径总和</h2><p>给定一个二叉树和一个目标和，判断该树中<code>是否存在</code>根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。<br>说明: 叶子节点是指没有子节点的节点。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> sum<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        sum<span class="token operator">-=</span>root<span class="token punctuation">.</span>val        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">.</span>left <span class="token operator">and</span> <span class="token operator">not</span> root<span class="token punctuation">.</span>right <span class="token punctuation">:</span>            <span class="token keyword">return</span> sum<span class="token operator">==</span><span class="token number">0</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>hasPathSum<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>sum<span class="token punctuation">)</span> <span class="token operator">or</span> self<span class="token punctuation">.</span>hasPathSum<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-113-路径总和II"><a href="#3-113-路径总和II" class="headerlink" title="(3)113.路径总和II"></a>(3)113.路径总和II</h2><p>给定一个二叉树和一个目标和，<code>找到所有</code>从根节点到叶子节点路径总和等于给定目标和的路径。<br>说明: 叶子节点是指没有子节点的节点。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> sum_<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root <span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">[</span>root<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> stack<span class="token punctuation">:</span>            val<span class="token punctuation">,</span>node<span class="token operator">=</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">.</span>left <span class="token operator">and</span> <span class="token operator">not</span> node<span class="token punctuation">.</span>right <span class="token operator">and</span> sum<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token operator">==</span>sum_<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token operator">+</span><span class="token punctuation">[</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token operator">+</span><span class="token punctuation">[</span>node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 方法二：回溯法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>path<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span>            path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> k<span class="token operator">==</span>node<span class="token punctuation">.</span>val <span class="token operator">and</span> <span class="token operator">not</span> node<span class="token punctuation">.</span>left <span class="token operator">and</span> <span class="token operator">not</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                 ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            bk<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>path<span class="token punctuation">,</span>k<span class="token operator">-</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            bk<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>path<span class="token punctuation">,</span>k<span class="token operator">-</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        bk<span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-437-路径总和III"><a href="#4-437-路径总和III" class="headerlink" title="(4)437.路径总和III"></a>(4)437.路径总和III</h2><p>给定一个二叉树，它的每个结点都存放着一个整数值。<br>找出路径和等于给定数值的路径总数。<br>路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> sum<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>pathSum<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>pathSum<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>sum<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>root<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        path<span class="token operator">-=</span>root<span class="token punctuation">.</span>val        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">if</span> path<span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-翻转二叉树"><a href="#5-翻转二叉树" class="headerlink" title="(5)翻转二叉树"></a>(5)翻转二叉树</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">invert</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span>             root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root<span class="token punctuation">.</span>right<span class="token operator">=</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>root<span class="token punctuation">.</span>left            invert<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            invert<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        invert<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-二叉树的层平均值"><a href="#6-二叉树的层平均值" class="headerlink" title="(6)二叉树的层平均值"></a>(6)二叉树的层平均值</h2><p>给定一个非空二叉树, 返回一个由每层节点平均值组成的数组。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">averageOfLevels</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>float<span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span>             <span class="token keyword">if</span> len<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token operator">==</span>depth<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>node<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ans<span class="token punctuation">[</span>depth<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>sum<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">/</span>len<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> ans<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-相同的树"><a href="#7-相同的树" class="headerlink" title="(7)相同的树"></a>(7)相同的树</h2><p>给定两个二叉树，编写一个函数来检验它们是否相同。</p><p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> q<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> p<span class="token operator">==</span>None <span class="token operator">and</span> q<span class="token operator">==</span>None<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> p<span class="token operator">==</span>None <span class="token operator">or</span> q<span class="token operator">==</span>None<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> p<span class="token punctuation">.</span>val<span class="token operator">!=</span>q<span class="token punctuation">.</span>val<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>isSameTree<span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">,</span>q<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">and</span> self<span class="token punctuation">.</span>isSameTree<span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">,</span>q<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-二叉树的深度"><a href="#8-二叉树的深度" class="headerlink" title="(8)二叉树的深度"></a>(8)二叉树的深度</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 最大深度</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            left_height<span class="token operator">=</span>self<span class="token punctuation">.</span>maxDepth<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            right_height<span class="token operator">=</span>self<span class="token punctuation">.</span>maxDepth<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>left_height<span class="token punctuation">,</span>right_height<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token comment" spellcheck="true"># 最小深度</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> depth<span class="token operator">></span>self<span class="token punctuation">.</span>ans<span class="token punctuation">:</span> <span class="token keyword">return</span>             <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">.</span>left <span class="token operator">and</span> <span class="token operator">not</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>ans<span class="token operator">=</span>min<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ans<span class="token punctuation">,</span>depth<span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span> dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span> dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-左叶子之和"><a href="#9-左叶子之和" class="headerlink" title="(9)左叶子之和"></a>(9)左叶子之和</h2><p>计算给定二叉树的所有<strong>左叶子</strong>之和。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sumOfLeftLeaves</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span>             <span class="token keyword">if</span> node<span class="token punctuation">.</span>left <span class="token operator">and</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token operator">not</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token operator">not</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>ans<span class="token operator">+=</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val            dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span class="token comment" spellcheck="true">#左叶子没有子节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-二叉树的所有路径"><a href="#10-二叉树的所有路径" class="headerlink" title="(10)二叉树的所有路径"></a>(10)二叉树的所有路径</h2><p>给定一个二叉树，返回所有从根节点到叶子节点的路径。<br>用<code>[&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]</code>的类型表示</p><p>说明: 叶子节点是指没有子节点的节点。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">binaryTreePaths</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> ans        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>            path<span class="token operator">+=</span>str<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">.</span>left <span class="token operator">and</span> <span class="token operator">not</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span> ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span> dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>path<span class="token operator">+</span><span class="token string">"->"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span> dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>path<span class="token operator">+</span><span class="token string">"->"</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-恢复二叉搜索树"><a href="#11-恢复二叉搜索树" class="headerlink" title="(11)恢复二叉搜索树"></a>(11)恢复二叉搜索树</h2><p>二叉搜索树中的两个节点被错误地交换。</p><p>请在不改变其结构的情况下，恢复这棵树。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">recoverTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        nodes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>              <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#中序遍历</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span>             dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            nodes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        pre<span class="token operator">=</span>nodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        x<span class="token punctuation">,</span>y<span class="token operator">=</span>None<span class="token punctuation">,</span>None        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> pre<span class="token punctuation">.</span>val <span class="token operator">></span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">:</span>                y<span class="token operator">=</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token operator">not</span> x<span class="token punctuation">:</span> x<span class="token operator">=</span>pre  <span class="token comment" spellcheck="true"># x为第一个出错的位置</span>            pre<span class="token operator">=</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#准备下一次遍历</span>        <span class="token keyword">if</span> x <span class="token operator">and</span> y<span class="token punctuation">:</span>             x<span class="token punctuation">.</span>val<span class="token punctuation">,</span> y<span class="token punctuation">.</span>val<span class="token operator">=</span>y<span class="token punctuation">.</span>val<span class="token punctuation">,</span> x<span class="token punctuation">.</span>val<span class="token comment" spellcheck="true">#说明： </span><span class="token comment" spellcheck="true"># 空间复杂度O(n)</span><span class="token comment" spellcheck="true"># 那个常数空间的莫里斯遍历不懂</span><span class="token comment" spellcheck="true"># 在这种遍历情况下，二叉搜索树的值从小到大</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-二叉树展开为链表"><a href="#12-二叉树展开为链表" class="headerlink" title="(12)二叉树展开为链表"></a>(12)二叉树展开为链表</h2><p>给定一个二叉树，<strong>原地</strong>将它展开为一个单链表。<br>If you notice carefully in the flattened tree, each node’s right child points to the next node of a pre-order traversal.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">flatten</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify root in-place instead.        """</span>        cur<span class="token operator">=</span>root        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                p<span class="token operator">=</span>cur<span class="token punctuation">.</span>left    <span class="token comment" spellcheck="true">#向左子树移动</span>                <span class="token keyword">while</span> p<span class="token punctuation">.</span>right<span class="token punctuation">:</span> p<span class="token operator">=</span>p<span class="token punctuation">.</span>right <span class="token comment" spellcheck="true">#找到root左子树的最右节点</span>                p<span class="token punctuation">.</span>right<span class="token operator">=</span>cur<span class="token punctuation">.</span>right <span class="token comment" spellcheck="true">#将root右子树连到找到的节点</span>                cur<span class="token punctuation">.</span>right<span class="token operator">=</span>cur<span class="token punctuation">.</span>left <span class="token comment" spellcheck="true">#再移回来</span>                cur<span class="token punctuation">.</span>left<span class="token operator">=</span>None            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>right<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-二叉搜索树中的众数"><a href="#13-二叉搜索树中的众数" class="headerlink" title="(13)二叉搜索树中的众数"></a>(13)二叉搜索树中的众数</h2><p>给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findMode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                <span class="token keyword">yield</span> <span class="token keyword">from</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">yield</span> node<span class="token punctuation">.</span>val                <span class="token keyword">yield</span> <span class="token keyword">from</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        cnt<span class="token punctuation">,</span>max_cnt<span class="token punctuation">,</span>last<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>None        <span class="token keyword">for</span> i <span class="token keyword">in</span> inorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">==</span> last<span class="token punctuation">:</span> cnt<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> cnt<span class="token operator">=</span><span class="token number">1</span>            <span class="token keyword">if</span> cnt<span class="token operator">></span>max_cnt<span class="token punctuation">:</span> ans<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">elif</span> cnt<span class="token operator">==</span>max_cnt<span class="token punctuation">:</span> ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            max_cnt<span class="token operator">=</span>max<span class="token punctuation">(</span>max_cnt<span class="token punctuation">,</span>cnt<span class="token punctuation">)</span>            last<span class="token operator">=</span>i        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># python O(1)的中序遍历</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-验证BST"><a href="#13-验证BST" class="headerlink" title="(13)验证BST"></a>(13)验证BST</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                 <span class="token keyword">yield</span> <span class="token keyword">from</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">yield</span> node<span class="token punctuation">.</span>val                <span class="token keyword">yield</span> <span class="token keyword">from</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        pre<span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> inorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">&lt;=</span>pre<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>            pre<span class="token operator">=</span>i        <span class="token keyword">return</span> <span class="token boolean">True</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>            left<span class="token operator">=</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span> left<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>            right<span class="token operator">=</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            <span class="token keyword">if</span> right<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">return</span> max<span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">if</span> abs<span class="token punctuation">(</span>left<span class="token operator">-</span>right<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">1</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>              <span class="token keyword">return</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="posts/d64e.html"/>
      <url>posts/d64e.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-链表的中间节点"><a href="#1-链表的中间节点" class="headerlink" title="(1)链表的中间节点"></a>(1)链表的中间节点</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">middleNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        slow<span class="token operator">=</span>fast<span class="token operator">=</span>head        <span class="token keyword">while</span> fast <span class="token operator">and</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">:</span>            slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next            fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        <span class="token keyword">return</span> slow<span class="token comment" spellcheck="true"># 快慢指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-合并两个有序链表"><a href="#2-合并两个有序链表" class="headerlink" title="(2)合并两个有序链表"></a>(2)合并两个有序链表</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> l2<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> l1<span class="token punctuation">:</span> <span class="token keyword">return</span> l2        <span class="token keyword">if</span> <span class="token operator">not</span> l2<span class="token punctuation">:</span> <span class="token keyword">return</span> l1        <span class="token keyword">if</span> l1<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>l2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>            l1<span class="token punctuation">.</span>next<span class="token operator">=</span>self<span class="token punctuation">.</span>mergeTwoLists<span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span>l2<span class="token punctuation">)</span>            <span class="token keyword">return</span> l1        <span class="token keyword">else</span><span class="token punctuation">:</span>            l2<span class="token punctuation">.</span>next<span class="token operator">=</span>self<span class="token punctuation">.</span>mergeTwoLists<span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span>            <span class="token keyword">return</span> l2<span class="token comment" spellcheck="true"># 递归</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-445-两数相加-II"><a href="#3-445-两数相加-II" class="headerlink" title="(3)445.两数相加 II"></a>(3)445.两数相加 II</h2><p>给你两个 非空 链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。</p><p>你可以假设除了数字 <code>0</code> 之外，这两个数字都不会以零开头。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> l2<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        s1<span class="token punctuation">,</span>s2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> l1<span class="token punctuation">:</span>            s1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            l1<span class="token operator">=</span>l1<span class="token punctuation">.</span>next        <span class="token keyword">while</span> l2<span class="token punctuation">:</span>            s2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            l2<span class="token operator">=</span>l2<span class="token punctuation">.</span>next        ans<span class="token punctuation">,</span>carry<span class="token operator">=</span>None<span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">while</span> s1 <span class="token operator">or</span> s2 <span class="token operator">or</span> carry <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> <span class="token operator">not</span> s1 <span class="token keyword">else</span> s1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            b <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> <span class="token operator">not</span> s2 <span class="token keyword">else</span> s2<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            cur <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> carry            cur<span class="token punctuation">,</span>carry<span class="token operator">=</span>cur<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">,</span>cur<span class="token operator">//</span><span class="token number">10</span>            curnode <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>cur<span class="token punctuation">)</span>            curnode<span class="token punctuation">.</span>next <span class="token operator">=</span> ans             ans <span class="token operator">=</span> curnode           <span class="token comment" spellcheck="true">#头部接入</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 栈，链表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-环形链表"><a href="#4-环形链表" class="headerlink" title="(4)环形链表"></a>(4)环形链表</h2><p>给定一个链表，判断链表中是否有环。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">not</span> head <span class="token operator">or</span> <span class="token operator">not</span> head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        slow<span class="token punctuation">,</span>fast<span class="token operator">=</span>head<span class="token punctuation">,</span>head<span class="token punctuation">.</span>next        <span class="token keyword">while</span><span class="token punctuation">(</span>slow<span class="token operator">!=</span>fast<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">not</span> fast <span class="token operator">or</span> <span class="token operator">not</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>            slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next            fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true">#快慢指针</span><span class="token comment" spellcheck="true"># 1.slow放在head, fast放在head.next</span><span class="token comment" spellcheck="true"># 2.while(slow!=fast)来移动指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-环形链表II"><a href="#5-环形链表II" class="headerlink" title="(5)环形链表II"></a>(5)环形链表II</h2><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 <code>null</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        fast<span class="token punctuation">,</span>slow<span class="token operator">=</span>head<span class="token punctuation">,</span>head        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> fast <span class="token operator">or</span> <span class="token operator">not</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">:</span> <span class="token keyword">return</span>             fast<span class="token punctuation">,</span>slow<span class="token operator">=</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">,</span>slow<span class="token punctuation">.</span>next            <span class="token keyword">if</span> fast<span class="token operator">==</span>slow<span class="token punctuation">:</span> <span class="token keyword">break</span>        fast<span class="token operator">=</span>head        <span class="token keyword">while</span> fast<span class="token operator">!=</span>slow<span class="token punctuation">:</span>            fast<span class="token punctuation">,</span>slow<span class="token operator">=</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">,</span>slow<span class="token punctuation">.</span>next        <span class="token keyword">return</span> fast<span class="token comment" spellcheck="true"># 记f,s分别为快慢指针走过的节点。</span><span class="token comment" spellcheck="true"># 记a,b分别为环外、环内节点数</span><span class="token comment" spellcheck="true"># f=2s=s+nb，s=nb.</span><span class="token comment" spellcheck="true"># 更换指向后：f'=a,s=nb+a,是重合的，在入口处。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-两两交换链表中的节点"><a href="#6-两两交换链表中的节点" class="headerlink" title="(6)两两交换链表中的节点"></a>(6)两两交换链表中的节点</h2><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> head <span class="token operator">or</span> <span class="token operator">not</span> head<span class="token punctuation">.</span>next<span class="token punctuation">:</span> <span class="token keyword">return</span> head        newhead<span class="token operator">=</span>head<span class="token punctuation">.</span>next        head<span class="token punctuation">.</span>next<span class="token operator">=</span>self<span class="token punctuation">.</span>swapPairs<span class="token punctuation">(</span>newhead<span class="token punctuation">.</span>next<span class="token punctuation">)</span>        newhead<span class="token punctuation">.</span>next<span class="token operator">=</span>head        <span class="token keyword">return</span> newhead<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="posts/d706.html"/>
      <url>posts/d706.html</url>
      
        <content type="html"><![CDATA[<h1 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a><em>线性DP</em></h1><ul><li>经典单串</li><li>经典双串</li></ul><h2 id="300-最长上升子序列"><a href="#300-最长上升子序列" class="headerlink" title="300.最长上升子序列"></a>300.最长上升子序列</h2><p>给定一个无序的整数数组，找到其中最长上升子序列的长度。</p><p><strong>输入</strong>: <code>[10,9,2,5,3,7,101,18]</code><br><strong>输出</strong>: <code>4</code><br><strong>解释</strong>: 最长的上升子序列是 <code>[2,3,7,101]</code>，它的长度是 <code>4</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法一：DP---O(n^2)</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span><span class="token punctuation">[</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法二：贪心+二分查找---O(nlogn)</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        d<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> d <span class="token operator">or</span> num<span class="token operator">></span>d<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                l<span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>                loc<span class="token operator">=</span>r                <span class="token keyword">while</span> l<span class="token operator">&lt;=</span>r<span class="token punctuation">:</span>                    mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>                    <span class="token keyword">if</span> d<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">>=</span>num<span class="token punctuation">:</span>                        loc<span class="token operator">=</span>mid                        r<span class="token operator">=</span>mid<span class="token number">-1</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>                d<span class="token punctuation">[</span>loc<span class="token punctuation">]</span><span class="token operator">=</span>num        <span class="token keyword">return</span> len<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#在nums的遍历中</span><span class="token comment" spellcheck="true">#1.如果num比末尾大，则直接加入到数组d末尾。</span><span class="token comment" spellcheck="true">#2.否则，在数组d中二分查找，找到第一个比num小的数d[k]，并更新 d[k + 1]=min(d[k+1],num)=num。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1143-最长公共子序列"><a href="#1143-最长公共子序列" class="headerlink" title="1143.最长公共子序列"></a>1143.最长公共子序列</h2><p>给定两个字符串 <code>text1</code> 和 <code>text2</code>，返回这两个字符串的最长公共子序列的长度。</p><p><strong>输入</strong>：<code>text1</code> = <code>&quot;abcde&quot;</code>, <code>text2</code> = <code>&quot;ace&quot;</code><br><strong>输出</strong>：<code>3</code><br><strong>解释</strong>：最长公共子序列是 <code>&quot;ace&quot;</code>，它的长度为 <code>3</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#方法一：DP</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text1<span class="token punctuation">:</span> str<span class="token punctuation">,</span> text2<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        m<span class="token punctuation">,</span>n<span class="token operator">=</span>len<span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>text2<span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#防止dp[i-1]下标超出范围</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> text1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">==</span>text2<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#经典双串</span><span class="token comment" spellcheck="true">#一些看起来变态的题，给些提示居然可以写出来。。。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#方法二：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text1<span class="token punctuation">:</span> str<span class="token punctuation">,</span> text2<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> text1 <span class="token operator">==</span> text2<span class="token punctuation">:</span>            <span class="token keyword">return</span> len<span class="token punctuation">(</span>text1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#if not set(text1).intersection(text2):</span>           <span class="token comment" spellcheck="true"># return 0</span>        d <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        m<span class="token punctuation">,</span> n <span class="token operator">=</span> len<span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>text2<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            d<span class="token punctuation">[</span>text2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> text1<span class="token punctuation">:</span>            <span class="token keyword">if</span> c <span class="token keyword">in</span> d<span class="token punctuation">:</span>                nums<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>d<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span>        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            idx <span class="token operator">=</span> bisect<span class="token punctuation">.</span>bisect_left<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> num<span class="token punctuation">)</span>            <span class="token keyword">if</span> idx <span class="token operator">==</span> len<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ans<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> num        <span class="token keyword">return</span> len<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="53-最大子序和"><a href="#53-最大子序和" class="headerlink" title="53.最大子序和"></a>53.最大子序和</h2><p>给定一个整数数组<code>nums </code>，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>max<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="152-乘积最大子数组"><a href="#152-乘积最大子数组" class="headerlink" title="152.乘积最大子数组"></a>152.乘积最大子数组</h2><p>给你一个整数数组 <code>nums</code> ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> nums<span class="token operator">==</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        res<span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span>        minn<span class="token punctuation">,</span>maxn<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            a<span class="token operator">=</span>n<span class="token operator">*</span>minn            b<span class="token operator">=</span>n<span class="token operator">*</span>maxn            maxn<span class="token operator">=</span>max<span class="token punctuation">(</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>            minn<span class="token operator">=</span>min<span class="token punctuation">(</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>            <span class="token keyword">if</span> maxn<span class="token operator">></span>res<span class="token punctuation">:</span>                res<span class="token operator">=</span>maxn        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198.打家劫舍"></a>198.打家劫舍</h2><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。<br>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        a<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> a<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">0</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结</strong></p><blockquote><p>DP方程：<code>dp[i]=max(dp[i-1],dp[i-2]+nums[i-1])</code></p></blockquote><h2 id="213-打家劫舍-II"><a href="#213-打家劫舍-II" class="headerlink" title="213.打家劫舍 II"></a>213.打家劫舍 II</h2><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。<br>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        cnt<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> cnt<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token keyword">return</span> max<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        dp1<span class="token punctuation">,</span>dp2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>cnt<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>cnt        dp1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        dp2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp1<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp2<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp2<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp2<span class="token punctuation">[</span>i<span class="token number">-3</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>dp1<span class="token operator">+</span>dp2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a><em>树形DP</em></h1><h2 id="337-打家劫舍-III"><a href="#337-打家劫舍-III" class="headerlink" title="337.打家劫舍 III"></a>337.打家劫舍 III</h2><p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个<strong>直接相连</strong>(即父与子关系）的房子在同一天晚上被打劫，房屋将自动报警。</p><p>计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>        lv<span class="token operator">=</span>self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        rv<span class="token operator">=</span>self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>lv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> rv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>lv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> rv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> root<span class="token punctuation">.</span>val <span class="token operator">+</span> lv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> rv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#树形DP，从树的左下构成一个表。</span><span class="token comment" spellcheck="true">#helper函数返回列表[不含此节点最大值，含此节点最大值]</span><span class="token comment" spellcheck="true">#经典</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="other"><a href="#other" class="headerlink" title="other"></a><em>other</em></h1><h2 id="LCP-19-秋叶收藏集"><a href="#LCP-19-秋叶收藏集" class="headerlink" title="LCP 19. 秋叶收藏集"></a>LCP 19. 秋叶收藏集</h2><p>小扣出去秋游，途中收集了一些红叶和黄叶，他利用这些叶子初步整理了一份秋叶收藏集 <code>leaves</code>， 字符串 <code>leaves</code> 仅包含小写字符 <code>r</code> 和 <code>y</code>， 其中字符 <code>r</code> 表示一片红叶，字符 <code>y</code> 表示一片黄叶。</p><p>出于美观整齐的考虑，小扣想要将收藏集中树叶的排列调整成<strong>「红、黄、红」</strong>三部分。每部分树叶数量可以不相等，但均需大于等于 1。每次调整操作，小扣可以将一片红叶替换成黄叶或者将一片黄叶替换成红叶。请问小扣最少需要多少次调整操作才能将秋叶收藏集调整完毕。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#方法一：dp</span><span class="token comment" spellcheck="true">#    dp[i][0]表示全部为红需要修改几次</span><span class="token comment" spellcheck="true">#    dp[i][1]表示【红黄】需要修改几次</span><span class="token comment" spellcheck="true">#    dp[i][2]表示【红黄红】需要修改几次</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minimumOperations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> leaves<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>leaves<span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span> <span class="token keyword">else</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true">#print(dp)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'y'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'y'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#for i in dp: print(i)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dp表时用[0]*3建表会出错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯&amp;递归</title>
      <link href="posts/ea8e.html"/>
      <url>posts/ea8e.html</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title="preface"></a><em>preface</em></h2><p>回溯算法实际上一个类似枚举的<strong>搜索尝试</strong>过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就 “回溯” 返回，尝试别的路径。</p><p>回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。</p><p><strong>代码框架：</strong> </p><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> 满足结束条件<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>add<span class="token punctuation">(</span>路径<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">for</span> 选择 <span class="token keyword">in</span> 选择列表<span class="token punctuation">:</span>        做选择        backtrack<span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span>        撤销选择<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考博客：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/51882471" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/51882471</a></li><li><a href="https://zhuanlan.zhihu.com/p/93530380" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/93530380</a></li></ul><p>leetcode题目：<a href="https://leetcode-cn.com/tag/backtracking/" target="_blank" rel="noopener">https://leetcode-cn.com/tag/backtracking/</a></p><h2 id="1-22-括号生成"><a href="#1-22-括号生成" class="headerlink" title="(1)22. 括号生成"></a>(1)22. 括号生成</h2><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 <strong>有效的</strong> 括号组合。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#s表cur_str_list,l 表示左括号数</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">if</span> l<span class="token operator">&lt;</span>n<span class="token punctuation">:</span>                s<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span>                backtrack<span class="token punctuation">(</span>s<span class="token punctuation">,</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span>                s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> r<span class="token operator">&lt;</span>l<span class="token punctuation">:</span>                s<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span>                backtrack<span class="token punctuation">(</span>s<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        backtrack<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200913174130683.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="2-无重复字符串的排列组合"><a href="#2-无重复字符串的排列组合" class="headerlink" title="(2)无重复字符串的排列组合"></a>(2)无重复字符串的排列组合</h2><p>无重复字符串的排列组合。编写一种方法，计算某字符串的所有排列组合，字符串每个字符均不相同。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法一：用itertools库中的permutations</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> list<span class="token punctuation">(</span>permutations<span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#方法二：回溯</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">permutation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> S<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> S<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>path<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> s<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                backtrack<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>path<span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span>        backtrack<span class="token punctuation">(</span>S<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-幂集"><a href="#3-幂集" class="headerlink" title="(3)幂集"></a>(3)幂集</h2><p>编写一种方法，返回某集合的所有子集。集合中<strong>不包含重复</strong>的元素。<br> 输入： nums = [1,2,3]<br> 输出：[[3],[1],[2],[1,2,3],[1,3],[2,3],[1,2],[]]</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#l表示可取的左点，r表示可取的右点</span>        <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>subset<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>subset<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>                subset<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                backtrack<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>subset<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span>                subset<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        backtrack<span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#回溯法厉害啊，2020-9-13的第三道回溯</span><span class="token comment" spellcheck="true">#这代码应该可以叫模板了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-八皇后问题"><a href="#4-八皇后问题" class="headerlink" title="(4)八皇后问题"></a>(4)八皇后问题</h2><p><a href="https://leetcode-cn.com/problems/eight-queens-lcci/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/eight-queens-lcci/</a></p><p>设计一种算法，打印 N 皇后在 N × N 棋盘上的各种摆法，其中每个皇后都不同行、不同列，也不在对角线上。这里的“对角线”指的是所有的对角线，不只是平分整个棋盘的那两条对角线。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">solveNQueens</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">queen</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> cur <span class="token operator">==</span> len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                A<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> i                flag <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token comment" spellcheck="true">#检验与前面的皇后是否冲突</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>i <span class="token operator">or</span> abs<span class="token punctuation">(</span>i <span class="token operator">-</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> cur <span class="token operator">-</span> j<span class="token punctuation">:</span>                        flag <span class="token operator">=</span> <span class="token boolean">False</span>                        <span class="token keyword">break</span>                <span class="token keyword">if</span> flag<span class="token punctuation">:</span> queen<span class="token punctuation">(</span>A<span class="token punctuation">,</span> cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        queen<span class="token punctuation">(</span><span class="token punctuation">[</span>None<span class="token punctuation">]</span><span class="token operator">*</span>n<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#接口对接部分</span>        temp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'.'</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>res <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#第i个答案</span>            <span class="token keyword">for</span> j<span class="token punctuation">,</span>row <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#第j个行</span>                row<span class="token punctuation">[</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Q"</span>                temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 这是个代码片段</span><span class="token comment" spellcheck="true"># A为答案，cur为第几行下标</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">queen</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cur <span class="token operator">==</span> len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#没写[:]不行，什么机制还不知道</span>            <span class="token keyword">return</span>         <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            A<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> i            flag <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token comment" spellcheck="true">#检验与前面的皇后是否冲突</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>i <span class="token operator">or</span> abs<span class="token punctuation">(</span>i <span class="token operator">-</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> cur <span class="token operator">-</span> j<span class="token punctuation">:</span>                    flag <span class="token operator">=</span> <span class="token boolean">False</span>                    <span class="token keyword">break</span>            <span class="token keyword">if</span> flag<span class="token punctuation">:</span> queen<span class="token punctuation">(</span>A<span class="token punctuation">,</span> cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    queen<span class="token punctuation">(</span><span class="token punctuation">[</span>None<span class="token punctuation">]</span><span class="token operator">*</span>n<span class="token punctuation">)</span>    <span class="token keyword">return</span> ansmain<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-解数独"><a href="#5-解数独" class="headerlink" title="(5)解数独"></a>(5)解数独</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">solveSudoku</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> board<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>                    <span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token string">"123456789"</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> check<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>                            board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>num                            <span class="token keyword">if</span> backtrack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>                            board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'.'</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>num<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>num<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> board<span class="token punctuation">[</span>x<span class="token operator">//</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">//</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token operator">==</span>num<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        backtrack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#回溯，，6</span><span class="token comment" spellcheck="true">#这种暴力回溯，时间复杂度太高了</span><span class="token comment" spellcheck="true">#尝试了一下引入参数，回溯不回来了，好菜</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-77-组合"><a href="#6-77-组合" class="headerlink" title="(6)77. 组合"></a>(6)77. 组合</h2><p>给定两个整数 n 和 k，返回 1 … n 中所有可能的 k 个数的组合。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法一：用库：</span><span class="token keyword">return</span> list<span class="token punctuation">(</span>itertools<span class="token punctuation">.</span>combinations<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方法二：回溯</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combine</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">==</span>k<span class="token punctuation">:</span>                 ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>start<span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                bk<span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                tmp<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        bk<span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-131-分割回文串"><a href="#7-131-分割回文串" class="headerlink" title="(7)131. 分割回文串"></a>(7)131. 分割回文串</h2><p>给定一个字符串 <code>s</code>，将 <code>s</code> 分割成一些子串，使每个子串都是回文串。</p><p>返回 <code>s</code> 所有可能的分割方案。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> l<span class="token operator">==</span>r<span class="token punctuation">:</span>                 ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                cur<span class="token operator">=</span>s<span class="token punctuation">[</span>l<span class="token punctuation">:</span>i<span class="token punctuation">]</span>                <span class="token keyword">if</span> cur<span class="token operator">==</span>cur<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">)</span>                    bk<span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>i<span class="token punctuation">,</span>r<span class="token punctuation">)</span>                    tmp<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        bk<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 后期试错出来的，</span><span class="token comment" spellcheck="true"># 回溯神奇啊</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-组合总和-II"><a href="#8-组合总和-II" class="headerlink" title="(8)组合总和 II"></a>(8)组合总和 II</h2><p>给定一个数组 <code>candidates</code> 和一个目标数 <code>target</code> ，找出 <code>candidates</code> 中所有可以使数字和为 <code>target</code> 的组合。</p><p><code>candidates</code> 中的每个数字在每个组合中只能使用一次。</p><p>说明：</p><ul><li>所有数字（包括目标数）都是正整数。</li><li>解集不能包含重复的组合。 </li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combinationSum2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> candidates<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        candidates<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> sum<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">==</span>target<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">if</span> sum<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">></span>target<span class="token punctuation">:</span> <span class="token keyword">return</span>             <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">></span>l <span class="token operator">and</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>candidates<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>   <span class="token comment" spellcheck="true">#这种回溯中去重。。。</span>                tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                bk<span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span>                tmp<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        bk<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 记录报错：unhashble type: 'list',列表中列表不能集合去重</span><span class="token comment" spellcheck="true"># 回溯之前，sort优化，并方便去重</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-组合总和-III"><a href="#9-组合总和-III" class="headerlink" title="(9)组合总和 III"></a>(9)组合总和 III</h2><p>找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中<strong>不存在重复的数字</strong>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combinationSum3</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>l<span class="token punctuation">,</span>k<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> n<span class="token operator">==</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                  ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span>             <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                bk<span class="token punctuation">(</span>path<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token number">-1</span><span class="token punctuation">,</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        bk<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token punctuation">,</span>n<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># if剪枝 if结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-复原IP地址"><a href="#10-复原IP地址" class="headerlink" title="(10)复原IP地址"></a>(10)复原IP地址</h2><p>给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。</p><p>有效的 IP 地址正好由四个整数（每个整数位于 0 到 255 之间组成），整数之间用 <code>.</code> 分隔。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">restoreIpAddresses</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">and</span> len<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">if</span> len<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>min<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    head<span class="token punctuation">,</span>tail<span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                    <span class="token keyword">if</span> head <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>int<span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">255</span> <span class="token operator">and</span> str<span class="token punctuation">(</span>int<span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>head<span class="token punctuation">:</span>                        f<span class="token punctuation">(</span>tail<span class="token punctuation">,</span>tmp<span class="token operator">+</span><span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span>                f<span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 一棵递归树</span><span class="token comment" spellcheck="true"># str(int(i))==i排除前缀0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-不同路径-III"><a href="#11-不同路径-III" class="headerlink" title="(11)不同路径 III"></a>(11)不同路径 III</h2><p><a href="https://leetcode-cn.com/problems/unique-paths-iii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/unique-paths-iii/</a></p><p>在二维网格 grid 上，有 4 种类型的方格：</p><ul><li><code>1</code> 表示起始方格。且只有一个起始方格。</li><li><code>2</code> 表示结束方格，且只有一个结束方格。</li><li><code>0</code> 表示我们可以走过的空方格。</li><li><code>-1</code> 表示我们无法跨越的障碍。</li><li>返回在四个方向（上、下、左、右）上行走时，从起始方格到结束方格的不同路径的数目。</li></ul><p>每一个无障碍方格都要通过一次，但是一条路径中不能重复通过同一个方格。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">uniquePathsIII</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        cnt<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> cnt<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">elif</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span> start<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span>steps<span class="token punctuation">)</span><span class="token punctuation">:</span>            x<span class="token punctuation">,</span>y<span class="token operator">=</span>cur            <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> x<span class="token operator">>=</span>rows <span class="token operator">or</span> y<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> y<span class="token operator">>=</span>cols<span class="token punctuation">:</span>                 <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token keyword">if</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token keyword">if</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">1</span> <span class="token keyword">if</span> steps<span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>            ans<span class="token operator">=</span><span class="token number">0</span>            grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>            ans<span class="token operator">+=</span>bk<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>steps<span class="token number">-1</span><span class="token punctuation">)</span>            ans<span class="token operator">+=</span>bk<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>steps<span class="token number">-1</span><span class="token punctuation">)</span>            ans<span class="token operator">+=</span>bk<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>steps<span class="token number">-1</span><span class="token punctuation">)</span>            ans<span class="token operator">+=</span>bk<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>steps<span class="token number">-1</span><span class="token punctuation">)</span>            grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">return</span> ans        <span class="token keyword">return</span> bk<span class="token punctuation">(</span>start<span class="token punctuation">,</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#回溯神仙</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="X-其它："><a href="#X-其它：" class="headerlink" title="(X)其它："></a>(X)其它：</h2><p>这种树形回溯或递归的思想666</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原则</title>
      <link href="posts/yuanze.html"/>
      <url>posts/yuanze.html</url>
      
        <content type="html"><![CDATA[<p>一些摘录夹杂着自己的想法：</p><ul><li>遇到事情，产生、应用、调整自己的原则，并不断重复</li><li>哦，他也冥想的</li><li>哈佛商学院的，（没有教师在黑板前告诉我们什么要记住，也没有考试测试我们有没有记住。相反，教师给我们的是真实的案例和研究，让我们进行阅读和分析。然后我们组成小组自由讨论。）</li><li>大宗商品，是指可进入流通领域，但非零售环节，具有商品属性并用于工农业生产与消费使用的大批量买卖的物质商品。在金融投资市场，包括3个类别：能源商品、基础原材料和农副产品。</li><li>讨厌就是讨厌，他在回想起（年度大会上给老板一拳）这件事的时候，也只是说：我太野性了。</li></ul><ul><li>从过去到现在，有意义的工作和有意义的人际关系都是我的主要目标</li><li>感慨，“我曾踏足山巅，也曾跌入谷底。而如今，二者都让我受益良多。”</li><li>愿意去理解那些看问题与你不一样的人是怎么形成他们看待问题的方式的</li><li>道理都懂，说起来和做起来又是两样了，所以啊，做事多动脑子。</li><li>当面对两种看起来矛盾的选择时，可以想想二者兼得的方法</li><li>我们这些“金融人士”看待问题的方式与经济学家大相径庭</li><li>李光耀，1923~2015，新加坡国父</li><li>桥水的文化：以创意择优的理论探寻极度真相、极度透明。</li><li>尽人事，听天命。</li></ul><ul><li>考察影响你的那些事物的规律，从而理解其背后的因果关系，并学习有效应对这些事物的原则。</li><li>拥抱现实，应对现实</li><li>为了拥有最好的生活，1知道最好的决策是什么，2有勇气做出最好的决策。</li><li>习惯的力量，核心观点：信号-&gt;自动运行-&gt;奖励</li><li>每个人的人格都是不同的，做事的方式也不同。我感觉我比较敏感，这其实没什么不好。</li><li>很多研究显示，人的幸福感和他赚到的金钱之间的相关性很低甚至为零，但是，幸福感与一个人所建立的人际关系质量却高度相关</li></ul><ul><li>这本书分3个部分：我的历程，生活原则，工作原则。以下为工作原则：</li><li>一个机构就像一个机器，主要由两组部件构成：文化和人。</li><li>优秀的文化不掩盖问题和分歧，而是公开妥善解决。</li><li>基于可信度加权的创意择优时实现有效决策的最佳模式</li><li>意识到错误是事物演变过程中的自然连带部分，珍视它。</li><li>让每个人可肆意评论其他人的观点，此举低效且浪费时间。</li><li>比做什么事更重要的是找对做事的人。</li><li>不要对所有人等同视之，要合理对待、有所区别</li><li>不要担心你的员工是不是喜欢你，不要让他们告诉你如何做事</li><li>不要发号施令让别人服从你，要努力为人所理解和理解他人，达成共识</li><li>确保你和你的员工承担相应的责任，并欢迎别人监督你的责任</li><li>当你了解一个人时，就会知道可从他那里得到什么</li></ul><ul><li>《原则》也只是一些特定情形下的原则总结，重要的还是多动脑子和独立思考。</li><li>关于幸福感的来源，这样会在看待人的阶级分类时好些，那些底层人的快乐又何尝不是他们的幸福。</li><li>读完了hh，学了太多东西记不住没关系，该记住的总会记住。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 书摘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 置底 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑客与画家</title>
      <link href="posts/hackers_and_painters.html"/>
      <url>posts/hackers_and_painters.html</url>
      
        <content type="html"><![CDATA[<p><strong>1.为什么书呆子不受欢迎</strong></p><ul><li>真实世界的特点是，它极其庞大。如果总体足够大，即使是人数最少的少数派，只要聚集在一起，也能产生可观的力量。在真实世界中，书呆子在某些地方聚集起来，形成自己的社区，智力因素成为那里最被看重的东西。有时，这种因素甚至会以相反的形式表现出来，特别是在大学的数理学系，书呆子甚至会夸大笨拙，以显示自己的聪明。约翰·纳什非常钦佩诺伯特·维纳，就学维纳的样子，经过走廊的时候都用手扶着墙走路。</li></ul><p><strong>2.黑客与画家</strong></p><ul><li>黑客与画家的共同之处，在于他们都是创作者。与作曲家、建筑师、作家一样，黑客和画家都是试图创作出优秀的作品。他们本质上都不是在做研究，虽然在创作过程中，他们可能会发现一些新技术（那样当然更好）。</li><li>我现在认为，大学里教给我的编程方法都是错的。你把整个程序想清楚的时间点，应该是在编写代码的同时，而不是在编写代码之前，这与作家、画家和建筑师的做法完全一样。</li></ul><p><strong>3.不能说的话</strong></p><ul><li>如果你想要清晰地思考，就必须远离人群。但是走得越远，你的处境就会越困难，受到的阻力也会越大，因为你没有迎合社会习俗，而是一步步地与它背道而驰。小时候，每个人都会鼓励你不断成长，变成一个心智成熟、不再耍小孩子脾气的人。但是，很少有人鼓励你继续成长，变成一个怀疑和抵制社会错误潮流的人。</li><li>如果自己就是潮水的一部分，又怎能看见潮流的方向呢？</li></ul><p><strong>5.另一条路</strong></p><ul><li>你能够通过浏览器发布软件，没有人能在你和浏览网站的用户之间插上一脚。你也许不会相信，但是我向你保证，微软公司害怕你。它的那些目中无人的中层管理人员也许不是这样想的，但是比尔·盖茨肯定是，因为1975年，上一次发布软件的新方式出现时，他也曾经跟你一样白手起家。</li><li>我认为，大量的下一代软件都将采用这个模式。甚至最大的输家——微软公司，看来也明白了，部分软件从桌面消失将是不可避免的。如果软件从桌面移到服务器上，对于开发者来说，一切将发生根本性的变化。本文将站在先行者的角度，描述我们正在经历的种种令人惊叹的变化。由于软件转移到服务器的趋势才刚刚开始，所以我下面所写的是对未来的憧憬。</li></ul><p><strong>6.如何创造财富</strong></p><ul><li>如果你想致富？应该怎么做？我认为最好的方法就是创业，或者加入创业公司。几百年来，这一直是致富的可靠途径。</li><li>创业公司往往与技术有关，所以“高技术创业公司”这个短语几乎就是同义重复。创业公司其实就是解决了某个技术难题的小公司。</li><li>从经济学观点看，你可以把创业想象成一个压缩过程，你的所有工作年份被压缩成了短短几年。你不再是低强度地工作四十年，而是以极限强度工作四年。在高技术领域，这种压缩的回报尤其丰厚，工作效率越高，额外报酬就越高。</li><li>最可能明白财富能被创造出来的人就是那些善于制作东西的人，也就是手工艺人。他们做出来的东西直接放在商店里卖。但是，随着工业化时代的来临，手工艺人越来越少。目前还存在的最大的手工艺人群体就是程序员。</li><li>上学和上班的相似之处要大于它们的不同。张三，20岁，某某大学的学生，现在变成了，张三，22岁，某某公司的程序员。</li><li>大公司会使得每个员工的贡献平均化，这是一个问题。我觉得，大公司最大的困扰就是无法准确测量每个员工的贡献。销售员是一个例外。</li><li>你想更努力地工作，但是你的工作与其他许多人的工作混杂在一起，这样就产生了问题。在大公司中，个人的表现无法单独测量，公司里其他人会拖累你。</li><li>要致富，你需要两样东西：可测量性和可放大性。</li><li>如果你有一个令你感到安全的工作，你是不会致富的，因为没有危险，就几乎等于没有可放大性。</li><li>这就是创业公司的真正意义。理想情况下，你与其他愿意更努力工作的人一起组成一个团队，共同谋取更高的回报（相比他们为大公司工作的情况）。因为创业公司的团队往往是自发形成的，许多有抱负的创始人彼此之间早就相识（至少听说过对方），所以他们对彼此贡献的评估要比一般的小团体更准确。创业公司不仅仅是十个人的团队，而且是十个同类人的团队。</li><li>团队越大，每个人的贡献就越接近于整体的平均值。所以，在不考虑其他因素的情况下，一个非常能干的人待在大公司里可能对他本人是一件很糟的事情，因为他的表现被其他不能干的人拖累了。</li><li>设置“进入壁垒”的方法之一就是申请专利。但是专利的保护程度可能不高。竞争对手通常能找到绕过专利的方法。如果找不到，它们可能就不找了，直接侵犯你的专利，等着你去起诉它们。大公司不害怕打官司，这对它们是家常便饭。</li><li>我认为，如果你的公司有机会被收购，那将是不错的选择。管理一家公司与创立一家公司是不同的两件事。当情况基本稳定下来以后，不妨让大公司来接手。这在财务上也是明智的选择，卖掉公司你的风险就分散了，</li></ul><p><strong>7.关注贫富差距</strong></p><ul><li>事实上，财富与金钱是两个概念。金钱只是用来交易财富的一种手段，财富才是有价值的东西，我们购买的商品和服务都属于财富。你到海外旅行时，不用看当地人的银行账户就会知道你来到的是富国还是穷国。你只要看看他们的财富就行了：建筑、街道、服装、健康状况等</li><li>我想提出一种相反的观点：现代社会的收入差距扩大是一种健康的信号。技术使得生产率的差异加速扩大，如果这种扩大没有反映在收入上面，只有三种可能的解释：（a）技术革新停顿了；（b）那些创造大部分财富的人停止工作了；（c）创造财富的人没有获得报酬。</li></ul><p><strong>9.设计者的品味</strong></p><ul><li>数学家会把出色的工作称赞为“优美的”。无论古今，科学家、工程师、音乐家、建筑师、设计师、作家、画家都是这样做的，他们都使用同一个词。</li><li>推动人才成批涌现的最大因素就是，让有天赋的人聚在一起，共同解决某个难题。互相激励比天赋更重要，达·芬奇之所以成为达·芬奇，主要原因不仅仅是他的天赋，更重要的是他生活在当时的佛罗伦萨，而不是米兰。今天，人类生活的流动性高得多，但是伟大的项目依然不成比例地集中在少数几个热点上：德国包豪斯建筑学院、曼哈顿计划、《纽约人》杂志、洛克希德公司的臭鼬工作室、施乐公司的帕洛阿尔托研究中心。</li></ul><p><strong>11.一百年后的编程语言</strong></p><ul><li>一百年后的物理学基本上不可能预测。但是计算机语言不一样，现在就动手设计一种一百年后可以吸引使用者的新语言，这在理论上似乎是可能的。</li><li>当你设计语言的时候，心里牢牢记住这个目标是有好处的。学习开车的时候，一个需要记住的原则就是要把车开直，不是通过将车身对齐画在地上的分隔线，而是通过瞄准远处的某个点。即使你的目标只在几米开外，这样做也是正确的。我认为，设计编程语言时，我们也应该这样做。</li></ul><p><strong>13.revenge of the nerd</strong></p><ul><li>简单说，因为这种语言本质上不是一种技术，而是数学。数学是不会过时的。你不应该把Lisp语言与50年代的硬件联系在一起，而是应该把它与快速排序（Quicksort）算法进行类比。这种算法是1960年提出的，至今仍然是最快的通用排序方法。</li><li>所以，我们就有了两点结论，我认为它们非常有价值。事实上，这是我用自己的经历换来的。第一，不同语言的编程能力不一样。第二，大多数经理故意忽视第一点。你把这两点事实结合起来，其实就得到了赚钱的诀窍。ITA 软件公司是运用这个诀窍的典型例子。如果你想在软件业获得成功，就使用你知道的最强大的语言，用它解决你知道的最难的问题，并且等待竞争对手的经理做出自甘平庸的选择。</li></ul><blockquote><p>这本书关于财富、创业、Lisp的见解真的很棒</p></blockquote><blockquote><p>是本好书，微信读书有</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 书摘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 置底 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
