<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>小站的更新</title>
      <link href="/posts/9280.html"/>
      <url>/posts/9280.html</url>
      
        <content type="html"><![CDATA[<h3 id="v2-6-——–2020-8-10"><a href="#v2-6-——–2020-8-10" class="headerlink" title="v2.6 ——–2020.8.10"></a>v2.6 ——–<em>2020.8.10</em></h3><ol><li>加入导航页</li><li>调整右上角导航栏</li></ol><h3 id="v2-5-——–2020-8-05"><a href="#v2-5-——–2020-8-05" class="headerlink" title="v2.5 ——–2020.8.05"></a>v2.5 ——–<em>2020.8.05</em></h3><ol><li><code>npm install --save hexo-helper-live2d</code><br>PC端添加了右下角的小朋友</li><li>更新图库</li><li>更改代码高亮</li></ol><h3 id="V2-4-——–2020-7-14"><a href="#V2-4-——–2020-7-14" class="headerlink" title="V2.4 ——–2020.7.14"></a>V2.4 ——–<em>2020.7.14</em></h3><ol><li>更改banner图片</li><li>去掉rainbow-framework</li><li>去掉dynamic-ribbon</li><li>更改配色</li><li>更改某些字体</li></ol><h3 id="V2-3"><a href="#V2-3" class="headerlink" title="V2.3"></a>V2.3</h3><ol><li>文章配图更新</li><li>更改比较多的样式，以后好好写blog了</li></ol><h3 id="V2-1"><a href="#V2-1" class="headerlink" title="V2.1"></a>V2.1</h3><ol><li>试一下评论功能</li></ol><h3 id="V2-0"><a href="#V2-0" class="headerlink" title="V2.0"></a>V2.0</h3><ol><li>更改一些样式</li><li>在header.ejs中config.title删除</li></ol><h3 id="V1-9"><a href="#V1-9" class="headerlink" title="V1.9"></a>V1.9</h3><ol><li>加入文章更新日期</li><li>更改footer.ejs</li></ol><h3 id="V1-8"><a href="#V1-8" class="headerlink" title="V1.8"></a>V1.8</h3><ol><li>更改移动端的一些问题</li><li>移动端有大白啦</li></ol><h3 id="V1-4"><a href="#V1-4" class="headerlink" title="V1.4"></a>V1.4</h3><ol><li>更改code(橘色-&gt;红色)</li></ol><h3 id="V1-2"><a href="#V1-2" class="headerlink" title="V1.2"></a>V1.2</h3><ol><li>加入音乐功能</li><li>删除banner上的Github链接</li><li>更改一些图片</li></ol><h3 id="V1-1"><a href="#V1-1" class="headerlink" title="V1.1"></a>V1.1</h3><ol><li>尝试烟花点击效果</li><li>尝试樱花动态飘落效果</li></ol><h3 id="V1-0"><a href="#V1-0" class="headerlink" title="V1.0"></a>V1.0</h3><ol><li>小站成功上线啦，由于是静态网页托管在Github上，不足之处还请谅解。</li></ol>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 置顶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode周赛笔记207</title>
      <link href="/posts/be9d.html"/>
      <url>/posts/be9d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/contest/weekly-contest-207/problems/rearrange-spaces-between-words/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-207/problems/rearrange-spaces-between-words/</a><br>第二题：<a href="https://leetcode-cn.com/contest/weekly-contest-207/problems/split-a-string-into-the-max-number-of-unique-substrings/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-207/problems/split-a-string-into-the-max-number-of-unique-substrings/</a><br>第三题：<a href="https://leetcode-cn.com/contest/weekly-contest-207/problems/maximum-non-negative-product-in-a-matrix/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-207/problems/maximum-non-negative-product-in-a-matrix/</a><br>第四题：<a href="https://leetcode-cn.com/contest/weekly-contest-207/problems/minimum-cost-to-connect-two-groups-of-points/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-207/problems/minimum-cost-to-connect-two-groups-of-points/</a></p></blockquote><h2 id="一、重新排列单词间的空格"><a href="#一、重新排列单词间的空格" class="headerlink" title="一、重新排列单词间的空格"></a>一、重新排列单词间的空格</h2><p>给你一个字符串 <code>text</code> ，该字符串由若干被空格包围的单词组成。每个单词由一个或者多个小写英文字母组成，并且两个单词之间至少存在一个空格。题目测试用例保证 <code>text</code> 至少包含一个单词 。</p><p>请你重新排列空格，使每对相邻单词之间的空格数目都 相等 ，并尽可能 最大化 该数目。如果不能重新平均分配所有空格，请 将多余的空格放置在字符串末尾 ，这也意味着返回的字符串应当与原 <code>text</code> 字符串的长度相等。</p><p>返回 <strong>重新排列空格后的字符串</strong> 。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reorderSpaces</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        n<span class="token operator">=</span>text<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>        t<span class="token operator">=</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        len_t<span class="token operator">=</span>len<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">if</span> len_t<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">+</span>n<span class="token operator">*</span><span class="token string">" "</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">" "</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">//</span>len_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">%</span>len_t<span class="token punctuation">)</span></code></pre><h2 id="二、拆分字符串使唯一子字符串的数目最大"><a href="#二、拆分字符串使唯一子字符串的数目最大" class="headerlink" title="二、拆分字符串使唯一子字符串的数目最大"></a>二、拆分字符串使唯一子字符串的数目最大</h2><p>给你一个字符串 <code>s</code> ，请你拆分该字符串，并返回拆分后唯一子字符串的最大数目。</p><p>字符串 <code>s</code> 拆分后可以得到若干 <strong>非空子字符串</strong> ，这些子字符串连接后应当能够还原为原字符串。但是拆分出来的每个子字符串都必须是 <strong>唯一的</strong> 。</p><p>注意：<strong>子字符串</strong> 是字符串中的一个连续字符序列。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxUniqueSplit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> l<span class="token operator">==</span>r<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#print(path[:])</span>                self<span class="token punctuation">.</span>ans<span class="token operator">=</span>max<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ans<span class="token punctuation">,</span>len<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>                tmp<span class="token operator">=</span>s<span class="token punctuation">[</span>l<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> tmp <span class="token operator">not</span> <span class="token keyword">in</span> path<span class="token punctuation">:</span>                    path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>                    bk<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>path<span class="token punctuation">)</span>                    path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        bk<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span class="token comment" spellcheck="true"># hhh,最近写多了回溯，</span><span class="token comment" spellcheck="true"># 这题写着写着拐进了dfs,又回溯了，回溯神奇啊</span><span class="token comment" spellcheck="true">#看着的时候挺抽象的，</span><span class="token comment" spellcheck="true">#回溯出来也就这样了</span><span class="token comment" spellcheck="true">#回溯应对拆分，专长了</span></code></pre><h2 id="三、矩阵的最大非负积"><a href="#三、矩阵的最大非负积" class="headerlink" title="三、矩阵的最大非负积"></a>三、矩阵的最大非负积</h2><p>给你一个大小为 <code>rows</code> x <code>cols</code> 的矩阵 <code>grid</code> 。最初，你位于左上角 <code>(0, 0)</code> ，每一步，你可以在矩阵中 向右 或 向下 移动。</p><p>在从左上角 <code>(0, 0)</code> 开始到右下角 <code>(rows - 1, cols - 1)</code> 结束的所有路径中，找出具有 <strong>最大非负积</strong> 的路径。路径的积是沿路径访问的单元格中所有整数的乘积。</p><p>返回 最大非负积 对 <code>10**9 + 7</code> 取余 的结果。如果最大积为负数，则返回 <code>-1</code> 。</p><p>注意，取余是在得到最大积之后执行的。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProductPath</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        mod<span class="token operator">=</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">7</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>        @lru_cache<span class="token punctuation">(</span>None<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;=</span>x<span class="token operator">&lt;</span>rows <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>y<span class="token operator">&lt;</span>cols<span class="token punctuation">:</span>                tmp<span class="token operator">=</span>tmp<span class="token operator">*</span>grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span>                <span class="token keyword">if</span> x<span class="token operator">==</span>rows<span class="token number">-1</span> <span class="token operator">and</span> y<span class="token operator">==</span>cols<span class="token number">-1</span><span class="token punctuation">:</span>                     self<span class="token punctuation">.</span>ans<span class="token operator">=</span>max<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ans<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span>                    <span class="token keyword">return</span>                 dfs<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>tmp<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>ans<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">else</span> self<span class="token punctuation">.</span>ans<span class="token operator">%</span>mod<span class="token comment" spellcheck="true">#lru_cache 个神仙</span></code></pre><blockquote><p>记录一下报错:</p><ol><li>ans 不加self在这里会<code>error：referenced before assignment</code><br>&emsp;还有一种改法：把ans弄成列表，子函数中用ans[0]更改</li></ol></blockquote><h2 id="四、连通两组点的最小成本"><a href="#四、连通两组点的最小成本" class="headerlink" title="四、连通两组点的最小成本"></a>四、连通两组点的最小成本</h2><p>给你两组点，其中第一组中有 <code>size1</code> 个点，第二组中有 <code>size2</code> 个点，且 <code>size1 &gt;= size2</code> 。</p><p>任意两点间的连接成本 <code>cost</code> 由大小为 <code>size1 x size2</code> 矩阵给出，其中 <code>cost[i][j]</code> 是第一组中的点 <code>i</code> 和第二组中的点 <code>j</code> 的连接成本。<strong>如果两个组中的每个点都与另一组中的一个或多个点连接，则称这两组点是连通的。</strong>换言之，第一组中的每个点必须至少与第二组中的一个点连接，且第二组中的每个点必须至少与第一组中的一个点连接。</p><p>返回连通两组点所需的最小成本。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">connectTwoGroups</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cost<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>cost<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>cost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">argmin</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>            mini<span class="token punctuation">,</span>minv<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> v<span class="token operator">&lt;</span>minv<span class="token punctuation">:</span>                    mini<span class="token punctuation">,</span>minv<span class="token punctuation">,</span><span class="token operator">=</span>i<span class="token punctuation">,</span>v            <span class="token keyword">return</span> mini        mina<span class="token operator">=</span><span class="token punctuation">[</span>argmin<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> cost<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#横排最小值索引表</span>        minb<span class="token operator">=</span><span class="token punctuation">[</span>argmin<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>cost<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#竖列最小值的索引表</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>vis<span class="token punctuation">,</span>pre<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> index <span class="token operator">>=</span>rows<span class="token punctuation">:</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token operator">==</span>cols<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>ans<span class="token operator">=</span>min<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ans<span class="token punctuation">,</span>pre<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> vis<span class="token punctuation">:</span>                            j<span class="token operator">=</span>minb<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                            pre<span class="token operator">+=</span>cost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>                    self<span class="token punctuation">.</span>ans<span class="token operator">=</span>min<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ans<span class="token punctuation">,</span>pre<span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">if</span> pre<span class="token operator">></span>self<span class="token punctuation">.</span>ans<span class="token punctuation">:</span> <span class="token keyword">return</span>             x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>cost<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">]</span>            x<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># sort()不能直接写在上面，机制不懂</span>            <span class="token keyword">for</span> c<span class="token punctuation">,</span>i <span class="token keyword">in</span> x<span class="token punctuation">:</span>                dfs<span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>vis<span class="token operator">|</span><span class="token punctuation">{</span>i<span class="token punctuation">}</span><span class="token punctuation">,</span>pre<span class="token operator">+</span>c<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 集合中 | 表示或运算</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span class="token comment" spellcheck="true"># from copy</span><span class="token comment" spellcheck="true"># km</span><span class="token comment" spellcheck="true"># 不懂</span><span class="token comment" spellcheck="true"># dfs可以的</span><span class="token comment" spellcheck="true"># 二分图： 不含奇数条边的环的一种图</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200920123941686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" alt="离内推最近的一次"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020秋季个人赛</title>
      <link href="/posts/8a9a.html"/>
      <url>/posts/8a9a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/contest/season/2020-fall/problems/nGK0Fy/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/season/2020-fall/problems/nGK0Fy/</a><br>第二题：<a href="https://leetcode-cn.com/contest/season/2020-fall/problems/2vYnGI/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/season/2020-fall/problems/2vYnGI/</a><br>第三题：<a href="https://leetcode-cn.com/contest/season/2020-fall/problems/UlBDOe/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/season/2020-fall/problems/UlBDOe/</a><br>第四题：<a href="https://leetcode-cn.com/contest/season/2020-fall/problems/meChtZ/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/season/2020-fall/problems/meChtZ/</a><br>第五题：<a href="https://leetcode-cn.com/contest/season/2020-fall/problems/Za25hA/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/season/2020-fall/problems/Za25hA/</a></p></blockquote><h2 id="一、速算机器人"><a href="#一、速算机器人" class="headerlink" title="一、速算机器人"></a>一、速算机器人</h2><p>小扣在秋日市集发现了一款速算机器人。店家对机器人说出两个数字（记作 <code>x</code> 和 <code>y</code>），请小扣说出计算指令：</p><p><code>&quot;A&quot;</code> 运算：使 <code>x = 2 * x + y</code>；<br><code>&quot;B&quot;</code> 运算：使 <code>y = 2 * y + x</code>。<br>在本次游戏中，店家说出的数字为 <code>x = 1</code> 和 <code>y = 0</code>，小扣说出的计算指令记作仅由大写字母 <code>A</code>、<code>B</code> 组成的字符串 <code>s</code>，字符串中字符的顺序表示计算顺序，请返回最终 <code>x</code> 与 <code>y</code> 的和为多少。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">calculate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        x<span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token string">'A'</span><span class="token punctuation">:</span> x<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token operator">+</span>y            <span class="token keyword">else</span><span class="token punctuation">:</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>y<span class="token operator">+</span>x        <span class="token keyword">return</span> x<span class="token operator">+</span>y</code></pre><h2 id="二、早餐组合"><a href="#二、早餐组合" class="headerlink" title="二、早餐组合"></a>二、早餐组合</h2><p>小扣在秋日市集选择了一家早餐摊位，一维整型数组 <code>staple</code> 中记录了每种主食的价格，一维整型数组 <code>drinks</code> 中记录了每种饮料的价格。小扣的计划选择一份主食和一款饮料，且花费不超过 <code>x</code> 元。请返回小扣共有多少种购买方案。</p><p>注意：答案需要以 <code>1e9 + 7 (1000000007)</code> 为底取模，如：计算初始结果为：<code>1000000008</code>，请返回 <code>1</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">breakfastNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> staple<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> drinks<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        mod<span class="token operator">=</span><span class="token number">1000000007</span>        staple<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        drinks<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> staple<span class="token punctuation">:</span>            a<span class="token operator">=</span>bisect<span class="token punctuation">.</span>bisect_right<span class="token punctuation">(</span>drinks<span class="token punctuation">,</span>x<span class="token operator">-</span>s<span class="token punctuation">)</span>            <span class="token keyword">if</span> a<span class="token punctuation">:</span>                ans<span class="token operator">+=</span>bisect<span class="token punctuation">.</span>bisect_right<span class="token punctuation">(</span>drinks<span class="token punctuation">,</span>x<span class="token operator">-</span>s<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                 <span class="token keyword">break</span>        <span class="token keyword">return</span> ans<span class="token operator">%</span>mod<span class="token comment" spellcheck="true">### bisect的二分，防止超时。</span></code></pre><h2 id="三、秋叶收藏集"><a href="#三、秋叶收藏集" class="headerlink" title="三、秋叶收藏集"></a>三、秋叶收藏集</h2><p>小扣出去秋游，途中收集了一些红叶和黄叶，他利用这些叶子初步整理了一份秋叶收藏集 <code>leaves</code>， 字符串 <code>leaves</code> 仅包含小写字符 <code>r</code> 和 <code>y</code>， 其中字符 <code>r</code> 表示一片红叶，字符 y 表示一片黄叶。</p><p>出于美观整齐的考虑，小扣想要将收藏集中树叶的排列调整成「红、黄、红」三部分。每部分树叶数量可以不相等，但均需大于等于 1。每次调整操作，小扣可以将一片红叶替换成黄叶或者将一片黄叶替换成红叶。请问小扣最少需要多少次调整操作才能将秋叶收藏集调整完毕。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 思路：</span><span class="token comment" spellcheck="true"># 1. 动态规划</span><span class="token comment" spellcheck="true"># 2. dp[i][0]表示全部为红需要修改几次</span><span class="token comment" spellcheck="true">#    dp[i][1]表示【红黄】需要修改几次</span><span class="token comment" spellcheck="true">#    dp[i][2]表示【红黄红】需要修改几次</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minimumOperations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> leaves<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>leaves<span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span> <span class="token keyword">else</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'y'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'y'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> leaves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 3种模式下的状态转移方程，可以的</span><span class="token comment" spellcheck="true"># DP厉害啊，从无到有</span></code></pre><h2 id="四、快速公交"><a href="#四、快速公交" class="headerlink" title="四、快速公交"></a>四、快速公交</h2><p>小扣打算去秋日市集，由于游客较多，小扣的移动速度受到了人流影响：</p><p>小扣从 x 号站点移动至 x + 1 号站点需要花费的时间为 <code>inc</code>；<br>小扣从 x 号站点移动至 x - 1 号站点需要花费的时间为 <code>dec</code>。</p><p>现有 <code>m</code> 辆公交车，编号为 <code>0</code> 到 <code>m-1</code>。小扣也可以通过搭乘编号为 <code>i</code> 的公交车，从 <code>x</code> 号站点移动至 <code>jump[i]*x</code> 号站点，耗时仅为 <code>cost[i]</code>。小扣可以搭乘任意编号的公交车且搭乘公交次数不限。</p><p>假定小扣起始站点记作 <code>0</code>，秋日市集站点记作 <code>target</code>，请返回小扣抵达秋日市集最少需要花费多少时间。由于数字较大，最终答案需要对 <code>1000000007 (1e9 + 7)</code> 取模。</p><p>注意：小扣可在移动过程中到达编号大于 <code>target</code> 的站点。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> lru_cache<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">busRapidTransit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">,</span> inc<span class="token punctuation">:</span> int<span class="token punctuation">,</span> dec<span class="token punctuation">:</span> int<span class="token punctuation">,</span> jump<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> cost<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        @lru_cache<span class="token punctuation">(</span>None<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">min_cost</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            cur_cost <span class="token operator">=</span> inc <span class="token operator">*</span> target  <span class="token comment" spellcheck="true"># 1.直接走回站点</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>jump<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> target <span class="token operator">%</span> jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    cur_cost <span class="token operator">=</span> min<span class="token punctuation">(</span>cur_cost<span class="token punctuation">,</span> min_cost<span class="token punctuation">(</span>target <span class="token operator">//</span> jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span>                  <span class="token comment" spellcheck="true"># 2.刚好有公交</span>                cur_cost <span class="token operator">=</span> min<span class="token punctuation">(</span>cur_cost<span class="token punctuation">,</span> min_cost<span class="token punctuation">(</span>target <span class="token operator">//</span> jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>target <span class="token operator">%</span> jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> inc<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 3.往前走再公交</span>                <span class="token keyword">if</span> target <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>                    cur_cost <span class="token operator">=</span> min<span class="token punctuation">(</span>cur_cost<span class="token punctuation">,</span> min_cost<span class="token punctuation">(</span>target <span class="token operator">//</span> jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> target <span class="token operator">%</span> jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> dec<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 4. 往后走再公交</span>            <span class="token keyword">return</span> cur_cost        mod <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span>        <span class="token keyword">return</span> min_cost<span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token comment" spellcheck="true"># from copy</span><span class="token comment" spellcheck="true"># 核心思想：记忆化递归</span><span class="token comment" spellcheck="true"># 从终点回到起点，4种方式</span></code></pre><h2 id="五、追逐游戏"><a href="#五、追逐游戏" class="headerlink" title="五、追逐游戏"></a>五、追逐游戏</h2><p>秋游中的小力和小扣设计了一个追逐游戏。他们选了秋日市集景区中的 <code>N</code> 个景点，景点编号为 <code>1~N</code>。此外，他们还选择了 <code>N</code> 条小路，满足任意两个景点之间都可以通过小路互相到达，且不存在两条连接景点相同的小路。整个游戏场景可视作一个无向连通图，记作二维数组 <code>edges</code>，数组中以 <code>[a,b]</code> 形式表示景点 a 与景点 b 之间有一条小路连通。</p><p>小力和小扣只能沿景点间的小路移动。小力的目标是在最快时间内追到小扣，小扣的目标是尽可能延后被小力追到的时间。游戏开始前，两人分别站在两个不同的景点 <code>startA</code> 和 <code>startB</code>。每一回合，小力先行动，小扣观察到小力的行动后再行动。小力和小扣在每回合可选择以下行动之一：</p><ul><li>移动至相邻景点</li><li>留在原地</li></ul><p>如果小力追到小扣（即两人于某一时刻出现在同一位置），则游戏结束。若小力可以追到小扣，请返回最少需要多少回合；若小力无法追到小扣，请返回 -1。</p><p>注意：小力和小扣一定会采取最优移动策略。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">chaseGame</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> edges<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> startA<span class="token punctuation">:</span> int<span class="token punctuation">,</span> startB<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">get_cycle</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> start<span class="token operator">=</span>startA<span class="token punctuation">)</span><span class="token punctuation">:</span>            cycle <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>            father <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            depth <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            father<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> start            depth<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            queue <span class="token operator">=</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span>            i <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">:</span>                u <span class="token operator">=</span> queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">for</span> v <span class="token keyword">in</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> depth<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                        depth<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> depth<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>                        father<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u                        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> father<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> v<span class="token punctuation">:</span>                            <span class="token keyword">continue</span>                        <span class="token keyword">while</span> depth<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">></span> depth<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">:</span>                            cycle<span class="token punctuation">.</span>add<span class="token punctuation">(</span>u<span class="token punctuation">)</span>                            u <span class="token operator">=</span> father<span class="token punctuation">[</span>u<span class="token punctuation">]</span>                        <span class="token keyword">while</span> depth<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> depth<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>                            cycle<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v<span class="token punctuation">)</span>                            v <span class="token operator">=</span> father<span class="token punctuation">[</span>v<span class="token punctuation">]</span>                        <span class="token keyword">while</span> u <span class="token operator">!=</span> v<span class="token punctuation">:</span>                            cycle<span class="token punctuation">.</span>add<span class="token punctuation">(</span>u<span class="token punctuation">)</span>                            cycle<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v<span class="token punctuation">)</span>                            u <span class="token operator">=</span> father<span class="token punctuation">[</span>u<span class="token punctuation">]</span>                            v <span class="token operator">=</span> father<span class="token punctuation">[</span>v<span class="token punctuation">]</span>                        cycle<span class="token punctuation">.</span>add<span class="token punctuation">(</span>u<span class="token punctuation">)</span>                        <span class="token keyword">return</span> cycle                i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> cycle<span class="token punctuation">,</span> start<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            circle_pos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>            min_arrival <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>            arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            queue <span class="token operator">=</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span>            i <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">:</span>                u <span class="token operator">=</span> queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">if</span> u <span class="token keyword">in</span> cycle <span class="token operator">and</span> arr<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min_arrival<span class="token punctuation">:</span>                    circle_pos <span class="token operator">=</span> u                    min_arrival <span class="token operator">=</span> arr<span class="token punctuation">[</span>u<span class="token punctuation">]</span>                <span class="token keyword">for</span> v <span class="token keyword">in</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> arr<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                        arr<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>                        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">return</span> arr<span class="token punctuation">,</span> circle_pos        n <span class="token operator">=</span> len<span class="token punctuation">(</span>edges<span class="token punctuation">)</span>        graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> u<span class="token punctuation">,</span> v <span class="token keyword">in</span> edges<span class="token punctuation">:</span>            graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>            graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>u<span class="token punctuation">)</span>        cycle <span class="token operator">=</span> get_cycle<span class="token punctuation">(</span>graph<span class="token punctuation">)</span>        arrA<span class="token punctuation">,</span> posA <span class="token operator">=</span> bfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> cycle<span class="token punctuation">,</span> startA<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        arrB<span class="token punctuation">,</span> posB <span class="token operator">=</span> bfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> cycle<span class="token punctuation">,</span> startB<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(cycle)</span>        <span class="token comment" spellcheck="true"># print(arrA, posA, arrA[posA])</span>        <span class="token comment" spellcheck="true"># print(arrB, posB, arrB[posB])</span>        <span class="token keyword">if</span> arrA<span class="token punctuation">[</span>startB<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> arrA<span class="token punctuation">[</span>startB<span class="token punctuation">]</span>        <span class="token keyword">if</span> arrA<span class="token punctuation">[</span>posB<span class="token punctuation">]</span> <span class="token operator">></span> arrB<span class="token punctuation">[</span>posB<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">and</span> len<span class="token punctuation">(</span>cycle<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        ans <span class="token operator">=</span> arrA<span class="token punctuation">[</span>startB<span class="token punctuation">]</span>        queue <span class="token operator">=</span> <span class="token punctuation">[</span>startB<span class="token punctuation">]</span>        i <span class="token operator">=</span> <span class="token number">0</span>        arrived <span class="token operator">=</span> set<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">:</span>            u <span class="token operator">=</span> queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">for</span> v <span class="token keyword">in</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> v <span class="token operator">not</span> <span class="token keyword">in</span> arrived <span class="token operator">and</span> arrA<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> arrB<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>                    arrived<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v<span class="token punctuation">)</span>                    queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>                    ans <span class="token operator">=</span> max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> arrA<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    ans <span class="token operator">=</span> max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> arrA<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># from copy</span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>二题选手，要好好努力了</p><p>多跟大佬学习，多刷知识</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron之旅</title>
      <link href="/posts/6db0.html"/>
      <url>/posts/6db0.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-介绍"><a href="#0-介绍" class="headerlink" title="0.介绍"></a>0.介绍</h2><p>使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序</p><h2 id="1-基础"><a href="#1-基础" class="headerlink" title="1.基础"></a>1.基础</h2><p>官方文档：<a href="http://www.electronjs.org/docs" target="_blank" rel="noopener">http://www.electronjs.org/docs</a></p><p>构建一个demo：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/demopark/electron-api-demos-Zh_CN$ <span class="token function">cd</span> electron-api-demos-Zh_CN$ <span class="token function">npm</span> <span class="token function">install</span>$ <span class="token function">npm</span> start</code></pre><p>Hello World!<br>We are using Node.js 12.16.3, Chromium 85.0.4183.93, and Electron 10.1.1.</p><h2 id="js库"><a href="#js库" class="headerlink" title="js库"></a>js库</h2><p><code>React</code> 是一个用于构建用户界面的 JAVASCRIPT 库。</p><p>React 主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。</p><p>React 起源于 Facebook 的内部项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。</p><p><code>Vue.js</code>是一套构建用户界面的渐进式框架。</p><p>Vue 只关注视图层， 采用自底向上增量开发的设计。</p><p>Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p><blockquote><p>Electron 可以让你使用纯 JavaScript 调用丰富的原生(操作系统) APIs 来创造桌面应用。 你可以把它看作一个 Node. js 的变体，它专注于桌面应用而不是 Web 服务器端。</p></blockquote><blockquote><p><strong>两个核心:</strong><br>main-process<br>render-process</p></blockquote><blockquote><p><strong>三个部分:</strong><br><strong>chromium</strong>: for making web pages<br><strong>nodejs</strong>: for filesystems and networks<br><strong>native apis</strong>: for three systems</p></blockquote><p>应用架构：多窗口，单窗口</p><p>Electron在主进程和渲染进程中提供了大量API去帮助开发桌面应用程序， 在主进程和渲染进程中，你可以通过require的方式将其包含在模块中以此，获取Electron的API</p>]]></content>
      
      
      <categories>
          
          <category> 应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息技术实践</title>
      <link href="/posts/7bab.html"/>
      <url>/posts/7bab.html</url>
      
        <content type="html"><![CDATA[<h3 id="windows命令："><a href="#windows命令：" class="headerlink" title="windows命令："></a>windows命令：</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>cls</code></td><td></td></tr><tr><td><code>help</code></td><td></td></tr><tr><td><code>dir</code></td><td></td></tr><tr><td><code>TREE</code></td><td>显示目录结构</td></tr><tr><td><code>COPY</code></td><td></td></tr><tr><td><code>MOVE</code></td><td></td></tr><tr><td><code>DEL</code></td><td></td></tr><tr><td><code>MD</code></td><td>创建文件夹</td></tr><tr><td><code>RD</code></td><td>删除文件夹</td></tr></tbody></table><h3 id="windows批处理文件："><a href="#windows批处理文件：" class="headerlink" title="windows批处理文件："></a>windows批处理文件：</h3><ul><li>一次性运行一批CMD命令，可以写在文本文档中</li><li>以<code>bat</code>为后缀名，双击可执行</li></ul><h3 id="Linux："><a href="#Linux：" class="headerlink" title="Linux："></a>Linux：</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>cd</code></td><td></td></tr><tr><td><code>pwd</code></td><td>显示当前所在路径</td></tr><tr><td><code>ls</code></td><td>显示当前路径文件列表</td></tr><tr><td><code>date</code></td><td></td></tr><tr><td><code>bc</code></td><td>计算器，<code>quit</code>退出</td></tr><tr><td><code>man</code></td><td>显示命令的帮助</td></tr><tr><td><code>cp</code> <code>mv</code> <code>rm</code></td><td>文件复制、移动、删除</td></tr><tr><td><code>mkdir</code> <code>rmdir</code></td><td>创建新目录，删除空目录</td></tr></tbody></table><hr><table><thead><tr><th>击键</th><th>描述</th></tr></thead><tbody><tr><td><code>TAB</code></td><td>自动补全命令</td></tr><tr><td><code>CTRL+C</code></td><td>终止当前命令</td></tr><tr><td><code>CTRL+D</code></td><td>退出终端</td></tr></tbody></table><hr><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>chmod</code></td><td>修改属性</td></tr><tr><td><code>cat</code></td><td>查看文件内容</td></tr><tr><td><code>touch t.txt</code></td><td>创建一个叫<code>t.txt</code>的文件</td></tr><tr><td><code>rm t.txt</code></td><td>删除一个叫<code>t.txt</code>的文件，删除文件可以直接用<code>rm</code></td></tr><tr><td><code>rm -rf m</code></td><td>删除一个叫<code>m</code>的文件夹</td></tr></tbody></table><blockquote><p><strong>cd 中的路径操作：</strong><br><code>cd /</code> 返回根目录（最高级）<br><code>cd ..</code>返回上级目录<br><code>cd m</code> 与 <code>cd ./m</code>相同<br><code>cd ~</code>普通用户相当于<code>cd /home/当前用户名</code>，root用户相当于 <code>cd /root</code></p></blockquote><blockquote><p><strong>绝对路径</strong>由 <code>/</code> 开始写起，如<code>/home/user</code></p></blockquote><blockquote><p>权限不足时<code>sudo -i</code>进入<strong>超级用户模式</strong></p></blockquote><h3 id="linux文件属性"><a href="#linux文件属性" class="headerlink" title="linux文件属性"></a>linux文件属性</h3><p>在Linux中我们可以使用<code>ll</code>或者<code>ls –l</code>命令来显示一个文件的属性以及文件所属的用户和组</p><p>现在文件夹m有如下信息：<code>drwxr-xr-x 4 root root 4096 Sep  6 03:51 m/</code></p><blockquote><p>第一个字符代表文件是目录、文件或链接文件等。<br><code>d</code>表示为目录，<code>-</code>表示为文件</p></blockquote><blockquote><p>接下来的字符中，三个为一组。且均为 <code>rwx</code> 的三个参数的组合。其中，<code>[ r ]</code>代表可读(read)、<code>[ w ]</code>代表可写(write)、<code>[ x ]</code>代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号<code>[ - ]</code>而已。<br><img src="https://www.runoob.com/wp-content/uploads/2014/06/363003_1227493859FdXT.png" alt=""></p></blockquote><hr><blockquote><p>关于文件属性为XXX的解释：<br><code>rwxrw----</code>  &lt;=&gt;  <code>111110000</code>  &lt;=&gt; <code>760</code></p></blockquote><blockquote><p><code>chmod  XXX  文件名</code><br>–&gt;修改文件为XXX属性</p></blockquote><blockquote><p><code>chmod  [-R]  XXX  目录名</code><br>–&gt;修改文件夹的属性，这里-R参数指示递归修改，将目录下所有文件的属性均修改为xxx</p></blockquote><p>更多信息：<a href="https://www.runoob.com/linux/linux-file-attr-permission.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-file-attr-permission.html</a></p><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><p>安装vim: <code>sudo apt-get install vim</code></p><p><code>vim 文件名</code>：<br>直接打开或新建一个文件</p><p>三种工作模式：</p><ul><li><strong>查看模式</strong></li><li><strong>编辑模式</strong>，在查看模式下按下<code>i</code> or <code>o</code> or <code>q</code>进入，<code>Esc</code>退出</li><li><strong>命令模式</strong>，在查看模式下按下<code>:</code>进入</li></ul><table><thead><tr><th>查看模式下</th><th>描述</th></tr></thead><tbody><tr><td><code>0</code></td><td>移动到当前行开头</td></tr><tr><td><code>$</code></td><td>移动到当前行末尾</td></tr><tr><td><code>gg</code></td><td>移动到文件开头</td></tr><tr><td><code>G</code></td><td>移动到文件末尾</td></tr><tr><td><code>[n]G</code></td><td>移动到第n行</td></tr><tr><td><code>[n]space</code></td><td></td></tr><tr><td><code>[n]Enter</code></td><td></td></tr><tr><td><code>dd</code> <code>[n]dd</code></td><td>删除行</td></tr><tr><td><code>yy</code> <code>[n]yy</code></td><td>复制行</td></tr><tr><td><code>p</code></td><td>粘贴</td></tr><tr><td><code>u</code></td><td>撤销</td></tr></tbody></table><hr><table><thead><tr><th>命令模式下</th><th>描述</th></tr></thead><tbody><tr><td><code>w</code></td><td>保存</td></tr><tr><td><code>q</code> <code>q!</code></td><td>退出,强制退出</td></tr><tr><td><code>wq</code></td><td>保存退出</td></tr><tr><td><code>set nu</code></td><td>显示行号</td></tr><tr><td><code>set nonu</code></td><td></td></tr><tr><td><code>syntax on</code></td><td>显示语法高亮</td></tr></tbody></table><h3 id="shell基础"><a href="#shell基础" class="headerlink" title="shell基础"></a>shell基础</h3><p>shell: 提供了用户与内核交互的接口</p><p>一般情况下 vim建立的文本文件属性值为<code>644</code>，需要添加<code>x</code>属性 <code>chmod 755 ~~~</code></p><p>变量是一个名字，不是一个值，用<code>$</code>来取值</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><code>echo</code></td><td>打印一行，自动换行</td></tr><tr><td><code>printf</code></td><td></td></tr><tr><td><code>var=num</code></td><td>变量不区分类型，<code>=</code>前后不能有空格</td></tr></tbody></table><hr><p>运行shell脚本:<br>① <code>chmod +x ./test.sh</code>  #使脚本具有执行权限<br>② <code>./test.sh</code>  #执行脚本</p><p>部分摘自：<a href="https://www.runoob.com/linux/linux-shell.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-shell.html</a></p><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td><code>-eq</code></td><td>两数相等返回true</td></tr><tr><td><code>-ne</code></td><td></td></tr><tr><td><code>-gt</code> <code>-ge</code></td><td><code>&gt;</code> <code>&gt;=</code></td></tr><tr><td><code>-lt</code> <code>-le</code></td><td><code>&lt;</code> <code>&lt;=</code></td></tr></tbody></table><h3 id="课堂作业："><a href="#课堂作业：" class="headerlink" title="课堂作业："></a>课堂作业：</h3><p>一、写出在Linux终端下，如下操作序列的命令行</p><p>（1）回到家目录<br>&emsp;&emsp;&emsp;<code>cd /home</code></p><p>（2）在家目录下建立test目录<br>&emsp;&emsp;&emsp;<code>mkdir test</code></p><p>（3）在其中建立t.txt文件（touch   t.txt），建立目录m<br>&emsp;&emsp;&emsp;<code>touch t.txt &amp;&amp; mkdir m</code></p><p>（4）将t.txt复制5份到m中，分别命名为t1.txt~t5.txt<br>&emsp;&emsp;&emsp;<code>cp t.txt m/t1.txt &amp;&amp; cp t.txt m/t2.txt &amp;&amp; cp t.txt m/t3.txt &amp;&amp; cp t.txt m/t4.txt &amp;&amp;cp t.txt m/t5.txt</code></p><p>（5）复制m目录为n目录<br>&emsp;&emsp;&emsp;<code>cp -r m n</code></p><p>（6）去掉m目录的三个x属性，出现什么情况？描述一下，再修改回来<br>&emsp;&emsp;&emsp;<code>chmod 644 m</code><br>&emsp;&emsp;&emsp;<code>文件无法打开</code><br>&emsp;&emsp;&emsp;<code>chmod 755 m</code><br>&emsp;说明：<code>rwxr-xr-x</code>的755变成644 </p><p>（7）修改n目录属性，使其及其下面的所有文件均具有最大权限（777）。<br>&emsp;&emsp;&emsp;<code>chmod -R 777 n</code><br>&emsp;注意：那个R区分大小写</p><p>（8）进入/tmp目录，选取一个文件，cp到你的m目录<br>&emsp;&emsp;&emsp;<code>cp /tmp/temp.txt m</code></p><hr><p>二、用shell写一个猜价格脚本</p><p>提示用户输入一个价格上限，然后根据上限数值产生一个合适的随机数价格。</p><p>然后提示用户输入猜测值。提示用户输入的猜测值与真实值的高低，直到用户猜中为止。</p><p>注：shell中，可以使用$RANDOM获得一个随机整数。<br><img src="https://img-blog.csdnimg.cn/20200913130551384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" alt="代码"></p><p><img src="https://img-blog.csdnimg.cn/20200913130551391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" alt="结果"></p><p><strong>注意：</strong> </p><ul><li><code>[</code> <code>]</code>左右要有空格</li><li><code>&quot;$num&quot;</code>，<code>&quot;$x&quot;</code> 的双引号都可以去掉</li><li>shell算术运算符有<code>==</code>，没有<code>&gt;</code> <code>&lt;</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode双周赛34</title>
      <link href="/posts/98e0.html"/>
      <url>/posts/98e0.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/problems/matrix-diagonal-sum/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/matrix-diagonal-sum/</a><br>第二题：<a href="https://leetcode-cn.com/problems/number-of-ways-to-split-a-string/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-ways-to-split-a-string/</a><br>第三题：<a href="https://leetcode-cn.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/</a><br>第四题：<a href="https://leetcode-cn.com/problems/count-all-possible-routes/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-all-possible-routes/</a></p></blockquote><h3 id="1-矩阵对角线元素的和"><a href="#1-矩阵对角线元素的和" class="headerlink" title="(1)矩阵对角线元素的和"></a>(1)矩阵对角线元素的和</h3><p>给你一个正方形矩阵 <code>mat</code>，请你返回矩阵对角线元素的和。</p><p>输入：<code>mat = [[1,2,3],[4,5,6],[7,8,9]]</code><br>输出：<code>25</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">diagonalSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mat<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        l<span class="token operator">=</span>len<span class="token punctuation">(</span>mat<span class="token punctuation">)</span>        prim<span class="token operator">=</span>sum<span class="token punctuation">(</span><span class="token punctuation">[</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        seco<span class="token operator">=</span>sum<span class="token punctuation">(</span><span class="token punctuation">[</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> l<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> prim<span class="token operator">+</span>seco        <span class="token keyword">else</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> prim<span class="token operator">+</span>seco<span class="token operator">-</span>mat<span class="token punctuation">[</span>l<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span></code></pre><h3 id="2-分割字符串的方案数"><a href="#2-分割字符串的方案数" class="headerlink" title="(2)分割字符串的方案数"></a>(2)分割字符串的方案数</h3><p>给你一个二进制串 <code>s</code>  （一个只包含 0 和 1 的字符串），我们可以将 <code>s</code> 分割成 3 个 非空 字符串 s1, s2, s3 （s1 + s2 + s3 = s）。</p><p>请你返回分割 <code>s</code> 的方案数，满足 s1，s2 和 s3 中字符 ‘1’ 的数目相同。</p><p>由于答案可能很大，请将它对 <code>10^9 + 7</code> 取余后返回。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numWays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>             mod<span class="token operator">=</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span>        len_s<span class="token operator">=</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        helper<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len_s<span class="token punctuation">)</span><span class="token punctuation">:</span>            helper<span class="token punctuation">.</span>append<span class="token punctuation">(</span>helper<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cnt<span class="token operator">=</span>helper<span class="token punctuation">[</span>len_s<span class="token punctuation">]</span>        <span class="token keyword">if</span> cnt<span class="token operator">%</span><span class="token number">3</span> <span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> <span class="token operator">not</span> cnt<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>len_s<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>len_s<span class="token number">-2</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token operator">%</span>mod        <span class="token keyword">return</span> helper<span class="token punctuation">.</span>count<span class="token punctuation">(</span>cnt<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span>helper<span class="token punctuation">.</span>count<span class="token punctuation">(</span>cnt<span class="token operator">//</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token comment" spellcheck="true"># helper就很灵性</span></code></pre><h3 id="3-删除最短的子数组使剩余数组有序"><a href="#3-删除最短的子数组使剩余数组有序" class="headerlink" title="(3)删除最短的子数组使剩余数组有序"></a>(3)删除最短的子数组使剩余数组有序</h3><p>给你一个整数数组 <code>arr</code> ，请你删除一个子数组（可以为空），使得 <code>arr</code> 中剩下的元素是 非递减 的。</p><p>一个子数组指的是原数组中连续的一个子序列。</p><p>请你返回满足题目要求的最短子数组的长度。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findLengthOfShortestSubarray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        len_arr<span class="token operator">=</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># k 用于计算非递减的个数</span>        k<span class="token operator">=</span>len_arr<span class="token number">-1</span>        <span class="token keyword">while</span> k<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> arr<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span> k<span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">if</span> k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        r<span class="token operator">=</span>k        j<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">while</span> j<span class="token operator">&lt;</span>len_arr<span class="token number">-1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># j 从0到倒数第二个元素</span>            ci<span class="token operator">=</span>bisect_left<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            t<span class="token operator">=</span>len_arr<span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len_arr<span class="token operator">-</span>k<span class="token operator">-</span>ci<span class="token punctuation">)</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> r<span class="token operator">></span>t<span class="token punctuation">:</span> r<span class="token operator">=</span>t            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">break</span>            j<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> r<span class="token comment" spellcheck="true"># 不懂</span></code></pre><h3 id="4-统计所有可行路径"><a href="#4-统计所有可行路径" class="headerlink" title="(4)统计所有可行路径"></a>(4)统计所有可行路径</h3><p>给你一个 <strong>互不相同</strong> 的整数数组，其中 <code>locations[i]</code> 表示第 <code>i</code> 个城市的位置。同时给你 <code>start</code>，<code>finish</code> 和 <code>fuel</code> 分别表示出发城市、目的地城市和你初始拥有的汽油总量</p><p>每一步中，如果你在城市 <code>i</code> ，你可以选择任意一个城市 <code>j</code> ，满足  <code>j != i</code> 且 <code>0 &lt;= j &lt; locations.length</code> ，并移动到城市 <code>j</code> 。从城市 <code>i</code> 移动到 <code>j</code> 消耗的汽油量为 <code>|locations[i] - locations[j]|</code>，<code>|x|</code> 表示 <code>x</code> 的绝对值。</p><p>请注意， <code>fuel</code> 任何时刻都 <strong>不能</strong> 为负，且你 <strong>可以</strong> 经过任意城市超过一次（包括 start 和 finish ）。</p><p>请你返回从 <code>start</code> 到 <code>finish</code> 所有可能路径的数目。</p><p>由于答案可能很大， 请将它对 <code>10^9 + 7</code> 取余后返回。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countRoutes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token punctuation">:</span> int<span class="token punctuation">,</span> finish<span class="token punctuation">:</span> int<span class="token punctuation">,</span> fuel<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        dp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>locations<span class="token punctuation">)</span>        mod <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">7</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> c<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">and</span> s<span class="token operator">==</span>finish<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span>            k <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">,</span> s<span class="token punctuation">)</span>            <span class="token keyword">if</span> k <span class="token keyword">in</span> dp<span class="token punctuation">:</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span>            <span class="token keyword">if</span> s<span class="token operator">==</span>finish<span class="token punctuation">:</span>                r<span class="token operator">=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                r<span class="token operator">=</span><span class="token number">0</span>            i <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">!=</span>s<span class="token punctuation">:</span>                    d <span class="token operator">=</span> locations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>locations<span class="token punctuation">[</span>s<span class="token punctuation">]</span>                    <span class="token keyword">if</span> d<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span> d<span class="token operator">=</span><span class="token operator">-</span>d                    <span class="token keyword">if</span> c<span class="token operator">>=</span>d<span class="token punctuation">:</span>                        r <span class="token operator">+=</span> dfs<span class="token punctuation">(</span>c<span class="token operator">-</span>d<span class="token punctuation">,</span> i<span class="token punctuation">)</span>                        r <span class="token operator">%=</span> mod                i<span class="token operator">+=</span><span class="token number">1</span>            dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> r            <span class="token keyword">return</span> r        <span class="token keyword">return</span> dfs<span class="token punctuation">(</span>fuel<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#不懂</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino基础</title>
      <link href="/posts/2199.html"/>
      <url>/posts/2199.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p><a href="https://www.arduino.cn/thread-1066-1-1.html" target="_blank" rel="noopener">https://www.arduino.cn/thread-1066-1-1.html</a><br><a href="https://www.jianshu.com/u/9dcb33c9d805" target="_blank" rel="noopener">https://www.jianshu.com/u/9dcb33c9d805</a></p><h1 id="1-项目结构"><a href="#1-项目结构" class="headerlink" title="1.项目结构"></a>1.项目结构</h1><h2 id="setup"><a href="#setup" class="headerlink" title="setup()"></a>setup()</h2><hr><p>Arduino控制器<strong>通电或复位</strong>后，即会开始执行setup() 函数中的程序，该部分只会执行一次。<br>通常我们会在setup() 函数中<strong>完成Arduino的初始化设置，如配置I/O口状态，初始化串口等</strong>操作。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 给13号引脚连接的设备设置一个别名“led”</span><span class="token keyword">int</span> led <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在板子启动或者复位重启后， setup部分的程序只会运行一次</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 将“led”引脚设置为输出状态</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span>led<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// setup部分程序运行完后，loop部分的程序会不断重复运行</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>led<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 点亮LED</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 等待一秒钟</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>led<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 通过将引脚电平拉低，关闭LED</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 等待一秒钟</span><span class="token punctuation">}</span></code></pre><h2 id="loop"><a href="#loop" class="headerlink" title="loop()"></a>loop()</h2><hr><p>在setup() 函数中的程序执行完后，Arduino会接着执行loop() 函数中的程序。而loop()函数是一个死循环，其中的程序会不断的重复运行。<br>通常我们会在loop() 函数中<strong>完成程序的主要功能，如驱动各种模块，采集数据等</strong>。</p><h2 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h2><hr><p>在进行Arduino开发时，没有像传统C/C++程序使用入口函数main。实际上<strong>main函数存在于Arduino核心库中，且仍然是程序的入口</strong>。<br>在Arduino核心库中可见main.cpp文件，其内容如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Arduino.h></span></span><span class="token comment" spellcheck="true">// Declared weak in Arduino.h to allow user redefinitions.</span><span class="token keyword">int</span> <span class="token function">atexit</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> <span class="token comment" spellcheck="true">/*func*/</span> <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Weak empty variant initialization function.</span><span class="token comment" spellcheck="true">// May be redefined by variant files.</span><span class="token keyword">void</span> <span class="token function">initVariant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>weak<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">initVariant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">setupUSB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>weak<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setupUSB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initVariant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> defined(USBCON)</span>    USBDevice<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//进行串口事件判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>serialEventRun<span class="token punctuation">)</span> <span class="token function">serialEventRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="2-数字输入输出"><a href="#2-数字输入输出" class="headerlink" title="2.数字输入输出"></a>2.数字输入输出</h1><h2 id="pinMode-pin-mode"><a href="#pinMode-pin-mode" class="headerlink" title="pinMode(pin, mode)"></a>pinMode(pin, mode)</h2><hr><p>在使用输入或输出功能前，你需要先通过pinMode() 函数<strong>配置引脚的模式</strong>为输入模式或输出模式。</p><ul><li>参数<code>pin</code>为指定配置的引脚编号</li><li>参数<code>mode</code>为指定的配置模式</li><li>通常可用模式有三种:<ul><li><strong>INPUT</strong> 输入模式</li><li><strong>OUTPUT</strong> 输出模式</li><li><strong>INPUT_PULLUP</strong> 输入上拉模式</li></ul></li></ul><h2 id="digitalWrite-pin-value"><a href="#digitalWrite-pin-value" class="headerlink" title="digitalWrite(pin, value)"></a>digitalWrite(pin, value)</h2><hr><p>引脚配置成输出模式后，可使用digitalWrite() 让其输出高电平或者是低电平。</p><p>Arduino中输出的低电平为0V，输出的高电平为当前Arduino的工作电压。</p><h2 id="digitalRead-pin"><a href="#digitalRead-pin" class="headerlink" title="digitalRead(pin)"></a>digitalRead(pin)</h2><hr><p>返回得到的信号状态。</p><h1 id="3-模拟输入输出"><a href="#3-模拟输入输出" class="headerlink" title="3.模拟输入输出"></a>3.模拟输入输出</h1><h2 id="analogRead-pin"><a href="#analogRead-pin" class="headerlink" title="analogRead(pin)"></a>analogRead(pin)</h2><hr><p>模拟输入引脚是带有ADC（Analog-to-Digital Converter，模数转换器）功能的引脚。</p><p>它可以将外部输入的模拟信号转换为芯片运算时可以识别的数字信号，从而实现<strong>读入模拟值</strong>的功能。</p><p>Arduino Uno模拟输入功能有10位精度，即可以将0～5V的电压信号转换为0～1023的整数形式表示。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*光敏电阻检测环境光http://www.arduino.cn/*/</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 初始化串口</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 读出当前光线强度，并输出到串口显示</span>  <span class="token keyword">int</span> sensorValue <span class="token operator">=</span> <span class="token function">analogRead</span><span class="token punctuation">(</span>A0<span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sensorValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="analogWrite-pin-value"><a href="#analogWrite-pin-value" class="headerlink" title="analogWrite(pin,value)"></a>analogWrite(pin,value)</h2><hr><p>使用analogWrite() 函数实现PWM（脉冲宽度调制，一种模拟控制的方法）<strong>输出</strong>功能。<br>在Arduino Uno中，提供PWM功能的引脚为3、5、6、9、10、11。</p><p>在analogWrite() 和analogRead() 函数内部，已经完成了引脚的初始化，因此不用在Setup() 函数中进行初始化操作。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*Fading通过analogWrite() 函数实现呼吸灯效果*/</span><span class="token keyword">int</span> ledPin <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// LED连接在9号引脚上</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// Setup部分不进行任何处理</span><span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 从暗到亮，以每次加5的形式逐渐亮起来</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> fadeValue <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> fadeValue <span class="token operator">&lt;=</span> <span class="token number">255</span><span class="token punctuation">;</span> fadeValue <span class="token operator">+</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 输出PWM</span>    <span class="token function">analogWrite</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> fadeValue<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 等待30ms，以便观察到渐变效果</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 从亮到暗，以每次减5的形式逐渐暗下来</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> fadeValue <span class="token operator">=</span> <span class="token number">255</span> <span class="token punctuation">;</span> fadeValue <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> fadeValue <span class="token operator">-</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 输出PWM</span>    <span class="token function">analogWrite</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> fadeValue<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 等待30ms，以便观察到渐变效果</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h1 id="4-高级输入输出"><a href="#4-高级输入输出" class="headerlink" title="4.高级输入输出"></a>4.高级输入输出</h1><h2 id="tone"><a href="#tone" class="headerlink" title="tone()"></a>tone()</h2><hr><p>tone() 主要用于Arduino连接蜂鸣器或扬声器发声。</p><h2 id="pulseln"><a href="#pulseln" class="headerlink" title="pulseln"></a>pulseln</h2><hr><p>检测指定引脚上的脉冲信号宽度。</p><h2 id="外部中断"><a href="#外部中断" class="headerlink" title="外部中断"></a>外部中断</h2><hr><h1 id="5-时间控制"><a href="#5-时间控制" class="headerlink" title="5.时间控制"></a>5.时间控制</h1><h2 id="millis"><a href="#millis" class="headerlink" title="millis()"></a>millis()</h2><hr><p>获取Arduino通电后（或复位后）到现在的时间,单位毫秒ms</p><h2 id="delay"><a href="#delay" class="headerlink" title="delay()"></a>delay()</h2><hr><p>参数为时长，类型unsigned long，单位毫秒ms</p><h1 id="6-串口通信"><a href="#6-串口通信" class="headerlink" title="6.串口通信"></a>6.串口通信</h1><h2 id="begin"><a href="#begin" class="headerlink" title="begin()"></a>begin()</h2><hr><p>使用串口与计算机通信，需要先使用 <code>Serial.begin(speed)</code> 初始化Arduino的串口通信功能。<br>参数speed指串口通信波特率，常用波特率：300、600、1200、2400、4800、9600、14400、19200、28800、38400、57600、115200</p><h2 id="print"><a href="#print" class="headerlink" title="print()"></a>print()</h2><hr><p>串口初始化完成后，我们便可以使用 <code>Serial.print(val)</code> 或<code>Serial.println(val)</code> 向计算机发送信息了。<br>println会在输出完指定数据后，再输出一组回车换行符。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> counter<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 计数器</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 初始化串口</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 每loop循环一次，计数器变量加1</span>counter <span class="token operator">=</span> counter<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出变量</span>Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出字符</span>Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>‘<span class="token punctuation">:</span>’<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出字符串;</span>Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hellow World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h2><hr><p>调用该语句，每次都会返回一个字节的数据，这个返回值便是当前串口读取到的数据。</p><h1 id="7-关于Uno"><a href="#7-关于Uno" class="headerlink" title="7.关于Uno"></a>7.关于Uno</h1><p>Arduino UNO带有4个LED指示灯，作用分别如下：</p><p><strong>ON：</strong></p><p>电源指示灯。当Arduino通电时，ON灯会点亮。</p><p><strong>TX：</strong></p><p>串口发送指示灯。当使用USB连接到计算机且Arduino向计算机传输数据时，TX灯会点亮。</p><p><strong>RX：</strong></p><p>串口接收指示灯。当使用USB连接到计算机且Arduino接收到计算机传来的数据时，RX灯会点亮。</p><p><strong>L：</strong></p><p>可编程控制指示灯。该LED通过特殊电路连接到Arduino的13号引脚，当13号引脚为高电平或高阻态时，该LED 会点亮；低电平时，不会点亮。可以通过程序或者外部输入信号，控制该LED亮灭。</p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020开学初</title>
      <link href="/posts/f3a1.html"/>
      <url>/posts/f3a1.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p>世界上很多东西，他们之间根本不存在因果关系。</p><p>如同鸡与蛋的关系，可只要给出个鸡或蛋就行了。</p><p>再比如，我学不了习因为我静不下心来，</p><p>可不学习怎么静下心来呢？</p><p>无聊的，大概只是无聊本身吧。</p><h2 id="1-开始"><a href="#1-开始" class="headerlink" title="1.开始"></a>1.开始</h2><ul><li><code>git clone</code> 弄项目到本地<blockquote><p>Fn+Ins可以粘贴</p></blockquote></li><li>找回torch环境</li><li>看不懂torch视频教程，</li></ul><p><strong>实验：</strong></p><p><strong>步进电机+ULN2003：</strong><br>&emsp;&emsp;比较精确慢速的马达。</p><p><strong>9g舵机：</strong><br>&emsp;&emsp;一般用于控制角度，180的范围。</p><p><strong>红外模块：</strong><br>&emsp;一、红外接收头<br>&emsp;&emsp;  红外遥控器发出的信号是一连串的二进制脉冲码。为了使其在无线传输过程中免受其他红外信号的干扰,通常都是先将其调制在特定的载波频率上,然后再经红外发射二极管发射出去,而红外线接收装置则要滤除其他杂波,叧接收该特定频率的信号并将其还原成二进制脉冲码,也就是解调.<br>&emsp;二、工作原理<br>&emsp;&emsp;  内置接收管将红外发射管发射出来癿光信号转换为微弱的电信号，此信号经由IC内部放大器进行放大，然后通过自动增益控制、带通滤波、解调变、波形整形后还原为遥控器发射出的原始编码，经由接收头的信号输出脚输入到电器上的编码识别电路。</p><h3 id="8-30"><a href="#8-30" class="headerlink" title="8.30"></a><code>8.30</code></h3><ul><li><code>print(&quot;\033[46;1m&quot;+&quot;attack&quot;+&quot;\033[0m&quot;)</code>这个可以更改字符颜色、粗细，末尾将格式复原</li><li>leetcode周赛204 ，吐了</li></ul><h3 id="8-31"><a href="#8-31" class="headerlink" title="8.31"></a><code>8.31</code></h3><ul><li>大学其实挺无趣的，</li><li>那就跟着自己，去做大事吧~~</li><li>真的喜欢和自己和睦共处</li></ul><h3 id="9-1"><a href="#9-1" class="headerlink" title="9.1"></a><code>9.1</code></h3><ul><li>再见了，<font color="#1E90FF">《逆水寒》</font> ，一个<font color="#FF00FF">令人惊艳</font> 的武侠游戏。</li><li>最美若初见，hhh~~</li></ul><h3 id="9-3"><a href="#9-3" class="headerlink" title="9.3"></a><code>9.3</code></h3><hr><ul><li><strong>数据结构</strong>，听课+自学+MOOC</li><li><strong>数据库</strong>，听课+自学</li><li><strong>电路分析</strong>，自学+MOOC</li><li><strong>概率统计</strong></li></ul><hr><ul><li><strong>语言学基础</strong></li><li>综合英语</li><li>视听说</li></ul><hr><ul><li>马克思原理</li><li>西方哲学</li><li>国别经济</li></ul><hr><p>时间零零散散的，问题不大~~</p><blockquote><p>今天的彩虹：</p></blockquote><img src="https://img-blog.csdnimg.cn/20200903232447960.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" style="zoom:40%"><h3 id="9-4"><a href="#9-4" class="headerlink" title="9.4"></a><code>9.4</code></h3><p>观看《钢铁侠》</p><p><font color="#7B68EE" size=5>我曾踏足山巅，也曾跌入谷底，<br>而如今，二者都让我受益良多。</font></p><h3 id="9-7"><a href="#9-7" class="headerlink" title="9.7"></a><code>9.7</code></h3><p>钢铁侠3中烟火爆炸的时候，godfather!!!</p><h3 id="9-10"><a href="#9-10" class="headerlink" title="9.10"></a><code>9.10</code></h3><p>。。。蹉跎岁月？？？</p><p>哲学老师，经济老师，搞我啊<br>可能我状态不太好，<br>可这种课，硬把一个人塞进去，钉在位子上硬听3个小时。</p><p>还不如我多看看书，看看别人书评。<br>真蹉跎，</p><p>想去就去，我心中不会没有尺子，<br>我是我自己，我知道我在干嘛，可能在以后看来傻乎乎的</p><p>嗯，就这样了，自律、自由缺一不可，hh~~<br>其它时间嘛，多做些有意义的事，多思考，你是一个世界，不是一个傻傻的个体。</p><p>最后只有自己的经历，自己的思考，与他人的羁绊，才是最有意思的，不是吗？</p><p>花开堪折直须折，莫待无花空折枝。</p><p>我管你个憨憨</p><h3 id="9-11"><a href="#9-11" class="headerlink" title="9.11"></a><code>9.11</code></h3><p>守望先锋，先分开一段时间。</p><p>给我时间，我会变得更强，hh~~</p><h3 id="9-12"><a href="#9-12" class="headerlink" title="9.12"></a><code>9.12</code></h3><p>愿无岁月可回首，且以深情共余生。</p><p>对美的追求，对自己的通透。</p><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/posts/9dfd.html"/>
      <url>/posts/9dfd.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p>leetcode初级算法：<a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy" target="_blank" rel="noopener">https://leetcode-cn.com/leetbook/read/top-interview-questions-easy</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>nums<span class="token operator">=</span>nums    <span class="token keyword">def</span> <span class="token function">reset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>nums    <span class="token keyword">def</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        arr<span class="token operator">=</span>copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>self<span class="token punctuation">.</span>nums<span class="token punctuation">)</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#Fisher-Yates 洗牌算法 </span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            rnum<span class="token operator">=</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">)</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>rnum<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>rnum<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> arr<span class="token comment" spellcheck="true">#设计问题-打乱数组</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#移动数组，原地操作</span><span class="token comment" spellcheck="true">#一种错误：</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>num <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> num<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#方法一，引入0的cnt</span><span class="token comment" spellcheck="true">#方法二：双指针</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        j<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                j<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>j<span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        hashmap<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>num <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            need<span class="token operator">=</span>target<span class="token operator">-</span>num            <span class="token keyword">if</span> need <span class="token keyword">in</span> hashmap<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span>hashmap<span class="token punctuation">[</span>need<span class="token punctuation">]</span><span class="token punctuation">]</span>            hashmap<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token comment" spellcheck="true">#两数之和，哈希优化</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rotate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            matrix<span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#旋转图像，原地操作</span><span class="token comment" spellcheck="true">#先转置，再反向</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>n        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>n<span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">:</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>len<span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">:</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sum<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token comment" spellcheck="true">#计数质数，埃氏筛</span><span class="token comment" spellcheck="true">#那个i的范围还是没懂</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        hashmap<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'I'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'V'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'X'</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'L'</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">:</span><span class="token number">1000</span><span class="token punctuation">}</span>        ans<span class="token operator">=</span><span class="token number">0</span>        nums<span class="token operator">=</span>list<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> hashmap<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>=</span>hashmap<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                ans<span class="token operator">+=</span>hashmap<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ans<span class="token operator">-=</span>hashmap<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> ans<span class="token operator">+</span>hashmap<span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#罗马数字转整数，核心思想抽象</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#最小栈，线性阶做法:</span><span class="token keyword">class</span> <span class="token class-name">MinStack</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">getMin</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">return</span> min<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#常数阶做法：</span><span class="token keyword">class</span> <span class="token class-name">MinStack</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>min_stack<span class="token operator">=</span><span class="token punctuation">[</span>math<span class="token punctuation">.</span>inf<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>min_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>min<span class="token punctuation">(</span>self<span class="token punctuation">.</span>min_stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>min_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">getMin</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>min_stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValidSudoku</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> board<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        rows<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        cols<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        boxs<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                num<span class="token operator">=</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">if</span> num<span class="token operator">!=</span><span class="token string">'.'</span><span class="token punctuation">:</span>                    box_index<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>j<span class="token operator">//</span><span class="token number">3</span>                    rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">=</span>rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>                    cols<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">=</span>cols<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>                    boxs<span class="token punctuation">[</span>box_index<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">=</span>boxs<span class="token punctuation">[</span>box_index<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>                    <span class="token keyword">if</span> rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span> <span class="token operator">or</span> cols<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span> <span class="token operator">or</span> boxs<span class="token punctuation">[</span>box_index<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true">#有效的数独</span></code></pre><pre class=" language-python"><code class="language-python"></code></pre><h1 id="1-基础"><a href="#1-基础" class="headerlink" title="1.基础"></a>1.基础</h1><p>学堂在线《数据结构》课</p><h1 id="3-其它"><a href="#3-其它" class="headerlink" title="3.其它"></a>3.其它</h1><h2 id="kmp"><a href="#kmp" class="headerlink" title="kmp"></a><em>kmp</em></h2><p>kmp是一个效率非常高的<strong>字符串匹配</strong>算法。<br>有问题如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#求b在a中出现次数</span>a <span class="token operator">=</span> <span class="token string">"ababacababadababadadda"</span>b <span class="token operator">=</span> <span class="token string">"ababad"</span></code></pre><p>kmp可以将暴力法的<code>O(m*n)</code>降低为<code>O(m+n)</code></p><p><strong>过程:</strong></p><ol><li><strong>计算temp数组</strong><br>temp数组可理解为一组b中相同前后缀的标记(不能为本身长度)<blockquote><p><code>b = &quot;ababad&quot;</code><br>对第一位<code>&#39;a&#39;</code>，没有相同前后缀，<code>temp[0] = 0</code><br>对第二位<code>&#39;ab&#39;</code>，<code>temp[1] = 0</code><br>对第三位<code>’aba&#39;</code>，<code>temp[2] = 1</code><br>以此类推，<code>temp= [0,0,1,2,3,0]</code></p></blockquote></li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cal_temp</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#K是一个对相同前后缀的标记</span>    temp<span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span>    <span class="token comment" spellcheck="true">#从索引1处开始遍历</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> k<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>            k<span class="token operator">=</span>temp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>            k<span class="token operator">+=</span><span class="token number">1</span>        temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token keyword">return</span> temp</code></pre><p>分析一下代码：</p><blockquote><ul><li><code>i=1</code>时，’ab’，b[1]!=b[0]，temp.append(0)</li><li><code>i=2</code>时，’aba’，b[2]==b[0]，temp.append(1)</li><li><code>i=3</code>时，’abab’，b[3]==b[1]，temp.append(2)</li><li><code>i=4</code>时，’ababa’，b[4]==b[2]，temp.append(3)</li><li><code>i=5</code>时，’ababad’，temp=[0,0,1,2,3]<br>b[5]!=b[3]，k=temp[3-1]=1<br>b[5]!=b[1]，k=temp[1-1]=0<br>temp.append(0)</li></ul></blockquote><p>发现比较难理解的是那个回溯的地方：<code>k=temp[k-1]</code><br>没事，把<code>i=5</code>的情况再分析一下：</p><blockquote><p><code>i=5</code>时，’ababad’，temp=[0,0,1,2,3]，k=3</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200514161345927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70" alt=""></p><blockquote><p>aba and aba can match,k=3<br>a and a can match,k=(aba的匹配数1,即temp[k-1])<br>more explain: aba can see as a and a,the first <code>a</code> can match the fourth <code>a</code></p></blockquote><ol start="2"><li><strong>kmp</strong><br>打完上面的怪，就可以直接写kmp了</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">kmp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp<span class="token operator">=</span>cal_temp<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    ans<span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> k<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>            k<span class="token operator">=</span>temp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>            k<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">if</span> k<span class="token operator">==</span>len<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token operator">+=</span><span class="token number">1</span>            k<span class="token operator">=</span>temp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> num<span class="token comment" spellcheck="true">#小结：利用已匹配的信息，迈出比较大的步子。</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>functools模块</title>
      <link href="/posts/e9cc.html"/>
      <url>/posts/e9cc.html</url>
      
        <content type="html"><![CDATA[<h2 id="lru-cache"><a href="#lru-cache" class="headerlink" title="lru_cache"></a><em>lru_cache</em></h2><p><code>@functools.lru_cache(maxsize=128, typed=False)</code><br>一个为函数提供缓存功能的装饰器，缓存 maxsize 组传入参数，在下次以相同参数调用时直接返回上一次的结果。用以<strong>节约高开销或I/O函数的调用时间</strong>。</p><ul><li>如果 maxsize 设为 None，LRU 特性将被禁用且缓存可无限增长。</li><li>如果 typed 设置为true，不同类型的函数参数将被分别缓存。例如， f(3) 和 f(3.0) 将被视为不同而分别缓存。</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>copy模块</title>
      <link href="/posts/4b99.html"/>
      <url>/posts/4b99.html</url>
      
        <content type="html"><![CDATA[<p>Python 中赋值语句<strong>不复制对象</strong>，而是在目标和对象之间创建<strong>绑定 (bindings)</strong>关系。对于自身可变或者包含可变项的集合对象，开发者有时会需要生成其副本用于改变操作，进而避免改变原对象。</p><p>本模块提供了通用的浅层复制和深层复制操作:</p><ul><li><code>copy.copy()</code></li><li><code>copy.deepcopy()</code></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 关于拷贝的机制</span><span class="token keyword">import</span> copya<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#原始对象</span>b<span class="token operator">=</span>a                 <span class="token comment" spellcheck="true">#赋值，传对象的引用</span>c<span class="token operator">=</span>copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>a<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#浅拷贝</span>d<span class="token operator">=</span>copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#深拷贝</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -->[1, 2, 3, ['a', 'b', 'c'], 5]</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -->[1, 2, 3, ['a', 'b', 'c'], 5]</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -->[1, 2, 3, ['a', 'b', 'c']]</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -->[1, 2, 3, ['a', 'b']]</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#关于同数据，字符串+=</span>a<span class="token operator">=</span><span class="token string">"abc"</span>b<span class="token operator">=</span>a<span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->1652389179952 1652389179952</span>c<span class="token operator">=</span><span class="token string">"abc"</span>d<span class="token operator">=</span><span class="token string">""</span>d<span class="token operator">+=</span>c<span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>id<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->1652389179952 1652389179952</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#-->abc</span>d<span class="token operator">+=</span>c<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>id<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span>id<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->abcabc 1652431257904 1652389179952</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode周赛笔记204</title>
      <link href="/posts/bfdd.html"/>
      <url>/posts/bfdd.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一题：<a href="https://leetcode-cn.com/problems/detect-pattern-of-length-m-repeated-k-or-more-times/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/detect-pattern-of-length-m-repeated-k-or-more-times/</a><br>第二题：<a href="https://leetcode-cn.com/problems/maximum-length-of-subarray-with-positive-product/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-length-of-subarray-with-positive-product/</a><br>第三题：<a href="https://leetcode-cn.com/problems/minimum-number-of-days-to-disconnect-island/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-number-of-days-to-disconnect-island/</a><br>第四题：<a href="https://leetcode-cn.com/problems/number-of-ways-to-reorder-array-to-get-same-bst/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-ways-to-reorder-array-to-get-same-bst/</a></p></blockquote><h2 id="一、重复至少-K-次且长度为-M-的模式"><a href="#一、重复至少-K-次且长度为-M-的模式" class="headerlink" title="一、重复至少 K 次且长度为 M 的模式"></a>一、重复至少 K 次且长度为 M 的模式</h2><p>给你一个正整数数组 <code>arr</code>，请你找出一个长度为 <code>m</code> 且在数组中至少重复 <code>k</code> 次的模式。</p><p>模式 是由一个或多个值组成的子数组（连续的子序列），连续 重复多次但 不重叠 。 模式由其长度和重复次数定义。</p><p>如果数组中存在一个至少重复 <code>k</code> 次且长度为 <code>m</code> 的模式，则返回 <code>true</code> ，否则返回  <code>false</code> 。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">containsPattern</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        len_arr<span class="token operator">=</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len_arr<span class="token punctuation">)</span><span class="token punctuation">:</span>            temp<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>m<span class="token punctuation">]</span>            <span class="token keyword">if</span> temp<span class="token operator">*</span>k<span class="token operator">==</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>m<span class="token operator">*</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true">#暴力法</span></code></pre><h2 id="二、乘积为正数的最长子数组长度"><a href="#二、乘积为正数的最长子数组长度" class="headerlink" title="二、乘积为正数的最长子数组长度"></a>二、乘积为正数的最长子数组长度</h2><p>给你一个整数数组 <code>nums</code> ，请你求出乘积为正数的最长子数组的长度。</p><p>一个数组的子数组是由原数组中零个或者更多个连续数字组成的数组。</p><p>请你返回乘积为正数的最长子数组长度。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getMaxLen</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        start <span class="token operator">=</span> <span class="token number">0</span>        temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> t <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">:</span>            <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#偶数个负数</span>                    ans <span class="token operator">=</span> max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> i<span class="token operator">-</span>start<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#用i-start更新ans</span>                <span class="token keyword">else</span> <span class="token punctuation">:</span>                    ans <span class="token operator">=</span> max<span class="token punctuation">(</span><span class="token punctuation">[</span>ans<span class="token punctuation">,</span> i<span class="token operator">-</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> temp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">#还是用偶数个负数的情况来更新ans</span>                start <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>                temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">elif</span> t <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">:</span>                temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#暂存小于0的数</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#主要思路：硬模拟，负数为主线索</span></code></pre><h2 id="三、使陆地分离的最少天数"><a href="#三、使陆地分离的最少天数" class="headerlink" title="三、使陆地分离的最少天数"></a>三、使陆地分离的最少天数</h2><p>给你一个由若干 <code>0</code> 和 <code>1</code> 组成的二维网格 <code>grid</code> ，其中 <code>0</code> 表示水，而 <code>1</code> 表示陆地。岛屿由水平方向或竖直方向上相邻的 <code>1</code>（陆地）连接形成。</p><p>如果 恰好只有一座岛屿 ，则认为陆地是 <code>连通</code> 的 ；否则，陆地就是 <code>分离</code> 的 。</p><p>一天内，可以将任何单个陆地单元（<code>1</code>）更改为水单元（<code>0</code>）。</p><p>返回使陆地分离的最少天数。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#不会啊，吐了</span></code></pre><h2 id="四、将子数组重新排序得到同一个二叉查找树的方案数"><a href="#四、将子数组重新排序得到同一个二叉查找树的方案数" class="headerlink" title="四、将子数组重新排序得到同一个二叉查找树的方案数"></a>四、将子数组重新排序得到同一个二叉查找树的方案数</h2><p>给你一个数组 <code>nums</code> 表示 <code>1</code> 到 <code>n</code> 的一个排列。我们按照元素在 <code>nums</code> 中的顺序依次插入一个初始为空的二叉查找树（BST）。请你统计将 <code>nums</code> 重新排序后，统计满足如下条件的方案数：重排后得到的二叉查找树与 <code>nums</code> 原本数字顺序得到的二叉查找树相同。</p><p>比方说，给你 <code>nums = [2,1,3]</code>，我们得到一棵 <code>2</code> 为根，<code>1</code> 为左孩子，<code>3</code> 为右孩子的树。数组 <code>[2,3,1]</code> 也能得到相同的 BST，但 <code>[3,2,1]</code> 会得到一棵不同的 BST 。</p><p>请你返回重排 <code>nums</code> 后，与原数组 <code>nums</code> 得到相同二叉查找树的方案数。</p><p>由于答案可能会很大，请将结果对 <code>10^9 + 7</code> 取余数。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> comb<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numOfWays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span>            left <span class="token operator">=</span> <span class="token punctuation">[</span>num <span class="token keyword">for</span> num <span class="token keyword">in</span> nums <span class="token keyword">if</span> num <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            right <span class="token operator">=</span> <span class="token punctuation">[</span>num <span class="token keyword">for</span> num <span class="token keyword">in</span> nums <span class="token keyword">if</span> num <span class="token operator">></span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            l<span class="token punctuation">,</span> r <span class="token operator">=</span> f<span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">(</span>right<span class="token punctuation">)</span>            res <span class="token operator">=</span> comb<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> l <span class="token operator">*</span> r            <span class="token keyword">return</span> res        <span class="token keyword">return</span> <span class="token punctuation">(</span>f<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 分治</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言</title>
      <link href="/posts/c6f.html"/>
      <url>/posts/c6f.html</url>
      
        <content type="html"><![CDATA[<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a><em>指针</em></h2><hr><h3 id="指针变量"><a href="#指针变量" class="headerlink" title="指针变量"></a>指针变量</h3><p><strong>指针是个变量，存放内存单元的地址。</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span> </span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//在内存中开辟一块空间    </span>    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对变量a取址,赋值给指针变量p               </span><span class="token punctuation">}</span></code></pre><blockquote><p><strong>野指针</strong>——就是指针指向的位置是不可知的。指针变量如果在定义时未初始化，其值是随机的，这意味着此时的解引用，是去访问一个不确定的地址，其结果是不可知的。</p><p><strong>空指针</strong>——指针的值为NULL。</p></blockquote><hr><h3 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h3><p><strong>指针类型，决定了指针每移动一次所跨越的字节。</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p %p"</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//000000000061FE14 000000000061FE18</span><span class="token comment" spellcheck="true">//移动了4个字节</span><span class="token comment" spellcheck="true">// type * 会定义一个变量为指针类型</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">short</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p %p"</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//000000000061FE14 000000000061FE16</span><span class="token comment" spellcheck="true">//移动了2个字节</span><span class="token comment" spellcheck="true">//(type *)是指针的类型转变</span></code></pre><hr><h3 id="指针解引用，是在访问内存"><a href="#指针解引用，是在访问内存" class="headerlink" title="指针解引用，是在访问内存"></a>指针解引用，是在访问内存</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span>      p<span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token operator">*</span>p<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//可以看见定义时*符号可以在type与p间随意放</span><span class="token comment" spellcheck="true">//解引用会访问指针类型相关的字节</span></code></pre><pre class=" language-c"><code class="language-c">    <span class="token keyword">char</span><span class="token operator">*</span> pstr<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>pstr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>string<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><hr><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><blockquote><p>为什么要用指针：</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">nicejob</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    a<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//函数对传递参数的操作仅仅是对拷贝的操作</span><span class="token comment" spellcheck="true">//这时使用指针来改变函数外的值</span><span class="token keyword">void</span> <span class="token function">nicejob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span>a<span class="token operator">=</span><span class="token operator">*</span>a<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//*a通过解引用访问内存</span></code></pre><blockquote><p>随便找个变量放地址是可行的，如 <code>int p=&amp;a;</code><br>但为什么，还麻烦的用<code>int * p</code>呢？</p></blockquote><blockquote><p>为什么使用指针类型：</p><ol><li>不容易混淆</li><li>指针类型给出了指针改变的实际字节偏移量</li></ol></blockquote><hr><h3 id="二级指针，函数指针"><a href="#二级指针，函数指针" class="headerlink" title="二级指针，函数指针"></a>二级指针，函数指针</h3><p><strong>一级指针</strong>用途：</p><ul><li>可以利用一级指针改变函数外部的变量，还可以跨进程改变变量（外挂就是这么搞的）。</li><li>一级指针可以存储数组的首地址，并通过指针或者下标访问元素。</li><li>一级指针作为函数的返回值，返回地址；注意：不能返回指向栈的地址，因为函数执行完，变量就被回收了。</li><li>函数的参数有副本机制，传递实参时，新建一个变量，容纳传递过来的实参。特例：数组在函数参数中拒绝副本机制，数组作为参数时数组的首地址。</li><li>return也有副本机制，返回值保存在CPU寄存器中，因此函数的返回值不能取地址。</li><li>为什么指针要有类型，因为类型可以让编译器知道如何解析，还有步长。</li></ul><p><strong>二级指针</strong>，在二维数组中常见：<br><code>array[2][1]</code>等价的指针表示法：<code>*(*(array+2)+1)</code></p><p>函数指针：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">></span> y <span class="token operator">?</span> x <span class="token punctuation">:</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* p 是函数指针 */</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span> max<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &amp;可以省略</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入三个数字:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token operator">&amp;</span> b<span class="token punctuation">,</span> <span class="token operator">&amp;</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    d <span class="token operator">=</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token function">p</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//等价d = max(max(a, b), c)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最大的数字是: %d\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="结构指针"><a href="#结构指针" class="headerlink" title="结构指针"></a>结构指针</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> LEN 20</span><span class="token keyword">struct</span> names <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//结构声明</span>    <span class="token keyword">char</span> first<span class="token punctuation">[</span>LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> last<span class="token punctuation">[</span>LEN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> guy <span class="token punctuation">{</span>    <span class="token keyword">struct</span> names handle<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//嵌套结构</span>    <span class="token keyword">float</span> income<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> guy fellow<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//结构数组变量</span>        <span class="token punctuation">{</span>            <span class="token punctuation">{</span><span class="token string">"li"</span><span class="token punctuation">,</span><span class="token string">"hua"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token number">12000.00</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token punctuation">{</span><span class="token string">"liu"</span><span class="token punctuation">,</span><span class="token string">"bei"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token number">23000.00</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> guy<span class="token operator">*</span> him<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指向结构的指针</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"address #1: %p #2: %p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>fellow<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>fellow<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    him<span class="token operator">=</span><span class="token operator">&amp;</span>fellow<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pointer #1: %p #2: %p\n"</span><span class="token punctuation">,</span>him<span class="token punctuation">,</span>him<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"him->income is $%.2f\n(*him).income is $%.2f"</span><span class="token punctuation">,</span>him<span class="token operator">-></span>income<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>him<span class="token punctuation">)</span><span class="token punctuation">.</span>income<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// address #1: 000000000061FDC0 #2: 000000000061FDEC</span><span class="token comment" spellcheck="true">// pointer #1: 000000000061FDC0 #2: 000000000061FDEC</span><span class="token comment" spellcheck="true">// him->income is $12000.00</span><span class="token comment" spellcheck="true">// (*him).income is $12000.00</span><span class="token punctuation">}</span></code></pre><h2 id="存储类"><a href="#存储类" class="headerlink" title="存储类"></a><em>存储类</em></h2><p><strong>auto</strong> 是局部变量的默认存储类, 限定变量只能在函数内部使用；</p><p><strong>register</strong> 代表了寄存器变量，不在内存中使用；</p><p><strong>static</strong> 是全局变量的默认存储类,表示变量在程序生命周期内可见；</p><p><strong>extern</strong> 表示全局变量，即对程序内所有文件可见，类似于Java中的public关键字；</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a><em>枚举</em></h2><p>1、先定义枚举类型，再定义枚举变量</p><pre class=" language-c"><code class="language-c"><span class="token keyword">enum</span> DAY<span class="token punctuation">{</span>      MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">enum</span> DAY day<span class="token punctuation">;</span></code></pre><p>2、定义枚举类型的同时定义枚举变量</p><pre class=" language-c"><code class="language-c"><span class="token keyword">enum</span> DAY<span class="token punctuation">{</span>      MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token punctuation">}</span> day<span class="token punctuation">;</span></code></pre><p>3、省略枚举名称，直接定义枚举变量</p><pre class=" language-c"><code class="language-c"><span class="token keyword">enum</span><span class="token punctuation">{</span>      MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token punctuation">}</span> day<span class="token punctuation">;</span></code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><em>字符串</em></h2><p><strong>定义</strong>：以 <code>null</code> 字符 <code>&#39;\0&#39;</code> 终止的一维字符数组。</p><p><code>&lt;string.h&gt;</code>中常用函数</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td><code>strcpy(s1,s2)</code></td><td>复制s2到s1</td></tr><tr><td><code>strcat(s1, s2)</code></td><td>连接s2到s1末尾</td></tr><tr><td><code>strlen()</code></td><td></td></tr><tr><td><code>strcmp(s1, s2)</code></td><td>比较s1、s2大小</td></tr><tr><td><code>strchr(s1, ch)</code></td><td>返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。</td></tr><tr><td><code>strstr(s1, s2)</code></td><td>返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</td></tr><tr><td><code>void *memset(void * str,int c,size_t n)</code></td><td>复制字符c 到str所指向的的前n个字符</td></tr></tbody></table><h2 id="stdio-h"><a href="#stdio-h" class="headerlink" title="stdio.h"></a><em>stdio.h</em></h2><table><thead><tr><th>函数原型</th><th>说明</th></tr></thead><tbody><tr><td><code>int fclose(FILE *stream)</code></td><td>关闭流 stream。刷新所有的缓冲区。</td></tr><tr><td><code>int fflush(FILE *stream)</code></td><td>刷新流 stream 的输出缓冲区。</td></tr><tr><td><code>void rewind(FILE *stream)</code></td><td>设置文件位置为给定流 stream 的文件的开头。</td></tr><tr><td><code>int printf(const char *format, ...)</code></td><td>发送格式化输出到标准输出 stdout。</td></tr><tr><td><code>int sprintf(char *str, const char *format, ...)</code></td><td>发送格式化输出到字符串。</td></tr><tr><td><code>int fgetc(FILE *stream)</code></td><td>从指定的流 stream 获取下一个字符（一个无符号字符），并把位置标识符往前移动。</td></tr><tr><td><code>char *fgets(char *str, int n, FILE *stream)</code></td><td>从指定的流 stream 读取一行，并把它存储在 str 所指向的字符串内。当读取 (n-1) 个字符时，或者读取到换行符时，或者到达文件末尾时，它会停止，具体视情况而定。</td></tr><tr><td><code>int snprintf(char *str, size_t size, const char *format, ...)</code></td><td>格式字符串到 str 中。</td></tr></tbody></table><hr><table><thead><tr><th>输入</th><th>输出</th><th>说明</th></tr></thead><tbody><tr><td><code>scanf()</code></td><td><code>printf()</code></td><td></td></tr><tr><td><code>fscanf(stdin,...)</code></td><td><code>fprintf(stdout,...)</code></td><td></td></tr><tr><td><code>getchar()</code></td><td><code>putchar()</code></td><td></td></tr><tr><td><code>gets()</code></td><td><code>puts()</code></td><td>遇到换行符结束</td></tr><tr><td><code>int getc(FILE *stream)</code></td><td></td><td>从文件读取字符，fgetc与getc差不多</td></tr><tr><td><code>fgets(str,n,fp)</code></td><td><code>fputs(str,fp)</code></td><td>最多只能读入n-1个字符到str，可存储<code>\n</code></td></tr><tr><td><code>gets_s(words,STLEN)</code></td><td></td><td></td></tr><tr><td></td><td><code>fprintf()</code></td><td><code>int fprintf(FILE *stream, const char *format, ...)</code></td></tr></tbody></table><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//snprintf</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> s <span class="token operator">=</span> <span class="token string">"runoobcom"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 读取字符串并存储在 buffer 中</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">snprintf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"%s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 输出 buffer及字符数</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"string:%s \n character count = %d\n"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//不能完全存入时snprintf返回-1</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="stdlib-h"><a href="#stdlib-h" class="headerlink" title="stdlib.h"></a><em>stdlib.h</em></h2><table><thead><tr><th>函数原型</th><th>说明</th></tr></thead><tbody><tr><td><code>double atof(const char *str)</code></td><td>把参数 str 所指向的字符串转换为一个浮点数（类型为 double 型）</td></tr><tr><td><code>int atoi(const char *str)</code></td><td></td></tr><tr><td><code>void *calloc(size_t nitems, size_t size)</code></td><td>分配所需的内存空间，并返回一个指向它的指针</td></tr><tr><td><code>void *malloc(size_t size)</code></td><td>malloc 和 calloc 之间的不同点是，malloc 不会设置内存为零，而 calloc 会设置分配的内存为零。</td></tr><tr><td><code>void free(void *ptr)</code></td><td>释放内存</td></tr><tr><td><code>void exit(int status)</code></td><td>立即终止调用进程<code>？？？</code></td></tr><tr><td><code>void qsort(void *base,nitems,size,func</code></td><td></td></tr></tbody></table><p>size_t 在这是一个库定义的变量类型，无符号整型。</p><p>关于动态内存:</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 最初的内存分配 */</span>   str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//强制指针类型转变，读度1</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"runoob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"String = %s,  Address = %u\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//String = runoob,  Address = 3662685808</span>   <span class="token comment" spellcheck="true">/* 重新分配内存 */</span>   str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">realloc</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">strcat</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">".com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"String = %s,  Address = %u\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//String = runoob.com,  Address = 3662685808</span>   <span class="token function">free</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a><em>文件读写</em></h2><p>挑一段代码看看，，，，</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    FILE  <span class="token operator">*</span>fp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建 （文件指针类型） 变量 </span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input your strings:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">gets</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        k<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>                k<span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">!=</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>str<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>                 <span class="token comment" spellcheck="true">//字符排序</span>    <span class="token comment" spellcheck="true">//函数原型 FILE *fopen( const char * filename, const char * mode );</span>    <span class="token comment" spellcheck="true">//单目运算符的优先级比双目的高</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"C:\\intel\\c.txt"</span><span class="token punctuation">,</span><span class="token string">"ab+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nCannot open file\nstrike any key exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nthe new:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">fputs</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//写入内容</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//关闭文件</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a><em>预处理器</em></h2><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><code>#define</code></td><td>定义宏</td></tr><tr><td><code>#include</code></td><td>包含一个源代码文件</td></tr><tr><td><code>#undef</code></td><td>取消已定义的宏</td></tr><tr><td><code>#ifdef</code></td><td>如果宏已经定义，则返回真</td></tr><tr><td><code>#ifndef</code></td><td>如果宏没有定义，则返回真</td></tr><tr><td><code>#if</code></td><td>如果给定条件为真，则编译下面代码</td></tr><tr><td><code>#else</code></td><td>#if 的替代方案</td></tr><tr><td><code>#elif</code></td><td>如果前面的 #if 给定条件不为真，当前条件为真，则编译下面代码</td></tr><tr><td><code>#endif</code></td><td>结束一个 #if……#else 条件编译块</td></tr><tr><td><code>#error</code></td><td>当遇到标准错误时，输出错误消息</td></tr><tr><td><code>#pragma</code></td><td>使用标准化方法，向编译器发布特殊的命令到编译器中</td></tr></tbody></table><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//一个课堂上的例子，避免函数库的嵌套调用</span><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> __slnname__g_A__</span><span class="token macro property">#<span class="token directive keyword">define</span>  __slnname_g_A__</span><span class="token keyword">int</span> g_A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a><em>命令行参数</em></h2><p>命令行参数是使用 <code>main()</code> 函数参数来处理的，其中，<code>argc</code> 是指传入参数的个数，<code>argv[]</code> 是一个指针数组，指向传递给程序的每个参数。</p><ol><li><code>argv[0]</code> = _____.exe，<code>argv[1]</code> = 参数一，<code>argv[2]</code> = 参数二 ………</li><li>项目属性，调试中，可以更改命令行参数。cmd 中可直接输入命令行参数，如<code>a.exe argv1</code></li><li>程序中<code>argc</code>，<code>argv</code>已经是确定的值。</li></ol><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><em>题目</em></h2><ol><li>分别统计纯英文文本文件中<strong>每一个字符个数</strong>、<strong>单词总的个数</strong>；要求统计结果输出到另外一个文件中，源文件和结果文件名均<strong>由命令行参数指定</strong>.</li></ol><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>in <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>out <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fpout<span class="token punctuation">,</span> <span class="token operator">*</span>fpin<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fpin <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入文件打开失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> count<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fpin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//flag表示读到字母或数字时是否可以cnt++</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">&lt;=</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">&lt;=</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c<span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">&lt;=</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %c\n"</span><span class="token punctuation">,</span> flag<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fpin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fpin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fpout <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输出文件打开失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span>fpout<span class="token punctuation">,</span> <span class="token string">"单词个数为: %d\n"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span>fpout<span class="token punctuation">,</span> <span class="token string">"\n===================================\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span>fpout<span class="token punctuation">,</span> <span class="token string">"字符 \t 个数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span>fpout<span class="token punctuation">,</span> <span class="token string">"%3c: \t %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fpout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="all-fine"><a href="#all-fine" class="headerlink" title="all fine"></a><em>all fine</em></h2>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大一 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode周赛笔记202</title>
      <link href="/posts/bd5d.html"/>
      <url>/posts/bd5d.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、存在连续三个奇数的数组"><a href="#一、存在连续三个奇数的数组" class="headerlink" title="一、存在连续三个奇数的数组"></a>一、存在连续三个奇数的数组</h2><p>给你一个整数数组 <code>arr</code>，请你判断数组中是否存在连续三个元素都是奇数的情况：如果存在，请返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">threeConsecutiveOdds</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        l<span class="token operator">=</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">and</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">and</span> arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                 <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><h2 id="二、使数组中所有元素相等的最小操作数"><a href="#二、使数组中所有元素相等的最小操作数" class="headerlink" title="二、使数组中所有元素相等的最小操作数"></a>二、使数组中所有元素相等的最小操作数</h2><p>存在一个长度为 <code>n</code> 的数组 <code>arr</code> ，其中 <code>arr[i] = (2 * i) + 1 （ 0 &lt;= i &lt; n</code>。</p><p>一次操作中，你可以选出两个下标，记作 <code>x</code> 和 <code>y</code> （ 0 &lt;= x, y &lt; n ）并使 arr[x] 减去 1 、arr[y] 加上 1 （即 arr[x] -=1 且 arr[y] += 1 ）。最终的目标是使数组中的所有元素都 相等 。题目测试用例将会 保证 ：在执行若干步操作后，数组中的所有元素最终可以全部相等。</p><p>给你一个整数 <code>n</code>，即数组的长度。请你返回使数组 <code>arr</code> 中所有元素相等所需的 <code>最小操作数</code> 。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minOperations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        table<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            table<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token operator">+</span>table<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> table<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span></code></pre><h2 id="三、两球之间的磁力"><a href="#三、两球之间的磁力" class="headerlink" title="三、两球之间的磁力"></a>三、两球之间的磁力</h2><p>在代号为 C-137 的地球上，Rick 发现如果他将两个球放在他新发明的篮子里，它们之间会形成特殊形式的磁力。Rick 有 <code>n</code> 个空的篮子，第 <code>i</code> 个篮子的位置在 <code>position[i]</code> ，Morty 想把 <code>m</code> 个球放到这些篮子里，使得任意两球间 最小磁力 最大。</p><p>已知两个球如果分别位于 <code>x</code> 和 <code>y</code> ，那么它们之间的磁力为 <code>|x - y|</code> 。</p><p>给你一个整数数组 <code>position</code> 和一个整数 <code>m</code> ，请你返回最大化的最小磁力。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        p<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        lenp<span class="token operator">=</span>len<span class="token punctuation">(</span>p<span class="token punctuation">)</span>        l<span class="token operator">=</span>min<span class="token punctuation">(</span><span class="token punctuation">[</span>p<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>lenp<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#最小答案</span>        r<span class="token operator">=</span>p<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                                <span class="token comment" spellcheck="true">#最大答案</span>        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>            count<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>            <span class="token keyword">while</span> j<span class="token operator">&lt;</span>lenp<span class="token punctuation">:</span>                <span class="token keyword">while</span> j<span class="token operator">&lt;</span>lenp <span class="token operator">and</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>ans<span class="token punctuation">:</span> j<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">if</span> j<span class="token operator">&lt;</span>lenp<span class="token punctuation">:</span> count<span class="token operator">+=</span><span class="token number">1</span>                i<span class="token operator">=</span>j            <span class="token keyword">return</span> count<span class="token operator">>=</span> m<span class="token number">-1</span>        <span class="token keyword">while</span> l<span class="token operator">&lt;=</span>r<span class="token punctuation">:</span>            mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token keyword">if</span> check<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">:</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> r<span class="token operator">=</span>mid<span class="token number">-1</span>        <span class="token keyword">return</span> l<span class="token number">-1</span><span class="token comment" spellcheck="true"># 有些不懂，以后再看看</span></code></pre><h2 id="四、吃掉-N-个橘子的最少天数"><a href="#四、吃掉-N-个橘子的最少天数" class="headerlink" title="四、吃掉 N 个橘子的最少天数"></a>四、吃掉 N 个橘子的最少天数</h2><p>厨房里总共有 n 个橘子，你决定每一天选择如下方式之一吃这些橘子：</p><p>吃掉一个橘子。<br>如果剩余橘子数 <code>n</code> 能被 <code>2</code> 整除，那么你可以吃掉 <code>n/2</code> 个橘子。<br>如果剩余橘子数 <code>n</code> 能被 <code>3</code> 整除，那么你可以吃掉 <code>2*(n/3)</code> 个橘子。<br>每天你只能从以上 <code>3</code> 种方案中选择一种方案。</p><p>请你返回吃掉所有 <code>n</code> 个橘子的最少天数。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minDays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">from</span> functools <span class="token keyword">import</span> lru_cache        @lru_cache<span class="token punctuation">(</span>maxsize<span class="token operator">=</span><span class="token number">2048</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> k<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> k            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> k<span class="token operator">%</span><span class="token number">6</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> min<span class="token punctuation">(</span>bfs<span class="token punctuation">(</span>k<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>bfs<span class="token punctuation">(</span>k<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> k<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> min<span class="token punctuation">(</span>bfs<span class="token punctuation">(</span>k<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>bfs<span class="token punctuation">(</span>k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> k<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> min<span class="token punctuation">(</span>bfs<span class="token punctuation">(</span>k<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>bfs<span class="token punctuation">(</span>k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> bfs<span class="token punctuation">(</span>k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">return</span> bfs<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第一次把第四题做出来，开心ing</span><span class="token comment" spellcheck="true"># 看了一下其它题解，n-1的情况后期不用考虑</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode周赛笔记201</title>
      <link href="/posts/bc1d.html"/>
      <url>/posts/bc1d.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、整理字符串"><a href="#一、整理字符串" class="headerlink" title="一、整理字符串"></a>一、整理字符串</h2><p>给你一个由大小写英文字母组成的字符串 <code>s</code> 。</p><p>一个整理好的字符串中，两个相邻字符 <code>s[i]</code> 和 <code>s[i + 1]</code> 不会同时满足下述条件：</p><ul><li><code>0</code> &lt;= <code>i</code> &lt;= <code>s.length - 2</code></li><li><code>s[i]</code> 是小写字符，但 <code>s[i + 1]</code> 是相同的大写字符；反之亦然 。</li></ul><p>请你将字符串整理好，每次你都可以从字符串中选出满足上述条件的两个相邻字符并删除，直到字符串整理好为止。</p><p>请返回整理好的 字符串 。题目保证在给出的约束条件下，测试样例对应的答案是唯一的。</p><p>注意：空字符串也属于整理好的字符串，尽管其中没有任何字符</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">makeGood</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            last<span class="token operator">=</span>None            <span class="token keyword">if</span> stack<span class="token punctuation">:</span> last<span class="token operator">=</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> last <span class="token operator">and</span> <span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">32</span><span class="token operator">==</span>ord<span class="token punctuation">(</span>last<span class="token punctuation">)</span> <span class="token operator">or</span> ord<span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">32</span><span class="token operator">==</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span>last<span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> stack <span class="token keyword">if</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#熟悉了stack，ord()与32，list.extend()</span></code></pre><h2 id="二、找出第-N-个二进制字符串中的第-K-位"><a href="#二、找出第-N-个二进制字符串中的第-K-位" class="headerlink" title="二、找出第 N 个二进制字符串中的第 K 位"></a>二、找出第 N 个二进制字符串中的第 K 位</h2><p>给你两个正整数 n 和 k，二进制字符串  Sn 的形成规则如下：</p><p><code>S1 = &quot;0&quot;</code><br>当 <code>i &gt; 1</code> 时，<code>Si = Si-1 + &quot;1&quot; + reverse(invert(Si-1))</code><br>其中 <code>+</code>表示串联操作，<code>reverse(x)</code> 返回反转 x 后得到的字符串，而 <code>invert(x)</code> 则会翻转 x 中的每一位（0 变为 1，而 1 变为 0）</p><p>例如，符合上述描述的序列的前 4 个字符串依次是：</p><p>S1 = “0”<br>S2 = “011”<br>S3 = “0111001”<br>S4 = “011100110110001”<br>请你返回  Sn 的 第 k 位字符 ，题目数据保证 k 一定在 Sn 长度范围以内。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findKthBit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        s<span class="token operator">=</span><span class="token string">'0'</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            s<span class="token operator">=</span>s<span class="token operator">+</span><span class="token string">'1'</span><span class="token operator">+</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>str<span class="token punctuation">(</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> s<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 熟悉了 ^1 操作</span></code></pre><h2 id="三、和为目标值的非空不重叠子数组最大数目"><a href="#三、和为目标值的非空不重叠子数组最大数目" class="headerlink" title="三、和为目标值的非空不重叠子数组最大数目"></a>三、和为目标值的非空不重叠子数组最大数目</h2><p>给你一个数组 <code>nums</code> 和一个整数 <code>target</code> 。</p><p>请你返回 非空不重叠 子数组的最大数目，且每个子数组中数字和都为 <code>target</code> 。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxNonOverlapping</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token number">0</span>        pre <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#这是一个前缀和的集合</span>        sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            sum <span class="token operator">+=</span> num            <span class="token keyword">if</span> sum <span class="token operator">-</span> target <span class="token keyword">in</span> pre<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#有一段和满足要求</span>                res <span class="token operator">+=</span> <span class="token number">1</span>                sum <span class="token operator">=</span> <span class="token number">0</span>                pre <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                pre<span class="token punctuation">.</span>add<span class="token punctuation">(</span>sum<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token comment" spellcheck="true"># 像560.和为k的子数组,忘了</span><span class="token comment" spellcheck="true"># 一遍就出来了,思路都固定死了，就是前缀和</span></code></pre><h2 id="四、切棍子的最小成本"><a href="#四、切棍子的最小成本" class="headerlink" title="四、切棍子的最小成本"></a>四、切棍子的最小成本</h2><p>有一根长度为 <code>n</code> 个单位的木棍，棍上从 <code>0</code> 到 <code>n</code> 标记了若干位置。<br>给你一个整数数组 <code>cuts</code> ，其中 <code>cuts[i]</code> 表示你需要将棍子切开的位置。</p><p>你可以按顺序完成切割，也可以根据需要更改切割的顺序。</p><p>每次切割的成本都是当前要切割的棍子的长度，切棍子的总成本是历次切割成本的总和。对棍子进行切割将会把一根木棍分成两根较小的木棍（这两根木棍的长度和就是切割前木棍的长度）。请参阅第一个示例以获得更直观的解释。</p><p>返回切棍子的 <code>最小总成本</code> 。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minCost</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> cuts<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">import</span> sys           sys<span class="token punctuation">.</span>setrecursionlimit<span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#改一下递归深度</span>        <span class="token keyword">import</span> functools        @functools<span class="token punctuation">.</span>lru_cache<span class="token punctuation">(</span>None<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#用一下缓存</span>        <span class="token keyword">def</span> <span class="token function">dp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> c <span class="token keyword">in</span> cuts<span class="token punctuation">:</span>                <span class="token keyword">if</span> c <span class="token operator">></span> i <span class="token operator">and</span> c <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                    res <span class="token operator">=</span> min<span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">(</span>i<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">+</span> dp<span class="token punctuation">(</span>c<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> j <span class="token operator">-</span> i<span class="token punctuation">)</span>            <span class="token keyword">if</span> res <span class="token operator">==</span> float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token keyword">return</span> res        <span class="token keyword">return</span> dp<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 懂了一些，dp的不是表，是函数了，厉害</span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>唔，只做了两道题</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>intermediate</title>
      <link href="/posts/2e8f.html"/>
      <url>/posts/2e8f.html</url>
      
        <content type="html"><![CDATA[<p>本文基于<a href="https://readthedocs.org/projects/intermediatepythongithubio/downloads/pdf/latest/" target="_blank" rel="noopener"><em>Intermediate Python</em></a>学习过程中摘要与实践。<br>感谢此书作者，书的更新日期：Jul 11, 2020.</p><blockquote><p><em>blueprint</em>-(伪代码)<br><em>parentheses</em>-(括号)<br><em>clause</em>-(从句)</p></blockquote><h2 id="args-and-kwargs"><a href="#args-and-kwargs" class="headerlink" title="*args and **kwargs"></a><em>*args and **kwargs</em></h2><p>When you do not know beforehand how many arguments can be passed to your function,<br>use it:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_var_args</span><span class="token punctuation">(</span>f_arg<span class="token punctuation">,</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"first normal arg:"</span><span class="token punctuation">,</span>f_arg<span class="token punctuation">)</span>    <span class="token keyword">for</span> arg <span class="token keyword">in</span> argv<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"another arg through *argv:"</span><span class="token punctuation">,</span>arg<span class="token punctuation">)</span>test_var_args<span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'wow'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->first normal arg: python</span><span class="token comment" spellcheck="true">#-->another arg through *argv: hello</span><span class="token comment" spellcheck="true">#-->another arg through *argv: wow</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_args_kwargs</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span>arg2<span class="token punctuation">,</span>arg3<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"arg1:"</span><span class="token punctuation">,</span>arg1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"arg2:"</span><span class="token punctuation">,</span>arg2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"arg3"</span><span class="token punctuation">,</span>arg3<span class="token punctuation">)</span>kwargs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"arg3"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"arg2"</span><span class="token punctuation">:</span><span class="token string">"two"</span><span class="token punctuation">,</span><span class="token string">"arg1"</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span>test_args_kwargs<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->arg1: 5</span><span class="token comment" spellcheck="true">#-->arg2: two</span><span class="token comment" spellcheck="true">#-->arg3 3</span></code></pre><p> <code>*args</code> is used to send a non-keyworded variable length argument list to the function.<br> <code>**kwargs</code> allows you to pass <strong>keyworded</strong> variable length of arguments to a function.<br> The <strong>order</strong> is <code>some_func(fargs, *args, **kwargs)</code></p><p> The most common use case is when making function decorators.</p><h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a><em>Debugging</em></h2><p>You can run a script from the commandline using the <strong>Python debugger</strong>(pdb). Here is an example:<br><code>$ python -m pdb my_script.py</code><br>Running from inside a script:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pdb<span class="token keyword">def</span> <span class="token function">make_bread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pdb<span class="token punctuation">.</span>set_trace<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token string">" i dont have time"</span><span class="token keyword">print</span><span class="token punctuation">(</span>make_bread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>You would <strong>enter the debugger pattern</strong> as soon as you run it. Now it’s time to learn some of the commands of the debugger.<br><strong>Commands</strong>:</p><ul><li><p><code>c</code>: continue execution</p></li><li><p><code>w</code>: shows the context of the current line it is executing.</p></li><li><p><code>a</code>: print the argument list of the current function</p></li><li><p><code>s</code>: execute the current line and stop at the first possible occasion</p></li><li><p><code>n</code>: continue execution until the next line in the current function is reached or it returns</p></li></ul><h2 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a><em>Generators</em></h2><p>According to Wikipedia, an iterator is an object that enables a programmer to traverse a container, particularly lists. </p><h6 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h6><p>An <strong>iterable</strong> is any object in Python which has an <code>__iter__</code> or a <code>__getitem__</code> method<br>defined which returns an iterator or can take indexes.</p><h6 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h6><p>An <strong>iterator</strong> is any object in Python which has a  <code>__next__</code> method defined. </p><h6 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h6><p>When we use a loop to loop over something it is called <strong>iteration</strong>.</p><h6 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h6><ul><li><strong>Generators</strong> are iterators, but you can only iterate over them once.</li><li>It’s because they do <strong>not store all the values in memory</strong>, they generate the values on the fly.</li><li>Most of the time generators are implemented as functions.</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generator_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> i<span class="token keyword">for</span> item <span class="token keyword">in</span> generator_function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generator_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> igen <span class="token operator">=</span> generator_function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->0</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->1</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->error</span><span class="token comment" spellcheck="true"># after yielding all the values next() caused a StopIteration error</span></code></pre><pre class=" language-python"><code class="language-python">my_string <span class="token operator">=</span> <span class="token string">"Yasoob"</span>my_iter <span class="token operator">=</span> iter<span class="token punctuation">(</span>my_string<span class="token punctuation">)</span>next<span class="token punctuation">(</span>my_iter<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># str是个可迭代对象，但不是迭代器</span><span class="token comment" spellcheck="true"># 用iter()函数</span></code></pre><h2 id="Map-Filter-and-Reduce"><a href="#Map-Filter-and-Reduce" class="headerlink" title="Map, Filter and Reduce"></a><em>Map, Filter and Reduce</em></h2><p>菜鸟教程链接：<a href="https://www.runoob.com/python/python-func-map.html" target="_blank" rel="noopener">map</a> <a href="https://www.runoob.com/python/python-func-filter.html" target="_blank" rel="noopener">filter</a> <a href="https://www.runoob.com/python/python-func-reduce.html" target="_blank" rel="noopener">reduce</a></p><pre class=" language-python"><code class="language-python">items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>squared <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> items<span class="token punctuation">:</span>    squared<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#       ||</span><span class="token comment" spellcheck="true">#       ||</span><span class="token comment" spellcheck="true">#       \/</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>squared <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span> items<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">multiply</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>x<span class="token punctuation">)</span>funcs <span class="token operator">=</span> <span class="token punctuation">[</span>multiply<span class="token punctuation">,</span> add<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    value <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> funcs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># use map even a list of functions</span></code></pre><pre class=" language-python"><code class="language-python">number_list <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>less_than_zero <span class="token operator">=</span> list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span> number_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>less_than_zero<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->[-5, -4, -3, -2, -1]</span><span class="token comment" spellcheck="true">#If map &amp; filter do not appear beautiful to you</span><span class="token comment" spellcheck="true"># then you can read about list/dict/tuple comprehensions.(推导式)</span></code></pre><pre class=" language-python"><code class="language-python">product <span class="token operator">=</span> <span class="token number">1</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">for</span> num <span class="token keyword">in</span> list<span class="token punctuation">:</span>    product <span class="token operator">=</span> product <span class="token operator">*</span> num<span class="token comment" spellcheck="true">#       ||</span><span class="token comment" spellcheck="true">#       ||</span><span class="token comment" spellcheck="true">#       \/</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> reduceproduct <span class="token operator">=</span> reduce<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="Decorators"><a href="#Decorators" class="headerlink" title="Decorators"></a><em>Decorators</em></h2><p>Decorators are a significant part of Python. In simple words: they are functions which modify the functionality of other functions. They help to make our code shorter and more Pythonic.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"yasoob"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"hi "</span> <span class="token operator">+</span> name<span class="token keyword">print</span><span class="token punctuation">(</span>hi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output: 'hi yasoob'</span><span class="token comment" spellcheck="true"># 我们甚⾄可以将⼀个函数赋值给⼀个变量，⽐如</span>greet <span class="token operator">=</span> hi<span class="token comment" spellcheck="true"># 我们这⾥没有在使⽤⼩括号，因为我们并不是在调⽤hi函数</span><span class="token comment" spellcheck="true"># ⽽是在将它放在greet变量⾥头。我们尝试运⾏下这个</span><span class="token keyword">print</span><span class="token punctuation">(</span>greet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output: 'hi yasoob'</span><span class="token comment" spellcheck="true"># 如果我们删掉旧的hi函数，看看会发⽣什么！</span><span class="token keyword">del</span> hi<span class="token keyword">print</span><span class="token punctuation">(</span>hi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#outputs: NameError</span><span class="token keyword">print</span><span class="token punctuation">(</span>greet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#outputs: 'hi yasoob'</span><span class="token comment" spellcheck="true"># ======Everything in python is a object=====</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"yasoob"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"now you are in the greet() function"</span>    <span class="token keyword">def</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"now you are in the welcome() function"</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"yasoob"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> greet    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> welcomea <span class="token operator">=</span> hi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->function greet at 0x7f2143c01500></span><span class="token comment" spellcheck="true">#上⾯清晰地展示了`a`现在指向到hi()函数中的greet()函数</span><span class="token comment" spellcheck="true">#现在试试这个</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->now you are in the greet() function</span><span class="token comment" spellcheck="true">#=====在函数中定义函数，返回函数=====</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"hi yasoob!"</span><span class="token keyword">def</span> <span class="token function">doSomethingBeforeHi</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am doing some boring work before executing hi()"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>doSomethingBeforeHi<span class="token punctuation">(</span>hi<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->I am doing some boring work before executing hi()</span><span class="token comment" spellcheck="true"># hi yasoob!</span><span class="token comment" spellcheck="true">#=====将函数作为参数传给另一个函数=====</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">a_new_decorator</span><span class="token punctuation">(</span>a_func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapTheFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am doing some boring work before executing a_func()"</span><span class="token punctuation">)</span>        a_func<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am doing some boring work after executing a_func()"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapTheFunction<span class="token keyword">def</span> <span class="token function">a_function_requiring_decoration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am the function which needs some decoration"</span><span class="token punctuation">)</span>a_function_requiring_decoration<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#outputs: "I am the function which needs some decoration"</span>a_function_requiring_decoration <span class="token operator">=</span> a_new_decorator<span class="token punctuation">(</span>a_function_requiring_decoration<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#now a_function_requiring_decoration is wrapped by wrapTheFunction()</span>a_function_requiring_decoration<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#outputs:I am doing some boring work before executing a_func()</span><span class="token comment" spellcheck="true"># I am the function which needs some decoration</span><span class="token comment" spellcheck="true"># I am doing some boring work after executing a_func()</span><span class="token comment" spellcheck="true">###一个简单的装饰器，相当于赋给函数一个经修饰的函数</span></code></pre><pre class=" language-python"><code class="language-python">@a_new_decorator<span class="token keyword">def</span> <span class="token function">a_function_requiring_decoration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am the function which needs some decoration"</span><span class="token punctuation">)</span>a_function_requiring_decoration<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#outputs: I am doing some boring work before executing a_func()</span><span class="token comment" spellcheck="true"># I am the function which needs some decoration to remove my foul smell</span><span class="token comment" spellcheck="true"># I am doing some boring work after executing a_func()</span><span class="token comment" spellcheck="true">#重点理解一下 @ 符号</span><span class="token comment" spellcheck="true">#但此时a_function_requiring_decoration.__name__变成了wrapTheFunction</span><span class="token comment" spellcheck="true">#这时就有了functools.wraps，下面是蓝本：</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># blueprint</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">def</span> <span class="token function">decorator_name</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>    @wraps<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">decorated</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> can_run<span class="token punctuation">:</span>             <span class="token keyword">return</span> <span class="token string">"Function will not run"</span>        <span class="token keyword">return</span> f<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">return</span> decorated@decorator_name<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token string">"Function is running"</span><span class="token punctuation">)</span>can_run <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Output: Function is running</span>can_run <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Output: Function will not run</span></code></pre><h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a><em>Mutation</em></h2><pre class=" language-python"><code class="language-python">foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hi'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->['hi']</span>bar <span class="token operator">=</span> foobar <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'bye'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->['hi', 'bye']</span><span class="token comment" spellcheck="true">#将一个变量赋值为另一个可变类型变量时，对数据的改动会反映在两个变量上</span><span class="token comment" spellcheck="true">#python可变类型（mutable）：列表，字典</span><span class="token comment" spellcheck="true">#python不可变类型：数字，字符串，元组</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_to</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> target<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    target<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token keyword">return</span> targetadd_to<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Output: [1]</span>add_to<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Output: [1, 2]</span>add_to<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Output: [1, 2, 3]</span><span class="token comment" spellcheck="true">#在Python中当函数被定义时，默认参数只会运算⼀次</span></code></pre><h2 id="Enumerate"><a href="#Enumerate" class="headerlink" title="Enumerate"></a><em>Enumerate</em></h2><pre class=" language-python"><code class="language-python">my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'grapes'</span><span class="token punctuation">,</span> <span class="token string">'pear'</span><span class="token punctuation">]</span><span class="token keyword">for</span> index<span class="token punctuation">,</span>name <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>my_list<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> index<span class="token punctuation">,</span>name<span class="token comment" spellcheck="true"># Output:</span><span class="token comment" spellcheck="true"># 1 apple</span><span class="token comment" spellcheck="true"># 2 banana</span><span class="token comment" spellcheck="true"># 3 grapes</span><span class="token comment" spellcheck="true"># 4 pear</span></code></pre><h2 id="Object-introspection"><a href="#Object-introspection" class="headerlink" title="Object introspection"></a><em>Object introspection</em></h2><pre class=" language-python"><code class="language-python">dir<span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># It returns a list of attributes and methods belonging to an object</span>type<span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># It returns the type of an object.</span>id<span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># It returns the unique ids of various objects.</span></code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a><em>异常处理</em></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 打印⼀些异常⽇志，如果你想要的话</span>    <span class="token keyword">raise</span><span class="token comment" spellcheck="true"># try/else 在try不出现异常时触发</span></code></pre><h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a><em>Classes</em></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cal</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># pi is a class variable</span>    pi <span class="token operator">=</span> <span class="token number">3.142</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># self.radius is an instance variable</span>        self<span class="token punctuation">.</span>radius <span class="token operator">=</span> radius    <span class="token keyword">def</span> <span class="token function">area</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>pi <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>a <span class="token operator">=</span> Cal<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>area<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Output: 3217.408</span>a<span class="token punctuation">.</span>pi<span class="token comment" spellcheck="true"># Output: 3.142</span>a<span class="token punctuation">.</span>pi <span class="token operator">=</span> <span class="token number">43</span>a<span class="token punctuation">.</span>pi<span class="token comment" spellcheck="true"># Output: 43</span>b <span class="token operator">=</span> Cal<span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>area<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Output: 6082.912</span>b<span class="token punctuation">.</span>pi<span class="token comment" spellcheck="true"># Output: 3.142</span>b<span class="token punctuation">.</span>pi <span class="token operator">=</span> <span class="token number">50</span>b<span class="token punctuation">.</span>pi<span class="token comment" spellcheck="true"># Output: 50</span></code></pre><h2 id="Function-caching"><a href="#Function-caching" class="headerlink" title="Function caching"></a><em>Function caching</em></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> lru_cache@lru_cache<span class="token punctuation">(</span>maxsize<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">return</span> n    <span class="token keyword">return</span> fib<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span>fib<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>fib<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>fib<span class="token punctuation">.</span>cache_clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#这是一个被相同参数频繁调用的I/O密集的函数</span><span class="token comment" spellcheck="true">#使用lru_cache可以使这段代码的运行时间从53.6s变为0s(笔者自测)</span></code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文漏掉了<code>set结构</code> <code>Ternary Operators(三元运算符）</code> <code>装饰器的高级应用</code><br><code>Global &amp; Return</code>(尽量return多值代替global)<br><code>__slots__魔法</code> <code>Virtual Environment</code> <code>Collections</code><br><code>推导式</code> <code>lambda 参数:操作</code> <code>Python C extensions</code><br><code>for/else</code>(else会在for循环正常结束时执行)<br><code>open函数</code> <code>Targeting Python 2+3</code> <code>Coroutines(协程)</code><br><code>上下文管理器</code></p><p>唔，终于弄完了😀————————<em><code>2020.8.9</code></em></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>collections模块</title>
      <link href="/posts/4890.html"/>
      <url>/posts/4890.html</url>
      
        <content type="html"><![CDATA[<h1 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h1><ol><li>一个 <code>Counter</code> 是一个 <code>dict</code> 的子类，用于计数可哈希对象。</li><li>元素从一个 <code>iterable</code> 被计数或从其他的 <code>mapping (or counter)</code>初始化.</li><li>设置一个计数为0不会从计数器中移去一个元素。使用 <code>del</code> 来删除它</li></ol><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化:"></a><em>初始化:</em></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> <span class="token operator">*</span>c <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment" spellcheck="true"># a new, empty counter</span>c <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token string">'gallahad'</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># a new counter from an iterable</span>c <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'red'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># a new counter from a mapping</span>c <span class="token operator">=</span> Counter<span class="token punctuation">(</span>cats<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> dogs<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># a new counter from keyword args</span></code></pre><h2 id="elements"><a href="#elements" class="headerlink" title="elements()"></a><em>elements()</em></h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#elements()返回一个迭代器</span>c <span class="token operator">=</span> Counter<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>sorted<span class="token punctuation">(</span>c<span class="token punctuation">.</span>elements<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#-->['a', 'a', 'a', 'a', 'b', 'b']</span></code></pre><h2 id="most-common"><a href="#most-common" class="headerlink" title="most_common()"></a><em>most_common()</em></h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#相等个数的元素顺序随机</span>Counter<span class="token punctuation">(</span><span class="token string">'abracadabra'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#-->[('a', 5), ('r', 2), ('b', 2)]</span></code></pre><h2 id="subtract"><a href="#subtract" class="headerlink" title="subtract()"></a><em>subtract()</em></h2><pre class=" language-python"><code class="language-python">c <span class="token operator">=</span> Counter<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>d <span class="token operator">=</span> Counter<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>subtract<span class="token punctuation">(</span>d<span class="token punctuation">)</span>c            <span class="token comment" spellcheck="true">#-->Counter({'a': 3, 'b': 0, 'c': -3, 'd': -6})</span></code></pre><h2 id="一些用法："><a href="#一些用法：" class="headerlink" title="一些用法："></a><em>一些用法：</em></h2><pre class=" language-python"><code class="language-python">sum<span class="token punctuation">(</span>c<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># total of all counts</span>c<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># reset all counts</span>list<span class="token punctuation">(</span>c<span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true"># list unique elements</span>set<span class="token punctuation">(</span>c<span class="token punctuation">)</span>                          <span class="token comment" spellcheck="true"># convert to a set</span>dict<span class="token punctuation">(</span>c<span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true"># convert to a regular dictionary</span>c<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># convert to a list of (elem, cnt) pairs</span>Counter<span class="token punctuation">(</span>dict<span class="token punctuation">(</span>list_of_pairs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># convert from a list of (elem, cnt) pairs</span>c<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span>n<span class="token number">-1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true"># n least common elements</span><span class="token operator">+</span>c                              <span class="token comment" spellcheck="true"># remove zero and negative counts</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> rewords <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\w+'</span><span class="token punctuation">,</span> open<span class="token punctuation">(</span><span class="token string">'hamlet.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Counter<span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''-->[('the', 1143), ('and', 966), ('to', 762), ('of', 669), ('i', 631),  ('you', 554),  ('a', 546), ('my', 514), ('hamlet', 471), ('in', 451)]'''</span></code></pre><h1 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h1><p>类似<code>list</code>的容器，实现了在两端快速<code>append</code>和<code>pop</code></p><ul><li><code>append(x)</code></li><li><code>appendleft(x)</code></li><li><code>clear()</code></li><li><code>copy()</code>  浅拷贝</li><li><code>count(x)</code></li><li><code>extend()</code></li><li><code>insert(i,x)</code></li><li><code>pop()</code></li><li><code>reverse()</code></li></ul><h1 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple()"></a>namedtuple()</h1><p>创建命名元组子类的工厂函数</p><h1 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h1><p>字典的子类，提供了一个工厂函数，为字典查询提供一个默认值。<br>常见用法：</p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>d <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> s<span class="token punctuation">:</span>    d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>sorted<span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->[('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>re模块</title>
      <link href="/posts/10df.html"/>
      <url>/posts/10df.html</url>
      
        <content type="html"><![CDATA[<h2 id="python函数"><a href="#python函数" class="headerlink" title="python函数"></a><em>python函数</em></h2><p><code>re.match(pattern,str)</code><br>从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p><p><code>re.search()</code><br>扫描整个字符串并返回第一个成功的匹配。</p><p><code>re.compile()</code><br>用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。</p><p><code>re.findall()</code><br>在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">"el"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#--> &lt;re.Match object; span=(0, 1), match='h'></span><span class="token comment" spellcheck="true">#--> None</span><span class="token comment" spellcheck="true">#--> (0,1)</span></code></pre><h2 id="正则符号"><a href="#正则符号" class="headerlink" title="正则符号"></a><em>正则符号</em></h2><hr><p><code>[ ]</code><br>匹配需要的字符<strong>集合</strong>，如<code>[1-3]</code>或<code>[123]</code>都是匹配1、2或者3。</p><hr><p><code>( )</code><br>捕获需要的字符。</p><hr><p><code>(?: )</code><br>非捕获分组。</p><hr><p><code>^</code>：脱字符号。<br><strong>方括号中加入</strong>脱字符号，就是匹配未列出的所有其他字符，如<code>[^a]</code>匹配除a以外的所有其他字符。</p><hr><p><code>\</code><br>和python字符串使用规则一样，可以匹配特殊字符本身。<br>如<code>\d</code>表示匹配0到9的任意一个数字字符，而<code>\\d</code>则表示匹配<code>\d</code>本身。</p><hr><p><code>|</code><br>相当于或</p><hr><p>多次匹配</p><ul><li><code>*</code> : 匹配前一个字符0到n次，如pytho*n可以匹配pythn、pytoon、pythooooon等。</li><li><code>?</code> : 匹配前一个字符0或1次。</li><li><code>+</code> : 匹配前一个字符1到n次。等价于<code>{1,}</code></li><li><code>{n,m}</code> : 匹配前一个字符n次到m次。</li><li><code>{n}</code>: 匹配前一个字符n次。</li></ul><hr><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td><code>^</code></td><td>匹配字符串的开头</td></tr><tr><td><code>$</code></td><td>匹配字符串的末尾。</td></tr><tr><td><code>.</code></td><td>匹配任意字符，除了换行符</td></tr><tr><td><code>\s</code></td><td>匹配任意空白字符，等价于 [\t\n\r\f]。</td></tr><tr><td><code>\S</code></td><td>匹配任意非空字符</td></tr><tr><td><code>\d</code></td><td>匹配任意数字，等价于 [0-9]。</td></tr><tr><td><code>\D</code></td><td>匹配任意非数字</td></tr><tr><td><code>\w</code></td><td>匹配数字字母下划线</td></tr><tr><td><code>\W</code></td><td>匹配非数字字母下划线</td></tr><tr><td><code>\A</code></td><td>匹配字符串开始</td></tr><tr><td><code>\z</code></td><td>匹配字符串结束</td></tr><tr><td><code>\b</code></td><td>匹配一个单词边界。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr></tbody></table><p>正则匹配修饰符<code>re.S</code>使 <code>.</code> 匹配包括换行在内的所有字符</p><h2 id="python实践"><a href="#python实践" class="headerlink" title="python实践"></a><em>python实践</em></h2><pre class=" language-python"><code class="language-python">re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"d(ds)*"</span><span class="token punctuation">,</span><span class="token string">"askldjasaddsa"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#-->['', 'ds']</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"d[ds]*"</span><span class="token punctuation">,</span><span class="token string">"askldjasaddsa"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#-->['d', 'dds']</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"d{ds}*"</span><span class="token punctuation">,</span><span class="token string">"askldjasaddsa"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#-->[]</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"d{ds}"</span><span class="token punctuation">,</span><span class="token string">"askldjasad{ds}a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#-->['d{ds}']</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"ds?"</span><span class="token punctuation">,</span><span class="token string">"askldjasad{dsssssss}a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#-->['d', 'd', 'ds']</span></code></pre><p>非贪婪模式与贪婪模式：</p><pre class=" language-python"><code class="language-python">re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"/(\S*?)/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"//asd/sdsa/asda"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#-->['', 'sdsa']</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"/(\S*)/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"//asd/sdsa/asda"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->['/asd/sdsa']</span><span class="token comment" spellcheck="true">#'*', '+'，和 '?' 修饰符都是贪婪的；它们在字符串进行尽可能多的匹配。</span></code></pre><h2 id="正则实践"><a href="#正则实践" class="headerlink" title="正则实践"></a><em>正则实践</em></h2><hr><p><code>(\w)(\w)\2\1</code> 可以匹配ABBA型数据（回溯引用）</p><hr><p><code>http.*/$</code> 匹配以http开头,以/结尾的数据</p><hr><p><code>^\d{n}$</code>  匹配n位的数字</p><hr><p><code>^(?!(xx+)\1+$)x*</code> 匹配质数个x,不懂</p><hr><p>从<code>2002-1-2</code> <code>2020-01-02</code> <code>2020.01.02</code> <code>2020 01 02</code> <code>20200102</code> <code>2020/01/02</code>提取年月日的数据<br><code>(\d{4})[\-/\s]?(\d{1,2})[\-/\s]?{\d{1,2}}</code></p><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><em>小结</em></h2><p>ennn，入门应该够了，漏掉了<code>先行断言</code>,<code>(?.....)</code>等等<br>正则表达式太强了，还能密码强度认证</p><blockquote><ul><li>正则表达式在线测试：<br><a href="http://c.runoob.com/front-end/854" target="_blank" rel="noopener">http://c.runoob.com/front-end/854</a></li><li>python官方re文档：<br><a href="https://docs.python.org/zh-cn/3/library/re.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/re.html</a></li><li><strong>推荐的正则课程</strong>：<br><a href="https://codejiaonang.com/#/courses" target="_blank" rel="noopener">https://codejiaonang.com/#/courses</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sys模块</title>
      <link href="/posts/5098.html"/>
      <url>/posts/5098.html</url>
      
        <content type="html"><![CDATA[<p>该模块提供了一些变量和函数。这些变量可能被解释器使用，也可能由解释器提供。这些函数会影响解释器。本模块总是可用的。</p><h2 id="sys-path"><a href="#sys-path" class="headerlink" title="sys.path"></a><em>sys.path</em></h2><p>一个由字符串组成的列表，用于指定模块的搜索路径。<br>程序启动时将初始化该列表，列表的第一项 path[0] 目录含有调用 Python 解释器的脚本。如果脚本目录不可用（比如以交互方式调用了解释器，或脚本是从标准输入中读取的），则 path[0] 为空字符串，这将导致 Python 优先搜索当前目录中的模块</p><h2 id="sys-argv"><a href="#sys-argv" class="headerlink" title="sys.argv"></a><em>sys.argv</em></h2><p>一个列表，其中包含了被传递给 Python 脚本的命令行参数。 argv[0] 为脚本的名称（是否是完整的路径名取决于操作系统）。如果是通过 Python 解释器的命令行参数 -c 来执行的， argv[0] 会被设置成字符串 ‘-c’ 。如果没有脚本名被传递给 Python 解释器， argv[0] 为空字符串。</p><h2 id="sys-setrecursionlimit-limit"><a href="#sys-setrecursionlimit-limit" class="headerlink" title="sys.setrecursionlimit(limit)"></a><em>sys.setrecursionlimit(limit)</em></h2><p>Set the maximum depth of the Python interpreter stack to limit. This limit prevents infinite recursion from causing an overflow of the C stack and crashing Python.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python做个爬虫</title>
      <link href="/posts/e960.html"/>
      <url>/posts/e960.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><hr><p>本文将用到以下工具：</p><ul><li>requests</li><li>re</li><li>面向对象</li><li>pyqt5</li><li>pyinstaller</li></ul><p>暂时爬取网站： <a href="https://huaban.com/favorite/beauty" target="_blank" rel="noopener">https://huaban.com/favorite/beauty</a></p><h1 id="1-探究过程"><a href="#1-探究过程" class="headerlink" title="1.探究过程"></a>1.探究过程</h1><hr><h2 id="1-1-第一个难题："><a href="#1-1-第一个难题：" class="headerlink" title="1.1 第一个难题："></a>1.1 第一个难题：</h2><blockquote><p>关于爬到的html与f12得到的有区别，所以re写<code>pattern</code>不能凭着F12<br><strong>目标</strong>：找到一个合适的<code>pattern</code>便于找到url</p></blockquote><blockquote><p>所谓查看网页源代码，就是别人服务器发送到浏览器的原封不动的代码。这是爬虫获得的代码<br>你那些在源码中找不到的代码（元素），那是在浏览器执行js动态生成的，这些能在审查元素中看到<br>通过审查元素就,,,,看到就是浏览器处理过的最终的html代码。</p></blockquote><p>然后试了试更换头信息，</p><p><img src="https://img-blog.csdnimg.cn/20200801215657860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70" alt=""></p><blockquote><p>就离谱，requests.get过来的基本没找到<code>&lt;div&gt;</code>标签，F12检查元素全是<code>&lt;div&gt;</code>标签<br>感觉：爬到的和F12到的是两个东西</p></blockquote><h2 id="1-2-第二个难题："><a href="#1-2-第二个难题：" class="headerlink" title="1.2 第二个难题："></a>1.2 第二个难题：</h2><blockquote><p>从得到的text中找出图片的地址</p></blockquote><p>先用 <a href="http://www.bejson.com/" target="_blank" rel="noopener">http://www.bejson.com/</a> 进行text分析，发现图片的地址为<br><code>https://hbimg.huabanimg.com/</code>+<code>key</code></p><h2 id="1-3-第三个难题："><a href="#1-3-第三个难题：" class="headerlink" title="1.3 第三个难题："></a>1.3 第三个难题：</h2><blockquote><p>关于得到数据的不完整性，<br><strong>目标</strong>：找出<code>url_next</code></p></blockquote><p>爬到的东西只有前面一些图片，经查询好像是一种关于<strong>动态网页异步更新</strong>的技术<br>参考： <a href="https://zhuanlan.zhihu.com/p/27346009" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27346009</a><br>(当然网站表面没有页，表面的url也没有变）</p><p><img src="https://img-blog.csdnimg.cn/2020080121565813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70" alt=""></p><p>经查询，向下翻页时XHR会多出请求，url地址已给出<br>是时候更改1.0版本的代码，让它找到更多的图片🎈</p><p>经过第一个问题的折磨，容易理解：</p><ul><li>虽然（翻页后的）url，用浏览器无法访问，但get可以爬到</li></ul><h1 id="2-基础知识"><a href="#2-基础知识" class="headerlink" title="2.基础知识"></a>2.基础知识</h1><hr><h2 id="2-1-关于requests"><a href="#2-1-关于requests" class="headerlink" title="2.1 关于requests"></a>2.1 关于requests</h2><h3 id="开始使用第一步："><a href="#开始使用第一步：" class="headerlink" title="开始使用第一步："></a>开始使用第一步：</h3><pre class=" language-python"><code class="language-python">  <span class="token keyword">import</span> requests  r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://"</span><span class="token punctuation">)</span>  r<span class="token punctuation">.</span>status_code                     <span class="token comment" spellcheck="true">#en,返回200表示成功</span></code></pre><h3 id="开始使用第二步："><a href="#开始使用第二步：" class="headerlink" title="开始使用第二步："></a>开始使用第二步：</h3><pre class=" language-python"><code class="language-python">  r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>  r<span class="token punctuation">.</span>text                            <span class="token comment" spellcheck="true">#en,返回网站的html</span></code></pre><h3 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h3><p><code>r.apparent_encoding</code>  【从内容分析出响应内容编码方式，返回一个编码方式字符串】<br><code>r.raise_for_status</code>   【如果不是200，返回异常码】</p><blockquote><p>七个主要方法：</p><ul><li><code>requests.request(method,url,**kwargs)</code></li><li><code>requests.get(url,**kwargs)</code>, headers中伪装头信息</li><li>requests.post()</li><li>requests.put()</li><li>requests.patch()</li><li>requests.head()</li><li>requests.delete()</li></ul></blockquote><h2 id="2-2-关于re"><a href="#2-2-关于re" class="headerlink" title="2.2 关于re"></a>2.2 关于re</h2><p><a href="https://x-varywow.github.io/posts/10df.html">https://x-varywow.github.io/posts/10df.html</a></p><h2 id="2-3-关于面向对象"><a href="#2-3-关于面向对象" class="headerlink" title="2.3 关于面向对象"></a>2.3 关于面向对象</h2><p><code>if __name__ == &#39;__main__&#39;</code><br>表示：只有当该文件作为一个独立的脚本运行时才会被调用。<br>换句话说，如果在其它文件中导入此文件，那么条件中的语句不被执行。</p><h1 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h1><hr><p>1.0版本代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">import</span> ospwd<span class="token operator">=</span><span class="token string">"C:/temp/temp"</span>url <span class="token operator">=</span> <span class="token string">"https://huaban.com/favorite/beauty/"</span> <span class="token comment" spellcheck="true">#这是你要爬取的页面url</span>url_img <span class="token operator">=</span> <span class="token string">"https://hbimg.huabanimg.com/"</span> <span class="token comment" spellcheck="true">#这是它放图片的url前缀</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token comment" spellcheck="true">#伪装头信息</span>head <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36 Edg/84.0.522.49'</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始下载："</span><span class="token punctuation">,</span>file<span class="token punctuation">,</span>url<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fd<span class="token punctuation">:</span>            <span class="token keyword">for</span> chunk <span class="token keyword">in</span> r<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                fd<span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载失败了"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> num    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*******************************************"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你的请求网址是："</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>head<span class="token punctuation">)</span>    pattern<span class="token operator">=</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'{"pin_id":(\d*?),.*?"key":"(.*?)",.*?"like_count":(\d*?),.*?"repin_count":(\d*?),.*?}'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    pid<span class="token operator">=</span><span class="token number">0</span>    items<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>        pid<span class="token punctuation">,</span>key<span class="token punctuation">,</span>like_cnt<span class="token punctuation">,</span>repin_cnt<span class="token operator">=</span>item        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始下载第{}张图片"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>        pic_url<span class="token operator">=</span>url_img<span class="token operator">+</span>key    <span class="token comment" spellcheck="true">#图片的url地址</span>        filename<span class="token operator">=</span>pwd<span class="token operator">+</span>str<span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".jpg"</span>  <span class="token comment" spellcheck="true">#文件保存的名字</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"文件存在："</span><span class="token punctuation">,</span>filename<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        download<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>pic_url<span class="token punctuation">)</span>        num<span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span>main<span class="token punctuation">(</span>url<span class="token punctuation">)</span></code></pre><p>1.1版本代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">import</span> ospwd<span class="token operator">=</span><span class="token string">"C:/temp/temp"</span>url <span class="token operator">=</span> <span class="token string">"http://huaban.com/favorite/beauty/"</span>url_img <span class="token operator">=</span> <span class="token string">"https://hbimg.huabanimg.com/"</span>url_next<span class="token operator">=</span><span class="token string">"https://huaban.com/favorite/beauty?kdbpp4xg&amp;max="</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token comment" spellcheck="true">#伪装头信息</span>head <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36 Edg/84.0.522.49'</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始下载："</span><span class="token punctuation">,</span>file<span class="token punctuation">,</span>url<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fd<span class="token punctuation">:</span>            <span class="token keyword">for</span> chunk <span class="token keyword">in</span> r<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                fd<span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载失败了"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> num    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*******************************************"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你的请求网址是："</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>head<span class="token punctuation">)</span>    pattern<span class="token operator">=</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'{"pin_id":(\d*?),.*?"key":"(.*?)",.*?"like_count":(\d*?),.*?"repin_count":(\d*?),.*?}'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    pid<span class="token operator">=</span><span class="token number">0</span>    items<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>        pid<span class="token punctuation">,</span>key<span class="token punctuation">,</span>like_cnt<span class="token punctuation">,</span>repin_cnt<span class="token operator">=</span>item        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始下载第{}张图片"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>        pic_url<span class="token operator">=</span>url_img<span class="token operator">+</span>key    <span class="token comment" spellcheck="true">#图片的url地址</span>        filename<span class="token operator">=</span>pwd<span class="token operator">+</span>str<span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".jpg"</span>  <span class="token comment" spellcheck="true">#文件保存的名字</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"文件存在："</span><span class="token punctuation">,</span>filename<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        download<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>pic_url<span class="token punctuation">)</span>        num<span class="token operator">+=</span><span class="token number">1</span>    main<span class="token punctuation">(</span>url_next<span class="token operator">+</span>pid<span class="token operator">+</span><span class="token string">"&amp;limit=100&amp;wfl=1"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#比1.0多出的地方，参考问题3</span><span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span>main<span class="token punctuation">(</span>url<span class="token punctuation">)</span></code></pre><h1 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a>4.小结</h1><hr><p><code>2020.8.1</code><br> 啦啦啦， <code>1.1</code>版本成功，激动ing<br>今天还试了试beautifulsoup，fiddler，没领悟~</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硬件设计</title>
      <link href="/posts/d6d.html"/>
      <url>/posts/d6d.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><hr><h1 id="1-基础"><a href="#1-基础" class="headerlink" title="1.基础"></a>1.基础</h1><hr><blockquote><p><strong>1.1 单片机最小系统</strong></p><ol><li>电源电路</li><li>晶振电路（晶振及电容）</li><li>复位电路</li></ol></blockquote><blockquote><p><strong>1.2 一堆板子</strong><br>8位的51，32位的stm32</p></blockquote><blockquote><p><strong>1.3 软件与硬件</strong></p></blockquote><blockquote><p><strong>1.4 一些大概念</strong></p><p><strong>FPGA</strong>（Field Programmable Gate Array）是在PAL、GAL等可编程器件的基础上进一步发展的产物。它是作为专用集成电路（ASIC）领域中的一种半定制电路而出现的。</p><p><strong>MCU</strong> (Microcontroller Unit)，又称单片微型计算机(Single Chip Microcomputer )或者单片机，是把CPU的频率与规格做适当缩减，并将内存(memory)、计数器(Timer)、USB、A/D转换、UART、PLC、DMA等周边接口，甚至LCD驱动电路都整合在单一芯片上，形成芯片级的计算机。</p><p><strong>译码器</strong> (decoder)是一类多输入多输出组合逻辑电路器件，其可以分为：变量译码和显示译码两类。</p><p><strong>CMOS</strong> (Complementary Metal Oxide Semiconducto)，互补金属氧化物半导体。它是指制造大规模集成电路芯片用的一种技术或用这种技术制造出来的芯片，是电脑主板上的一块可读写的RAM芯片。</p><p><strong>SoC</strong> (System on Chip)</p><p><strong>NPU</strong> (Neural-network Processing Unit)</p><p><strong>GND</strong> (Ground)代表地线或0线.GND就是公共端的意思，也可以说是地。但这个地并不是真正意义上的地。是出于应用而假设的一个地，对于电源来说，它就是一个电源的负极。它与大地是不同的。</p><p><strong>耦合</strong> (Coupling)，就是把某一电路的能量输送（或转换）到其他的电路中去。</p><p><strong>电感器</strong> (Inductor)，是能够把电能转化为磁能而存储起来的元件</p></blockquote><blockquote><p><strong>1.5 电路板上的一些概念</strong></p><p>在电子电路中，<strong>VCC</strong>是电路的供电电压, <strong>VDD</strong>是芯片的工作电压。<br><strong>VSS</strong>：S=series 表示公共连接的意思，通常指电路公共接地端电压；</p></blockquote><h1 id="2-项目"><a href="#2-项目" class="headerlink" title="2.项目"></a>2.项目</h1><hr><blockquote><p><strong>2.1 值得参考的项目:</strong></p></blockquote><h1 id="3-实践"><a href="#3-实践" class="headerlink" title="3.实践"></a>3.实践</h1><hr><blockquote><p><strong>3.1 显示屏实践</strong><br>家里有一个旧显示屏<br><code>PAL/NTSC</code> <code>TFT LED</code> <code>7英寸</code></p></blockquote><blockquote><p><strong>3.2 做一个小巧的可充电LED</strong></p></blockquote><blockquote><p><strong>3.3 磁悬浮</strong></p></blockquote><h1 id="4-单片机入门"><a href="#4-单片机入门" class="headerlink" title="4.单片机入门"></a>4.单片机入门</h1><hr><blockquote><p><strong>4.1 点亮LED</strong> <code>7.24</code></p><p>学会用<code>面包板</code>,<code>arduinoIDE</code></p></blockquote><blockquote><p><strong>4.2 LED跑马灯</strong> <code>7.24</code></p><p>5个<code>analog in</code>引脚，12个<code>digital pwm</code>引脚</p></blockquote><blockquote><p><strong>4.3 使用电位器</strong> <code>7.26</code></p><p>一般接相连的两个脚</p></blockquote><blockquote><p><strong>4.3 使用1602A</strong> <code>7.26</code></p><p>4位连接法和8位连接法<br>arduino有个库<code>LiquidCrystal.h</code>，简单实现显示<br>熟悉一下16个引脚:</p></blockquote><table><thead><tr><th>引脚</th><th>缩写</th><th>作用</th><th>引脚</th><th>缩写</th><th>作用</th></tr></thead><tbody><tr><td>1</td><td><strong>VSS</strong></td><td>接电源地</td><td>6</td><td><strong>E</strong></td><td>使能</td></tr><tr><td>2</td><td><strong>VDD</strong></td><td>接电源正</td><td>7-14</td><td><strong>D0~D7</strong></td><td>数据端口</td></tr><tr><td>3</td><td><strong>V0</strong></td><td>偏压信号</td><td>15</td><td><strong>A</strong></td><td>背光正极</td></tr><tr><td>4</td><td><strong>RS</strong></td><td>命令/数据</td><td>16</td><td><strong>K</strong></td><td>背光负极</td></tr><tr><td>5</td><td><strong>RW</strong></td><td>读写</td><td></td><td></td><td></td></tr></tbody></table><blockquote><p><strong>4.9 制作串口下载电路</strong></p><p>用USB的5V电压做电源，等面包板，LED,机芯到了。然后照引脚连接。<br>厂家默认在机芯中写入的检验灯程序。</p></blockquote><h1 id="5-其它"><a href="#5-其它" class="headerlink" title="5.其它"></a>5.其它</h1><hr><blockquote><p><strong>5.1 资料</strong></p><p>杜洋的《爱上单片机》，觉得不错，微信读书上有。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020七月下</title>
      <link href="/posts/412e.html"/>
      <url>/posts/412e.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><hr><p>终于有些解脱了，等着科目二考试。。。<br>在这段时间里，我得去做些有意义的事，<br>所以写下这篇文章，每天更新一次，用来记录七月下这段时间以及自己的一些感受。</p><h1 id="1-开始吧"><a href="#1-开始吧" class="headerlink" title="1.开始吧"></a>1.开始吧</h1><hr><p><strong>DO</strong></p><ol><li>试试别踩白块物理外挂</li><li>试试OPENCV做OW脚本</li></ol><p><strong>DONE</strong></p><ol><li>···</li><li>···</li></ol><h2 id="7-14晚"><a href="#7-14晚" class="headerlink" title="7.14晚"></a><code>7.14晚</code></h2><p>观看<a href="https://space.bilibili.com/20259914?from=search&seid=5994959373714429448" target="_blank" rel="noopener">B站稚晖君的视频</a><br>看<a href="http://www.woshicver.com/FirstSection/0_OpenCV-Python%20Tutorials/" target="_blank" rel="noopener">opencv教程</a><br>更改本站样式</p><blockquote><p>电位器：是具有三个引出端、阻值可按某种变化规律调节的电阻元件</p><ol><li>用作分压器</li><li>用作变阻器</li><li>用作电流控制器</li></ol></blockquote><h2 id="7-15早"><a href="#7-15早" class="headerlink" title="7.15早"></a><code>7.15早</code></h2><p>上课<a href="https://www.icourse163.org/course/XJTU-1001647001" target="_blank" rel="noopener">微机原理与接口技术</a><br>学用<a href="https://www.xmind.cn/" target="_blank" rel="noopener">Xmind</a></p><blockquote><p>硬件系统</p><ul><li>外部设备：通过输入输出接口与计算机进行信息交互的电子设备</li><li>主机系统：CPU、存储器、输入输出接口、总线</li></ul></blockquote><blockquote><p>读取一条指令的流程：</p><ol><li>将指令所在地址<strong>赋给程序计数器PC</strong></li><li>PC内容送给地址寄存器AR，PC自动+1</li><li>AR内容通过地址总线送给内存储器，经<strong>地址译码器译码</strong>，选中相应单元</li><li>CPU的控制器发出读命令</li><li>把所选中单元的内容(即指令操作码)经数据总线送到数据寄存器DR</li><li>(<strong>指令译码</strong>)DR内容送到指令寄存器IR，再送到指令译码器ID</li></ol></blockquote><blockquote><p>（第三代微处理器）<br>&emsp;&emsp;&emsp;<strong>8088与8086</strong>：对外通道分别为8位、16位，内部都为16位</p></blockquote><blockquote><p><strong>8088/8086CPU特点</strong></p><ul><li>采用并行流水线【通过设置指令预取队列实现】</li><li>对内存空间实行分段管理【实模式存储器寻址】</li><li>支持协处理器</li></ul></blockquote><h2 id="7-17早"><a href="#7-17早" class="headerlink" title="7.17早"></a><code>7.17早</code></h2><p>上课<a href="https://www.icourse163.org/course/XJTU-1001647001" target="_blank" rel="noopener">微机原理与接口技术</a></p><blockquote><p>实模型下的存储器寻址</p><ul><li>内存物理地址=<strong>段基地址</strong>x16+<strong>偏移地址</strong></li><li>段首的偏移地址：0000H</li></ul></blockquote><blockquote><p><strong>段寄存器</strong> （Segment Register）（8088为4个）</p><ul><li>作用：用于存放相应逻辑段(便于分时复用吧)的段基地址</li><li>分类：代码段CS，数据段DS，附加段ES，堆栈段SS</li><li>每类逻辑段的数量最多为64k</li></ul></blockquote><blockquote><p>小结</p><ul><li>对1MB内存空间的访问需要20位物理地址，而8088内部的16位编码通过内存地址变换变成20位</li><li>内存的分段是逻辑分段，不是物理段。每个内存单元的物理地址唯一，逻辑地址不唯一</li><li>EU 是 8086/8088 微处理器的执行部件(Execution Unit)</li><li>BIU 是 8086/8088 微处理器的总线接口部件(Bus Interface Unit)</li></ul></blockquote><p><img src="http://www.elecfans.com/uploads/allimg/110712/182555-110G2160I5496.jpg" alt=""></p><blockquote><p><strong>【指令系统】</strong></p><ul><li>指令格式： <strong>操作码</strong> &emsp;<strong>[操作数]</strong> ，<strong>[操作数]</strong></li><li>三种操作数：立即数，寄存器操作数，存储器操作数(带[ ])</li></ul></blockquote><blockquote><p>操作数的寻址方式</p><ul><li>立即寻址</li><li>寄存器直接寻址</li><li>寄存器间接寻址，通过间址寄存器【BX，BP，SI，DI】(带[ ])</li><li>寄存器相对寻址</li></ul></blockquote><blockquote><p>一般指令对操作数的要求：</p><ul><li>两操作数字长必须相同</li><li>两操作数不允许同时为存储器操作数（在内存中）</li><li>两操作数不允许同时为段寄存器</li><li>源操作数是立即数时，目标操作数不能是段寄存器</li><li>IP和CS不作为目标操作数，FLAGS一般不作为操作数</li></ul></blockquote><p>一个汇编题目：将（*）的ASCII码2AH送入内存数据段1000H开始的100个单元中<br>代码如下：</p><pre><code>       MOV DI, 1000H    ；间址寄存器DI,赋给首地址       MOV CX, 64H      ；通用寄存器CX,计算count       MOV AL, 2AH      ; 通用寄存器AL,存入符号AGAIN: MOV [DI], AL       INC DI           ；DI+1       DEC CX           ；CX-1       JNZ AGAIN        ; CX！=0继续       HLT</code></pre><p><img src="http://www.elecfans.com/uploads/allimg/110712/182555-110G2160P12B.jpg" alt=""></p><h2 id="7-19早"><a href="#7-19早" class="headerlink" title="7.19早"></a><code>7.19早</code></h2><p>上课<a href="https://www.icourse163.org/course/XJTU-1001647001" target="_blank" rel="noopener">微机原理与接口技术</a><br>做题<a href="https://leetcode-cn.com/contest/weekly-contest-198" target="_blank" rel="noopener">leetcode周赛198</a></p><blockquote><p>通用指令系统</p><ul><li><code>MOV dest, src</code></li><li><code>XCHG REG, MEM/REG</code></li><li><code>LEA REG, MEM</code></li><li><code>IN acc, PORT</code></li><li><code>OUT PORT, acc</code></li></ul></blockquote><blockquote><p>漏了指令系统这部分没学，漏了运算操作、串操作，程序控制类【CS,IP会改变执行方向】，感觉这门课远离了我想要的实践。<br>课程最后还是有些东西，芯片组合，汇编实现程序，一些芯片的引脚······<br>三态门，模电，数电，8253，D/A，A/D都是问题。。。</p></blockquote><h2 id="7-19晚"><a href="#7-19晚" class="headerlink" title="7.19晚"></a><code>7.19晚</code></h2><p>读书《人类群星闪耀时》</p><blockquote><p>豆瓣评论区都是大佬</p></blockquote><h2 id="7-20早"><a href="#7-20早" class="headerlink" title="7.20早"></a><code>7.20早</code></h2><p>再刷<a href="https://www.bilibili.com/video/BV19W411q7Fq?from=search&seid=12394289545937645210" target="_blank" rel="noopener">Elon Musk演讲</a><br>People are mistaken when they think that technology just automatically improves. It does not automatically improve. It only improves if a lot of people work very hard to make it better, and actually I think it will degrade by itself. You look at great civilizations like Ancient Egypt, and they were able to make the pyramids, and they forgot how to do that.And the Romans, they built these incredible aqueducts. They forgot how to do it.</p><h2 id="7-21早"><a href="#7-21早" class="headerlink" title="7.21早"></a><code>7.21早</code></h2><p>学学c，pta<br>发现一个<a href="https://github.com/ix64/unlock-music" target="_blank" rel="noopener">音乐格式转换项目</a>，它的<a href="https://moresound.tk/music/tool/" target="_blank" rel="noopener">在线网页</a><br>写<a href="https://x-varywow.github.io/posts/d6d.html">硬件设计</a>这篇blog</p><blockquote><p>c中，大小写没看清，编辑器还不给提示，是真的……<br>emmm,漏掉&amp;也是坑。。</p></blockquote><h2 id="7-22早"><a href="#7-22早" class="headerlink" title="7.22早"></a><code>7.22早</code></h2><p>学硬件设计<br>写<a href="https://x-varywow.github.io/posts/d6d.html">硬件设计</a>这篇blog</p><h2 id="7-30晚"><a href="#7-30晚" class="headerlink" title="7.30晚"></a><code>7.30晚</code></h2><p>&emsp;一生是漫长又瑰奇的瞬息；<br>&emsp;&emsp;&emsp;&emsp;何谓枯荣又何谓云泥；<br>&emsp;像孤舟巡游，不为逝水追惜；<br>&emsp;&emsp;&emsp;&emsp;在初逢灯火，在别时钟磬；<br>&emsp;自在随心~<br>&emsp;&emsp;&emsp;&emsp; &emsp;&emsp;&emsp;     &emsp;&emsp;             ——–摘自歌曲《琉璃》</p><blockquote><p>ennnn,完结啦💖</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200730223606549.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" alt=""><br><img src="https://img-blog.csdnimg.cn/2020073021573846.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode周赛笔记185</title>
      <link href="/posts/bfeb.html"/>
      <url>/posts/bfeb.html</url>
      
        <content type="html"><![CDATA[<h3 id="（1）重新格式化字符串"><a href="#（1）重新格式化字符串" class="headerlink" title="（1）重新格式化字符串"></a>（1）重新格式化字符串</h3><p>给你一个混合了数字和字母的字符串 <code>s</code>，其中的字母均为小写英文字母。<br>请你将该字符串重新格式化，使得任意两个相邻字符的类型都不同。也就是说，字母后面应该跟着数字，而数字后面应该跟着字母。<br>请你返回 重新格式化后 的字符串；如果无法按要求重新格式化，则返回一个 空字符串 。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reformat</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> s<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">""</span>        ln<span class="token punctuation">,</span>ls<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>ln<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>ans<span class="token operator">=</span>len<span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">""</span>        <span class="token keyword">if</span> a<span class="token operator">==</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> ls<span class="token punctuation">:</span>                ans<span class="token operator">+=</span><span class="token punctuation">(</span>ln<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>ls<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> ans<span class="token operator">+</span>ln<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> b<span class="token operator">==</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> ln<span class="token punctuation">:</span>                ans<span class="token operator">+=</span><span class="token punctuation">(</span>ls<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>ln<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> ans<span class="token operator">+</span>ls<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> b<span class="token operator">==</span>a<span class="token punctuation">:</span>            <span class="token keyword">while</span> ln<span class="token punctuation">:</span>                ans<span class="token operator">+=</span><span class="token punctuation">(</span>ls<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>ln<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> ans        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">""</span></code></pre><h3 id="（2）点菜展示表"><a href="#（2）点菜展示表" class="headerlink" title="（2）点菜展示表"></a>（2）点菜展示表</h3><p>给你一个数组 <code>orders</code>，表示客户在餐厅中完成的订单，确切地说， <code>orders[i]=[customerNamei,tableNumberi,foodItemi]</code> ，其中 <code>customerNamei</code> 是客户的姓名，<code>tableNumberi</code> 是客户所在餐桌的桌号，而 <code>foodItemi</code> 是客户点的餐品名称。<br>请你返回该餐厅的 <strong>点菜展示表</strong> 。在这张表中，表中第一行为标题，其第一列为餐桌桌号 “Table” ，后面每一列都是按字母顺序排列的餐品名称。接下来每一行中的项则表示每张餐桌订购的相应餐品数量，第一列应当填对应的桌号，后面依次填写下单的餐品数量。<br>注意：客户姓名不是点菜展示表的一部分。此外，表中的数据行应该按餐桌桌号升序排列。<br><img src="https://img-blog.csdnimg.cn/20200525095748249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">displayTable</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> orders<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        fs<span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span>        ts<span class="token operator">=</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> _ <span class="token punctuation">,</span>t<span class="token punctuation">,</span>f <span class="token keyword">in</span> orders<span class="token punctuation">:</span>            fs<span class="token punctuation">.</span>add<span class="token punctuation">(</span>f<span class="token punctuation">)</span>            ts<span class="token punctuation">[</span>int<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"Table"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> f <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>list<span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#菜名</span>            ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">)</span>        <span class="token keyword">for</span> t <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>list<span class="token punctuation">(</span>ts<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#桌号</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>str<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>               <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#份数</span>                ans<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>ts<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans</code></pre><p><strong>小结</strong></p><blockquote><p>好难。。。</p></blockquote><h3 id="（3）数青蛙"><a href="#（3）数青蛙" class="headerlink" title="（3）数青蛙"></a>（3）数青蛙</h3><p>给你一个字符串 <code>croakOfFrogs</code>，它表示不同青蛙发出的蛙鸣声（字符串 “croak” ）的组合。由于同一时间可以有多只青蛙呱呱作响，所以 <code>croakOfFrogs</code> 中会混合多个 <code>“croak”</code> 。请你返回模拟字符串中所有蛙鸣所需不同青蛙的<strong>最少数目</strong>。<br>注意：要想发出蛙鸣 “croak”，青蛙必须 依序 输出 ‘c’, ’r’, ’o’, ’a’, ’k’ 这 5 个字母。如果没有输出全部五个字母，那么它就不会发出声音。<br>如果字符串 <code>croakOfFrogs</code> 不是由若干有效的 <code>&quot;croak&quot;</code> 字符混合而成，请返回 <code>-1</code> 。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minNumberOfFrogs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cr<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        pre <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> cr<span class="token punctuation">:</span>            <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">'c'</span><span class="token punctuation">:</span>                pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">'r'</span><span class="token punctuation">:</span>                pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">'o'</span><span class="token punctuation">:</span>                pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                pre<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">'a'</span><span class="token punctuation">:</span>                pre<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                pre<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">'k'</span><span class="token punctuation">:</span>                pre<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">if</span> any<span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> pre<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>            res <span class="token operator">=</span> max<span class="token punctuation">(</span>res<span class="token punctuation">,</span> sum<span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> any<span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> pre<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">return</span> res</code></pre><h3 id="（4）生成数组"><a href="#（4）生成数组" class="headerlink" title="（4）生成数组"></a>（4）生成数组</h3><p>给你三个整数 <code>n</code>、<code>m</code> 和 <code>k</code> 。下图描述的算法用于找出正整数数组中最大的元素。</p><pre class=" language-python"><code class="language-python">maximum_value <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>maximum_index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>search_cost <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>maximum_value <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        maximum_value <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        maximum_index <span class="token operator">=</span> i        search_cost<span class="token operator">+=</span><span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> maximum_index</code></pre><p>请你生成一个具有下述属性的数组 arr ：</p><ul><li><code>arr</code> 中有 <code>n</code> 个整数。</li><li><code>1 &lt;= arr[i] &lt;= m</code> 其中 <code>(0 &lt;= i &lt; n)</code> 。</li><li>将上面提到的算法应用于 <code>arr</code> ，<code>search_cost</code> 的值等于 <code>k</code> 。<br>返回上述条件下生成数组 <code>arr</code> 的 方法数 ，由于答案可能会很大，所以 必须 对 <code>10^9 + 7</code> 取余。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numOfArrays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        mod <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> pre <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> pre <span class="token operator">>=</span> j<span class="token punctuation">:</span>                        <span class="token keyword">for</span> kk <span class="token keyword">in</span> range<span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span>kk<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span>kk<span class="token punctuation">]</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">for</span> kk <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>kk<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span>kk <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>        <span class="token keyword">return</span> res <span class="token operator">%</span> mod</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode周赛笔记190</title>
      <link href="/posts/2c2a.html"/>
      <url>/posts/2c2a.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、检查单词是否为句中其他单词的前缀"><a href="#一、检查单词是否为句中其他单词的前缀" class="headerlink" title="一、检查单词是否为句中其他单词的前缀"></a>一、检查单词是否为句中其他单词的前缀</h3><p>给你一个字符串 <code>sentence</code> 作为句子并指定检索词为 <code>searchWord</code> ，其中句子由若干用 单个空格 分隔的单词组成。<br>请你检查检索词 <code>searchWord</code> 是否为句子 <code>sentence</code> 中任意单词的前缀。</p><ul><li>如果 <code>searchWord</code> 是某一个单词的前缀，则返回句子 <code>sentence</code> 中该单词所对应的下标（下标从 <code>1</code> 开始）。</li><li>如果 <code>searchWord</code> 是多个单词的前缀，则返回匹配的第一个单词的下标（最小下标）。</li><li>如果 <code>searchWord</code> 不是任何单词的前缀，则返回 <code>-1</code> 。<br>字符串 <code>S</code> 的 「前缀」是 <code>S</code> 的任何前导连续子字符串。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPrefixOfWord</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sentence<span class="token punctuation">:</span> str<span class="token punctuation">,</span> searchWord<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> s <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>searchWord<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></code></pre><h3 id="二、定长子串中元音的最大数目"><a href="#二、定长子串中元音的最大数目" class="headerlink" title="二、定长子串中元音的最大数目"></a>二、定长子串中元音的最大数目</h3><p>给你字符串 <code>s</code> 和整数 <code>k</code> 。<br>请返回字符串 <code>s</code> 中长度为 <code>k</code> 的单个子字符串中可能包含的最大元音字母数。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxVowels</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        ans<span class="token punctuation">,</span>tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token string">'aeiou'</span><span class="token punctuation">:</span> tmp<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> i<span class="token operator">>=</span>k<span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token string">'aeiou'</span><span class="token punctuation">:</span> tmp<span class="token operator">-=</span><span class="token number">1</span>            ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans   </code></pre><p><strong>小结</strong></p><blockquote><p>不能多想。。好菜</p></blockquote><h3 id="三、二叉树中的伪回文路径"><a href="#三、二叉树中的伪回文路径" class="headerlink" title="三、二叉树中的伪回文路径"></a>三、二叉树中的伪回文路径</h3><p>给你一棵二叉树，每个节点的值为 1 到 9 。我们称二叉树中的一条路径是 「伪回文」的，当它满足：路径经过的所有节点值的排列中，存在一个回文序列。<br>请你返回从根到叶子节点的所有路径中 <strong>伪回文</strong> 路径的数目。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> pseudoPalindromicPaths <span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root <span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root <span class="token punctuation">:</span> <span class="token keyword">return</span>             helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>tmp<span class="token operator">+</span><span class="token punctuation">[</span>root<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span>            helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>tmp<span class="token operator">+</span><span class="token punctuation">[</span>root<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span>            tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">.</span>left <span class="token operator">and</span> <span class="token operator">not</span> root<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                cnt<span class="token operator">=</span><span class="token number">0</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> Counter<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">:</span> cnt<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">if</span> cnt<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>ans<span class="token operator">+=</span><span class="token number">1</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans</code></pre><h3 id="四、两个子序列的最大点积"><a href="#四、两个子序列的最大点积" class="headerlink" title="四、两个子序列的最大点积"></a>四、两个子序列的最大点积</h3><p>给你两个数组 <code>nums1</code> 和 <code>nums2</code> 。<br>请你返回 <code>nums1</code> 和 <code>nums2</code> 中两个长度相同的 非空 子序列的最大点积。<br>数组的非空子序列是通过删除原数组中某些元素（可能一个也不删除）后剩余数字组成的序列，但不能改变数字间相对顺序。比方说，<code>[2,3,5]</code> 是 <code>[1,2,3,4,5]</code> 的一个子序列而 <code>[1,5,3]</code> 不是。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDotProduct</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        m<span class="token punctuation">,</span>n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums2<span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span>float<span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>nums1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums2<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span></code></pre><p><strong>小结</strong></p><blockquote><p>DP题看的时候一点思路没有。。。被菜昏了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>math模块</title>
      <link href="/posts/2cb4.html"/>
      <url>/posts/2cb4.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）数论与表示函数"><a href="#（一）数论与表示函数" class="headerlink" title="（一）数论与表示函数"></a>（一）数论与表示函数</h3><ol><li><p><code>math.ceil(x)</code><br>返回 x 的上限，即大于或者等于 x 的最小整数。</p></li><li><p><code>math.floor(x)</code><br>返回 x 的向下取整，小于或等于 x 的最大整数。</p></li><li><p><code>math.comb(n,k)</code>，<strong>3.8新功能</strong><br>返回不重复且无顺序地从 n 项中选择 k 项的方式总数。<br>当 k &lt;= n 时取值为 n! / (k! * (n - k)!)；当 k &gt; n 时取值为零。<br>也称为二项式系数，因为它等价于表达式 (1 + x) ** n 的多项式展开中第 k 项的系数。</p></li><li><p><code>math.fabs(x)</code><br>返回 x 的绝对值。</p></li><li><p><code>math.factorial(x)</code><br>以一个整数返回 x 的阶乘。如果 x 不是整数或为负数时则将引发ValueError。</p></li><li><p><code>math.gcd(a, b)</code><br>返回整数 a 和 b 的最大公约数。</p></li><li><p><code>math.isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0)</code><br>若 a 和 b 的值比较接近则返回 True，否则返回 False。<br>根据给定的绝对和相对容差确定两个值是否被认为是接近的。</p></li><li><p><code>math.isinf(x)</code><br>如果 x 是正或负无穷大，则返回 True ，否则返回 False 。</p></li><li><p><code>math.modf(x)</code><br>返回 x 的小数和整数部分。两个结果都带有 x 的符号并且是浮点数。</p></li><li><p><code>math.perm(n, k=None)</code>，<strong>3.8新功能</strong><br>排列不重复且无顺序地从 n 项中选择 k 项的方式总数。<br>当 k &lt;= n 时取值为 n! / (n - k)!；当 k &gt; n 时取值为零。<br>如果 k 未指定或为 None，则 k 默认值为 n 并且函数将返回 n!。</p></li></ol><h3 id="（二）幂函数与对数函数"><a href="#（二）幂函数与对数函数" class="headerlink" title="（二）幂函数与对数函数"></a>（二）幂函数与对数函数</h3><ol start="11"><li><p><code>math.exp(x)</code><br>返回 e 次 x 幂。</p></li><li><p><code>math.log(x[, base ])</code><br>使用一个参数时，返回 x 的自然对数（底为 e ）。</p></li><li><p><code>math.sqrt(x)</code><br>返回 x 的平方根。</p></li></ol><h3 id="（三）三角函数与几何"><a href="#（三）三角函数与几何" class="headerlink" title="（三）三角函数与几何"></a>（三）三角函数与几何</h3><ol start="14"><li><p><code>math.asin(x)</code><br>以弧度为单位返回 x 的反正弦值。<br><code>math.acos(x)</code><br>以弧度为单位返回 x 的反余弦值。<br><code>math.atan(x)</code><br>以弧度为单位返回 x 的反正切值。<br><code>math.sin(x)</code><br>返回 x 弧度的正弦值。<br><code>math.cos(x)</code><br>返回 x 弧度的余弦值。<br><code>math.tan(x)</code><br>返回 x 弧度的正切值。</p></li><li><p><code>math.dist(p, q)</code>，<strong>3.8新功能</strong><br>返回 p 与 q 两点之间的欧几里得距离（两点间直线距离），<code>sqrt(sum((px - qx) ** 2.0 for px, qx in zip(p, q)))</code>。以一个坐标序列（或可迭代对象）的形式给出。两个点必须具有相同的维度。</p></li><li><p><code>math.hypot(*coordinates)</code><br>返回欧几里得范数，<code>sqrt(sum(x**2 for x in coordinates))</code>。这是从原点到坐标给定点的向量长度。</p></li><li><p><code>math.degrees(x)</code><br>将角度 x 从弧度转换为度数。</p></li><li><p><code>math.radians(x)</code><br>将角度 x 从度数转换为弧度。</p></li></ol><h3 id="（四）常数"><a href="#（四）常数" class="headerlink" title="（四）常数"></a>（四）常数</h3><ol start="19"><li><code>math.pi</code><br>数学常数 π = 3.141592…，精确到可用精度。</li><li><code>math.e</code><br>数学常数 e = 2.718281…，精确到可用精度。</li></ol><p><strong>小结</strong><br>本文基本包含math够用的函数。<br>未摘要的部分：</p><ul><li>一些提高精度的函数</li><li>双曲函数</li><li>特殊函数，如伽马函数，统计等</li></ul><p>发现3.8新功能好好啊。</p><p><strong>实践</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> <span class="token operator">*</span>ceil<span class="token punctuation">(</span><span class="token number">3.9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>floor<span class="token punctuation">(</span><span class="token number">3.9</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-->4,3</span>gcd<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#-->3</span>perm<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>，perm<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-->120,20</span>log<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#-->2.0</span>dist<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#-->2.8284271247461903</span>radians<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#-->3.141592653589793</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode周赛笔记189</title>
      <link href="/posts/baeb.html"/>
      <url>/posts/baeb.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、在既定时间做作业的学生人数"><a href="#一、在既定时间做作业的学生人数" class="headerlink" title="一、在既定时间做作业的学生人数"></a>一、在既定时间做作业的学生人数</h3><p>给你两个整数数组 <code>startTime</code>（开始时间）和 <code>endTime</code>（结束时间），并指定一个整数 <code>queryTime</code> 作为查询时间。<br>已知，第 <code>i</code> 名学生在 <code>startTime[i]</code> 时开始写作业并于 <code>endTime[i]</code> 时完成作业。<br>请返回在查询时间 <code>queryTime</code> 时正在做作业的学生人数。形式上，返回能够使 <code>queryTime</code> 处于区间 <code>[startTime[i], endTime[i]]</code>（含）的学生人数。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">busyStudent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> startTime<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> endTime<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> queryTime<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">return</span> sum<span class="token punctuation">(</span>startTime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> queryTime <span class="token operator">&lt;=</span> endTime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="二、重新排列句子中的单词"><a href="#二、重新排列句子中的单词" class="headerlink" title="二、重新排列句子中的单词"></a>二、重新排列句子中的单词</h3><p>「句子」是一个用空格分隔单词的字符串。给你一个满足下述格式的句子 <code>text</code> :</p><ul><li>句子的首字母大写</li><li><code>text</code> 中的每个单词都用单个空格分隔。</li></ul><p>请你重新排列 <code>text</code> 中的单词，使所有单词按其长度的升序排列。如果两个单词的长度相同，则保留其在原句子中的相对顺序。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">arrangeWords</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        li<span class="token operator">=</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>        li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>        li<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>len<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>小结</strong></p><blockquote><ol><li><code>str.capitalize()</code></li><li><code>.sort(key=len)</code></li></ol></blockquote><h3 id="三、收藏清单"><a href="#三、收藏清单" class="headerlink" title="三、收藏清单"></a>三、收藏清单</h3><p>给你一个数组 <code>favoriteCompanies</code> ，其中 <code>favoriteCompanies[i]</code> 是第 <code>i</code> 名用户收藏的公司清单（下标从 0 开始）。<br>请找出不是其他任何人收藏的公司清单的子集的收藏清单，并返回该清单下标。下标需要按升序排列。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">peopleIndexes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> favoriteCompanies<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span>_ <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>favoriteCompanies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>favoriteCompanies<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>favoriteCompanies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                a<span class="token punctuation">,</span>b<span class="token operator">=</span>set<span class="token punctuation">(</span>favoriteCompanies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>set<span class="token punctuation">(</span>favoriteCompanies<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> a<span class="token operator">==</span>b <span class="token operator">and</span> i <span class="token keyword">in</span> ans<span class="token punctuation">:</span>                    ans<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token keyword">elif</span> a<span class="token punctuation">.</span>issubset<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">and</span> i <span class="token keyword">in</span> ans<span class="token punctuation">:</span>                     ans<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token keyword">elif</span> b<span class="token punctuation">.</span>issubset<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">and</span> j <span class="token keyword">in</span> ans<span class="token punctuation">:</span>                     ans<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>j<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans</code></pre><p><strong>小结</strong></p><blockquote><ol><li><code>a.issubset(b)</code>，判断a是否是b子集</li><li><code>.remove(i)</code>，若<code>i</code>不存在会报错</li></ol></blockquote><h3 id="四、圆形靶内的最大飞镖数量"><a href="#四、圆形靶内的最大飞镖数量" class="headerlink" title="四、圆形靶内的最大飞镖数量"></a>四、圆形靶内的最大飞镖数量</h3><p>墙壁上挂着一个圆形的飞镖靶。现在请你蒙着眼睛向靶上投掷飞镖。<br>投掷到墙上的飞镖用二维平面上的点坐标数组表示。飞镖靶的半径为 <code>r</code> 。<br>请返回能够落在 <strong>任意</strong> 半径为 <code>r</code> 的圆形靶内或靶上的最大飞镖数。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numPoints</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> points<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        func<span class="token operator">=</span><span class="token keyword">lambda</span> o<span class="token punctuation">:</span>sum<span class="token punctuation">(</span>dist<span class="token punctuation">(</span>p<span class="token punctuation">,</span>o<span class="token punctuation">)</span><span class="token operator">&lt;=</span>r <span class="token keyword">for</span> p <span class="token keyword">in</span> points<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#检查包含</span>        ans<span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">for</span> p1 <span class="token keyword">in</span> points<span class="token punctuation">:</span>            <span class="token keyword">for</span> p2 <span class="token keyword">in</span> points<span class="token punctuation">:</span>                           <span class="token comment" spellcheck="true">#枚举</span>                <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;</span>dist<span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>r<span class="token punctuation">:</span>                  <span class="token comment" spellcheck="true">#走数学流程</span>                    mid <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>p2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>p2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span>                    d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>p2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>p2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span>                    k <span class="token operator">=</span> sqrt<span class="token punctuation">(</span>r<span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span>hypot<span class="token punctuation">(</span><span class="token operator">*</span>d<span class="token punctuation">)</span>                    o <span class="token operator">=</span> <span class="token punctuation">[</span>mid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>k<span class="token punctuation">,</span>mid<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>k<span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#圆心</span>                    ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> func<span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans</code></pre><p>主要思路：<strong>枚举</strong></p><ol><li>枚举points中每两个点，确定圆心。</li><li>更新最大值，输出</li></ol><p><strong>小结：</strong><br> 第四题的<code>枚举</code>+<code>math模块</code>+<code>数学</code>，666。<br> 每天都要好好学习❤❤❤</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微观经济学</title>
      <link href="/posts/bd56.html"/>
      <url>/posts/bd56.html</url>
      
        <content type="html"><![CDATA[<ol><li>经济学：关于资源稀缺性的配置。</li><li>如何定义一个概念：通常用外延更宽的事物来定义。</li><li><strong>机会成本</strong>：为得到某种东西，而放弃的可能收益。</li><li><strong>沉没成本</strong>：指以往发生的，但与当前决策无关的费用。</li><li>禀赋效应：大多数人对于损失和获得的敏感程度不对称。<blockquote><p>假设你现在捡到了100元，你很开心；<br>走着走着，你刚捡到的100元，不知道什么时候掉了。<br>请问，这个时候你的心情？<br>大多数人的心情是痛苦的。<br>可实际上什么都没变。</p></blockquote></li></ol><p>这也适用于销售策略中：减少客户的损失厌恶。<br>7. 博弈论因素：参与者，规则，支付。<br>限制规则来改变博弈。<br>8. 纳什均衡：非合作博弈均衡。<br>如竞争者的商品定价均衡，囚徒困境。</p><blockquote><p>课程最后：<strong>考虑非货币机会成本，忽略沉没成本，对未来行为更加实际。</strong></p></blockquote><p><strong>小结</strong><br>😝😝😝<br><strong>人生就像是在每一个瞬间连续起舞，暮然四顾时常常惊觉：“已经到这里了吗？”</strong></p>]]></content>
      
      
      <categories>
          
          <category> e-class </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mooc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas模块</title>
      <link href="/posts/c3aa.html"/>
      <url>/posts/c3aa.html</url>
      
        <content type="html"><![CDATA[<p><code>Pandas</code> 是 Python 的<strong>核心数据分析支持库</strong>，是 Python 中统计计算生态系统的重要组成部分。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>一维的<code>Series</code>和二维的  <code>DataFrame</code></p><pre class=" language-python"><code class="language-python">pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>，index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0    1</span><span class="token comment" spellcheck="true"># 1    2</span><span class="token comment" spellcheck="true"># 2    3</span><span class="token comment" spellcheck="true"># dtype: int64</span></code></pre><p><strong>创建方法:</strong></p><ol><li>同上</li><li>字典</li></ol><pre class=" language-python"><code class="language-python">pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Empty DataFrame</span><span class="token comment" spellcheck="true"># Columns: []</span><span class="token comment" spellcheck="true"># Index: []</span></code></pre><pre class=" language-python"><code class="language-python">dates<span class="token operator">=</span>pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span><span class="token string">'20200511'</span><span class="token punctuation">,</span>periods<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>dates<span class="token comment" spellcheck="true"># DatetimeIndex(['2020-05-11', '2020-05-12', '2020-05-13'], dtype='datetime64[ns]', freq='D')</span></code></pre><pre class=" language-python"><code class="language-python">pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span>dates<span class="token punctuation">,</span>columns<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><table><thead><tr><th></th><th>a</th><th>b</th><th>c</th><th>d</th></tr></thead><tbody><tr><td>2020-05-11</td><td>-1.712588</td><td>0.403376</td><td>-0.152608</td><td>-0.428465</td></tr><tr><td>2020-05-12</td><td>-1.259988</td><td>-0.310385</td><td>-0.816578</td><td>0.321397</td></tr><tr><td>2020-05-13</td><td>-0.444678</td><td>-1.894342</td><td>0.172485</td><td>0.717187</td></tr></tbody></table><h3 id="1-查看数据"><a href="#1-查看数据" class="headerlink" title="(1)查看数据"></a>(1)查看数据</h3><ul><li><code>df.head()</code>，k值默认为5.</li><li><code>df.tail()</code>，k值默认为5</li><li><code>df.index</code></li><li><code>df.columns</code></li></ul><h3 id="2-选择"><a href="#2-选择" class="headerlink" title="(2)选择"></a>(2)选择</h3><ol><li>获取单列，<code>df.a</code>与<code>df[&#39;a&#39;]</code>等效</li><li>获取行，用 [ ] 切片行</li><li>按标签选择</li><li>按位置选择</li></ol><h3 id="3-操作"><a href="#3-操作" class="headerlink" title="(3)操作"></a>(3)操作</h3><ol><li><code>Series</code>操作类似字典类型，含：保留字<code>in</code>操作、<code>.get(key,default=None)</code>方法</li><li><code>.reindex()</code>，改变或重排<code>Series</code>或<code>DataFrame</code>索引数据输入输出</li><li><code>.drop()</code>，删除<code>Series</code>或<code>DataFrame</code>指定行或列索引，默认0轴(竖的)</li></ol><h3 id="4-运算"><a href="#4-运算" class="headerlink" title="(4)运算"></a>(4)运算</h3><ol><li><strong>算术运算</strong>根据行列索引，补齐后运算，运算默认产生浮点数。</li><li>补齐时缺项填充NaN(空值)</li><li>不同维度数据间运算为广播运算</li><li><code>+</code> 或 <code>b.add(a,fill_value=NaN)</code></li><li><strong>比较运算</strong></li></ol><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ol><li><code>.sort_index(axis=0,ascending=True)</code>，根据索引排序，默认升序</li><li><code>Series.sort_values(axis=0,ascending=True)</code><br><code>DataFrame.sort_values(by,axis=0,ascending=True)</code></li></ol><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h6 id="CSV："><a href="#CSV：" class="headerlink" title="CSV："></a>CSV：</h6><ul><li><code>df.to_csv(&#39;___.csv&#39;)</code></li><li><code>pd.read_csv(&#39;___.csv&#39;)</code></li></ul><h6 id="Excel："><a href="#Excel：" class="headerlink" title="Excel："></a>Excel：</h6><ul><li><code>df.to_excel(&#39;___.xlsx&#39;, sheet_name=&#39;Sheet1&#39;)</code></li><li><code>pd.read_excel(&#39;___.xlsx&#39;, &#39;Sheet1&#39;, index_col=None, na_values=[&#39;NA&#39;])</code></li></ul><h2 id="统计分析"><a href="#统计分析" class="headerlink" title="统计分析"></a>统计分析</h2><ol><li>对数据<code>.describe()</code>，能得到很多信息。</li><li><code>.cov()</code>，计算协方差矩阵。</li><li><code>.corr()</code>，计算相关系数矩阵。</li></ol><p><strong>实践</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npb<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>4.000000</td>      <td>4.000000</td>      <td>4.000000</td>      <td>4.000000</td>      <td>4.000000</td>    </tr>    <tr>      <th>mean</th>      <td>7.500000</td>      <td>8.500000</td>      <td>9.500000</td>      <td>10.500000</td>      <td>11.500000</td>    </tr>    <tr>      <th>std</th>      <td>6.454972</td>      <td>6.454972</td>      <td>6.454972</td>      <td>6.454972</td>      <td>6.454972</td>    </tr>    <tr>      <th>min</th>      <td>0.000000</td>      <td>1.000000</td>      <td>2.000000</td>      <td>3.000000</td>      <td>4.000000</td>    </tr>    <tr>      <th>25%</th>      <td>3.750000</td>      <td>4.750000</td>      <td>5.750000</td>      <td>6.750000</td>      <td>7.750000</td>    </tr>    <tr>      <th>50%</th>      <td>7.500000</td>      <td>8.500000</td>      <td>9.500000</td>      <td>10.500000</td>      <td>11.500000</td>    </tr>    <tr>      <th>75%</th>      <td>11.250000</td>      <td>12.250000</td>      <td>13.250000</td>      <td>14.250000</td>      <td>15.250000</td>    </tr>    <tr>      <th>max</th>      <td>15.000000</td>      <td>16.000000</td>      <td>17.000000</td>      <td>18.000000</td>      <td>19.000000</td>    </tr>  </tbody></table></div><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文基于官方文档，和mooc一门课的笔记。<br>还很杂乱，需要重学时再整理。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib模块</title>
      <link href="/posts/c78f.html"/>
      <url>/posts/c78f.html</url>
      
        <content type="html"><![CDATA[<p><code>import matplotlib.pyplot as plt</code></p><p>这是<strong>框架</strong>：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true">#解决中文乱码问题</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.family'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Microsoft YaHei'</span><span class="token punctuation">]</span>x<span class="token operator">=</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span>y<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">5</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'测试'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'哈哈'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="最重要的plot"><a href="#最重要的plot" class="headerlink" title="最重要的plot()"></a>最重要的plot()</h2><p><code>plt.plot(x,y,format_string,**kwargs)</code></p><ul><li><code>format_string</code>,控制曲线的格式字符串，可选</li><li><code>**kwargs</code>,第二组或更多<code>(x,y,format_string)</code>，可选</li></ul><p><strong>format_string</strong></p><ol><li>颜色字符</li><li>风格字符<br><code>&#39;-&#39;</code>，实线<br><code>&#39;--&#39;</code>，破折线<br><code>&#39;-.&#39;</code>，点划线<br><code>&#39;:&#39;</code>，虚线<br><code>&#39;.&#39;</code>，点标记<br><code>&#39;,&#39;</code>，像素标记<br><code>&#39;o&#39;</code>，实心圆标记<br><code>&#39;v&#39;</code> <code>&#39;^&#39;</code>，三角标记<br><code>&#39;x&#39;</code>,<code>&#39;*&#39;</code></li></ol><h2 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>plt.plot()</code></td><td>绘制一个坐标图</td></tr><tr><td><code>plt.boxplot()</code></td><td>绘制一个箱型图</td></tr><tr><td><code>plt.bar()</code></td><td>绘制一个条形图</td></tr><tr><td><code>plt.barh()</code></td><td>绘制一个横向条形图</td></tr><tr><td><code>plt.hist()</code></td><td>绘制直方图</td></tr><tr><td><code>plt.polar()</code></td><td>绘制极坐标图</td></tr><tr><td><code>plt.pie()</code></td><td>绘制饼图</td></tr><tr><td><code>plt.psd()</code></td><td>绘制功率谱密度图</td></tr><tr><td><code>plt.specgram()</code></td><td>绘制谱图</td></tr><tr><td><code>plt.cohere()</code></td><td>绘制相关性函数</td></tr><tr><td><code>plt.scatter()</code></td><td>绘制散点图</td></tr><tr><td><code>plt.step()</code></td><td>绘制步阶图</td></tr></tbody></table><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol><li><code>sorted([f.name for f in matplotlib.font_manager.fontManager.ttflist])</code>，查看电脑字体</li><li>中文显示<br>方法一： <code>plt.rcParams[&#39;font.family&#39;]</code>，<code>font.size</code>，<br>方法二： 在中文输出的地方，添加属性<code>fornproperties=&#39;  &#39;</code>，<code>fontsize</code></li><li><code>plt.savefig(&#39;foo&#39;,dpi=600)</code>，默认输出png文件</li><li><code>plt.subplot(nrows,ncols,plot_number)</code>，在全局绘图区域中创建分区体系,并进入</li><li><code>plt.grid(True)</code>，显示网格</li><li><code>plt.axis([x0,x1,y0,y1])</code>，坐标轴跨度</li><li><code>plt.annotate()</code>，在图形中增加带箭头的注解</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文基于官方文档，和mooc一门课的笔记。<br>还很杂乱，需要重学时再整理。<br>感觉这个模块和EXCEL的可视化功能重叠了。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy模块</title>
      <link href="/posts/48ab.html"/>
      <url>/posts/48ab.html</url>
      
        <content type="html"><![CDATA[<p><code>NumPy</code> is the fundamental package for <strong>scientific computing</strong> in Python.</p><h2 id="ndarray"><a href="#ndarray" class="headerlink" title="ndarray"></a>ndarray</h2><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>.ndim</code></td><td>秩，即轴的数量或维度的数量</td></tr><tr><td><code>.shape</code></td><td>n行m列</td></tr><tr><td><code>.size</code></td><td>n*m个数</td></tr><tr><td><code>.dtype</code></td><td>元素类型</td></tr><tr><td><code>.itemsize</code></td><td>元素大小，单位：字节</td></tr></tbody></table><p>ndarray数组可以由非同质对象构成。<br>非同质ndarray元素为对象类型，<code>dtype(&#39;O&#39;)</code></p><h3 id="（1）创建方法"><a href="#（1）创建方法" class="headerlink" title="（1）创建方法"></a>（1）创建方法</h3><ol><li><code>np.array(list/tuple,dtype=np.float32)</code></li><li><code>np.arange(n)</code></li><li><code>np.ones(shape)</code></li><li><code>np.zeros(shape)</code></li><li><code>np.full(shape,val)</code></li><li><code>np.eye(n)</code></li><li><code>np.ones_like(a)</code></li><li><code>np.zeros_like(a)</code></li><li><code>np.full_like(a,val)</code></li><li><code>np.linspace(n,m,k,endpoint=True)</code></li><li><code>np.concatenate()</code> </li></ol><h3 id="（2）变换方法"><a href="#（2）变换方法" class="headerlink" title="（2）变换方法"></a>（2）变换方法</h3><ol><li><code>a.reshape(shape)</code>，对a<code>reshape</code>,返回shape形状数组</li><li><code>a.resize(shape)</code>，同<code>reshape</code>，但修改原数组</li><li><code>a.swapaxes(ax1,ax2)</code>，调换维度</li><li><code>a.flatten()</code>，降维，不改变a</li><li><code>new_a=a.astype(new_type)</code></li><li><code>a.tolist()</code></li></ol><h3 id="（3）操作方法"><a href="#（3）操作方法" class="headerlink" title="（3）操作方法"></a>（3）操作方法</h3><ol><li>索引切片同1维，多维间用 <code>,</code> </li><li><code>:</code> 可选取整个维度</li></ol><h3 id="（4）运算方法"><a href="#（4）运算方法" class="headerlink" title="（4）运算方法"></a>（4）运算方法</h3><ol><li><code>a.mean()</code></li><li>元素群运算：<code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>**</code><br><code>np.maxmum(x,y)</code><br><code>np.minimum(x,y)</code><br>算术比较，返回bool值</li><li><code>np.abs()</code>，<code>np.fabs()</code></li><li><code>np.sqrt()</code>，<code>np.square()</code></li><li><code>np.log()</code>，<code>np.log2()</code></li><li><code>np.ceil()</code>，<code>np.floor()</code> </li><li><code>np.rint()</code>，四舍五入</li><li><code>np.sin()</code>···</li><li><code>np.exp()</code>，计算指数</li><li><code>np.sign()</code>，返回1，0，-1 </li></ol><p><strong>实践</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npnp<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#-->array([0, 1, 2, 3, 4])</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">#-->array([[1., 1.],1., 1.]])</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#-->array([ 1.,  4.,  7., 10.])</span></code></pre><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="（1）random函数"><a href="#（1）random函数" class="headerlink" title="（1）random函数"></a>（1）random函数</h3><ol><li><code>np.random.uniform(low,high,size)</code><br>产生均匀分布数组</li><li><code>np.random.normal(loc,scale,size)</code><br>产生正态分布数组，<code>loc</code>均值，<code>scale</code>标准差</li><li><code>np.random.poisson(lam,size)</code><br>产生泊松分布数组，<code>lam</code>随机事件发生概率</li></ol><h3 id="（2）统计函数"><a href="#（2）统计函数" class="headerlink" title="（2）统计函数"></a>（2）统计函数</h3><ol><li><code>.sum(a,axis=None)</code></li><li><code>.mean(a,axis=None)</code>，计算期望</li><li><code>.average(a,axis=None,weights=None)</code>，计算加权平均</li><li><code>.std(a,axis=None)</code>，计算标准差</li><li><code>.var(a,axis=None)</code>，计算方差</li></ol><h3 id="（3）梯度函数"><a href="#（3）梯度函数" class="headerlink" title="（3）梯度函数"></a>（3）梯度函数</h3><ol><li><code>np.gradient(f)</code>,计算斜率</li></ol><h3 id="（4）文件读写"><a href="#（4）文件读写" class="headerlink" title="（4）文件读写"></a>（4）文件读写</h3><p><strong>一维或二维</strong></p><ol><li><code>np.savetxt(frame,array,fmt,delimiter=None)</code><br>其中delimiter应该为 <code>,</code><br>eg. <code>np.savetxt(&#39;foo.csv&#39;,a,fmt=&#39;%d&#39;,delimiter=&#39;,&#39;)</code></li><li><code>np.loadtxt(frame,dtype=np.float,delimiter=None,unpack=False)</code></li></ol><p><strong>多维</strong></p><ol><li><code>a.tofile()</code></li><li><code>np.fromfile</code> </li><li><code>np.save()</code>,npy文件</li><li><code>np.load()</code></li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文基于官方文档，和mooc一门课的笔记。<br>还很杂乱，需要重学时再整理。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 这是课程代码的copy:</span><span class="token comment" spellcheck="true"># （对图片进行手绘风格转变）</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'./beijing.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float'</span><span class="token punctuation">)</span>depth <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">.</span>                      <span class="token comment" spellcheck="true"># (0-100)</span>grad <span class="token operator">=</span> np<span class="token punctuation">.</span>gradient<span class="token punctuation">(</span>a<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">#取图像灰度的梯度值</span>grad_x<span class="token punctuation">,</span> grad_y <span class="token operator">=</span> grad               <span class="token comment" spellcheck="true">#分别取横纵图像梯度值</span>grad_x <span class="token operator">=</span> grad_x<span class="token operator">*</span>depth<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">.</span>grad_y <span class="token operator">=</span> grad_y<span class="token operator">*</span>depth<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">.</span>A <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>grad_x<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> grad_y<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">)</span>uni_x <span class="token operator">=</span> grad_x<span class="token operator">/</span>Auni_y <span class="token operator">=</span> grad_y<span class="token operator">/</span>Auni_z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token operator">/</span>Avec_el <span class="token operator">=</span> np<span class="token punctuation">.</span>pi<span class="token operator">/</span><span class="token number">2.2</span>                   <span class="token comment" spellcheck="true"># 光源的俯视角度，弧度值</span>vec_az <span class="token operator">=</span> np<span class="token punctuation">.</span>pi<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">.</span>                    <span class="token comment" spellcheck="true"># 光源的方位角度，弧度值</span>dx <span class="token operator">=</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>vec_el<span class="token punctuation">)</span><span class="token operator">*</span>np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>vec_az<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#光源对x 轴的影响</span>dy <span class="token operator">=</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>vec_el<span class="token punctuation">)</span><span class="token operator">*</span>np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>vec_az<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#光源对y 轴的影响</span>dz <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>vec_el<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">#光源对z 轴的影响</span>b <span class="token operator">=</span> <span class="token number">255</span><span class="token operator">*</span><span class="token punctuation">(</span>dx<span class="token operator">*</span>uni_x <span class="token operator">+</span> dy<span class="token operator">*</span>uni_y <span class="token operator">+</span> dz<span class="token operator">*</span>uni_z<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#光源归一化</span>b <span class="token operator">=</span> b<span class="token punctuation">.</span>clip<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span>im <span class="token operator">=</span> Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>b<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'uint8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#重构图像</span>im<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'./beijingHD.jpg'</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bisect模块</title>
      <link href="/posts/7dd2.html"/>
      <url>/posts/7dd2.html</url>
      
        <content type="html"><![CDATA[<h3 id="bisect"><a href="#bisect" class="headerlink" title="bisect"></a>bisect</h3><ul><li><code>bisect.bisect_left(a,x,lo=0,hi=len(a))</code></li></ul><ol><li>在 a 中找到 x 合适的插入点以<strong>维持有序</strong>。</li><li>如果 x 已经在 a 里存在，那么插入点会在已存在元素左边。</li><li>如果 a 是<code>list</code>，则返回值可以是 <code>list.insert()</code> 的第一个参数。</li><li>返回的<code>i</code>可以将数组 a 分成两部分。左侧是 <code>all(val &lt; x for val in a[lo:i])</code> ，右侧是 <code>all(val &gt;= x for val in a[i:hi])</code></li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> bisectarr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span>x<span class="token operator">=</span><span class="token number">8</span>bisect<span class="token punctuation">.</span>bisect_left<span class="token punctuation">(</span>arr<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># --> 3</span></code></pre><ul><li><code>bisect.bisect_right(a, x, lo=0, hi=len(a))</code></li><li><code>bisect.bisect(a, x, lo=0, hi=len(a))</code><br>类似于 <code>bisect_left()</code>，但是返回的插入点是 a 中已存在元素 x 的右侧。</li></ul><h3 id="insort"><a href="#insort" class="headerlink" title="insort"></a>insort</h3><ul><li><p><code>bisect.insort_left(a, x, lo=0, hi=len(a))</code></p><ol><li>相当于 a.insert(bisect.bisect_left(a, x, lo, hi), x)</li><li>注意搜索是 O(log n) 的，插入却是 O(n) 的。</li></ol></li><li><p><code>bisect.insort_right(a, x, lo=0, hi=len(a))</code></p></li><li><p><code>bisect.insort(a, x, lo=0, hi=len(a))</code><br>类似于 <code>insort_left()</code>，但是把 x 插入到 a 中已存在元素 x 的右侧。</p></li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">grade</span><span class="token punctuation">(</span>score<span class="token punctuation">,</span> breakpoints<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grades<span class="token operator">=</span><span class="token string">'FA'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> bisect<span class="token punctuation">(</span>breakpoints<span class="token punctuation">,</span> score<span class="token punctuation">)</span>    <span class="token keyword">return</span> grades<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>grade<span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">for</span> score <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># output: ['F',  'A', 'A']</span></code></pre><p>官方文档：<a href="https://docs.python.org/zh-cn/3.8/library/bisect.html?highlight=bisect#module-bisect" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3.8/library/bisect.html?highlight=bisect#module-bisect</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode周赛笔记187</title>
      <link href="/posts/7e6a.html"/>
      <url>/posts/7e6a.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、旅行终点站"><a href="#一、旅行终点站" class="headerlink" title="一、旅行终点站"></a>一、旅行终点站</h3><p>给你一份旅游线路图，该线路图中的旅行线路用数组 <code>paths</code> 表示，其中 <code>paths[i] = [cityAi, cityBi]</code> 表示该线路将会从 <code>cityAi</code> 直接前往 <code>cityBi</code> 。请你找出这次旅行的终点站，即没有任何可以通往其他城市的线路的城市。<br>题目数据保证线路图会形成一条不存在循环的线路，因此只会有一个旅行终点站。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">destCity</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> paths<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        lista<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> paths<span class="token punctuation">]</span>        listb<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> paths<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>set<span class="token punctuation">(</span>listb<span class="token punctuation">)</span><span class="token operator">-</span>set<span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="二、是否所有-1-都至少相隔-k-个元素"><a href="#二、是否所有-1-都至少相隔-k-个元素" class="headerlink" title="二、是否所有 1 都至少相隔 k 个元素"></a>二、是否所有 1 都至少相隔 k 个元素</h3><p>给你一个由若干 <code>0</code> 和 <code>1</code> 组成的数组 <code>nums</code> 以及整数 <code>k</code>。如果所有 <code>1</code> 都至少相隔 <code>k</code> 个元素，则返回 <code>True</code> ；否则，返回 <code>False</code> 。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">kLengthApart</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        temp<span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">-</span>temp<span class="token operator">&lt;=</span>k<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>temp<span class="token operator">=</span>i        <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><h3 id="三、绝对差不超过限制的最长连续子数组"><a href="#三、绝对差不超过限制的最长连续子数组" class="headerlink" title="三、绝对差不超过限制的最长连续子数组"></a>三、绝对差不超过限制的最长连续子数组</h3><p>给你一个整数数组 <code>nums</code> ，和一个表示限制的整数 <code>limit</code>，请你返回最长连续子数组的长度，该子数组中的任意两个元素之间的绝对差必须小于或者等于 <code>limit</code> 。<br>如果不存在满足条件的子数组，则返回 <code>0</code> 。</p><blockquote><p>话说dp和双指针好像，双指针的话最后一个十几万数的测试用例超时了。。。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestSubarray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> limit<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        ans<span class="token operator">=</span><span class="token number">1</span>        a<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> l <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            minnum<span class="token punctuation">,</span>maxnum<span class="token operator">=</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span>            <span class="token keyword">for</span> r <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>                minnum<span class="token operator">=</span>min<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span>minnum<span class="token punctuation">]</span><span class="token punctuation">)</span>                maxnum<span class="token operator">=</span>max<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span>maxnum<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> maxnum<span class="token operator">-</span>minnum<span class="token operator">&lt;=</span>limit<span class="token punctuation">:</span>                    ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>        <span class="token keyword">return</span> ans</code></pre><p>from copy :</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestSubarray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> limit<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span>        st <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            bisect<span class="token punctuation">.</span>insort<span class="token punctuation">(</span>st<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">while</span> st<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> st<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> limit<span class="token punctuation">:</span>                st<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            j <span class="token operator">+=</span> <span class="token number">1</span>            ans <span class="token operator">=</span> max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> len<span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans</code></pre><h3 id="四、有序矩阵中的第-k-个最小数组和"><a href="#四、有序矩阵中的第-k-个最小数组和" class="headerlink" title="四、有序矩阵中的第 k 个最小数组和"></a>四、有序矩阵中的第 k 个最小数组和</h3><p>给你一个 <code>m * n</code> 的矩阵 <code>mat</code>，以及一个整数 <code>k</code> ，矩阵中的每一行都以非递减的顺序排列。<br>你可以从每一行中选出 1 个元素形成一个数组。返回所有可能数组中的第 k 个最小数组和。</p><blockquote><p>利用sorted逐行更新。。</p></blockquote><p>from copy:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mat<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> mat<span class="token punctuation">:</span>            ans <span class="token operator">=</span> sorted<span class="token punctuation">(</span><span class="token punctuation">[</span>a <span class="token operator">+</span> r <span class="token keyword">for</span> a <span class="token keyword">in</span> ans <span class="token keyword">for</span> r <span class="token keyword">in</span> row<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span> k<span class="token punctuation">]</span>        <span class="token keyword">return</span> ans<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调用modelarts的API</title>
      <link href="/posts/ec3f.html"/>
      <url>/posts/ec3f.html</url>
      
        <content type="html"><![CDATA[<p>代码包含</p><ul><li>use-api.py </li><li>post.py</li><li>get-token.py</li></ul><h3 id="use-api-py"><a href="#use-api-py" class="headerlink" title="use-api.py"></a>use-api.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> postname <span class="token operator">=</span> <span class="token string">" "</span> password <span class="token operator">=</span> <span class="token string">" "</span>api_url <span class="token operator">=</span> <span class="token string">" "</span> <span class="token comment" spellcheck="true"># api地址</span>image_path <span class="token operator">=</span> r<span class="token string">"timg.jpg"</span>  <span class="token comment" spellcheck="true"># 图像文件完整路径</span><span class="token comment" spellcheck="true"># 发送请求</span>r <span class="token operator">=</span> post<span class="token punctuation">.</span>main<span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> api_url<span class="token punctuation">,</span> image_path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span></code></pre><h3 id="post-py"><a href="#post-py" class="headerlink" title="post.py"></a>post.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> os<span class="token keyword">import</span> get_token<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> api_url<span class="token punctuation">,</span> image_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    image_name <span class="token operator">=</span> image_path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 查看本地是否存在token</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"token.txt"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"token.txt"</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            token <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 调用get_token.py中的函数获取token</span>        token <span class="token operator">=</span> get_token<span class="token punctuation">.</span>main<span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 缓存token以便下次使用</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"token.txt"</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>token<span class="token punctuation">)</span>    <span class="token keyword">if</span> token <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"token获取错误"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        header <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"X-Auth-Token"</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span>                <span class="token punctuation">}</span>        files <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"images"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>image_name<span class="token punctuation">,</span> open<span class="token punctuation">(</span>image_path<span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'image/png'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>        z <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>                    api_url<span class="token punctuation">,</span>                    headers <span class="token operator">=</span> header<span class="token punctuation">,</span>                    files<span class="token operator">=</span>files<span class="token punctuation">,</span>                    verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                    <span class="token punctuation">)</span>        <span class="token keyword">if</span> z<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> z<span class="token punctuation">.</span>text        <span class="token keyword">elif</span> len<span class="token punctuation">(</span>z<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> z<span class="token punctuation">.</span>text        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"程序错误"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">" "</span>         <span class="token comment" spellcheck="true"># 用户名</span>    password <span class="token operator">=</span> <span class="token string">" "</span> <span class="token comment" spellcheck="true"># 密码</span>    api_url <span class="token operator">=</span> <span class="token string">" "</span> <span class="token comment" spellcheck="true"># api地址</span>    image_path <span class="token operator">=</span> r<span class="token string">"test.jpg"</span>  <span class="token comment" spellcheck="true"># 图像文件完整路径</span>    r <span class="token operator">=</span> main<span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> api_url<span class="token punctuation">,</span> image_path<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span></code></pre><h3 id="get-token-py"><a href="#get-token-py" class="headerlink" title="get-token.py"></a>get-token.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> domain_name<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> region<span class="token operator">=</span><span class="token string">"cn-north-4"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> domain_name <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>        domain_name <span class="token operator">=</span> name    urls <span class="token operator">=</span> <span class="token string">"https://iam."</span> <span class="token operator">+</span> region <span class="token operator">+</span> <span class="token string">".myhuaweicloud.com/v3/auth/tokens"</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"PostmanRuntime/7.24.1"</span><span class="token punctuation">,</span>        <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json;charset=utf8"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    json_data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"auth"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"identity"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"methods"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"user"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                        <span class="token string">"name"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>                        <span class="token string">"password"</span><span class="token punctuation">:</span> password<span class="token punctuation">,</span>                        <span class="token string">"domain"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                            <span class="token string">"name"</span><span class="token punctuation">:</span> domain_name<span class="token punctuation">,</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"scope"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"project"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"name"</span><span class="token punctuation">:</span> region                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    z <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>                    url <span class="token operator">=</span> urls<span class="token punctuation">,</span>                    headers <span class="token operator">=</span> header<span class="token punctuation">,</span>                    json <span class="token operator">=</span> json_data<span class="token punctuation">,</span>                    verify <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>                    <span class="token punctuation">)</span>    <span class="token keyword">if</span> z<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">201</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> z<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"X-Subject-Token"</span><span class="token punctuation">]</span>    <span class="token keyword">elif</span> z<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">401</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">''</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">' '</span>         <span class="token comment" spellcheck="true"># 用户名</span>    password <span class="token operator">=</span> <span class="token string">' '</span>     <span class="token comment" spellcheck="true"># 密码</span><span class="token comment" spellcheck="true">#    domain_name = ' '  # 可选，所属账号，默认为用户名</span><span class="token comment" spellcheck="true">#    region="cn-north-4"     # 可选，使用区域</span>    token <span class="token operator">=</span> main<span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">)</span>    <span class="token keyword">if</span> token <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><ol><li>将name,password,api_url更改，即可进行API的调用。</li><li>一段代码：<pre class=" language-python"><code class="language-python">z<span class="token operator">=</span>request<span class="token punctuation">.</span>post<span class="token punctuation">(</span>api_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span>files<span class="token operator">=</span>files<span class="token punctuation">,</span>verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">if</span> z<span class="token punctuation">.</span>status_code <span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> z<span class="token punctuation">.</span>text</code></pre></li><li>比较难理解的是那个get-token，查阅Modelarts文档的json格式。<br>再利用requests进行post</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> modelarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于HTTP理解</title>
      <link href="/posts/ea97.html"/>
      <url>/posts/ea97.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>HTTP是一个请求-响应协议，是两点间传输超文本数据的约定和规范。</p></blockquote><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><table><thead><tr><th>状态码</th><th>描述</th></tr></thead><tbody><tr><td>1XX</td><td>表示目前是协议处理中间状态</td></tr><tr><td>2XX</td><td>成功，报文已接受且正确处理</td></tr><tr><td>3XX</td><td>重定向，资源位置发生变动</td></tr><tr><td>4XX</td><td>客户端错误，请求报文有误，服务器无法处理</td></tr><tr><td>5XX</td><td>服务器处理请求时发生错误</td></tr></tbody></table><h2 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h2><pre class=" language-bash"><code class="language-bash">GET /admin_ui/rdx/core/images/close.png HTTP/1.1Accept: */*Referer: http://xxx.xxx.xxx.xxx/menu/neoAccept-Language: en-USUser-Agent: Mozilla/4.0 <span class="token punctuation">(</span>compatible<span class="token punctuation">;</span> MSIE 7.0<span class="token punctuation">;</span> Windows NT 6.1<span class="token punctuation">;</span> WOW64<span class="token punctuation">;</span> Trident/7.0<span class="token punctuation">;</span> SLCC2<span class="token punctuation">;</span> .NET CLR 2.0.50727<span class="token punctuation">;</span> .NET CLR 3.5.30729<span class="token punctuation">;</span> .NET CLR 3.0.30729<span class="token punctuation">;</span> .NET4.0C<span class="token punctuation">;</span> .NET4.0E<span class="token punctuation">)</span>Accept-Encoding: gzip, deflateHost: xxx.xxx.xxx.xxxConnection: Keep-AliveCookie: startupapp<span class="token operator">=</span>neo<span class="token punctuation">;</span> is_cisco_platform<span class="token operator">=</span>0<span class="token punctuation">;</span> rdx_pagination_size<span class="token operator">=</span>250%20Per%20Page<span class="token punctuation">;</span> SESSID<span class="token operator">=</span>deb31b8eb9ca68a514cf55777744e339</code></pre><h2 id="HTTP版本"><a href="#HTTP版本" class="headerlink" title="HTTP版本"></a>HTTP版本</h2><table><thead><tr><th>版本</th><th>信息</th></tr></thead><tbody><tr><td>1.0</td><td>每发起一次请求，都要建立一次TCP链接（三次握手）</td></tr><tr><td>1.1</td><td>①提出了长连接通信方式，减少TCP连接开销 。②管道网络传输，减少整体效应时间</td></tr><tr><td>2.0</td><td></td></tr></tbody></table><blockquote><p>http无状态、明文传输、不安全</p></blockquote><blockquote><p>http无法验证报文完整性、不验证通信方身份</p></blockquote><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>在TCP和HTTP网络层之间加入了SSL/TLS安全协议<br>①加密（Encryption)<br>②身份认证（Authentication)<br>③数据一致性 （Data integrity)</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习</title>
      <link href="/posts/6080.html"/>
      <url>/posts/6080.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><h2 id="人工智能、机器学习、深度学习"><a href="#人工智能、机器学习、深度学习" class="headerlink" title="人工智能、机器学习、深度学习"></a>人工智能、机器学习、深度学习</h2><p><code>人工智能</code>是计算机科学的一个分支，它希望了解智能的实质，并生产出一种新的能以人类智能相似的方式做出反应的智能机器，该领域的研究包括机器人、语言识别、图像识别、自然语言处理和专家系统等。<br><code>机器学习</code>是一门多领域交叉学科，是人工智能的核心。<br><code>深度学习</code>是机器学习领域中一个新的研究方向，它被引入机器学习使其更接近于最初的目标——人工智能。<br><img src="https://img-blog.csdnimg.cn/202005061919299.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="机器学习模型"><a href="#机器学习模型" class="headerlink" title="机器学习模型"></a>机器学习模型</h2><p><code>机器学习模型</code>是机器学习算法产出的结果，可以将其看作是在给定输入情况下、输出一定结果的函数。<br>机器学习模型不是预先定义好的固定函数，而是从历史数据中推导出来的。<br>机器学习的任务，就是从广阔的映射空间中学习函数。</p><h1 id="1-torch环境准备"><a href="#1-torch环境准备" class="headerlink" title="1.torch环境准备"></a>1.torch环境准备</h1><ul><li>torch  (1.6.0)</li><li>torchvision  (0.7.0)</li><li>cuda  (10.2)<br><img src="https://img-blog.csdnimg.cn/20200429183137908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" alt=""><br>输入指令执行代码,速度不行的话复制下载链接迅雷打开，可能有惊喜<img src="https://img-blog.csdnimg.cn/20200429183453171.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" alt=""></li></ul><p><strong>对whl文件的安装</strong>，进入文件位置，pip install <strong>____</strong>.whl</p><p>环境配好后，执行:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pythontorch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这时应该返回True.</p><h1 id="2-一次baseline代码😫"><a href="#2-一次baseline代码😫" class="headerlink" title="2.一次baseline代码😫"></a>2.一次baseline代码😫</h1><h2 id="加载pytorch框架下的依赖项"><a href="#加载pytorch框架下的依赖项" class="headerlink" title="加载pytorch框架下的依赖项"></a>加载pytorch框架下的依赖项</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token punctuation">,</span> division<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">import</span> lr_scheduler<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable<span class="token keyword">import</span> torchvision<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> datasets<span class="token punctuation">,</span> models<span class="token punctuation">,</span> transforms<span class="token keyword">import</span> time<span class="token keyword">import</span> os</code></pre><h2 id="加载数据集，并分为训练集和测试集"><a href="#加载数据集，并分为训练集和测试集" class="headerlink" title="加载数据集，并分为训练集和测试集"></a>加载数据集，并分为训练集和测试集</h2><pre class=" language-python"><code class="language-python">dataTrans <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>            transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            transforms<span class="token punctuation">.</span>CenterCrop<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>data_dir <span class="token operator">=</span> <span class="token string">'./images'</span>all_image_datasets <span class="token operator">=</span> datasets<span class="token punctuation">.</span>ImageFolder<span class="token punctuation">(</span>data_dir<span class="token punctuation">,</span> dataTrans<span class="token punctuation">)</span>trainsize <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token number">0.8</span><span class="token operator">*</span>len<span class="token punctuation">(</span>all_image_datasets<span class="token punctuation">)</span><span class="token punctuation">)</span>testsize <span class="token operator">=</span> len<span class="token punctuation">(</span>all_image_datasets<span class="token punctuation">)</span> <span class="token operator">-</span> trainsizetrain_dataset<span class="token punctuation">,</span> test_dataset <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>random_split<span class="token punctuation">(</span>all_image_datasets<span class="token punctuation">,</span><span class="token punctuation">[</span>trainsize<span class="token punctuation">,</span>testsize<span class="token punctuation">]</span><span class="token punctuation">)</span>image_datasets <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'train'</span><span class="token punctuation">:</span>train_dataset<span class="token punctuation">,</span><span class="token string">'val'</span><span class="token punctuation">:</span>test_dataset<span class="token punctuation">}</span>dataloders <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>image_datasets<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>                                                 batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>                                                 shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                                 num_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'val'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>dataset_sizes <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> len<span class="token punctuation">(</span>image_datasets<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'val'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># use gpu or not</span>use_gpu <span class="token operator">=</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train_model</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> lossfunc<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> scheduler<span class="token punctuation">,</span> num_epochs<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    best_model_wts <span class="token operator">=</span> model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    best_acc <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch {}/{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> num_epochs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Each epoch has a training and validation phase</span>        <span class="token keyword">for</span> phase <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'val'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> phase <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">:</span>                scheduler<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Set model to training mode</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Set model to evaluate mode</span>            running_loss <span class="token operator">=</span> <span class="token number">0.0</span>            running_corrects <span class="token operator">=</span> <span class="token number">0.0</span>            <span class="token comment" spellcheck="true"># Iterate over data.</span>            <span class="token keyword">for</span> data <span class="token keyword">in</span> dataloders<span class="token punctuation">[</span>phase<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># get the inputs</span>                inputs<span class="token punctuation">,</span> labels <span class="token operator">=</span> data                <span class="token comment" spellcheck="true"># wrap them in Variable</span>                <span class="token keyword">if</span> use_gpu<span class="token punctuation">:</span>                    inputs <span class="token operator">=</span> Variable<span class="token punctuation">(</span>inputs<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    labels <span class="token operator">=</span> Variable<span class="token punctuation">(</span>labels<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    inputs<span class="token punctuation">,</span> labels <span class="token operator">=</span> Variable<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">,</span> Variable<span class="token punctuation">(</span>labels<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># zero the parameter gradients</span>                optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># forward</span>                outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>                _<span class="token punctuation">,</span> preds <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                loss <span class="token operator">=</span> lossfunc<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># backward + optimize only if in training phase</span>                <span class="token keyword">if</span> phase <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">:</span>                    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>                    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># statistics</span>                running_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>data                running_corrects <span class="token operator">+=</span> torch<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>preds <span class="token operator">==</span> labels<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>            epoch_loss <span class="token operator">=</span> running_loss <span class="token operator">/</span> dataset_sizes<span class="token punctuation">[</span>phase<span class="token punctuation">]</span>            epoch_acc <span class="token operator">=</span> running_corrects <span class="token operator">/</span> dataset_sizes<span class="token punctuation">[</span>phase<span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{} Loss: {:.4f} Acc: {:.4f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>                phase<span class="token punctuation">,</span> epoch_loss<span class="token punctuation">,</span> epoch_acc<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># deep copy the model</span>            <span class="token keyword">if</span> phase <span class="token operator">==</span> <span class="token string">'val'</span> <span class="token operator">and</span> epoch_acc <span class="token operator">></span> best_acc<span class="token punctuation">:</span>                best_acc <span class="token operator">=</span> epoch_acc                best_model_wts <span class="token operator">=</span> model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    elapsed_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Training complete in {:.0f}m {:.0f}s'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>        elapsed_time <span class="token operator">//</span> <span class="token number">60</span><span class="token punctuation">,</span> elapsed_time <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Best val Acc: {:4f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>best_acc<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># load best model weights</span>    model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>best_model_wts<span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span class="token comment" spellcheck="true"># get model and replace the original fc layer with your fc layer</span>model_ft <span class="token operator">=</span> models<span class="token punctuation">.</span>resnet50<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>num_ftrs <span class="token operator">=</span> model_ft<span class="token punctuation">.</span>fc<span class="token punctuation">.</span>in_featuresmodel_ft<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_ftrs<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">if</span> use_gpu<span class="token punctuation">:</span>    model_ft <span class="token operator">=</span> model_ft<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># define loss function</span>lossfunc <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># setting optimizer and trainable parameters</span> <span class="token comment" spellcheck="true">#   params = model_ft.parameters()</span> <span class="token comment" spellcheck="true"># list(model_ft.fc.parameters())+list(model_ft.layer4.parameters())</span><span class="token comment" spellcheck="true">#params = list(model_ft.fc.parameters())+list( model_ft.parameters())</span>params <span class="token operator">=</span> list<span class="token punctuation">(</span>model_ft<span class="token punctuation">.</span>fc<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>optimizer_ft <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>params<span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Decay LR by a factor of 0.1 every 7 epochs</span>exp_lr_scheduler <span class="token operator">=</span> lr_scheduler<span class="token punctuation">.</span>StepLR<span class="token punctuation">(</span>optimizer_ft<span class="token punctuation">,</span> step_size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>model_ft <span class="token operator">=</span> train_model<span class="token punctuation">(</span>model<span class="token operator">=</span>model_ft<span class="token punctuation">,</span>                           lossfunc<span class="token operator">=</span>lossfunc<span class="token punctuation">,</span>                           optimizer<span class="token operator">=</span>optimizer_ft<span class="token punctuation">,</span>                           scheduler<span class="token operator">=</span>exp_lr_scheduler<span class="token punctuation">,</span>                           num_epochs<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><p>这是训练过程产生的输出：</p><pre><code>Epoch 0/4----------C:\Users\16413\anaconda3\lib\site-packages\torch\optim\lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate  &quot;https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate&quot;, UserWarning)train Loss: 0.0750 Acc: 0.6700val Loss: 0.0436 Acc: 0.8200Epoch 1/4----------train Loss: 0.0399 Acc: 0.8250val Loss: 0.0345 Acc: 0.8470Epoch 2/4----------train Loss: 0.0330 Acc: 0.8473val Loss: 0.0303 Acc: 0.8610Epoch 3/4----------train Loss: 0.0300 Acc: 0.8575val Loss: 0.0293 Acc: 0.8650Epoch 4/4----------train Loss: 0.0288 Acc: 0.8643val Loss: 0.0281 Acc: 0.8750Training complete in 6m 31sBest val Acc: 0.875000</code></pre><pre class=" language-python"><code class="language-python">torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model_ft<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'./model.pth'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> torch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂货区</title>
      <link href="/posts/5bf8.html"/>
      <url>/posts/5bf8.html</url>
      
        <content type="html"><![CDATA[<h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a><em>数学</em></h2><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a><em>HTML</em></h2><p>在md中支持html格式，极大的方便。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 使用font来更改字体样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>verdana<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 或则使用p来更改字体样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-family</span><span class="token punctuation">:</span>verdana<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">80%</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>green</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is a paragraph with some text in it.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 使用img来更改图片大小 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片路径<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">zoom</span><span class="token punctuation">:</span><span class="token number">50%</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>彩虹字体生成器：<a href="https://www.qqxiuzi.cn/zh/caihongzi/index.htm" target="_blank" rel="noopener">https://www.qqxiuzi.cn/zh/caihongzi/index.htm</a></p><h2 id="windows窗口应用程序"><a href="#windows窗口应用程序" class="headerlink" title="windows窗口应用程序"></a><em>windows窗口应用程序</em></h2><p>VS的windows桌面应用程序，真复杂。<br>有框架还是用框架，<code>qt</code>byebye, <code>vc++</code>byebye</p><p>新思路：<code>electron</code></p><p><strong>成就：</strong>vc++弄一个空的窗口程序</p><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a><em>计算机网络</em></h2><hr><h2 id="all-fine"><a href="#all-fine" class="headerlink" title="all fine"></a><em>all fine</em></h2><h5 id="①代码块集体缩进："><a href="#①代码块集体缩进：" class="headerlink" title="①代码块集体缩进："></a>①代码块集体缩进：</h5><ul><li>拉选块之后，按下 <code>tab</code> 键，整个块就会缩进</li><li>按下 <code>shift + tab</code> 就会反向缩进</li><li>vscode，jupyter中都可用</li></ul>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo文档及建站</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><blockquote><p>以上为官方文档<br><strong>想建站的，可以参考：</strong><br><a href="https://www.jianshu.com/p/0a8d738a5620" target="_blank" rel="noopener">https://www.jianshu.com/p/0a8d738a5620</a><br><strong>这是装修教程：</strong><br><a href="https://yafine66.gitee.io/" target="_blank" rel="noopener">https://yafine66.gitee.io/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串</title>
      <link href="/posts/95d1.html"/>
      <url>/posts/95d1.html</url>
      
        <content type="html"><![CDATA[<h2 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17.电话号码的字母组合"></a>17.电话号码的字母组合</h2><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> digits<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        map<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'2'</span><span class="token punctuation">:</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">:</span><span class="token string">"def"</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">:</span><span class="token string">"ghi"</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">:</span><span class="token string">"jkl"</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">:</span><span class="token string">"mno"</span><span class="token punctuation">,</span><span class="token string">'7'</span><span class="token punctuation">:</span><span class="token string">"pqrs"</span><span class="token punctuation">,</span><span class="token string">'8'</span><span class="token punctuation">:</span><span class="token string">"tuv"</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">:</span><span class="token string">"wxyz"</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token operator">not</span> digits<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> digits<span class="token punctuation">:</span>            ans<span class="token operator">=</span><span class="token punctuation">[</span>pre<span class="token operator">+</span>suf <span class="token keyword">for</span> pre <span class="token keyword">in</span> ans <span class="token keyword">for</span> suf <span class="token keyword">in</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> ans</code></pre><h2 id="696-计数二进制子串"><a href="#696-计数二进制子串" class="headerlink" title="696.计数二进制子串"></a>696.计数二进制子串</h2><p>给定一个字符串 <code>s</code>，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。</p><p>重复出现的子串要计算它们出现的次数。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countBinarySubstrings</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        temp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                temp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token operator">+=</span>min<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 计算相邻数的频数</span><span class="token comment" spellcheck="true"># 看着有些抽象</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈</title>
      <link href="/posts/9199.html"/>
      <url>/posts/9199.html</url>
      
        <content type="html"><![CDATA[<h3 id="20-有效的括号（8-14"><a href="#20-有效的括号（8-14" class="headerlink" title="20. 有效的括号（8.14)"></a>20. 有效的括号（<code>8.14</code>)</h3><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;{&#39;</code>，<code>&#39;}&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><ul><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>注意空字符串可被认为是有效字符串。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        hashmap<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'('</span><span class="token punctuation">:</span><span class="token string">')'</span><span class="token punctuation">,</span><span class="token string">'{'</span><span class="token punctuation">:</span><span class="token string">'}'</span><span class="token punctuation">,</span><span class="token string">'['</span><span class="token punctuation">:</span><span class="token string">']'</span><span class="token punctuation">}</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token keyword">in</span> hashmap<span class="token punctuation">:</span> stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token operator">not</span> stack<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">elif</span> i<span class="token operator">!=</span>hashmap<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token operator">not</span> stack<span class="token comment" spellcheck="true">#注意：not stack是stack为空，不是stack==None</span><span class="token comment" spellcheck="true">#其它版本：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'{'</span><span class="token punctuation">:</span> <span class="token string">'}'</span><span class="token punctuation">,</span>  <span class="token string">'['</span><span class="token punctuation">:</span> <span class="token string">']'</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">:</span> <span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">:</span> <span class="token string">'?'</span><span class="token punctuation">}</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'?'</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> c <span class="token keyword">in</span> dic<span class="token punctuation">:</span> stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span>            <span class="token keyword">elif</span> dic<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">!=</span> c<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>         <span class="token keyword">return</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图</title>
      <link href="/posts/b7fa.html"/>
      <url>/posts/b7fa.html</url>
      
        <content type="html"><![CDATA[<h3 id="322-重新安排行程（8-27"><a href="#322-重新安排行程（8-27" class="headerlink" title="322.重新安排行程（8.27)"></a>322.重新安排行程（<code>8.27</code>)</h3><p>给定一个机票的字符串二维数组 [from, to]，子数组中的两个成员分别表示飞机出发和降落的机场地点，对该行程进行重新规划排序。所有这些机票都属于一个从 JFK（肯尼迪国际机场）出发的先生，所以该行程必须从 JFK 开始。</p><p>说明:</p><ul><li>如果存在多种有效的行程，你可以按字符自然排序返回最小的行程组合。例如，行程 [“JFK”, “LGA”] 与 [“JFK”, “LGB”] 相比就更小，排序更靠前</li><li>所有的机场都用三个大写字母表示（机场代码）。</li><li>假定所有机票至少存在一种合理的行程。</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#map硬套不行啊，会在图里死循环。</span><span class="token comment" spellcheck="true">#什么是欧拉路径？欧拉路径就是一条能够不重不漏地经过图上的**每一条边**的路径，</span><span class="token comment" spellcheck="true">#即小学奥数中的一笔画问题。而若这条路径的起点和终点相同，则将这条路径称为欧拉回路。</span><span class="token comment" spellcheck="true">#如何判断一个图是否有欧拉路径呢？显然，与一笔画问题相同，一个图有欧拉路径需要以下几个条件：</span><span class="token comment" spellcheck="true"># 1. 首先，这是一个连通图</span><span class="token comment" spellcheck="true"># 2. 若是无向图，则这个图的度数为奇数的点的个数必须是0或2；</span><span class="token comment" spellcheck="true">#    若是有向图，则要么所有点的入度和出度相等，要么有且只有两个点的入度分别比出度大1和少1</span><span class="token comment" spellcheck="true">#具有欧拉回路的无向图称为欧拉图。</span><span class="token comment" spellcheck="true">#具有欧拉通路但不具有欧拉回路的无向图称为半欧拉图。</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findItinerary</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tickets<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> vec<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#pop出最小值</span>                tmp<span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>vec<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>curr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#一个{depart:[arrive...]}的字典</span>        vec<span class="token operator">=</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        <span class="token keyword">for</span> depart<span class="token punctuation">,</span>arrive <span class="token keyword">in</span> tickets<span class="token punctuation">:</span>            vec<span class="token punctuation">[</span>depart<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>arrive<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#便于排序</span>        <span class="token keyword">for</span> key <span class="token keyword">in</span> vec<span class="token punctuation">:</span>            heapq<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>vec<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#heapq是一个标准库模块,优先队列算法</span>        <span class="token comment" spellcheck="true">#heapify转换列表成为堆结构</span>        stack<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span><span class="token string">"JFK"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> stack<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#dfs和逆序那块迷糊</span></code></pre><blockquote><ol><li>由于题目中说必然存在一条有效路径(至少是半欧拉图)，所以算法不需要回溯（既加入到结果集里的元素不需要删除）</li><li>整个图最多存在一个死胡同(出度和入度相差1），且这个死胡同一定是最后一个访问到的，否则无法完成一笔画。</li><li>DFS的调用其实是一个拆边的过程（既每次调用删除一条边），一定是递归到这个死胡同（无边可拆）后递归函数开始返回。所以死胡同是第一个加入栈中的元素。</li><li>最后逆序的输出即可。</li></ol></blockquote><h3 id="133-克隆图（8-12"><a href="#133-克隆图（8-12" class="headerlink" title="133. 克隆图（8.12)"></a>133. 克隆图（<code>8.12</code>)</h3><p>给你无向 连通 图中一个节点的引用，请你返回该图的 深拷贝（克隆）。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>visited<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#新node字典</span>    <span class="token keyword">def</span> <span class="token function">cloneGraph</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span> node        <span class="token keyword">if</span> node <span class="token keyword">in</span> self<span class="token punctuation">.</span>visited<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span>        clone_node<span class="token operator">=</span>Node<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token operator">=</span>clone_node        clone_node<span class="token punctuation">.</span>neighbors<span class="token operator">=</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>cloneGraph<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> node<span class="token punctuation">.</span>neighbors<span class="token punctuation">]</span>        <span class="token keyword">return</span> clone_node<span class="token comment" spellcheck="true"># 对于一张图而言，它的深拷贝即构建一张与原图结构，值均一样的图，但是其中的节点不再是原来图节点的引用.</span><span class="token comment" spellcheck="true"># 或者用copy.deepcopy</span></code></pre><h3 id="207-课程表（8-4"><a href="#207-课程表（8-4" class="headerlink" title="207. 课程表（8.4)"></a>207. 课程表（<code>8.4</code>)</h3><p>你这个学期必须选修 <code>numCourse</code> 门课程，记为 <code>0</code> 到 <code>numCourse-1</code> 。</p><p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 <code>0</code> ，你需要先完成课程 <code>1</code> ，我们用一个匹配来表示他们：<code>[0,1]</code></p><p>给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canFinish</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numCourses<span class="token punctuation">:</span> int<span class="token punctuation">,</span> prerequisites<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        relation<span class="token operator">=</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>        indegree<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>numCourses   <span class="token comment" spellcheck="true">#入度值列表</span>        <span class="token keyword">for</span> info <span class="token keyword">in</span> prerequisites<span class="token punctuation">:</span>            relation<span class="token punctuation">[</span>info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#基础：[进阶]关系字典</span>            indegree<span class="token punctuation">[</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>        <span class="token comment" spellcheck="true">#先建一个入度为0的队列</span>        q <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">[</span>c <span class="token keyword">for</span> c <span class="token keyword">in</span> range<span class="token punctuation">(</span>numCourses<span class="token punctuation">)</span> <span class="token keyword">if</span> indegree<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        visited <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> q<span class="token punctuation">:</span>            visited <span class="token operator">+=</span> <span class="token number">1</span>            u <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> relation<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>                indegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">if</span> indegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> visited <span class="token operator">==</span> numCourses</code></pre><blockquote><p><strong>小结：</strong></p><ul><li>核心思想：以入度进行BFS</li><li>入度：图中的一个节点，多少个节点指向它</li></ul><p>唔，经典拓扑图的算法.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFS_BFS</title>
      <link href="/posts/4832.html"/>
      <url>/posts/4832.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-1219-黄金矿工"><a href="#1-1219-黄金矿工" class="headerlink" title="(1)1219.黄金矿工"></a>(1)1219.黄金矿工</h2><p>你要开发一座金矿，地质勘测学家已经探明了这座金矿中的资源分布，并用大小为 <code>m * n</code> 的网格 <code>grid</code> 进行了标注。每个单元格中的整数就表示这一单元格中的黄金数量；如果该单元格是空的，那么就是 <code>0</code>。</p><p>为了使收益最大化，矿工需要按以下规则来开采黄金：</p><ul><li>每当矿工进入一个单元，就会收集该单元格中的所有黄金。</li><li>矿工每次可以从当前位置向上下左右四个方向走。</li><li>每个单元格只能被开采（进入）一次。</li><li>不得开采（进入）黄金数目为 0 的单元格。</li><li>矿工可以从网格中 <strong>任意一个</strong> 有黄金的单元格出发或者是停止。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getMaximumGold</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;=</span>i<span class="token operator">&lt;</span>rows <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>j<span class="token operator">&lt;</span>cols <span class="token operator">and</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                tmp<span class="token punctuation">,</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span>                gain<span class="token operator">=</span>max<span class="token punctuation">(</span>dfs<span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>tmp                <span class="token keyword">return</span> tmp<span class="token operator">+</span>gain            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># dfs带上回溯</span></code></pre><h2 id="2-841-钥匙和房间"><a href="#2-841-钥匙和房间" class="headerlink" title="(2)841.钥匙和房间"></a>(2)841.钥匙和房间</h2><p>有 <code>N</code> 个房间，开始时你位于 <code>0</code> 号房间。每个房间有不同的号码：<code>0，1，2，...，N-1</code>，并且房间里可能有一些钥匙能使你进入下一个房间。</p><p>在形式上，对于每个房间 <code>i</code> 都有一个钥匙列表 <code>rooms[i]</code>，每个钥匙 <code>rooms[i][j]</code> 由 <code>[0,1，...，N-1]</code> 中的一个整数表示，其中 <code>N = rooms.length</code>。 钥匙<code>rooms[i][j] = v</code> 可以打开编号为 <code>v</code> 的房间。</p><p>最初，除 <code>0</code> 号房间外的其余所有房间都被锁住。</p><p>你可以自由地在房间之间来回走动。</p><p>如果能进入每个房间返回 <code>true</code>，否则返回 <code>false</code>。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canVisitAllRooms</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> rooms<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        visited<span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">for</span> room <span class="token keyword">in</span> rooms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> room <span class="token operator">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span>                    dfs<span class="token punctuation">(</span>room<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>list<span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>len<span class="token punctuation">(</span>rooms<span class="token punctuation">)</span></code></pre><h2 id="3-扫雷游戏"><a href="#3-扫雷游戏" class="headerlink" title="(3)扫雷游戏"></a>(3)扫雷游戏</h2><p><a href="https://leetcode-cn.com/problems/minesweeper/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minesweeper/</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">updateBoard</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> board<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> click<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> board<span class="token punctuation">[</span>click<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>click<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"M"</span><span class="token punctuation">:</span>            board<span class="token punctuation">[</span>click<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>click<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"X"</span>            <span class="token keyword">return</span> board        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            cnt<span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span><span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;=</span>i<span class="token operator">&lt;</span>rows <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>j<span class="token operator">&lt;</span>cols<span class="token punctuation">:</span>                    <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"M"</span><span class="token punctuation">:</span> cnt<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">return</span> cnt        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> x<span class="token operator">>=</span>rows <span class="token operator">or</span> y<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> y<span class="token operator">>=</span>cols<span class="token punctuation">:</span>                <span class="token keyword">return</span>             <span class="token keyword">if</span> board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"E"</span><span class="token punctuation">:</span>                tmp<span class="token operator">=</span>check<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>                <span class="token keyword">if</span> tmp<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"B"</span>                    <span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span><span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                        dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>str<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>click<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>click<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> board<span class="token comment" spellcheck="true"># 看起来抽象的东西不一定难</span></code></pre><h2 id="3-200-岛屿数量"><a href="#3-200-岛屿数量" class="headerlink" title="(3)200. 岛屿数量"></a>(3)200. 岛屿数量</h2><p>给你一个由 <code>&#39;1&#39;</code>（陆地）和 <code>&#39;0&#39;</code>（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numIslands</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> grid<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">#有个index(0) out of的bug</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> x<span class="token operator">>=</span>rows <span class="token operator">or</span> y<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> y<span class="token operator">>=</span>cols<span class="token punctuation">:</span> <span class="token keyword">return</span>             <span class="token keyword">if</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token keyword">return</span>            grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span>            dfs<span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"1"</span><span class="token punctuation">:</span>                    dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>                    ans<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># wa~,可以瞎写这个原来觉得神奇的题了。</span><span class="token comment" spellcheck="true"># 2020-09-23</span></code></pre><h2 id="4-695-岛屿的最大面积"><a href="#4-695-岛屿的最大面积" class="headerlink" title="(4)695. 岛屿的最大面积"></a>(4)695. 岛屿的最大面积</h2><p>给定一个包含了一些 <code>0</code> 和 <code>1</code> 的非空二维数组 <code>grid</code> 。</p><p>一个 岛屿 是由一些相邻的 <code>1</code> (代表土地) 构成的组合，这里的「相邻」要求两个 <code>1</code> 必须在水平或者竖直方向上相邻。你可以假设 <code>grid</code> 的四个边缘都被 <code>0</code>（代表水）包围着。</p><p>找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为 <code>0</code> 。)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxAreaOfIsland</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> grid<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> x<span class="token operator">>=</span>rows <span class="token operator">or</span> y<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> y<span class="token operator">>=</span>cols<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token keyword">if</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>            grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span>dfs<span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">+</span>dfs<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">+</span>dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span>dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                    ans<span class="token operator">=</span>max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 这1不是“1”了...</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表</title>
      <link href="/posts/41d3.html"/>
      <url>/posts/41d3.html</url>
      
        <content type="html"><![CDATA[<h3 id="（1）560-和为K的子数组"><a href="#（1）560-和为K的子数组" class="headerlink" title="（1）560.和为K的子数组"></a>（1）560.和为K的子数组</h3><p>给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subarraySum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        pre <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#记载所有前缀和</span>        ans<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            sum<span class="token operator">+=</span>num            need<span class="token operator">=</span>sum<span class="token operator">-</span>k            <span class="token keyword">if</span> need <span class="token keyword">in</span> pre<span class="token punctuation">:</span>                ans <span class="token operator">+=</span> pre<span class="token punctuation">[</span>need<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">#在hash table里查找key，如果有返回对应的value，反之返回0 </span>            pre<span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">.</span>get<span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">return</span> ans</code></pre><p><strong>小结</strong></p><blockquote><ol><li>前缀和+hash的优化</li><li><code>dict.get(key,default=None)</code></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学</title>
      <link href="/posts/c6d1.html"/>
      <url>/posts/c6d1.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试题64-求1-2-…-n"><a href="#面试题64-求1-2-…-n" class="headerlink" title="面试题64. 求1+2+…+n"></a>面试题64. 求1+2+…+n</h2><p>求 <code>1+2+...+n</code>，要求<strong>不能使用</strong>乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sumNums</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">return</span> n <span class="token operator">and</span> n<span class="token operator">+</span>self<span class="token punctuation">.</span>sumNums<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 学会了and的特性</span><span class="token comment" spellcheck="true"># a and b 返回 b, a and 0 返回 a</span></code></pre><h2 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136.只出现一次的数字"></a>136.只出现一次的数字</h2><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均<strong>出现两次</strong>。找出那个只出现了一次的元素。</p><p>说明：</p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">return</span> reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">^</span> y<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reduce(function, iterable[, initializer])内置函数</span><span class="token comment" spellcheck="true">#异或（在二进制基础上）的特性：a^a=0，a^0=a</span></code></pre><h2 id="172-阶乘后的零"><a href="#172-阶乘后的零" class="headerlink" title="172.阶乘后的零"></a>172.阶乘后的零</h2><p>给定一个整数 n，返回 n! 结果尾数中零的数量。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        cnt <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            n <span class="token operator">//=</span> <span class="token number">5</span>            cnt <span class="token operator">+=</span> n        <span class="token keyword">return</span> cnt<span class="token comment" spellcheck="true"># 数学观察</span></code></pre><h2 id="231-2的幂"><a href="#231-2的幂" class="headerlink" title="231.2的幂"></a>231.2的幂</h2><p>给定一个整数，编写一个函数来判断它是否是 2 的幂次方。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">return</span> n<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> n<span class="token operator">&amp;</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span></code></pre><p>说明：</p><table><thead><tr><th>num</th><th>n</th><th>n-1</th><th>n&amp;(n-1)</th></tr></thead><tbody><tr><td>2**0</td><td>0001</td><td>0000</td><td>0000</td></tr><tr><td>2**1</td><td>0010</td><td>0001</td><td>0000</td></tr><tr><td>2**2</td><td>0100</td><td>0011</td><td>0000</td></tr></tbody></table><h2 id="60-第k个排列"><a href="#60-第k个排列" class="headerlink" title="60.第k个排列"></a>60.第k个排列</h2><p>给出集合 [1,2,3,…,n]，其所有元素共有 n! 种排列。</p><p>按大小顺序列出所有排列情况，并一一标记，当 n = 3 时, 所有排列如下：<br>“123”，”132”，”213”，”231”，”312”，”321”</p><p>给定 <code>n</code> 和 <code>k</code>，返回第 <code>k</code> 个排列。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getPermutation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token string">""</span>        factroial<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            factroial<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token operator">*</span>factroial<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        valid<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        k<span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            order<span class="token operator">=</span>k<span class="token operator">//</span>factroial<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                order<span class="token operator">-=</span>valid<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">if</span> order<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    ans<span class="token operator">+=</span>str<span class="token punctuation">(</span>j<span class="token punctuation">)</span>                    valid<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>                    <span class="token keyword">break</span>            k <span class="token operator">%=</span> factroial<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#康托展开，不懂</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树</title>
      <link href="/posts/5b58.html"/>
      <url>/posts/5b58.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-112-路径总和"><a href="#1-112-路径总和" class="headerlink" title="(1)112. 路径总和"></a>(1)112. 路径总和</h2><p>给定一个二叉树和一个目标和，判断该树中<code>是否存在</code>根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。<br>说明: 叶子节点是指没有子节点的节点。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> sum<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        sum<span class="token operator">-=</span>root<span class="token punctuation">.</span>val        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">.</span>left <span class="token operator">and</span> <span class="token operator">not</span> root<span class="token punctuation">.</span>right <span class="token punctuation">:</span>            <span class="token keyword">return</span> sum<span class="token operator">==</span><span class="token number">0</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>hasPathSum<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>sum<span class="token punctuation">)</span> <span class="token operator">or</span> self<span class="token punctuation">.</span>hasPathSum<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>sum<span class="token punctuation">)</span></code></pre><h2 id="2-113-路径总和II"><a href="#2-113-路径总和II" class="headerlink" title="(2)113.路径总和II"></a>(2)113.路径总和II</h2><p>给定一个二叉树和一个目标和，<code>找到所有</code>从根节点到叶子节点路径总和等于给定目标和的路径。<br>说明: 叶子节点是指没有子节点的节点。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> sum_<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root <span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">[</span>root<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> stack<span class="token punctuation">:</span>            val<span class="token punctuation">,</span>node<span class="token operator">=</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">.</span>left <span class="token operator">and</span> <span class="token operator">not</span> node<span class="token punctuation">.</span>right <span class="token operator">and</span> sum<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token operator">==</span>sum_<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token operator">+</span><span class="token punctuation">[</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token operator">+</span><span class="token punctuation">[</span>node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans</code></pre><p><strong>小结</strong></p><blockquote><ol><li>DFS</li><li><code>stack=[([root.val],root)]</code></li></ol></blockquote><h2 id="3-437-路径总和III"><a href="#3-437-路径总和III" class="headerlink" title="(3)437.路径总和III"></a>(3)437.路径总和III</h2><p>给定一个二叉树，它的每个结点都存放着一个整数值。<br>找出路径和等于给定数值的路径总数。<br>路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> sum<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>pathSum<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>pathSum<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>sum<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>root<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        path<span class="token operator">-=</span>root<span class="token punctuation">.</span>val        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">if</span> path<span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>path<span class="token punctuation">)</span></code></pre><h2 id="4-翻转二叉树"><a href="#4-翻转二叉树" class="headerlink" title="(4)翻转二叉树"></a>(4)翻转二叉树</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">invert</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span>             root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root<span class="token punctuation">.</span>right<span class="token operator">=</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>root<span class="token punctuation">.</span>left            invert<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            invert<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        invert<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> root</code></pre><h2 id="5-二叉树的中序遍历"><a href="#5-二叉树的中序遍历" class="headerlink" title="(5)二叉树的中序遍历"></a>(5)二叉树的中序遍历</h2><p>给定一个二叉树，返回它的中序遍历。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span>             <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span> inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        inorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 中序遍历：</span><span class="token comment" spellcheck="true"># -->走左边-->记录-->走右边</span></code></pre><h2 id="6-二叉树的层平均值"><a href="#6-二叉树的层平均值" class="headerlink" title="(6)二叉树的层平均值"></a>(6)二叉树的层平均值</h2><p>给定一个非空二叉树, 返回一个由每层节点平均值组成的数组。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">averageOfLevels</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>float<span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span>             <span class="token keyword">if</span> len<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token operator">==</span>depth<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>node<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ans<span class="token punctuation">[</span>depth<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>sum<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">/</span>len<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> ans<span class="token punctuation">]</span></code></pre><h2 id="7-相同的树"><a href="#7-相同的树" class="headerlink" title="(7)相同的树"></a>(7)相同的树</h2><p>给定两个二叉树，编写一个函数来检验它们是否相同。</p><p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> q<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> p<span class="token operator">==</span>None <span class="token operator">and</span> q<span class="token operator">==</span>None<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> p<span class="token operator">==</span>None <span class="token operator">or</span> q<span class="token operator">==</span>None<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> p<span class="token punctuation">.</span>val<span class="token operator">!=</span>q<span class="token punctuation">.</span>val<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>isSameTree<span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">,</span>q<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">and</span> self<span class="token punctuation">.</span>isSameTree<span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">,</span>q<span class="token punctuation">.</span>right<span class="token punctuation">)</span> </code></pre><h2 id="8-二叉树的最大深度"><a href="#8-二叉树的最大深度" class="headerlink" title="(8)二叉树的最大深度"></a>(8)二叉树的最大深度</h2><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            left_height<span class="token operator">=</span>self<span class="token punctuation">.</span>maxDepth<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            right_height<span class="token operator">=</span>self<span class="token punctuation">.</span>maxDepth<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>left_height<span class="token punctuation">,</span>right_height<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span></code></pre><h2 id="9-左叶子之和"><a href="#9-左叶子之和" class="headerlink" title="(9)左叶子之和"></a>(9)左叶子之和</h2><p>计算给定二叉树的所有<strong>左叶子</strong>之和。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sumOfLeftLeaves</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span> <span class="token keyword">return</span>             <span class="token keyword">if</span> node<span class="token punctuation">.</span>left <span class="token operator">and</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token operator">not</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token operator">not</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>ans<span class="token operator">+=</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val            dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span class="token comment" spellcheck="true">#左叶子没有子节点</span></code></pre><h2 id="10-二叉树的所有路径"><a href="#10-二叉树的所有路径" class="headerlink" title="(10)二叉树的所有路径"></a>(10)二叉树的所有路径</h2><p>给定一个二叉树，返回所有从根节点到叶子节点的路径。<br>用<code>[&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]</code>的类型表示</p><p>说明: 叶子节点是指没有子节点的节点。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">binaryTreePaths</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> ans        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>            path<span class="token operator">+=</span>str<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">.</span>left <span class="token operator">and</span> <span class="token operator">not</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span> ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span> dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>path<span class="token operator">+</span><span class="token string">"->"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span> dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>path<span class="token operator">+</span><span class="token string">"->"</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans</code></pre><h2 id="11-恢复二叉搜索树"><a href="#11-恢复二叉搜索树" class="headerlink" title="(11)恢复二叉搜索树"></a>(11)恢复二叉搜索树</h2><p>二叉搜索树中的两个节点被错误地交换。</p><p>请在不改变其结构的情况下，恢复这棵树。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">recoverTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        nodes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>              <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#中序遍历</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span>             dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            nodes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        pre<span class="token operator">=</span>nodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        x<span class="token punctuation">,</span>y<span class="token operator">=</span>None<span class="token punctuation">,</span>None        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> pre<span class="token punctuation">.</span>val <span class="token operator">></span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">:</span>                y<span class="token operator">=</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token operator">not</span> x<span class="token punctuation">:</span> x<span class="token operator">=</span>pre  <span class="token comment" spellcheck="true"># x为第一个出错的位置</span>            pre<span class="token operator">=</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#准备下一次遍历</span>        <span class="token keyword">if</span> x <span class="token operator">and</span> y<span class="token punctuation">:</span>             x<span class="token punctuation">.</span>val<span class="token punctuation">,</span> y<span class="token punctuation">.</span>val<span class="token operator">=</span>y<span class="token punctuation">.</span>val<span class="token punctuation">,</span> x<span class="token punctuation">.</span>val<span class="token comment" spellcheck="true">#说明： </span><span class="token comment" spellcheck="true"># 空间复杂度O(n)</span><span class="token comment" spellcheck="true"># 那个常数空间的莫里斯遍历不懂</span><span class="token comment" spellcheck="true"># 在这种遍历情况下，二叉搜索树的值从小到大</span></code></pre><h2 id="12-二叉树展开为链表"><a href="#12-二叉树展开为链表" class="headerlink" title="(12)二叉树展开为链表"></a>(12)二叉树展开为链表</h2><p>给定一个二叉树，<strong>原地</strong>将它展开为一个单链表。<br>If you notice carefully in the flattened tree, each node’s right child points to the next node of a pre-order traversal.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">flatten</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify root in-place instead.        """</span>        cur<span class="token operator">=</span>root        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                p<span class="token operator">=</span>cur<span class="token punctuation">.</span>left    <span class="token comment" spellcheck="true">#向左子树移动</span>                <span class="token keyword">while</span> p<span class="token punctuation">.</span>right<span class="token punctuation">:</span> p<span class="token operator">=</span>p<span class="token punctuation">.</span>right <span class="token comment" spellcheck="true">#找到root左子树的最右节点</span>                p<span class="token punctuation">.</span>right<span class="token operator">=</span>cur<span class="token punctuation">.</span>right <span class="token comment" spellcheck="true">#将root右子树连到找到的节点</span>                cur<span class="token punctuation">.</span>right<span class="token operator">=</span>cur<span class="token punctuation">.</span>left <span class="token comment" spellcheck="true">#再移回来</span>                cur<span class="token punctuation">.</span>left<span class="token operator">=</span>None            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>right</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/posts/d64e.html"/>
      <url>/posts/d64e.html</url>
      
        <content type="html"><![CDATA[<h2 id="（0）前言"><a href="#（0）前言" class="headerlink" title="（0）前言"></a>（0）前言</h2><h2 id="（1）876-链表的中间节点"><a href="#（1）876-链表的中间节点" class="headerlink" title="（1）876.链表的中间节点"></a>（1）876.链表的中间节点</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">middleNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        slow<span class="token operator">=</span>fast<span class="token operator">=</span>head        <span class="token keyword">while</span> fast <span class="token operator">and</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">:</span>            slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next            fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        <span class="token keyword">return</span> slow<span class="token comment" spellcheck="true">#快慢指针</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/posts/d706.html"/>
      <url>/posts/d706.html</url>
      
        <content type="html"><![CDATA[<h3 id="（1）53-最大子序和"><a href="#（1）53-最大子序和" class="headerlink" title="（1）53. 最大子序和"></a>（1）53. 最大子序和</h3><p>给定一个整数数组<code>nums</code>，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>max<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>nums<span class="token punctuation">)</span></code></pre><h3 id="（2）152-乘积最大子数组"><a href="#（2）152-乘积最大子数组" class="headerlink" title="（2）152. 乘积最大子数组"></a>（2）152. 乘积最大子数组</h3><p>给你一个整数数组 <code>nums</code> ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> nums<span class="token operator">==</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        res<span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span>        minn<span class="token punctuation">,</span>maxn<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            a<span class="token operator">=</span>n<span class="token operator">*</span>minn            b<span class="token operator">=</span>n<span class="token operator">*</span>maxn            maxn<span class="token operator">=</span>max<span class="token punctuation">(</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>            minn<span class="token operator">=</span>min<span class="token punctuation">(</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>            <span class="token keyword">if</span> maxn<span class="token operator">></span>res<span class="token punctuation">:</span>                res<span class="token operator">=</span>maxn        <span class="token keyword">return</span> res</code></pre><h3 id="（3）198-打家劫舍"><a href="#（3）198-打家劫舍" class="headerlink" title="（3）198. 打家劫舍"></a>（3）198. 打家劫舍</h3><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。<br>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        a<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> a<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">0</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>a<span class="token punctuation">]</span></code></pre><p><strong>小结</strong></p><blockquote><p>DP方程：<code>dp[i]=max(dp[i-1],dp[i-2]+nums[i-1])</code></p></blockquote><h3 id="（4）213-打家劫舍-II"><a href="#（4）213-打家劫舍-II" class="headerlink" title="（4）213. 打家劫舍 II"></a>（4）213. 打家劫舍 II</h3><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。<br>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        cnt<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> cnt<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token keyword">return</span> max<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        dp1<span class="token punctuation">,</span>dp2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>cnt<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>cnt        dp1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        dp2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp1<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp2<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp2<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp2<span class="token punctuation">[</span>i<span class="token number">-3</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>dp1<span class="token operator">+</span>dp2<span class="token punctuation">)</span></code></pre><h3 id="（5）337-打家劫舍-III"><a href="#（5）337-打家劫舍-III" class="headerlink" title="（5）337. 打家劫舍 III"></a>（5）337. 打家劫舍 III</h3><p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个<strong>直接相连</strong>(即父与子关系）的房子在同一天晚上被打劫，房屋将自动报警。</p><p>计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>        lv<span class="token operator">=</span>self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        rv<span class="token operator">=</span>self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>lv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> rv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>lv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> rv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> root<span class="token punctuation">.</span>val <span class="token operator">+</span> lv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> rv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#树形DP，从树的左下构成一个表。</span><span class="token comment" spellcheck="true">#helper函数返回列表[不含此节点最大值，含此节点最大值]</span><span class="token comment" spellcheck="true">#经典</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯_递归</title>
      <link href="/posts/ea8e.html"/>
      <url>/posts/ea8e.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="(0)前言"></a>(0)前言</h2><p>回溯算法实际上一个类似枚举的<strong>搜索尝试</strong>过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就 “回溯” 返回，尝试别的路径。</p><p>回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。</p><p><strong>代码框架：</strong> </p><pre class=" language-python"><code class="language-python">result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> 满足结束条件<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>add<span class="token punctuation">(</span>路径<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">for</span> 选择 <span class="token keyword">in</span> 选择列表<span class="token punctuation">:</span>        做选择        backtrack<span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span>        撤销选择</code></pre><h2 id="1-22-括号生成"><a href="#1-22-括号生成" class="headerlink" title="(1)22. 括号生成"></a>(1)22. 括号生成</h2><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 <strong>有效的</strong> 括号组合。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#s表cur_str_list,l 表示左括号数</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">if</span> l<span class="token operator">&lt;</span>n<span class="token punctuation">:</span>                s<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span>                backtrack<span class="token punctuation">(</span>s<span class="token punctuation">,</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span>                s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> r<span class="token operator">&lt;</span>l<span class="token punctuation">:</span>                s<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span>                backtrack<span class="token punctuation">(</span>s<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        backtrack<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans</code></pre><p><img src="https://img-blog.csdnimg.cn/20200913174130683.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk3MzYzMA==,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="2-无重复字符串的排列组合"><a href="#2-无重复字符串的排列组合" class="headerlink" title="(2)无重复字符串的排列组合"></a>(2)无重复字符串的排列组合</h2><p>无重复字符串的排列组合。编写一种方法，计算某字符串的所有排列组合，字符串每个字符均不相同。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法一：用itertools库中的permutations</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> list<span class="token punctuation">(</span>permutations<span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#方法二：回溯</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">permutation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> S<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> S<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>path<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> s<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                backtrack<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>path<span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span>        backtrack<span class="token punctuation">(</span>S<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans</code></pre><h2 id="3-幂集"><a href="#3-幂集" class="headerlink" title="(3)幂集"></a>(3)幂集</h2><p>编写一种方法，返回某集合的所有子集。集合中<strong>不包含重复</strong>的元素。<br> 输入： nums = [1,2,3]<br> 输出：[[3],[1],[2],[1,2,3],[1,3],[2,3],[1,2],[]]</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#l表示可取的左点，r表示可取的右点</span>        <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>subset<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>subset<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>                subset<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                backtrack<span class="token punctuation">(</span>ans<span class="token punctuation">,</span>subset<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span>                subset<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        backtrack<span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true">#回溯法厉害啊，2020-9-13的第三道回溯</span><span class="token comment" spellcheck="true">#这代码应该可以叫模板了</span></code></pre><h2 id="4-八皇后问题"><a href="#4-八皇后问题" class="headerlink" title="(4)八皇后问题"></a>(4)八皇后问题</h2><p><a href="https://leetcode-cn.com/problems/eight-queens-lcci/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/eight-queens-lcci/</a></p><p>设计一种算法，打印 N 皇后在 N × N 棋盘上的各种摆法，其中每个皇后都不同行、不同列，也不在对角线上。这里的“对角线”指的是所有的对角线，不只是平分整个棋盘的那两条对角线。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">solveNQueens</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">queen</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> cur <span class="token operator">==</span> len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                A<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> i                flag <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token comment" spellcheck="true">#检验与前面的皇后是否冲突</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>i <span class="token operator">or</span> abs<span class="token punctuation">(</span>i <span class="token operator">-</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> cur <span class="token operator">-</span> j<span class="token punctuation">:</span>                        flag <span class="token operator">=</span> <span class="token boolean">False</span>                        <span class="token keyword">break</span>                <span class="token keyword">if</span> flag<span class="token punctuation">:</span> queen<span class="token punctuation">(</span>A<span class="token punctuation">,</span> cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        queen<span class="token punctuation">(</span><span class="token punctuation">[</span>None<span class="token punctuation">]</span><span class="token operator">*</span>n<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#接口对接部分</span>        temp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'.'</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>res <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#第i个答案</span>            <span class="token keyword">for</span> j<span class="token punctuation">,</span>row <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#第j个行</span>                row<span class="token punctuation">[</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Q"</span>                temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> temp</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 这是个代码片段</span><span class="token comment" spellcheck="true"># A为答案，cur为第几行下标</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">queen</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cur <span class="token operator">==</span> len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#没写[:]不行，什么机制还不知道</span>            <span class="token keyword">return</span>         <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            A<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> i            flag <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token comment" spellcheck="true">#检验与前面的皇后是否冲突</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>i <span class="token operator">or</span> abs<span class="token punctuation">(</span>i <span class="token operator">-</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> cur <span class="token operator">-</span> j<span class="token punctuation">:</span>                    flag <span class="token operator">=</span> <span class="token boolean">False</span>                    <span class="token keyword">break</span>            <span class="token keyword">if</span> flag<span class="token punctuation">:</span> queen<span class="token punctuation">(</span>A<span class="token punctuation">,</span> cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    queen<span class="token punctuation">(</span><span class="token punctuation">[</span>None<span class="token punctuation">]</span><span class="token operator">*</span>n<span class="token punctuation">)</span>    <span class="token keyword">return</span> ansmain<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span></code></pre><h2 id="5-解数独"><a href="#5-解数独" class="headerlink" title="(5)解数独"></a>(5)解数独</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">solveSudoku</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> board<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>                    <span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token string">"123456789"</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> check<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>                            board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>num                            <span class="token keyword">if</span> backtrack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>                            board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'.'</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>num<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>num<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> board<span class="token punctuation">[</span>x<span class="token operator">//</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">//</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token operator">==</span>num<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        backtrack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#回溯，，6</span><span class="token comment" spellcheck="true">#这种暴力回溯，时间复杂度太高了</span><span class="token comment" spellcheck="true">#尝试了一下引入参数，回溯不回来了，好菜</span></code></pre><h2 id="6-77-组合"><a href="#6-77-组合" class="headerlink" title="(6)77. 组合"></a>(6)77. 组合</h2><p>给定两个整数 n 和 k，返回 1 … n 中所有可能的 k 个数的组合。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法一：用库：</span><span class="token keyword">return</span> list<span class="token punctuation">(</span>itertools<span class="token punctuation">.</span>combinations<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方法二：回溯</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combine</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">==</span>k<span class="token punctuation">:</span>                 ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>start<span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                bk<span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                tmp<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        bk<span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans</code></pre><h2 id="7-131-分割回文串"><a href="#7-131-分割回文串" class="headerlink" title="(7)131. 分割回文串"></a>(7)131. 分割回文串</h2><p>给定一个字符串 <code>s</code>，将 <code>s</code> 分割成一些子串，使每个子串都是回文串。</p><p>返回 <code>s</code> 所有可能的分割方案。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> l<span class="token operator">==</span>r<span class="token punctuation">:</span>                 ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                cur<span class="token operator">=</span>s<span class="token punctuation">[</span>l<span class="token punctuation">:</span>i<span class="token punctuation">]</span>                <span class="token keyword">if</span> cur<span class="token operator">==</span>cur<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">)</span>                    bk<span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>i<span class="token punctuation">,</span>r<span class="token punctuation">)</span>                    tmp<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        bk<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 后期试错出来的，</span><span class="token comment" spellcheck="true"># 回溯神奇啊</span></code></pre><h2 id="8-组合总和-II"><a href="#8-组合总和-II" class="headerlink" title="(8)组合总和 II"></a>(8)组合总和 II</h2><p>给定一个数组 <code>candidates</code> 和一个目标数 <code>target</code> ，找出 <code>candidates</code> 中所有可以使数字和为 <code>target</code> 的组合。</p><p><code>candidates</code> 中的每个数字在每个组合中只能使用一次。</p><p>说明：</p><ul><li>所有数字（包括目标数）都是正整数。</li><li>解集不能包含重复的组合。 </li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combinationSum2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> candidates<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        candidates<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> sum<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">==</span>target<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">if</span> sum<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">></span>target<span class="token punctuation">:</span> <span class="token keyword">return</span>             <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">></span>l <span class="token operator">and</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>candidates<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>   <span class="token comment" spellcheck="true">#这种回溯中去重。。。</span>                tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                bk<span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span>                tmp<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        bk<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 记录报错：unhashble type: 'list',列表中列表不能集合去重</span><span class="token comment" spellcheck="true"># 回溯之前，sort优化，并方便去重</span></code></pre><h2 id="9-组合总和-III"><a href="#9-组合总和-III" class="headerlink" title="(9)组合总和 III"></a>(9)组合总和 III</h2><p>找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中<strong>不存在重复的数字</strong>。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combinationSum3</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>l<span class="token punctuation">,</span>k<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> n<span class="token operator">==</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                  ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span>             <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                bk<span class="token punctuation">(</span>path<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token number">-1</span><span class="token punctuation">,</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        bk<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token punctuation">,</span>n<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># if剪枝 if结束</span></code></pre><h2 id="10-复原IP地址"><a href="#10-复原IP地址" class="headerlink" title="(10)复原IP地址"></a>(10)复原IP地址</h2><p>给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。</p><p>有效的 IP 地址正好由四个整数（每个整数位于 0 到 255 之间组成），整数之间用 <code>.</code> 分隔。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">restoreIpAddresses</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">and</span> len<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">if</span> len<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>min<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    head<span class="token punctuation">,</span>tail<span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                    <span class="token keyword">if</span> head <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>int<span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">255</span> <span class="token operator">and</span> str<span class="token punctuation">(</span>int<span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>head<span class="token punctuation">:</span>                        f<span class="token punctuation">(</span>tail<span class="token punctuation">,</span>tmp<span class="token operator">+</span><span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span>                f<span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># 一棵递归树</span><span class="token comment" spellcheck="true"># str(int(i))==i排除前缀0</span></code></pre><h2 id="11-不同路径-III"><a href="#11-不同路径-III" class="headerlink" title="(11)不同路径 III"></a>(11)不同路径 III</h2><p><a href="https://leetcode-cn.com/problems/unique-paths-iii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/unique-paths-iii/</a></p><p>在二维网格 grid 上，有 4 种类型的方格：</p><ul><li><code>1</code> 表示起始方格。且只有一个起始方格。</li><li><code>2</code> 表示结束方格，且只有一个结束方格。</li><li><code>0</code> 表示我们可以走过的空方格。</li><li><code>-1</code> 表示我们无法跨越的障碍。</li><li>返回在四个方向（上、下、左、右）上行走时，从起始方格到结束方格的不同路径的数目。</li></ul><p>每一个无障碍方格都要通过一次，但是一条路径中不能重复通过同一个方格。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">uniquePathsIII</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        rows<span class="token punctuation">,</span>cols<span class="token operator">=</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        cnt<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> cnt<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">elif</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span> start<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span>steps<span class="token punctuation">)</span><span class="token punctuation">:</span>            x<span class="token punctuation">,</span>y<span class="token operator">=</span>cur            <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> x<span class="token operator">>=</span>rows <span class="token operator">or</span> y<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> y<span class="token operator">>=</span>cols<span class="token punctuation">:</span>                 <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token keyword">if</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token keyword">if</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">1</span> <span class="token keyword">if</span> steps<span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>            ans<span class="token operator">=</span><span class="token number">0</span>            grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>            ans<span class="token operator">+=</span>bk<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>steps<span class="token number">-1</span><span class="token punctuation">)</span>            ans<span class="token operator">+=</span>bk<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>steps<span class="token number">-1</span><span class="token punctuation">)</span>            ans<span class="token operator">+=</span>bk<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>steps<span class="token number">-1</span><span class="token punctuation">)</span>            ans<span class="token operator">+=</span>bk<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>steps<span class="token number">-1</span><span class="token punctuation">)</span>            grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">return</span> ans        <span class="token keyword">return</span> bk<span class="token punctuation">(</span>start<span class="token punctuation">,</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#回溯神仙</span></code></pre><h2 id="X-其它："><a href="#X-其它：" class="headerlink" title="(X)其它："></a>(X)其它：</h2><p>这种树形回溯或递归的思想666</p><blockquote><p>leetcode题：<a href="https://leetcode-cn.com/tag/backtracking/" target="_blank" rel="noopener">https://leetcode-cn.com/tag/backtracking/</a><br>心得：<a href="https://zhuanlan.zhihu.com/p/51882471" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/51882471</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 置底 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
